from typing import List

class Rel:
    """
    The Rel class represents a relationship between two entities.
    
    Attributes:
        name (str): The name of the relationship.
    """
    def __init__(self, name: str):
        self.name = name

class Used_for(Rel):
    """
    The Used_for class denotes a relationship where one entity is used for another entity.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Used-for relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Feature_of(Rel):
    """
    The Feature_of class represents a relationship where one entity is a feature of another entity.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Feature-of relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Hyponym_of(Rel):
    """
    The Hyponym_of class represents a relationship where one entity is a hyponym (subcategory) of another entity.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Hyponym-of relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Part_of(Rel):
    """
    The Part_of class represents a relationship where one entity is a part of another entity.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Part-of relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Entity:
    """
    The Entity class represents an entity which can participate in relationships.
    
    Attributes:
        name (str): The name of the entity.
    """
    def __init__(self, name: str):
        self.name = name

class Task(Entity):
    """
    The Task class represents a task entity, which includes applications, problems to solve, or systems to construct.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the task.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Method(Entity):
    """
    The Method class represents a method entity, which includes methods, models, systems, tools, components, or frameworks.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the method.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Metric(Entity):
    """
    The Metric class represents a metric entity, which includes metrics or measures to express the quality of a system or method.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the metric.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Material(Entity):
    """
    The Material class represents a material entity, which includes data, datasets, resources, corpora, or knowledge bases.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the material.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Other_scientific_term(Entity):
    """
    The Other_scientific_term class represents a scientific term that does not fall into the specific categories of task, method, metric, or material.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the scientific term.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Generic(Entity):
    """
    The Generic class represents a generic term or pronoun that refers to an entity but is not informative by itself.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the generic term.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Triple:
    """
    The Triple class represents a triplet structure that defines a relationship between two entities.
    
    Attributes:
        head (Entity): The head entity of the relationship.
        relation (Rel): The relationship between the head and tail entities.
        tail (Entity): The tail entity of the relationship.
    """
    def __init__(self, head: Entity, relation: Rel, tail: Entity):
        self.head = head
        self.relation = relation
        self.tail = tail

class Extract:
    """
    The Extract class is a collection of triples.
    
    Attributes:
        triples (List[Triple]): A list of Triple objects.
    """
    def __init__(self, triples: List[Triple] = []):
        self.triples = triples
