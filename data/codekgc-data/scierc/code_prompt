from typing import List
class Rel:
    def __init__(self, name: str):
        self.name = name
class Used_for(Rel):
    def __init__(self, name: str):
        super.__init__(name=name)
class Feature_of(Rel):
    def __init__(self, name: str):
        super.__init__(name=name)
class Hyponym_of(Rel):
    def __init__(self, name: str):
        super.__init__(name=name)
class Part_of(Rel):
    def __init__(self, name: str):
        super.__init__(name=name)

class Entity:
    def __init__(self, name: str):
        self.name = name
class Task(Entity):
    def __init__(self, name: str):
        super.__init__(name=name)
class Method(Entity):
    def __init__(self, name: str):
        super.__init__(name=name)
class Metric(Entity):
    def __init__(self, name: str):
        super.__init__(name=name)
class Material(Entity):
    def __init__(self, name: str):
        super.__init__(name=name)
class Other_scientific_term(Entity):
    def __init__(self, name: str):
        super.__init__(name=name)
class Generic(Entity):
    def __init__(self, name: str):
        super.__init__(name=name)

class Triple:
    def __init__(self, head: Entity, relation: Rel, tail: Entity):
        self.head = head
        self.relation = relation
        self.tail = tail
class Extract:
    def __init__(self, triples: List[Triple] = []):
        self.triples = triples
