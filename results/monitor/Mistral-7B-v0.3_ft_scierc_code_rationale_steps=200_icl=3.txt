text: This paper presents a phrase-based statistical machine translation method , based on non-contiguous phrases , i.e. phrases with gaps .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('phrase-based statistical machine translation method')
# Generic('this')
# Other_scientific_term('non-contiguous phrases')
# Method('phrase-based statistical machine translation method')

extract = Extract([Triple(Method("phrase-based statistical machine translation method"), Rel("Used_for"), Generic("this")), Triple(Other_scientific_term("non-contiguous phrases"), Rel("Used_for"), Method("phrase-based statistical machine translation method"))])
pred: [['phrase-based statistical machine translation method', 'Used_for', 'this'], ['non-contiguous phrases', 'Used_for', 'phrase-based statistical machine translation method']]
trues: [['non-contiguous phrases', 'Used_for', 'phrase-based statistical machine translation method']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.5, 1.0, 0.6666666666666666]
text: Our technique is based on an improved , dynamic-programming , stereo algorithm for efficient novel-view generation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('dynamic-programming , stereo algorithm')
# Generic('technique')
# Method('dynamic-programming , stereo algorithm')
# Task('novel-view generation')

extract = Extract([Triple(Method("dynamic-programming , stereo algorithm"), Rel("Used_for"), Generic("technique")), Triple(Method("dynamic-programming , stereo algorithm"), Rel("Used_for"), Task("novel-view generation"))])
pred: [['dynamic-programming , stereo algorithm', 'Used_for', 'technique'], ['dynamic-programming , stereo algorithm', 'Used_for', 'novel-view generation']]
trues: [['technique', 'Used_for', 'novel-view generation'], ['dynamic-programming , stereo algorithm', 'Used_for', 'technique']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.5, 0.6666666666666666, 0.5714285714285715]
text: We investigate the verbal and nonverbal means for grounding , and propose a design for embodied conversational agents that relies on both kinds of signals to establish common ground in human-computer interaction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('verbal and nonverbal means')
# Other_scientific_term('common ground')
# Other_scientific_term('verbal and nonverbal means')
# Method('embodied conversational agents')
# Other_scientific_term('common ground')
# Task('human-computer interaction')

extract = Extract([Triple(Other_scientific_term("verbal and nonverbal means"), Rel("Used_for"), Other_scientific_term("common ground")), Triple(Other_scientific_term("verbal and nonverbal means"), Rel("Used_for"), Method("embodied conversational agents")), Triple(Other_scientific_term("common ground"), Rel("Used_for"), Task("human-computer interaction"))])
pred: [['verbal and nonverbal means', 'Used_for', 'common ground'], ['verbal and nonverbal means', 'Used_for', 'embodied conversational agents'], ['common ground', 'Used_for', 'human-computer interaction']]
trues: [['verbal and nonverbal means', 'Used_for', 'grounding'], ['design', 'Used_for', 'embodied conversational agents'], ['common ground', 'Used_for', 'human-computer interaction']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.42857142857142855, 0.5, 0.4615384615384615]
text: A demonstration ( in UNIX ) for Applied Natural Language Processing emphasizes components put to novel technical uses in intelligent computer-assisted morphological analysis ( ICALL ) , including disambiguated morphological analysis and lemmatized indexing for an aligned bilingual corpus of word examples .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Generic('components')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')
# Generic('components')
# Task('disambiguated morphological analysis')
# Generic('components')
# Task('lemmatized indexing')
# Task('disambiguated morphological analysis')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')
# Task('lemmatized indexing')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')
# Task('lemmatized indexing')
# Material('aligned bilingual corpus of word examples')

extract = Extract([Triple(Generic("components"), Rel("Used_for"), Task("intelligent computer-assisted morphological analysis ( ICALL )")), Triple(Generic("components"), Rel("Part_of"), Task("disambiguated morphological analysis")), Triple(Generic("components"), Rel("Conjunction"), Task("lemmatized indexing")), Triple(Task("disambiguated morphological analysis"), Rel("Used_for"), Task("intelligent computer-assisted morphological analysis ( ICALL )")), Triple(Task("lemmatized indexing"), Rel("Used_for"), Task("intelligent computer-assisted morphological analysis ( ICALL )")), Triple(Task("lemmatized indexing"), Rel("Part_of"), Material("aligned bilingual corpus of word examples"))])
pred: [['components', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['components', 'Part_of', 'disambiguated morphological analysis'], ['components', 'Conjunction', 'lemmatized indexing'], ['disambiguated morphological analysis', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['lemmatized indexing', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['lemmatized indexing', 'Part_of', 'aligned bilingual corpus of word examples']]
trues: [['components', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['disambiguated morphological analysis', 'Hyponym_of', 'components'], ['disambiguated morphological analysis', 'Conjunction', 'lemmatized indexing'], ['disambiguated morphological analysis', 'Used_for', 'aligned bilingual corpus'], ['lemmatized indexing', 'Hyponym_of', 'components'], ['lemmatized indexing', 'Used_for', 'aligned bilingual corpus']]
metrics_sample: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
metrics_current: [0.3076923076923077, 0.3333333333333333, 0.32]
text: Thus the ASR system is designed to deal with what we refer to as Word Spotting and Noise Spotting capabilities .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('ASR system')
# Task('Word Spotting and Noise Spotting capabilities')

extract = Extract([Triple(Method("ASR system"), Rel("Used_for"), Task("Word Spotting and Noise Spotting capabilities"))])
pred: [['ASR system', 'Used_for', 'Word Spotting and Noise Spotting capabilities']]
trues: [['ASR system', 'Used_for', 'Word Spotting'], ['ASR system', 'Used_for', 'Noise Spotting capabilities']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2857142857142857, 0.2857142857142857, 0.2857142857142857]
text: The experimental results show that the proposed histogram-based interest point detectors perform particularly well for the tasks of matching textured scenes under blur and illumination changes , in terms of repeatability and distinctiveness .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('histogram-based interest point detectors')
# Task('matching textured scenes')
# Method('histogram-based interest point detectors')
# Task('matching textured scenes')
# Task('matching textured scenes')
# Other_scientific_term('blur and illumination changes')
# Metric('repeatability')
# Method('histogram-based interest point detectors')
# Metric('repeatability')
# Metric('distinctiveness')
# Metric('distinctiveness')
# Method('histogram-based interest point detectors')

extract = Extract([Triple(Method("histogram-based interest point detectors"), Rel("Used_for"), Task("matching textured scenes")), Triple(Method("histogram-based interest point detectors"), Rel("Used_for"), Task("matching textured scenes")), Triple(Task("matching textured scenes"), Rel("Conjunction"), Other_scientific_term("blur and illumination changes")), Triple(Metric("repeatability"), Rel("Evaluate_for"), Method("histogram-based interest point detectors")), Triple(Metric("repeatability"), Rel("Conjunction"), Metric("distinctiveness")), Triple(Metric("distinctiveness"), Rel("Evaluate_for"), Method("histogram-based interest point detectors"))])
pred: [['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['matching textured scenes', 'Conjunction', 'blur and illumination changes'], ['repeatability', 'Evaluate_for', 'histogram-based interest point detectors'], ['repeatability', 'Conjunction', 'distinctiveness'], ['distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors']]
trues: [['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['repeatability', 'Evaluate_for', 'histogram-based interest point detectors'], ['repeatability', 'Conjunction', 'distinctiveness'], ['distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors']]
metrics_sample: [0.8, 1.0, 0.888888888888889]
metrics_current: [0.42105263157894735, 0.4444444444444444, 0.43243243243243246]
text: We also introduce a novel classification method based on PER which leverages part of speech information of the words contributing to the word matches and non-matches in the sentence .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('classification method')
# Other_scientific_term('PER')
# Other_scientific_term('part of speech information')
# Method('classification method')

extract = Extract([Triple(Method("classification method"), Rel("Used_for"), Other_scientific_term("PER")), Triple(Other_scientific_term("part of speech information"), Rel("Used_for"), Method("classification method"))])
pred: [['classification method', 'Used_for', 'PER'], ['part of speech information', 'Used_for', 'classification method']]
trues: [['PER', 'Used_for', 'classification method'], ['PER', 'Used_for', 'part of speech information'], ['part of speech information', 'Used_for', 'word matches and non-matches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38095238095238093, 0.38095238095238093, 0.38095238095238093]
text: This paper describes a method for incorporating priming into an incremental probabilistic parser .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Generic('method')
# Task('incremental probabilistic parser')
# Task('incremental probabilistic parser')
# Other_scientific_term('priming')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("incremental probabilistic parser")), Triple(Task("incremental probabilistic parser"), Rel("Part_of"), Other_scientific_term("priming"))])
pred: [['method', 'Used_for', 'incremental probabilistic parser'], ['incremental probabilistic parser', 'Part_of', 'priming']]
trues: [['method', 'Used_for', 'priming'], ['priming', 'Used_for', 'incremental probabilistic parser']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34782608695652173, 0.34782608695652173, 0.34782608695652173]
text: In addition to the high accuracy of the model , the use of smoothing in an unlexicalized parser allows us to better examine the interplay between smoothing and parsing results .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('smoothing')
# Method('unlexicalized parser')
# Method('smoothing')
# Other_scientific_term('interplay between smoothing and parsing results')

extract = Extract([Triple(Method("smoothing"), Rel("Used_for"), Method("unlexicalized parser")), Triple(Method("smoothing"), Rel("Used_for"), Other_scientific_term("interplay between smoothing and parsing results"))])
pred: [['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Used_for', 'interplay between smoothing and parsing results']]
trues: [['accuracy', 'Evaluate_for', 'model'], ['smoothing', 'Used_for', 'unlexicalized parser']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.36, 0.36, 0.36]
text: The fact that Turkish is an agglutinating free word order language presents a challenge for language theories .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('agglutinating')
# Other_scientific_term('free word order language')

extract = Extract([Triple(Other_scientific_term("agglutinating"), Rel("Conjunction"), Other_scientific_term("free word order language"))])
pred: [['agglutinating', 'Conjunction', 'free word order language']]
trues: [['Turkish', 'Hyponym_of', 'agglutinating free word order language']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34615384615384615, 0.34615384615384615, 0.34615384615384615]
text: Experimental results from a real telephone application on a natural number recognition task show an 50 % reduction in recognition errors with a moderate 12 % rejection rate of correct utterances and a low 1.5 % rate of false acceptance .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('natural number recognition task')
# Method('telephone application')
# Metric('recognition errors')
# Method('telephone application')
# Metric('rejection rate')
# Method('telephone application')
# Metric('rejection rate')
# Metric('false acceptance')
# Metric('rejection rate')
# Metric('false acceptance')
# Metric('false acceptance')
# Method('telephone application')

extract = Extract([Triple(Task("natural number recognition task"), Rel("Evaluate_for"), Method("telephone application")), Triple(Metric("recognition errors"), Rel("Evaluate_for"), Method("telephone application")), Triple(Metric("rejection rate"), Rel("Evaluate_for"), Method("telephone application")), Triple(Metric("rejection rate"), Rel("Conjunction"), Metric("false acceptance")), Triple(Metric("rejection rate"), Rel("Evaluate_for"), Metric("false acceptance")), Triple(Metric("false acceptance"), Rel("Conjunction"), Method("telephone application"))])
pred: [['natural number recognition task', 'Evaluate_for', 'telephone application'], ['recognition errors', 'Evaluate_for', 'telephone application'], ['rejection rate', 'Evaluate_for', 'telephone application'], ['rejection rate', 'Conjunction', 'false acceptance'], ['rejection rate', 'Evaluate_for', 'false acceptance'], ['false acceptance', 'Conjunction', 'telephone application']]
trues: [['natural number recognition task', 'Feature_of', 'telephone application'], ['recognition errors', 'Evaluate_for', 'natural number recognition task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28125, 0.32142857142857145, 0.30000000000000004]
text: Full digital resolution is maintained even with low-resolution analog-to-digital conversion , owing to random statistics in the analog summation of binary products .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('random statistics in the analog summation of binary products')
# Task('Full digital resolution')

extract = Extract([Triple(Other_scientific_term("random statistics in the analog summation of binary products"), Rel("Used_for"), Task("Full digital resolution"))])
pred: [['random statistics in the analog summation of binary products', 'Used_for', 'Full digital resolution']]
trues: [['random statistics', 'Part_of', 'analog summation of binary products']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2727272727272727, 0.3103448275862069, 0.2903225806451613]
text: Motivated by this semantic criterion we analyze the empirical quality of distributional word feature vectors and its impact on word similarity results , proposing an objective measure for evaluating feature vector quality .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('semantic criterion')
# Method('distributional word feature vectors')
# Metric('semantic criterion')
# Task('word similarity')

extract = Extract([Triple(Metric("semantic criterion"), Rel("Evaluate_for"), Method("distributional word feature vectors")), Triple(Metric("semantic criterion"), Rel("Evaluate_for"), Task("word similarity"))])
pred: [['semantic criterion', 'Evaluate_for', 'distributional word feature vectors'], ['semantic criterion', 'Evaluate_for', 'word similarity']]
trues: [['semantic criterion', 'Evaluate_for', 'distributional word feature vectors'], ['distributional word feature vectors', 'Used_for', 'word similarity'], ['measure', 'Evaluate_for', 'feature vector quality']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.2857142857142857, 0.3125, 0.29850746268656714]
text: We consider the problem of computing the Kullback-Leibler distance , also called the relative entropy , between a probabilistic context-free grammar and a probabilistic finite automaton .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Kullback-Leibler distance')
# Generic('problem')
# Method('probabilistic context-free grammar')
# Method('Kullback-Leibler distance')
# Method('probabilistic context-free grammar')
# Method('probabilistic finite automaton')

extract = Extract([Triple(Method("Kullback-Leibler distance"), Rel("Used_for"), Generic("problem")), Triple(Method("probabilistic context-free grammar"), Rel("Used_for"), Method("Kullback-Leibler distance")), Triple(Method("probabilistic context-free grammar"), Rel("Conjunction"), Method("probabilistic finite automaton"))])
pred: [['Kullback-Leibler distance', 'Used_for', 'problem'], ['probabilistic context-free grammar', 'Used_for', 'Kullback-Leibler distance'], ['probabilistic context-free grammar', 'Conjunction', 'probabilistic finite automaton']]
trues: [['probabilistic context-free grammar', 'Compare', 'probabilistic finite automaton']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2631578947368421, 0.30303030303030304, 0.28169014084507044]
text: Training instances are generated from experience and observation , and a variant of GOLEM is used to learn action models from these instances .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('instances')
# Method('GOLEM')

extract = Extract([Triple(Generic("instances"), Rel("Used_for"), Method("GOLEM"))])
pred: [['instances', 'Used_for', 'GOLEM']]
trues: [['GOLEM', 'Used_for', 'action models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2564102564102564, 0.29411764705882354, 0.273972602739726]
text: We investigate and analyze the layers of various CNN models and extensively compare between them with the goal of discovering how the layers of distributed representations within CNNs represent object pose information and how this contradicts with object category representations .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Other_scientific_term('layers')
# Method('CNN models')
# Other_scientific_term('layers')
# Other_scientific_term('distributed representations')
# Other_scientific_term('distributed representations')
# Other_scientific_term('CNNs')

extract = Extract([Triple(Other_scientific_term("layers"), Rel("Part_of"), Method("CNN models")), Triple(Other_scientific_term("layers"), Rel("Used_for"), Other_scientific_term("distributed representations")), Triple(Other_scientific_term("distributed representations"), Rel("Compare"), Other_scientific_term("CNNs"))])
pred: [['layers', 'Part_of', 'CNN models'], ['layers', 'Used_for', 'distributed representations'], ['distributed representations', 'Compare', 'CNNs']]
trues: [['layers', 'Part_of', 'CNN models'], ['layers of distributed representations', 'Part_of', 'CNNs'], ['layers of distributed representations', 'Used_for', 'object pose information'], ['this', 'Compare', 'object category representations']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.2619047619047619, 0.2894736842105263, 0.2750000000000001]
text: During normal tracking conditions when the object is visible from frame to frame , local optimization is used to track the local mode of the similarity measure in a parameter space of translation , rotation and scale .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('local optimization')
# Task('tracking')
# Other_scientific_term('translation')
# Other_scientific_term('parameter space of translation , rotation and scale')

extract = Extract([Triple(Method("local optimization"), Rel("Used_for"), Task("tracking")), Triple(Other_scientific_term("translation"), Rel("Feature_of"), Other_scientific_term("parameter space of translation , rotation and scale"))])
pred: [['local optimization', 'Used_for', 'tracking'], ['translation', 'Feature_of', 'parameter space of translation , rotation and scale']]
trues: [['local optimization', 'Used_for', 'local mode of the similarity measure'], ['parameter space of translation , rotation and scale', 'Used_for', 'local mode of the similarity measure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.25, 0.275, 0.2619047619047619]
text: Experimental results on our dataset and the public G3D dataset both demonstrate very promising performance of our scheme .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('dataset')
# Generic('scheme')

extract = Extract([Triple(Generic("dataset"), Rel("Evaluate_for"), Generic("scheme"))])
pred: [['dataset', 'Evaluate_for', 'scheme']]
trues: [['dataset', 'Conjunction', 'G3D dataset']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.24444444444444444, 0.2682926829268293, 0.2558139534883721]
text: It would also be effective as a move selector and move sorter for game tree search and as a training tool for Go players .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('It')
# Task('move selector')
# Generic('It')
# Task('move sorter')
# Generic('It')
# Task('game tree search')
# Generic('It')
# Task('training tool')
# Task('move selector')
# Task('move sorter')

extract = Extract([Triple(Generic("It"), Rel("Used_for"), Task("move selector")), Triple(Generic("It"), Rel("Used_for"), Task("move sorter")), Triple(Generic("It"), Rel("Used_for"), Task("game tree search")), Triple(Generic("It"), Rel("Used_for"), Task("training tool")), Triple(Task("move selector"), Rel("Conjunction"), Task("move sorter"))])
pred: [['It', 'Used_for', 'move selector'], ['It', 'Used_for', 'move sorter'], ['It', 'Used_for', 'game tree search'], ['It', 'Used_for', 'training tool'], ['move selector', 'Conjunction', 'move sorter']]
trues: [['It', 'Used_for', 'move selector'], ['It', 'Used_for', 'move sorter'], ['It', 'Used_for', 'training tool'], ['move selector', 'Conjunction', 'move sorter'], ['move selector', 'Used_for', 'game tree search'], ['move sorter', 'Used_for', 'game tree search'], ['training tool', 'Used_for', 'Go players']]
metrics_sample: [0.8, 0.5714285714285714, 0.6666666666666666]
metrics_current: [0.3, 0.3125, 0.3061224489795918]
text: A general procedure for the estimation and quantization of these cycloidal motion parameters for arbitrary handwriting is presented .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('procedure')
# Other_scientific_term('cycloidal motion parameters')

extract = Extract([Triple(Generic("procedure"), Rel("Used_for"), Other_scientific_term("cycloidal motion parameters"))])
pred: [['procedure', 'Used_for', 'cycloidal motion parameters']]
trues: [['cycloidal motion parameters', 'Used_for', 'arbitrary handwriting']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29411764705882354, 0.30612244897959184, 0.30000000000000004]
text: With the aid of a logic-based grammar formalism called extraposition grammars , Chat-80 translates English questions into the Prolog subset of logic .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('logic-based grammar formalism')
# Method('Chat-80')
# Method('logic-based grammar formalism')
# Method('extraposition grammars')
# Method('Prolog subset of logic')
# Method('Chat-80')

extract = Extract([Triple(Method("logic-based grammar formalism"), Rel("Used_for"), Method("Chat-80")), Triple(Method("logic-based grammar formalism"), Rel("Used_for"), Method("extraposition grammars")), Triple(Method("Prolog subset of logic"), Rel("Used_for"), Method("Chat-80"))])
pred: [['logic-based grammar formalism', 'Used_for', 'Chat-80'], ['logic-based grammar formalism', 'Used_for', 'extraposition grammars'], ['Prolog subset of logic', 'Used_for', 'Chat-80']]
trues: [['extraposition grammars', 'Hyponym_of', 'logic-based grammar formalism'], ['extraposition grammars', 'Used_for', 'Chat-80']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2777777777777778, 0.29411764705882354, 0.28571428571428575]
text: The description has been implemented using the PC-KIMMO environment ( Antworth , 1990 ) and is based on a root word lexicon of about 23,000 roots words .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('PC-KIMMO environment')
# Generic('description')

extract = Extract([Triple(Method("PC-KIMMO environment"), Rel("Used_for"), Generic("description"))])
pred: [['PC-KIMMO environment', 'Used_for', 'description']]
trues: [['PC-KIMMO environment', 'Used_for', 'description'], ['root word lexicon', 'Used_for', 'description']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.2909090909090909, 0.3018867924528302, 0.2962962962962963]
text: We have applied it to real scenes that include transparent objects and recovered the shapes of the objects with high accuracy .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('it')
# Other_scientific_term('transparent objects')
# Metric('accuracy')
# Generic('it')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Other_scientific_term("transparent objects")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("it"))])
pred: [['it', 'Used_for', 'transparent objects'], ['accuracy', 'Evaluate_for', 'it']]
trues: [['it', 'Used_for', 'real scenes'], ['it', 'Used_for', 'shapes of the objects'], ['transparent objects', 'Part_of', 'real scenes'], ['accuracy', 'Evaluate_for', 'shapes of the objects']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2807017543859649, 0.2807017543859649, 0.2807017543859649]
text: In practice , the current deep embedding methods use the Euclidean distance for the training and test .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('Euclidean distance')
# Method('deep embedding methods')

extract = Extract([Triple(Metric("Euclidean distance"), Rel("Used_for"), Method("deep embedding methods"))])
pred: [['Euclidean distance', 'Used_for', 'deep embedding methods']]
trues: [['Euclidean distance', 'Used_for', 'deep embedding methods']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.29310344827586204, 0.29310344827586204, 0.29310344827586204]
text: Online action detection goes one step further and is more challenging , which identifies the action type and localizes the action positions on the fly from the untrimmed stream .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Online action detection')
# Task('action type')
# Task('Online action detection')
# Other_scientific_term('action positions')

extract = Extract([Triple(Task("Online action detection"), Rel("Used_for"), Task("action type")), Triple(Task("Online action detection"), Rel("Used_for"), Other_scientific_term("action positions"))])
pred: [['Online action detection', 'Used_for', 'action type'], ['Online action detection', 'Used_for', 'action positions']]
trues: [['Online action detection', 'Used_for', 'action type'], ['Online action detection', 'Used_for', 'action positions'], ['action type', 'Conjunction', 'action positions'], ['untrimmed stream', 'Used_for', 'Online action detection']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.31666666666666665, 0.3064516129032258, 0.31147540983606564]
text: Our extensive experimental results significantly improve over both uniform sampling and standard stratified sampling which are de-facto the industry standards .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Compare')
# Rel('Compare')
# The candidate entities for this text are:
# Generic('uniform sampling')
# Generic('industry standards')
# Generic('uniform sampling')
# Generic('stratified sampling')
# Generic('stratified sampling')
# Generic('industry standards')

extract = Extract([Triple(Generic("uniform sampling"), Rel("Compare"), Generic("industry standards")), Triple(Generic("uniform sampling"), Rel("Compare"), Generic("stratified sampling")), Triple(Generic("stratified sampling"), Rel("Compare"), Generic("industry standards"))])
pred: [['uniform sampling', 'Compare', 'industry standards'], ['uniform sampling', 'Compare', 'stratified sampling'], ['stratified sampling', 'Compare', 'industry standards']]
trues: [['uniform sampling', 'Conjunction', 'stratified sampling']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30158730158730157, 0.30158730158730157, 0.30158730158730157]
text: We describe a fully automatic recognition system based on the proposed method and an extensive evaluation on 171 individuals and over 1300 video sequences with extreme illumination , pose and head motion variation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('method')
# Method('fully automatic recognition system')
# Other_scientific_term('illumination')
# Other_scientific_term('pose')
# Other_scientific_term('illumination')
# Other_scientific_term('head motion')
# Other_scientific_term('pose')
# Other_scientific_term('head motion')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Method("fully automatic recognition system")), Triple(Other_scientific_term("illumination"), Rel("Evaluate_for"), Other_scientific_term("pose")), Triple(Other_scientific_term("illumination"), Rel("Conjunction"), Other_scientific_term("head motion")), Triple(Other_scientific_term("pose"), Rel("Evaluate_for"), Other_scientific_term("head motion"))])
pred: [['method', 'Used_for', 'fully automatic recognition system'], ['illumination', 'Evaluate_for', 'pose'], ['illumination', 'Conjunction', 'head motion'], ['pose', 'Evaluate_for', 'head motion']]
trues: [['method', 'Used_for', 'fully automatic recognition system'], ['video sequences', 'Evaluate_for', 'fully automatic recognition system'], ['illumination', 'Feature_of', 'video sequences'], ['illumination', 'Conjunction', 'pose'], ['pose', 'Feature_of', 'video sequences'], ['pose', 'Conjunction', 'head motion variation'], ['head motion variation', 'Feature_of', 'video sequences']]
metrics_sample: [0.25, 0.14285714285714285, 0.18181818181818182]
metrics_current: [0.29850746268656714, 0.2857142857142857, 0.291970802919708]
text: The proposed approach does not require a separate segmentation stage and is applicable to cluttered scenes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('segmentation stage')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("segmentation stage"))])
pred: [['approach', 'Used_for', 'segmentation stage']]
trues: [['approach', 'Used_for', 'cluttered scenes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29411764705882354, 0.28169014084507044, 0.28776978417266186]
text: We validate this new method on nine standard person re-identification datasets including two large scale Market-1501 and CUHK03 datasets and show that we improve upon the current state-of-the-art methods on all of them .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('method')
# Task('person re-identification datasets')
# Material('Market-1501 and CUHK03 datasets')
# Task('person re-identification datasets')
# Material('Market-1501 and CUHK03 datasets')
# Material('two large scale Market-1501 and CUHK03 datasets')
# Material('two large scale Market-1501 and CUHK03 datasets')
# Generic('them')
# Generic('them')
# Generic('state-of-the-art methods')
# Generic('them')
# Generic('state-of-the-art methods')
# Generic('state-of-the-art methods')
# Generic('method')

extract = Extract([Triple(Generic("method"), Rel("Evaluate_for"), Task("person re-identification datasets")), Triple(Material("Market-1501 and CUHK03 datasets"), Rel("Hyponym_of"), Task("person re-identification datasets")), Triple(Material("Market-1501 and CUHK03 datasets"), Rel("Conjunction"), Material("two large scale Market-1501 and CUHK03 datasets")), Triple(Material("two large scale Market-1501 and CUHK03 datasets"), Rel("Hyponym_of"), Generic("them")), Triple(Generic("them"), Rel("Evaluate_for"), Generic("state-of-the-art methods")), Triple(Generic("them"), Rel("Evaluate_for"), Generic("state-of-the-art methods")), Triple(Generic("state-of-the-art methods"), Rel("Conjunction"), Generic("method"))])
pred: [['method', 'Evaluate_for', 'person re-identification datasets'], ['Market-1501 and CUHK03 datasets', 'Hyponym_of', 'person re-identification datasets'], ['Market-1501 and CUHK03 datasets', 'Conjunction', 'two large scale Market-1501 and CUHK03 datasets'], ['two large scale Market-1501 and CUHK03 datasets', 'Hyponym_of', 'them'], ['them', 'Evaluate_for', 'state-of-the-art methods'], ['them', 'Evaluate_for', 'state-of-the-art methods'], ['state-of-the-art methods', 'Conjunction', 'method']]
trues: [['person re-identification datasets', 'Evaluate_for', 'method'], ['scale Market-1501', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Conjunction', 'scale Market-1501']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2702702702702703, 0.26666666666666666, 0.2684563758389261]
text: Although the study of clustering is centered around an intuitively compelling goal , it has been very difficult to develop a unified framework for reasoning about it at a technical level , and profoundly diverse approaches to clustering abound in the research community .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('it')
# Task('clustering')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Task("clustering"))])
pred: [['it', 'Used_for', 'clustering']]
trues: [['unified framework', 'Used_for', 'reasoning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.26666666666666666, 0.2631578947368421, 0.26490066225165565]
text: When the scene exhibits a persistent dynamic behavior in time , such an assumption is violated and detection performance deteriorates .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('persistent dynamic behavior')
# Generic('scene')

extract = Extract([Triple(Other_scientific_term("persistent dynamic behavior"), Rel("Feature_of"), Generic("scene"))])
pred: [['persistent dynamic behavior', 'Feature_of', 'scene']]
trues: [['persistent dynamic behavior', 'Feature_of', 'scene']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.27631578947368424, 0.2727272727272727, 0.2745098039215686]
text: Our proposed approach builds on recent advances in spectral clustering , image matting , and boundary detection .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Generic('advances')
# Method('spectral clustering')
# Generic('advances')
# Method('spectral clustering')
# Method('image matting')
# Method('image matting')
# Generic('advances')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Generic("advances")), Triple(Method("spectral clustering"), Rel("Used_for"), Generic("advances")), Triple(Method("spectral clustering"), Rel("Conjunction"), Method("image matting")), Triple(Method("image matting"), Rel("Used_for"), Generic("advances"))])
pred: [['approach', 'Used_for', 'advances'], ['spectral clustering', 'Used_for', 'advances'], ['spectral clustering', 'Conjunction', 'image matting'], ['image matting', 'Used_for', 'advances']]
trues: [['spectral clustering', 'Used_for', 'approach'], ['spectral clustering', 'Conjunction', 'image matting'], ['image matting', 'Used_for', 'approach'], ['image matting', 'Conjunction', 'boundary detection'], ['boundary detection', 'Used_for', 'approach']]
metrics_sample: [0.25, 0.2, 0.22222222222222224]
metrics_current: [0.275, 0.2682926829268293, 0.271604938271605]
text: Our technique gives a substantial improvement in paraphrase classification accuracy over all of the other models used in the experiments .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('paraphrase classification accuracy')
# Generic('technique')

extract = Extract([Triple(Metric("paraphrase classification accuracy"), Rel("Evaluate_for"), Generic("technique"))])
pred: [['paraphrase classification accuracy', 'Evaluate_for', 'technique']]
trues: [['technique', 'Compare', 'models'], ['paraphrase classification accuracy', 'Evaluate_for', 'technique'], ['paraphrase classification accuracy', 'Evaluate_for', 'models']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.2839506172839506, 0.27058823529411763, 0.27710843373493976]
text: Extended CF grammars ( grammars with regular expressions at the right hand side ) can be parsed with a simple modification of the LR-parser for normal CF grammars .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('LR-parser')
# Method('Extended CF grammars ( grammars with regular expressions at the right hand side )')
# Method('LR-parser')
# Method('CF grammars')

extract = Extract([Triple(Method("LR-parser"), Rel("Used_for"), Method("Extended CF grammars ( grammars with regular expressions at the right hand side )")), Triple(Method("LR-parser"), Rel("Used_for"), Method("CF grammars"))])
pred: [['LR-parser', 'Used_for', 'Extended CF grammars ( grammars with regular expressions at the right hand side )'], ['LR-parser', 'Used_for', 'CF grammars']]
trues: [['regular expressions', 'Feature_of', 'grammars'], ['LR-parser', 'Used_for', 'Extended CF grammars'], ['LR-parser', 'Used_for', 'CF grammars']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.2891566265060241, 0.2727272727272727, 0.2807017543859649]
text: Hitherto , smooth motion has been encouraged using a trajectory basis , yielding a hard combinatorial problem with time complexity growing exponentially in the number of frames .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('trajectory basis')
# Task('smooth motion')

extract = Extract([Triple(Other_scientific_term("trajectory basis"), Rel("Used_for"), Task("smooth motion"))])
pred: [['trajectory basis', 'Used_for', 'smooth motion']]
trues: [['trajectory basis', 'Used_for', 'smooth motion'], ['time complexity', 'Evaluate_for', 'hard combinatorial problem']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.2976190476190476, 0.2777777777777778, 0.2873563218390805]
text: We report the performance of the MBR decoders on a Chinese-to-English translation task .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('Chinese-to-English translation task')
# Method('MBR decoders')

extract = Extract([Triple(Task("Chinese-to-English translation task"), Rel("Evaluate_for"), Method("MBR decoders"))])
pred: [['Chinese-to-English translation task', 'Evaluate_for', 'MBR decoders']]
trues: [['MBR decoders', 'Used_for', 'Chinese-to-English translation task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29411764705882354, 0.27472527472527475, 0.2840909090909091]
text: The experimental tests are carried out on the Verbmobil task ( German-English , 8000-word vocabulary ) , which is a limited-domain spoken-language task .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Feature_of')
# The candidate entities for this text are:
# Task('Verbmobil task')
# Task('limited-domain spoken-language task')
# Material('German-English')
# Task('Verbmobil task')

extract = Extract([Triple(Task("Verbmobil task"), Rel("Hyponym_of"), Task("limited-domain spoken-language task")), Triple(Material("German-English"), Rel("Feature_of"), Task("Verbmobil task"))])
pred: [['Verbmobil task', 'Hyponym_of', 'limited-domain spoken-language task'], ['German-English', 'Feature_of', 'Verbmobil task']]
trues: [['Verbmobil task', 'Hyponym_of', 'limited-domain spoken-language task']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2988505747126437, 0.2826086956521739, 0.29050279329608936]
text: This motor control representation enables successful word spotting and matching of cursive scripts .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('motor control representation')
# Task('word spotting')
# Method('motor control representation')
# Material('cursive scripts')

extract = Extract([Triple(Method("motor control representation"), Rel("Used_for"), Task("word spotting")), Triple(Method("motor control representation"), Rel("Used_for"), Material("cursive scripts"))])
pred: [['motor control representation', 'Used_for', 'word spotting'], ['motor control representation', 'Used_for', 'cursive scripts']]
trues: [['motor control representation', 'Used_for', 'word spotting'], ['motor control representation', 'Used_for', 'matching of cursive scripts'], ['word spotting', 'Conjunction', 'matching of cursive scripts']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.30337078651685395, 0.28421052631578947, 0.29347826086956524]
text: The strong description and modeling properties of differential features make them useful tools that can be efficiently used as constraints for 3 -- D reconstruction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('differential features')
# Task('3 -- D reconstruction')

extract = Extract([Triple(Other_scientific_term("differential features"), Rel("Used_for"), Task("3 -- D reconstruction"))])
pred: [['differential features', 'Used_for', '3 -- D reconstruction']]
trues: [['them', 'Used_for', '3 -- D reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3, 0.28125, 0.29032258064516125]
text: This poster paper describes a full scale two-level morphological description ( Karttunen , 1983 ; Koskenniemi , 1983 ) of Turkish word structures .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('full scale two-level morphological description')
# Other_scientific_term('Turkish word structures')
# Generic('Karttunen')
# Method('full scale two-level morphological description')

extract = Extract([Triple(Method("full scale two-level morphological description"), Rel("Used_for"), Other_scientific_term("Turkish word structures")), Triple(Generic("Karttunen"), Rel("Used_for"), Method("full scale two-level morphological description"))])
pred: [['full scale two-level morphological description', 'Used_for', 'Turkish word structures'], ['Karttunen', 'Used_for', 'full scale two-level morphological description']]
trues: [['full scale two-level morphological description', 'Used_for', 'Turkish word structures']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.30434782608695654, 0.28865979381443296, 0.2962962962962963]
text: The problem of blind separation of underdetermined instantaneous mixtures of independent signals is addressed through a method relying on nonstationarity of the original signals .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('nonstationarity of the original signals')
# Generic('method')

extract = Extract([Triple(Other_scientific_term("nonstationarity of the original signals"), Rel("Used_for"), Generic("method"))])
pred: [['nonstationarity of the original signals', 'Used_for', 'method']]
trues: [['method', 'Used_for', 'blind separation of underdetermined instantaneous mixtures of independent signals'], ['nonstationarity', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3010752688172043, 0.2828282828282828, 0.2916666666666667]
text: In order to perform an exhaustive comparison , we also evaluate a hand-crafted template-based generation component , two rule-based sentence planners , and two baseline sentence planners .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('hand-crafted template-based generation component')
# Method('rule-based sentence planners')
# Method('hand-crafted template-based generation component')
# Generic('baseline sentence planners')
# Method('rule-based sentence planners')
# Generic('baseline sentence planners')
# Method('rule-based sentence planners')
# Generic('baseline sentence planners')
# Method('baseline sentence planners')
# Generic('baseline sentence planners')

extract = Extract([Triple(Method("hand-crafted template-based generation component"), Rel("Conjunction"), Method("rule-based sentence planners")), Triple(Method("hand-crafted template-based generation component"), Rel("Evaluate_for"), Generic("baseline sentence planners")), Triple(Method("rule-based sentence planners"), Rel("Evaluate_for"), Generic("baseline sentence planners")), Triple(Method("rule-based sentence planners"), Rel("Evaluate_for"), Generic("baseline sentence planners")), Triple(Method("baseline sentence planners"), Rel("Conjunction"), Generic("baseline sentence planners"))])
pred: [['hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'], ['hand-crafted template-based generation component', 'Evaluate_for', 'baseline sentence planners'], ['rule-based sentence planners', 'Evaluate_for', 'baseline sentence planners'], ['rule-based sentence planners', 'Evaluate_for', 'baseline sentence planners'], ['baseline sentence planners', 'Conjunction', 'baseline sentence planners']]
trues: [['hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'], ['rule-based sentence planners', 'Conjunction', 'baseline sentence planners']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.29896907216494845, 0.2871287128712871, 0.2929292929292929]
text: Although hidden Markov models ( HMMs ) provide a suitable generative model for field structured text , general unsupervised HMM learning fails to learn useful structure in either of our domains .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('hidden Markov models ( HMMs )')
# Material('field structured text')
# Method('unsupervised HMM learning')
# Other_scientific_term('structure')

extract = Extract([Triple(Method("hidden Markov models ( HMMs )"), Rel("Used_for"), Material("field structured text")), Triple(Method("unsupervised HMM learning"), Rel("Used_for"), Other_scientific_term("structure"))])
pred: [['hidden Markov models ( HMMs )', 'Used_for', 'field structured text'], ['unsupervised HMM learning', 'Used_for', 'structure']]
trues: [['hidden Markov models ( HMMs )', 'Used_for', 'generative model'], ['generative model', 'Used_for', 'field structured text']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29292929292929293, 0.2815533980582524, 0.2871287128712871]
text: It models reflection as regions containing two different layers moving over each other .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('It')
# Other_scientific_term('reflection')

extract = Extract([Triple(Generic("It"), Rel("Used_for"), Other_scientific_term("reflection"))])
pred: [['It', 'Used_for', 'reflection']]
trues: [['It', 'Used_for', 'reflection']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3, 0.28846153846153844, 0.29411764705882354]
text: Second , based on the information resulting from the dictionary lookup stage , a set of rules is applied to the segmented strings in order to identify NE items .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('rules')
# Other_scientific_term('segmented strings')
# Other_scientific_term('rules')
# Other_scientific_term('NE items')

extract = Extract([Triple(Other_scientific_term("rules"), Rel("Used_for"), Other_scientific_term("segmented strings")), Triple(Other_scientific_term("rules"), Rel("Used_for"), Other_scientific_term("NE items"))])
pred: [['rules', 'Used_for', 'segmented strings'], ['rules', 'Used_for', 'NE items']]
trues: [['dictionary lookup stage', 'Used_for', 'rules'], ['rules', 'Used_for', 'NE items']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30392156862745096, 0.29245283018867924, 0.2980769230769231]
text: The system is implemented entirely in Prolog , a programming language based on logic .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Prolog')
# Method('programming language')

extract = Extract([Triple(Method("Prolog"), Rel("Used_for"), Method("programming language"))])
pred: [['Prolog', 'Used_for', 'programming language']]
trues: [['Prolog', 'Used_for', 'system'], ['Prolog', 'Hyponym_of', 'programming language'], ['logic', 'Used_for', 'programming language']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30097087378640774, 0.28440366972477066, 0.2924528301886793]
text: While current approaches are developed by only considering the low rank plus sparse structure , in many applications , side information of row and/or column entities may also be given , and it is still unclear to what extent could such information help robust PCA .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('low rank plus sparse structure')
# Generic('approaches')
# Other_scientific_term('side information of row and/or column entities')
# Task('robust PCA')

extract = Extract([Triple(Other_scientific_term("low rank plus sparse structure"), Rel("Used_for"), Generic("approaches")), Triple(Other_scientific_term("side information of row and/or column entities"), Rel("Used_for"), Task("robust PCA"))])
pred: [['low rank plus sparse structure', 'Used_for', 'approaches'], ['side information of row and/or column entities', 'Used_for', 'robust PCA']]
trues: [['low rank plus sparse structure', 'Used_for', 'approaches'], ['information', 'Used_for', 'robust PCA']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3047619047619048, 0.2882882882882883, 0.29629629629629634]
text: We provide a unified account of sentence-level and text-level anaphora within the framework of a dependency-based grammar model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Method('dependency-based grammar model')
# Task('unified account of sentence-level and text-level anaphora')
# Task('unified account of sentence-level and text-level anaphora')
# Task('sentence-level and text-level anaphora')

extract = Extract([Triple(Method("dependency-based grammar model"), Rel("Used_for"), Task("unified account of sentence-level and text-level anaphora")), Triple(Task("unified account of sentence-level and text-level anaphora"), Rel("Part_of"), Task("sentence-level and text-level anaphora"))])
pred: [['dependency-based grammar model', 'Used_for', 'unified account of sentence-level and text-level anaphora'], ['unified account of sentence-level and text-level anaphora', 'Part_of', 'sentence-level and text-level anaphora']]
trues: [['dependency-based grammar model', 'Used_for', 'sentence-level and text-level anaphora']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29906542056074764, 0.2857142857142857, 0.2922374429223744]
text: On this challenging data set our system consistently demonstrated a nearly perfect recognition rate ( over 99.7 % on all three databases ) , significantly out-performing state-of-the-art commercial software and methods from the literature .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('system')
# Generic('state-of-the-art commercial software')
# Metric('recognition rate')
# Generic('system')
# Metric('recognition rate')
# Generic('state-of-the-art commercial software')
# Metric('recognition rate')
# Generic('methods')
# Metric('recognition rate')
# Generic('system')
# Metric('recognition rate')
# Generic('state-of-the-art commercial software')
# Metric('recognition rate')
# Generic('methods')
# Metric('recognition rate')
# Generic('system')
# Generic('state-of-the-art commercial software')
# Generic('methods')

extract = Extract([Triple(Generic("system"), Rel("Compare"), Generic("state-of-the-art commercial software")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("system")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("state-of-the-art commercial software")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("methods")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("system")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("state-of-the-art commercial software")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("methods")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("system")), Triple(Generic("state-of-the-art commercial software"), Rel("Evaluate_for"), Generic("methods"))])
pred: [['system', 'Compare', 'state-of-the-art commercial software'], ['recognition rate', 'Evaluate_for', 'system'], ['recognition rate', 'Evaluate_for', 'state-of-the-art commercial software'], ['recognition rate', 'Evaluate_for', 'methods'], ['recognition rate', 'Evaluate_for', 'system'], ['recognition rate', 'Evaluate_for', 'state-of-the-art commercial software'], ['recognition rate', 'Evaluate_for', 'methods'], ['recognition rate', 'Evaluate_for', 'system'], ['state-of-the-art commercial software', 'Evaluate_for', 'methods']]
trues: [['data set', 'Evaluate_for', 'system'], ['system', 'Compare', 'commercial software'], ['system', 'Compare', 'methods'], ['recognition rate', 'Evaluate_for', 'system'], ['commercial software', 'Conjunction', 'methods']]
metrics_sample: [0.2, 0.2, 0.20000000000000004]
metrics_current: [0.29464285714285715, 0.28205128205128205, 0.28820960698689957]
text: Our experiments on real data sets show that the resulting detector is more robust to the choice of training examples , and substantially improves both linear and kernel SVM when trained on 10 positive and 10 negative examples .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('real data sets')
# Generic('detector')
# Material('real data sets')
# Method('linear and kernel SVM')
# Material('real data sets')
# Method('SVM')
# Material('positive and 10 negative examples')
# Method('linear and kernel SVM')
# Material('positive and 10 negative examples')
# Method('SVM')

extract = Extract([Triple(Material("real data sets"), Rel("Evaluate_for"), Generic("detector")), Triple(Material("real data sets"), Rel("Evaluate_for"), Method("linear and kernel SVM")), Triple(Material("real data sets"), Rel("Evaluate_for"), Method("SVM")), Triple(Material("positive and 10 negative examples"), Rel("Conjunction"), Method("linear and kernel SVM")), Triple(Material("positive and 10 negative examples"), Rel("Evaluate_for"), Method("SVM"))])
pred: [['real data sets', 'Evaluate_for', 'detector'], ['real data sets', 'Evaluate_for', 'linear and kernel SVM'], ['real data sets', 'Evaluate_for', 'SVM'], ['positive and 10 negative examples', 'Conjunction', 'linear and kernel SVM'], ['positive and 10 negative examples', 'Evaluate_for', 'SVM']]
trues: [['real data sets', 'Evaluate_for', 'detector'], ['detector', 'Compare', 'linear and kernel SVM']]
metrics_sample: [0.2, 0.5, 0.28571428571428575]
metrics_current: [0.2905982905982906, 0.2857142857142857, 0.288135593220339]
text: Inherent ambiguities in the computation of features are addressed by using a data-dependent bandwidth for density estimation using kernels .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('bandwidth')
# Method('density estimation')
# Method('kernels')
# Method('density estimation')

extract = Extract([Triple(Other_scientific_term("bandwidth"), Rel("Used_for"), Method("density estimation")), Triple(Method("kernels"), Rel("Used_for"), Method("density estimation"))])
pred: [['bandwidth', 'Used_for', 'density estimation'], ['kernels', 'Used_for', 'density estimation']]
trues: [['ambiguities', 'Feature_of', 'computation of features'], ['data-dependent bandwidth', 'Used_for', 'ambiguities'], ['data-dependent bandwidth', 'Used_for', 'density estimation'], ['kernels', 'Used_for', 'density estimation']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.29411764705882354, 0.2845528455284553, 0.2892561983471075]
text: To associate a sequence of the Fujisaki-model parameters with a text input based on statistical learning , this paper proposes extending this model to a context-dependent one .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Fujisaki-model parameters')
# Material('text input')
# Method('statistical learning')
# Method('Fujisaki-model parameters')

extract = Extract([Triple(Method("Fujisaki-model parameters"), Rel("Used_for"), Material("text input")), Triple(Method("statistical learning"), Rel("Used_for"), Method("Fujisaki-model parameters"))])
pred: [['Fujisaki-model parameters', 'Used_for', 'text input'], ['statistical learning', 'Used_for', 'Fujisaki-model parameters']]
trues: [['text input', 'Used_for', 'Fujisaki-model parameters'], ['statistical learning', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.2975206611570248, 0.288, 0.2926829268292683]
text: In this situation , the general method is to segment the raw corpus automatically using a word list , correct the output sentences by hand , and build a model from the segmented corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('word list')
# Task('segment the raw corpus')
# Material('word list')
# Other_scientific_term('segmented corpus')
# Generic('method')
# Other_scientific_term('segmented corpus')
# Generic('method')
# Other_scientific_term('model')

extract = Extract([Triple(Material("word list"), Rel("Used_for"), Task("segment the raw corpus")), Triple(Material("word list"), Rel("Used_for"), Other_scientific_term("segmented corpus")), Triple(Generic("method"), Rel("Used_for"), Other_scientific_term("segmented corpus")), Triple(Generic("method"), Rel("Used_for"), Other_scientific_term("model"))])
pred: [['word list', 'Used_for', 'segment the raw corpus'], ['word list', 'Used_for', 'segmented corpus'], ['method', 'Used_for', 'segmented corpus'], ['method', 'Used_for', 'model']]
trues: [['method', 'Used_for', 'raw corpus'], ['word list', 'Used_for', 'method'], ['segmented corpus', 'Used_for', 'model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.288, 0.28125, 0.2845849802371541]
text: We demonstrate our approach with multiple PTZ camera sequences in typical outdoor surveillance settings and show a comparison with state-of-the-art approaches .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('PTZ camera sequences')
# Generic('approach')
# Generic('approach')
# Generic('state-of-the-art approaches')

extract = Extract([Triple(Material("PTZ camera sequences"), Rel("Used_for"), Generic("approach")), Triple(Generic("approach"), Rel("Compare"), Generic("state-of-the-art approaches"))])
pred: [['PTZ camera sequences', 'Used_for', 'approach'], ['approach', 'Compare', 'state-of-the-art approaches']]
trues: [['approach', 'Used_for', 'outdoor surveillance settings'], ['approach', 'Compare', 'state-of-the-art approaches'], ['multiple PTZ camera sequences', 'Used_for', 'approach']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.29133858267716534, 0.2824427480916031, 0.2868217054263566]
text: In order to build robust automatic abstracting systems , there is a need for better training resources than are currently available .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('training resources')
# Method('automatic abstracting systems')

extract = Extract([Triple(Material("training resources"), Rel("Used_for"), Method("automatic abstracting systems"))])
pred: [['training resources', 'Used_for', 'automatic abstracting systems']]
trues: [['training resources', 'Used_for', 'automatic abstracting systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.296875, 0.2878787878787879, 0.2923076923076923]
text: Our experiments clearly indicate the potential of this dynamic representation for complete cursive handwriting recognition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('dynamic representation')
# Task('complete cursive handwriting recognition')

extract = Extract([Triple(Method("dynamic representation"), Rel("Used_for"), Task("complete cursive handwriting recognition"))])
pred: [['dynamic representation', 'Used_for', 'complete cursive handwriting recognition']]
trues: [['dynamic representation', 'Used_for', 'cursive handwriting recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29457364341085274, 0.2857142857142857, 0.29007633587786263]
text: Both classifiers perform the best when conversational context and utterance features are combined with speaker 's gaze information .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('conversational context')
# Other_scientific_term('utterance features')
# Other_scientific_term('conversational context')
# Generic('classifiers')
# Other_scientific_term('utterance features')
# Generic('classifiers')

extract = Extract([Triple(Other_scientific_term("conversational context"), Rel("Conjunction"), Other_scientific_term("utterance features")), Triple(Other_scientific_term("conversational context"), Rel("Used_for"), Generic("classifiers")), Triple(Other_scientific_term("utterance features"), Rel("Used_for"), Generic("classifiers"))])
pred: [['conversational context', 'Conjunction', 'utterance features'], ['conversational context', 'Used_for', 'classifiers'], ['utterance features', 'Used_for', 'classifiers']]
trues: [['conversational context', 'Used_for', 'classifiers'], ['conversational context', 'Conjunction', 'utterance features'], ['utterance features', 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Conjunction', 'utterance features']]
metrics_sample: [1.0, 0.6, 0.7499999999999999]
metrics_current: [0.3106060606060606, 0.2971014492753623, 0.30370370370370375]
text: This model was shown to be more appropriate for blind separation of natural speech signals .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('blind separation of natural speech signals')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("blind separation of natural speech signals"))])
pred: [['model', 'Used_for', 'blind separation of natural speech signals']]
trues: [['model', 'Used_for', 'blind separation of natural speech signals .']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3082706766917293, 0.2949640287769784, 0.3014705882352941]
text: We propose a convex problem to incorporate side information in robust PCA and show that the low rank matrix can be exactly recovered via the proposed method under certain conditions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('convex problem')
# Task('robust PCA')

extract = Extract([Triple(Task("convex problem"), Rel("Used_for"), Task("robust PCA"))])
pred: [['convex problem', 'Used_for', 'robust PCA']]
trues: [['convex problem', 'Used_for', 'side information'], ['side information', 'Part_of', 'robust PCA'], ['method', 'Used_for', 'low rank matrix']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30597014925373134, 0.2887323943661972, 0.29710144927536236]
text: Finally , we show how the estimation of the tensors from point correspondences is achieved through factorization , and discuss the estimation from line correspondences .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('estimation')
# Other_scientific_term('tensors')
# Method('factorization')
# Generic('estimation')

extract = Extract([Triple(Generic("estimation"), Rel("Used_for"), Other_scientific_term("tensors")), Triple(Method("factorization"), Rel("Used_for"), Generic("estimation"))])
pred: [['estimation', 'Used_for', 'tensors'], ['factorization', 'Used_for', 'estimation']]
trues: [['point correspondences', 'Used_for', 'estimation of the tensors'], ['factorization', 'Used_for', 'tensors'], ['line correspondences', 'Used_for', 'estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3014705882352941, 0.2827586206896552, 0.29181494661921714]
text: The formalism 's intended usage is to relate expressions of natural languages to their associated semantics represented in a logical form language , or to their translates in another natural language ; in summary , we intend it to allow TAGs to be used beyond their role in syntax proper .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('TAGs')
# Other_scientific_term('syntax proper')
# Method('TAGs')
# Other_scientific_term('semantics')
# Method('TAGs')
# Other_scientific_term('natural languages')

extract = Extract([Triple(Method("TAGs"), Rel("Used_for"), Other_scientific_term("syntax proper")), Triple(Method("TAGs"), Rel("Used_for"), Other_scientific_term("semantics")), Triple(Method("TAGs"), Rel("Used_for"), Other_scientific_term("natural languages"))])
pred: [['TAGs', 'Used_for', 'syntax proper'], ['TAGs', 'Used_for', 'semantics'], ['TAGs', 'Used_for', 'natural languages']]
trues: [['logical form language', 'Used_for', 'semantics'], ['TAGs', 'Used_for', 'syntax proper']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.302158273381295, 0.2857142857142857, 0.2937062937062937]
text: This paper presents necessary and sufficient conditions for the use of demonstrative expressions in English and discusses implications for current discourse processing algorithms .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('demonstrative expressions')
# Method('discourse processing algorithms')

extract = Extract([Triple(Other_scientific_term("demonstrative expressions"), Rel("Used_for"), Method("discourse processing algorithms"))])
pred: [['demonstrative expressions', 'Used_for', 'discourse processing algorithms']]
trues: [['demonstrative expressions', 'Feature_of', 'English'], ['implications', 'Used_for', 'discourse processing algorithms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3, 0.28187919463087246, 0.2906574394463668]
text: We discuss several applications of the result to the problem of distributional approximation of probabilistic context-free grammars by means of probabilistic finite automata .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('probabilistic finite automata')
# Method('probabilistic context-free grammars')
# Method('probabilistic finite automata')
# Task('distributional approximation')

extract = Extract([Triple(Method("probabilistic finite automata"), Rel("Used_for"), Method("probabilistic context-free grammars")), Triple(Method("probabilistic finite automata"), Rel("Used_for"), Task("distributional approximation"))])
pred: [['probabilistic finite automata', 'Used_for', 'probabilistic context-free grammars'], ['probabilistic finite automata', 'Used_for', 'distributional approximation']]
trues: [['distributional approximation', 'Feature_of', 'probabilistic context-free grammars'], ['probabilistic finite automata', 'Used_for', 'distributional approximation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3028169014084507, 0.2847682119205298, 0.2935153583617748]
text: A bio-inspired model for an analog programmable array processor ( APAP ) , based on studies on the vertebrate retina , has permitted the realization of complex programmable spatio-temporal dynamics in VLSI .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('bio-inspired model')
# Method('analog programmable array processor ( APAP )')
# Method('bio-inspired model')
# Other_scientific_term('spatio-temporal dynamics')
# Other_scientific_term('spatio-temporal dynamics')
# Material('VLSI')

extract = Extract([Triple(Method("bio-inspired model"), Rel("Used_for"), Method("analog programmable array processor ( APAP )")), Triple(Method("bio-inspired model"), Rel("Used_for"), Other_scientific_term("spatio-temporal dynamics")), Triple(Other_scientific_term("spatio-temporal dynamics"), Rel("Feature_of"), Material("VLSI"))])
pred: [['bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'], ['bio-inspired model', 'Used_for', 'spatio-temporal dynamics'], ['spatio-temporal dynamics', 'Feature_of', 'VLSI']]
trues: [['bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'], ['bio-inspired model', 'Used_for', 'complex programmable spatio-temporal dynamics'], ['vertebrate retina', 'Used_for', 'bio-inspired model'], ['complex programmable spatio-temporal dynamics', 'Feature_of', 'VLSI']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.30344827586206896, 0.2838709677419355, 0.29333333333333333]
text: Our results show that MBR decoding can be used to tune statistical MT performance for specific loss functions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MBR decoding')
# Method('statistical MT')
# Metric('loss functions')
# Method('MBR decoding')

extract = Extract([Triple(Method("MBR decoding"), Rel("Used_for"), Method("statistical MT")), Triple(Metric("loss functions"), Rel("Used_for"), Method("MBR decoding"))])
pred: [['MBR decoding', 'Used_for', 'statistical MT'], ['loss functions', 'Used_for', 'MBR decoding']]
trues: [['MBR decoding', 'Used_for', 'statistical MT'], ['MBR decoding', 'Used_for', 'loss functions']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30612244897959184, 0.28662420382165604, 0.29605263157894735]
text: To recover from these inevitable tracking failures , we consider object detection as a global optimization problem and solve it via Adaptive Simulated Annealing ( ASA ) , a method that avoids becoming trapped at local modes and is much faster than exhaustive search .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Task('global optimization problem')
# Task('object detection')
# Method('Adaptive Simulated Annealing ( ASA )')
# Task('object detection')
# Method('Adaptive Simulated Annealing ( ASA )')
# Method('exhaustive search')

extract = Extract([Triple(Task("global optimization problem"), Rel("Used_for"), Task("object detection")), Triple(Method("Adaptive Simulated Annealing ( ASA )"), Rel("Used_for"), Task("object detection")), Triple(Method("Adaptive Simulated Annealing ( ASA )"), Rel("Compare"), Method("exhaustive search"))])
pred: [['global optimization problem', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Compare', 'exhaustive search']]
trues: [['global optimization problem', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Used_for', 'it'], ['method', 'Compare', 'exhaustive search']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.30666666666666664, 0.2875, 0.2967741935483871]
text: We describe how to estimate these indicators and how to integrate them into a retrieval approach based on language models .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Generic('indicators')
# Method('retrieval approach')
# Method('language models')
# Method('retrieval approach')

extract = Extract([Triple(Generic("indicators"), Rel("Used_for"), Method("retrieval approach")), Triple(Method("language models"), Rel("Part_of"), Method("retrieval approach"))])
pred: [['indicators', 'Used_for', 'retrieval approach'], ['language models', 'Part_of', 'retrieval approach']]
trues: [['them', 'Part_of', 'retrieval approach'], ['language models', 'Used_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3026315789473684, 0.2839506172839506, 0.2929936305732484]
text: Contrary to most of the existing mixture of viewpoints models , our model establishes explicit correspondences of parts across different viewpoints of the object class .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Method('mixture of viewpoints models')
# Generic('model')
# Other_scientific_term('explicit correspondences of parts')

extract = Extract([Triple(Generic("model"), Rel("Compare"), Method("mixture of viewpoints models")), Triple(Generic("model"), Rel("Used_for"), Other_scientific_term("explicit correspondences of parts"))])
pred: [['model', 'Compare', 'mixture of viewpoints models'], ['model', 'Used_for', 'explicit correspondences of parts']]
trues: [['model', 'Compare', 'mixture of viewpoints models']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3051948051948052, 0.2883435582822086, 0.2965299684542587]
text: However , they provide no guarantee of being more efficient than exhaustive search .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('they')
# Method('exhaustive search')

extract = Extract([Triple(Generic("they"), Rel("Compare"), Method("exhaustive search"))])
pred: [['they', 'Compare', 'exhaustive search']]
trues: [['they', 'Compare', 'exhaustive search']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3096774193548387, 0.2926829268292683, 0.30094043887147337]
text: They improve the reconstruction results and enforce their consistency with a priori knowledge about object shape .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('They')
# Task('reconstruction')
# Other_scientific_term('prior a priori knowledge')
# Task('reconstruction')

extract = Extract([Triple(Generic("They"), Rel("Used_for"), Task("reconstruction")), Triple(Other_scientific_term("prior a priori knowledge"), Rel("Used_for"), Task("reconstruction"))])
pred: [['They', 'Used_for', 'reconstruction'], ['prior a priori knowledge', 'Used_for', 'reconstruction']]
trues: [['They', 'Used_for', 'reconstruction'], ['object shape', 'Feature_of', 'priori knowledge']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.31210191082802546, 0.29518072289156627, 0.30340557275541796]
text: In addition , we conduct synthetic experiments as well as a real application on noisy image classification to show that our method also improves the performance in practice by exploiting side information .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('side information')
# Generic('method')

extract = Extract([Triple(Other_scientific_term("side information"), Rel("Used_for"), Generic("method"))])
pred: [['side information', 'Used_for', 'method']]
trues: [['noisy image classification', 'Evaluate_for', 'method'], ['side information', 'Used_for', 'method']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.31645569620253167, 0.2976190476190476, 0.3067484662576688]
text: This paper proposes a generic mathematical formalism for the combination of various structures : strings , trees , dags , graphs , and products of them .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('mathematical formalism')
# Other_scientific_term('structures')

extract = Extract([Triple(Generic("mathematical formalism"), Rel("Used_for"), Other_scientific_term("structures"))])
pred: [['mathematical formalism', 'Used_for', 'structures']]
trues: [['strings', 'Hyponym_of', 'structures'], ['strings', 'Conjunction', 'trees'], ['trees', 'Hyponym_of', 'structures'], ['trees', 'Conjunction', 'dags'], ['dags', 'Hyponym_of', 'structures'], ['dags', 'Conjunction', 'graphs'], ['graphs', 'Hyponym_of', 'structures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31446540880503143, 0.2857142857142857, 0.29940119760479034]
text: In addition , we improve the learning by a metric weight constraint , so that the learned metric has a better generalization ability .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Other_scientific_term('metric weight constraint')
# Method('learning')
# Metric('generalization ability')
# Method('learned metric')

extract = Extract([Triple(Other_scientific_term("metric weight constraint"), Rel("Used_for"), Method("learning")), Triple(Metric("generalization ability"), Rel("Evaluate_for"), Method("learned metric"))])
pred: [['metric weight constraint', 'Used_for', 'learning'], ['generalization ability', 'Evaluate_for', 'learned metric']]
trues: [['metric weight constraint', 'Used_for', 'learning'], ['generalization ability', 'Feature_of', 'learned metric']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3167701863354037, 0.288135593220339, 0.3017751479289941]
text: We report experiments conducted on a multilingual corpus to estimate the number of analogies among the sentences that it contains .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Material('multilingual corpus')
# Other_scientific_term('analogies')

extract = Extract([Triple(Material("multilingual corpus"), Rel("Feature_of"), Other_scientific_term("analogies"))])
pred: [['multilingual corpus', 'Feature_of', 'analogies']]
trues: [['multilingual corpus', 'Evaluate_for', 'analogies']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3148148148148148, 0.28651685393258425, 0.3]
text: A central goal of this research is to merge approaches from pivot MT , interactive MT , and multilingual text authoring .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Task('pivot MT')
# Task('interactive MT')
# Task('interactive MT')
# Task('multilingual text authoring')

extract = Extract([Triple(Task("pivot MT"), Rel("Conjunction"), Task("interactive MT")), Triple(Task("interactive MT"), Rel("Conjunction"), Task("multilingual text authoring"))])
pred: [['pivot MT', 'Conjunction', 'interactive MT'], ['interactive MT', 'Conjunction', 'multilingual text authoring']]
trues: [['pivot MT', 'Conjunction', 'interactive MT'], ['interactive MT', 'Conjunction', 'multilingual text authoring']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3231707317073171, 0.29444444444444445, 0.3081395348837209]
text: It also shows that our method significantly outperforms the previous two dependency tree kernels on the 5 ACE relation major types .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('method')
# Method('dependency tree kernels')
# Metric('ACE relation major types')
# Generic('method')
# Metric('ACE relation major types')
# Method('dependency tree kernels')

extract = Extract([Triple(Generic("method"), Rel("Compare"), Method("dependency tree kernels")), Triple(Metric("ACE relation major types"), Rel("Evaluate_for"), Generic("method")), Triple(Metric("ACE relation major types"), Rel("Evaluate_for"), Method("dependency tree kernels"))])
pred: [['method', 'Compare', 'dependency tree kernels'], ['ACE relation major types', 'Evaluate_for', 'method'], ['ACE relation major types', 'Evaluate_for', 'dependency tree kernels']]
trues: [['method', 'Compare', 'dependency tree kernels']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.32335329341317365, 0.2983425414364641, 0.3103448275862069]
text: In this paper , we present our work on the detection of question-answer pairs in an email conversation for the task of email summarization .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('detection of question-answer pairs')
# Task('email summarization')
# Material('email conversation')
# Task('detection of question-answer pairs')

extract = Extract([Triple(Task("detection of question-answer pairs"), Rel("Used_for"), Task("email summarization")), Triple(Material("email conversation"), Rel("Used_for"), Task("detection of question-answer pairs"))])
pred: [['detection of question-answer pairs', 'Used_for', 'email summarization'], ['email conversation', 'Used_for', 'detection of question-answer pairs']]
trues: [['detection of question-answer pairs', 'Used_for', 'email summarization'], ['email conversation', 'Used_for', 'detection of question-answer pairs']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33136094674556216, 0.30601092896174864, 0.3181818181818182]
text: This paper presents a machine learning approach to bare slice disambiguation in dialogue .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('machine learning approach')
# Task('bare slice disambiguation')
# Material('dialogue')
# Task('bare slice disambiguation')

extract = Extract([Triple(Method("machine learning approach"), Rel("Used_for"), Task("bare slice disambiguation")), Triple(Material("dialogue"), Rel("Used_for"), Task("bare slice disambiguation"))])
pred: [['machine learning approach', 'Used_for', 'bare slice disambiguation'], ['dialogue', 'Used_for', 'bare slice disambiguation']]
trues: [['machine learning approach', 'Used_for', 'bare slice disambiguation'], ['dialogue', 'Used_for', 'bare slice disambiguation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3391812865497076, 0.31351351351351353, 0.32584269662921345]
text: We present a scanning method that recovers dense sub-pixel camera-projector correspondence without requiring any photometric calibration nor preliminary knowledge of their relative geometry .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('scanning method')
# Other_scientific_term('dense sub-pixel camera-projector correspondence')
# Other_scientific_term('photometric calibration')
# Method('scanning method')
# Other_scientific_term('photometric calibration')
# Other_scientific_term('preliminary knowledge of their relative geometry')
# Other_scientific_term('preliminary knowledge of their relative geometry')
# Method('scanning method')

extract = Extract([Triple(Method("scanning method"), Rel("Used_for"), Other_scientific_term("dense sub-pixel camera-projector correspondence")), Triple(Other_scientific_term("photometric calibration"), Rel("Used_for"), Method("scanning method")), Triple(Other_scientific_term("photometric calibration"), Rel("Conjunction"), Other_scientific_term("preliminary knowledge of their relative geometry")), Triple(Other_scientific_term("preliminary knowledge of their relative geometry"), Rel("Used_for"), Method("scanning method"))])
pred: [['scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence'], ['photometric calibration', 'Used_for', 'scanning method'], ['photometric calibration', 'Conjunction', 'preliminary knowledge of their relative geometry'], ['preliminary knowledge of their relative geometry', 'Used_for', 'scanning method']]
trues: [['scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.33714285714285713, 0.3172043010752688, 0.3268698060941828]
text: Our goal is to learn a Mahalanobis distance by minimizing a loss defined on the weighted sum of the precision at different ranks .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('weighted sum of the precision at different ranks')
# Method('Mahalanobis distance')

extract = Extract([Triple(Other_scientific_term("weighted sum of the precision at different ranks"), Rel("Used_for"), Method("Mahalanobis distance"))])
pred: [['weighted sum of the precision at different ranks', 'Used_for', 'Mahalanobis distance']]
trues: [['loss', 'Used_for', 'Mahalanobis distance'], ['weighted sum', 'Feature_of', 'precision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3352272727272727, 0.31382978723404253, 0.3241758241758242]
text: We propose a corpus-based method ( Biber ,1993 ; Nagao ,1993 ; Smadja ,1993 ) which generates Noun Classifier Associations ( NCA ) to overcome the problems in classifier assignment and semantic construction of noun phrase .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('corpus-based method')
# Task('classifier assignment')
# Method('corpus-based method')
# Task('semantic construction of noun phrase')
# Other_scientific_term('Noun Classifier Associations ( NCA )')
# Method('corpus-based method')

extract = Extract([Triple(Method("corpus-based method"), Rel("Used_for"), Task("classifier assignment")), Triple(Method("corpus-based method"), Rel("Used_for"), Task("semantic construction of noun phrase")), Triple(Other_scientific_term("Noun Classifier Associations ( NCA )"), Rel("Used_for"), Method("corpus-based method"))])
pred: [['corpus-based method', 'Used_for', 'classifier assignment'], ['corpus-based method', 'Used_for', 'semantic construction of noun phrase'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'corpus-based method']]
trues: [['corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'], ['corpus-based method', 'Used_for', 'classifier assignment'], ['corpus-based method', 'Used_for', 'semantic construction of noun phrase'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'classifier assignment'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'semantic construction of noun phrase'], ['classifier assignment', 'Conjunction', 'semantic construction of noun phrase']]
metrics_sample: [0.6666666666666666, 0.3333333333333333, 0.4444444444444444]
metrics_current: [0.3407821229050279, 0.31443298969072164, 0.32707774798927614]
text: Experiments on the TREC Blog track test set show that both groups of credibility indicators significantly improve retrieval effectiveness ; the best performance is achieved when combining them .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('TREC Blog track test set')
# Method('credibility indicators')
# Metric('retrieval effectiveness')
# Method('credibility indicators')
# Metric('retrieval effectiveness')
# Generic('them')
# Generic('them')
# Generic('them')

extract = Extract([Triple(Material("TREC Blog track test set"), Rel("Evaluate_for"), Method("credibility indicators")), Triple(Metric("retrieval effectiveness"), Rel("Evaluate_for"), Method("credibility indicators")), Triple(Metric("retrieval effectiveness"), Rel("Evaluate_for"), Generic("them")), Triple(Generic("them"), Rel("Conjunction"), Generic("them"))])
pred: [['TREC Blog track test set', 'Evaluate_for', 'credibility indicators'], ['retrieval effectiveness', 'Evaluate_for', 'credibility indicators'], ['retrieval effectiveness', 'Evaluate_for', 'them'], ['them', 'Conjunction', 'them']]
trues: [['TREC Blog track test set', 'Evaluate_for', 'credibility indicators'], ['retrieval effectiveness', 'Evaluate_for', 'credibility indicators']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3442622950819672, 0.32142857142857145, 0.3324538258575198]
text: We show that various features based on the structure of email-threads can be used to improve upon lexical similarity of discourse segments for question-answer pairing .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('structure of email-threads')
# Other_scientific_term('features')
# Other_scientific_term('features')
# Metric('lexical similarity of discourse segments')
# Metric('lexical similarity of discourse segments')
# Task('question-answer pairing')

extract = Extract([Triple(Other_scientific_term("structure of email-threads"), Rel("Used_for"), Other_scientific_term("features")), Triple(Other_scientific_term("features"), Rel("Used_for"), Metric("lexical similarity of discourse segments")), Triple(Metric("lexical similarity of discourse segments"), Rel("Used_for"), Task("question-answer pairing"))])
pred: [['structure of email-threads', 'Used_for', 'features'], ['features', 'Used_for', 'lexical similarity of discourse segments'], ['lexical similarity of discourse segments', 'Used_for', 'question-answer pairing']]
trues: [['features', 'Used_for', 'lexical similarity'], ['features', 'Used_for', 'question-answer pairing'], ['structure of email-threads', 'Used_for', 'features'], ['lexical similarity', 'Feature_of', 'discourse segments']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.34408602150537637, 0.32, 0.3316062176165804]
text: It has also been studied in the framework of Japanese information extraction ( [ 3 ] ) in recent years .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('It')
# Task('Japanese information extraction')

extract = Extract([Triple(Generic("It"), Rel("Used_for"), Task("Japanese information extraction"))])
pred: [['It', 'Used_for', 'Japanese information extraction']]
trues: [['Japanese information extraction', 'Used_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3422459893048128, 0.31840796019900497, 0.32989690721649484]
text: To improve topical blog post retrieval we incorporate textual credibility indicators in the retrieval process .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('textual credibility indicators')
# Task('topical blog post retrieval')
# Other_scientific_term('textual credibility indicators')
# Task('retrieval process')

extract = Extract([Triple(Other_scientific_term("textual credibility indicators"), Rel("Used_for"), Task("topical blog post retrieval")), Triple(Other_scientific_term("textual credibility indicators"), Rel("Part_of"), Task("retrieval process"))])
pred: [['textual credibility indicators', 'Used_for', 'topical blog post retrieval'], ['textual credibility indicators', 'Part_of', 'retrieval process']]
trues: [['textual credibility indicators', 'Used_for', 'topical blog post retrieval'], ['textual credibility indicators', 'Part_of', 'retrieval process']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3492063492063492, 0.3251231527093596, 0.336734693877551]
text: We propose to incorporate a priori geometric constraints in a 3 -- D stereo reconstruction scheme to cope with the many cases where image information alone is not sufficient to accurately recover 3 -- D shape .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('priori geometric constraints')
# Method('3 -- D stereo reconstruction scheme')
# Other_scientific_term('priori geometric constraints')
# Task('3 -- D shape')

extract = Extract([Triple(Other_scientific_term("priori geometric constraints"), Rel("Part_of"), Method("3 -- D stereo reconstruction scheme")), Triple(Other_scientific_term("priori geometric constraints"), Rel("Used_for"), Task("3 -- D shape"))])
pred: [['priori geometric constraints', 'Part_of', '3 -- D stereo reconstruction scheme'], ['priori geometric constraints', 'Used_for', '3 -- D shape']]
trues: [['priori geometric constraints', 'Part_of', '3 -- D stereo reconstruction scheme'], ['image information', 'Used_for', '3 -- D shape']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3507853403141361, 0.32682926829268294, 0.33838383838383834]
text: It is demonstrated qualitatively and quantitatively on a dataset of scenes and is suitable for current work in unsupervised object discovery without top-down knowledge .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('dataset')
# Task('unsupervised object discovery')
# Other_scientific_term('top-down knowledge')
# Task('unsupervised object discovery')

extract = Extract([Triple(Generic("dataset"), Rel("Used_for"), Task("unsupervised object discovery")), Triple(Other_scientific_term("top-down knowledge"), Rel("Used_for"), Task("unsupervised object discovery"))])
pred: [['dataset', 'Used_for', 'unsupervised object discovery'], ['top-down knowledge', 'Used_for', 'unsupervised object discovery']]
trues: [['It', 'Used_for', 'unsupervised object discovery'], ['dataset of scenes', 'Evaluate_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3471502590673575, 0.32367149758454106, 0.335]
text: We also address a more general problem of matrix rank degeneration & non-isolated minima in the low-rank matrix optimization by using new type of regularizer which approximately enforces the or-thonormality of the learned matrix very efficiently .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('regularizer')
# Task('low-rank matrix optimization')
# Other_scientific_term('ortho-normality')
# Other_scientific_term('matrix')

extract = Extract([Triple(Other_scientific_term("regularizer"), Rel("Used_for"), Task("low-rank matrix optimization")), Triple(Other_scientific_term("ortho-normality"), Rel("Used_for"), Other_scientific_term("matrix"))])
pred: [['regularizer', 'Used_for', 'low-rank matrix optimization'], ['ortho-normality', 'Used_for', 'matrix']]
trues: [['matrix rank degeneration', 'Conjunction', 'non-isolated minima'], ['matrix rank degeneration', 'Feature_of', 'low-rank matrix optimization'], ['non-isolated minima', 'Feature_of', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'or-thonormality'], ['or-thonormality', 'Feature_of', 'learned matrix']]
metrics_sample: [0.5, 0.16666666666666666, 0.25]
metrics_current: [0.3487179487179487, 0.3192488262910798, 0.3333333333333333]
text: Our morphological analyzer has done all the necessary work for the recognition and classification of proper names , numerical and temporal expressions , i.e. Named Entity ( NE ) items in the Japanese text .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('morphological analyzer')
# Task('recognition and classification of proper names')
# Task('recognition and classification of proper names')
# Material('Japanese text')
# Task('recognition and classification of proper names')
# Other_scientific_term('numerical and temporal expressions')
# Other_scientific_term('numerical and temporal expressions')
# Material('Japanese text')
# Other_scientific_term('numerical and temporal expressions')
# Other_scientific_term('Named Entity ( NE ) items')
# Other_scientific_term('Named Entity ( NE ) items')
# Material('Japanese text')

extract = Extract([Triple(Method("morphological analyzer"), Rel("Used_for"), Task("recognition and classification of proper names")), Triple(Task("recognition and classification of proper names"), Rel("Hyponym_of"), Material("Japanese text")), Triple(Task("recognition and classification of proper names"), Rel("Conjunction"), Other_scientific_term("numerical and temporal expressions")), Triple(Other_scientific_term("numerical and temporal expressions"), Rel("Hyponym_of"), Material("Japanese text")), Triple(Other_scientific_term("numerical and temporal expressions"), Rel("Conjunction"), Other_scientific_term("Named Entity ( NE ) items")), Triple(Other_scientific_term("Named Entity ( NE ) items"), Rel("Hyponym_of"), Material("Japanese text"))])
pred: [['morphological analyzer', 'Used_for', 'recognition and classification of proper names'], ['recognition and classification of proper names', 'Hyponym_of', 'Japanese text'], ['recognition and classification of proper names', 'Conjunction', 'numerical and temporal expressions'], ['numerical and temporal expressions', 'Hyponym_of', 'Japanese text'], ['numerical and temporal expressions', 'Conjunction', 'Named Entity ( NE ) items'], ['Named Entity ( NE ) items', 'Hyponym_of', 'Japanese text']]
trues: [['morphological analyzer', 'Used_for', 'recognition and classification of proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Hyponym_of', 'proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Part_of', 'Japanese text']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3383084577114428, 0.3148148148148148, 0.3261390887290168]
text: In this paper we propose a logical formalism , which , among other things , is suitable for representing determiners without forcing a particular interpretation when their meaning is still not clear .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('logical formalism')
# Other_scientific_term('determiners')

extract = Extract([Triple(Method("logical formalism"), Rel("Used_for"), Other_scientific_term("determiners"))])
pred: [['logical formalism', 'Used_for', 'determiners']]
trues: [['logical formalism', 'Used_for', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3415841584158416, 0.31797235023041476, 0.32935560859188545]
text: We use gray-level band-pass white noise patterns that increase robustness to indirect lighting and scene discontinuities .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('gray-level band-pass white noise patterns')
# Other_scientific_term('robustness')
# Other_scientific_term('gray-level band-pass white noise patterns')
# Other_scientific_term('indirect lighting')
# Other_scientific_term('indirect lighting')
# Other_scientific_term('scene discontinuities')

extract = Extract([Triple(Other_scientific_term("gray-level band-pass white noise patterns"), Rel("Used_for"), Other_scientific_term("robustness")), Triple(Other_scientific_term("gray-level band-pass white noise patterns"), Rel("Used_for"), Other_scientific_term("indirect lighting")), Triple(Other_scientific_term("indirect lighting"), Rel("Conjunction"), Other_scientific_term("scene discontinuities"))])
pred: [['gray-level band-pass white noise patterns', 'Used_for', 'robustness'], ['gray-level band-pass white noise patterns', 'Used_for', 'indirect lighting'], ['indirect lighting', 'Conjunction', 'scene discontinuities']]
trues: [['robustness', 'Evaluate_for', 'gray-level band-pass white noise patterns'], ['indirect lighting', 'Feature_of', 'robustness'], ['indirect lighting', 'Conjunction', 'scene discontinuities'], ['scene discontinuities', 'Feature_of', 'robustness']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.34146341463414637, 0.3167420814479638, 0.32863849765258213]
text: Recognition of proper nouns in Japanese text has been studied as a part of the more general problem of morphological analysis in Japanese text processing ( [ 1 ] [ 2 ] ) .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Task('Recognition of proper nouns in Japanese text')
# Task('morphological analysis in Japanese text processing')

extract = Extract([Triple(Task("Recognition of proper nouns in Japanese text"), Rel("Part_of"), Task("morphological analysis in Japanese text processing"))])
pred: [['Recognition of proper nouns in Japanese text', 'Part_of', 'morphological analysis in Japanese text processing']]
trues: [['Recognition of proper nouns', 'Part_of', 'morphological analysis'], ['proper nouns', 'Part_of', 'Japanese text'], ['morphological analysis', 'Used_for', 'Japanese text processing']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33980582524271846, 0.3125, 0.3255813953488372]
text: This paper considers the problem of reconstructing the motion of a 3D articulated tree from 2D point correspondences subject to some temporal prior .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('2D point correspondences')
# Task('reconstructing the motion of a 3D articulated tree')

extract = Extract([Triple(Material("2D point correspondences"), Rel("Used_for"), Task("reconstructing the motion of a 3D articulated tree"))])
pred: [['2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree']]
trues: [['2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34299516908212563, 0.31555555555555553, 0.3287037037037037]
text: Thus , in this paper , we study the problem of robust PCA with side information , where both prior structure and features of entities are exploited for recovery .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('robust PCA with side information')
# Generic('problem')
# Other_scientific_term('prior structure')
# Task('robust PCA with side information')

extract = Extract([Triple(Task("robust PCA with side information"), Rel("Used_for"), Generic("problem")), Triple(Other_scientific_term("prior structure"), Rel("Used_for"), Task("robust PCA with side information"))])
pred: [['robust PCA with side information', 'Used_for', 'problem'], ['prior structure', 'Used_for', 'robust PCA with side information']]
trues: [['side information', 'Used_for', 'robust PCA'], ['prior structure', 'Conjunction', 'features of entities'], ['prior structure', 'Used_for', 'recovery'], ['features of entities', 'Used_for', 'recovery']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3397129186602871, 0.31004366812227074, 0.3242009132420091]
text: We test our algorithm on the detection task and the viewpoint classification task by using '' car '' category from both the Savarese et al. 2007 and PASCAL VOC 2006 datasets .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('algorithm')
# Task('detection task')
# Generic('algorithm')
# Task('viewpoint classification task')
# Material(''' car '' category')
# Generic('datasets')
# Material('Savarese et al. 2007 and PASCAL VOC 2006 datasets')
# Material(''' car '' category')
# Material('Savarese et al. 2007 and PASCAL VOC 2006 datasets')
# Generic('datasets')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Task("detection task")), Triple(Generic("algorithm"), Rel("Used_for"), Task("viewpoint classification task")), Triple(Material("'' car '' category"), Rel("Hyponym_of"), Generic("datasets")), Triple(Material("Savarese et al. 2007 and PASCAL VOC 2006 datasets"), Rel("Conjunction"), Material("'' car '' category")), Triple(Material("Savarese et al. 2007 and PASCAL VOC 2006 datasets"), Rel("Hyponym_of"), Generic("datasets"))])
pred: [['algorithm', 'Used_for', 'detection task'], ['algorithm', 'Used_for', 'viewpoint classification task'], ["'' car '' category", 'Hyponym_of', 'datasets'], ['Savarese et al. 2007 and PASCAL VOC 2006 datasets', 'Conjunction', "'' car '' category"], ['Savarese et al. 2007 and PASCAL VOC 2006 datasets', 'Hyponym_of', 'datasets']]
trues: [['algorithm', 'Used_for', 'detection task'], ['algorithm', 'Used_for', 'viewpoint classification task'], ['detection task', 'Conjunction', 'viewpoint classification task'], ['PASCAL VOC 2006 datasets', 'Evaluate_for', 'algorithm']]
metrics_sample: [0.4, 0.5, 0.4444444444444445]
metrics_current: [0.3411214953271028, 0.3133047210300429, 0.32662192393736017]
text: This paper describes a novel system for acquiring adjectival subcategorization frames ( scfs ) and associated frequency information from English corpus data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('system')
# Task('acquiring adjectival subcategorization frames ( scfs ) and associated frequency information')
# Material('English corpus data')
# Generic('system')

extract = Extract([Triple(Generic("system"), Rel("Used_for"), Task("acquiring adjectival subcategorization frames ( scfs ) and associated frequency information")), Triple(Material("English corpus data"), Rel("Used_for"), Generic("system"))])
pred: [['system', 'Used_for', 'acquiring adjectival subcategorization frames ( scfs ) and associated frequency information'], ['English corpus data', 'Used_for', 'system']]
trues: [['system', 'Used_for', 'acquiring adjectival subcategorization frames ( scfs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33796296296296297, 0.31196581196581197, 0.3244444444444444]
text: We have previously introduced a statistical model describing the generating process of speech F0 contours , based on the discrete-time version of the Fujisaki model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('statistical model')
# Other_scientific_term('speech F0 contours')
# Method('discrete-time version of the Fujisaki model')
# Method('statistical model')

extract = Extract([Triple(Method("statistical model"), Rel("Used_for"), Other_scientific_term("speech F0 contours")), Triple(Method("discrete-time version of the Fujisaki model"), Rel("Used_for"), Method("statistical model"))])
pred: [['statistical model', 'Used_for', 'speech F0 contours'], ['discrete-time version of the Fujisaki model', 'Used_for', 'statistical model']]
trues: [['statistical model', 'Used_for', 'speech F0 contours'], ['Fujisaki model', 'Used_for', 'statistical model']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3394495412844037, 0.3135593220338983, 0.32599118942731276]
text: We show that there is a closed-form ( analytical ) solution for one part of the Kullback-Leibler distance , viz the cross-entropy .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Metric('cross-entropy')
# Metric('Kullback-Leibler distance')

extract = Extract([Triple(Metric("cross-entropy"), Rel("Part_of"), Metric("Kullback-Leibler distance"))])
pred: [['cross-entropy', 'Part_of', 'Kullback-Leibler distance']]
trues: [['closed-form ( analytical ) solution', 'Used_for', 'Kullback-Leibler distance'], ['closed-form ( analytical ) solution', 'Used_for', 'cross-entropy'], ['cross-entropy', 'Part_of', 'Kullback-Leibler distance']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.3424657534246575, 0.3138075313807531, 0.32751091703056767]
text: We investigate the problem of learning to predict moves in the board game of Go from game records of expert players .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('game records of expert players')
# Task('learning to predict moves in the board game of Go')
# Material('game records of expert players')
# Task('learning to predict moves in the board game of Go')

extract = Extract([Triple(Material("game records of expert players"), Rel("Used_for"), Task("learning to predict moves in the board game of Go")), Triple(Material("game records of expert players"), Rel("Used_for"), Task("learning to predict moves in the board game of Go"))])
pred: [['game records of expert players', 'Used_for', 'learning to predict moves in the board game of Go'], ['game records of expert players', 'Used_for', 'learning to predict moves in the board game of Go']]
trues: [['game records of expert players', 'Used_for', 'board game of Go']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3409090909090909, 0.3125, 0.32608695652173914]
text: Finally , a novel feature weighting and selection function is presented , which yields superior feature vectors and better word similarity performance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('feature weighting and selection function')
# Other_scientific_term('feature vectors')
# Metric('word similarity')
# Generic('function')

extract = Extract([Triple(Method("feature weighting and selection function"), Rel("Used_for"), Other_scientific_term("feature vectors")), Triple(Metric("word similarity"), Rel("Evaluate_for"), Generic("function"))])
pred: [['feature weighting and selection function', 'Used_for', 'feature vectors'], ['word similarity', 'Evaluate_for', 'function']]
trues: [['feature weighting and selection function', 'Used_for', 'feature vectors'], ['feature weighting and selection function', 'Used_for', 'word similarity'], ['feature vectors', 'Conjunction', 'word similarity']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.34234234234234234, 0.31275720164609055, 0.32688172043010755]
text: We present a novel model-based approach to recover the shapes and the poses of transparent objects from known motion .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('model-based approach')
# Other_scientific_term('shapes and the poses of transparent objects')
# Material('known motion')
# Method('model-based approach')

extract = Extract([Triple(Method("model-based approach"), Rel("Used_for"), Other_scientific_term("shapes and the poses of transparent objects")), Triple(Material("known motion"), Rel("Used_for"), Method("model-based approach"))])
pred: [['model-based approach', 'Used_for', 'shapes and the poses of transparent objects'], ['known motion', 'Used_for', 'model-based approach']]
trues: [['model-based approach', 'Used_for', 'shapes and the poses of transparent objects'], ['known motion', 'Used_for', 'shapes and the poses of transparent objects']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.34375, 0.3142857142857143, 0.3283582089552239]
text: To evaluate our proposed model , we build a large streaming video dataset with annotations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('streaming video dataset')
# Generic('model')

extract = Extract([Triple(Material("streaming video dataset"), Rel("Used_for"), Generic("model"))])
pred: [['streaming video dataset', 'Used_for', 'model']]
trues: [['streaming video dataset', 'Evaluate_for', 'model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3422222222222222, 0.3130081300813008, 0.32696390658174096]
text: In this paper We experimentally evaluate a trainable sentence planner for a spoken dialogue system by eliciting subjective human judgments .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('trainable sentence planner')
# Task('spoken dialogue system')
# Metric('subjective human judgments')
# Method('trainable sentence planner')

extract = Extract([Triple(Method("trainable sentence planner"), Rel("Used_for"), Task("spoken dialogue system")), Triple(Metric("subjective human judgments"), Rel("Evaluate_for"), Method("trainable sentence planner"))])
pred: [['trainable sentence planner', 'Used_for', 'spoken dialogue system'], ['subjective human judgments', 'Evaluate_for', 'trainable sentence planner']]
trues: [['trainable sentence planner', 'Used_for', 'spoken dialogue system'], ['subjective human judgments', 'Evaluate_for', 'trainable sentence planner']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34801762114537443, 0.3185483870967742, 0.3326315789473684]
text: In contrast , object pose estimation using these approaches has received relatively less attention .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approaches')
# Task('object pose estimation')

extract = Extract([Triple(Generic("approaches"), Rel("Used_for"), Task("object pose estimation"))])
pred: [['approaches', 'Used_for', 'object pose estimation']]
trues: [['approaches', 'Used_for', 'object pose estimation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3508771929824561, 0.321285140562249, 0.3354297693920335]
text: This allows us to use our method to act not only as a faster procedure for cascade evaluation , but also as a tool to perform efficient branch-and-bound object detection with nonlinear quality functions , in particular kernel-ized support vector machines .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('method')
# Task('cascade evaluation')
# Generic('method')
# Task('branch-and-bound object detection')
# Generic('method')
# Method('nonlinear quality functions')
# Method('kernel-ized support vector machines')
# Method('nonlinear quality functions')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("cascade evaluation")), Triple(Generic("method"), Rel("Used_for"), Task("branch-and-bound object detection")), Triple(Generic("method"), Rel("Used_for"), Method("nonlinear quality functions")), Triple(Method("kernel-ized support vector machines"), Rel("Hyponym_of"), Method("nonlinear quality functions"))])
pred: [['method', 'Used_for', 'cascade evaluation'], ['method', 'Used_for', 'branch-and-bound object detection'], ['method', 'Used_for', 'nonlinear quality functions'], ['kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions']]
trues: [['method', 'Used_for', 'cascade evaluation'], ['method', 'Used_for', 'branch-and-bound object detection'], ['nonlinear quality functions', 'Used_for', 'branch-and-bound object detection'], ['kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions']]
metrics_sample: [0.75, 0.75, 0.75]
metrics_current: [0.3577586206896552, 0.32806324110671936, 0.34226804123711346]
text: A random modulation scheme produces near-Bernoulli statistics even for highly correlated inputs .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('random modulation scheme')
# Other_scientific_term('Bernoulli statistics')

extract = Extract([Triple(Method("random modulation scheme"), Rel("Used_for"), Other_scientific_term("Bernoulli statistics"))])
pred: [['random modulation scheme', 'Used_for', 'Bernoulli statistics']]
trues: [['random modulation scheme', 'Used_for', 'near-Bernoulli statistics'], ['highly correlated inputs', 'Used_for', 'random modulation scheme']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3562231759656652, 0.3254901960784314, 0.34016393442622944]
text: Recent pool models of the inner hair cell synapse do not reproduce the dead time period after an intense stimulus , so we used visual inspection and automatic speech recognition ( ASR ) to investigate an offset adaptation ( OA ) model proposed by Zhang et al. [ 1 ] .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('pool models')
# Other_scientific_term('inner hair cell synapse')
# Metric('automatic speech recognition ( ASR )')
# Method('offset adaptation ( OA ) model')
# Method('Zhang et al. [ 1 ]')
# Method('offset adaptation ( OA ) model')

extract = Extract([Triple(Method("pool models"), Rel("Used_for"), Other_scientific_term("inner hair cell synapse")), Triple(Metric("automatic speech recognition ( ASR )"), Rel("Evaluate_for"), Method("offset adaptation ( OA ) model")), Triple(Method("Zhang et al. [ 1 ]"), Rel("Used_for"), Method("offset adaptation ( OA ) model"))])
pred: [['pool models', 'Used_for', 'inner hair cell synapse'], ['automatic speech recognition ( ASR )', 'Evaluate_for', 'offset adaptation ( OA ) model'], ['Zhang et al. [ 1 ]', 'Used_for', 'offset adaptation ( OA ) model']]
trues: [['pool models', 'Used_for', 'inner hair cell synapse'], ['visual inspection', 'Conjunction', 'automatic speech recognition ( ASR )'], ['visual inspection', 'Used_for', 'offset adaptation ( OA ) model'], ['automatic speech recognition ( ASR )', 'Used_for', 'offset adaptation ( OA ) model']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.3559322033898305, 0.32432432432432434, 0.3393939393939394]
text: We also show that a good-quality MT system can be built from scratch by starting with a very small parallel corpus ( 100,000 words ) and exploiting a large non-parallel corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('parallel corpus')
# Method('MT system')
# Material('non-parallel corpus')
# Method('MT system')
# Material('non-parallel corpus')
# Method('MT system')

extract = Extract([Triple(Material("parallel corpus"), Rel("Used_for"), Method("MT system")), Triple(Material("non-parallel corpus"), Rel("Used_for"), Method("MT system")), Triple(Material("non-parallel corpus"), Rel("Used_for"), Method("MT system"))])
pred: [['parallel corpus', 'Used_for', 'MT system'], ['non-parallel corpus', 'Used_for', 'MT system'], ['non-parallel corpus', 'Used_for', 'MT system']]
trues: [['parallel corpus', 'Used_for', 'MT system'], ['parallel corpus', 'Conjunction', 'non-parallel corpus'], ['non-parallel corpus', 'Used_for', 'MT system']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.36134453781512604, 0.3282442748091603, 0.344]
text: A statistical translation model is also presented that deals such phrases , as well as a training method based on the maximization of translation accuracy , as measured with the NIST evaluation metric .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('NIST evaluation metric')
# Metric('translation accuracy')
# Metric('translation accuracy')
# Method('training method')

extract = Extract([Triple(Method("NIST evaluation metric"), Rel("Evaluate_for"), Metric("translation accuracy")), Triple(Metric("translation accuracy"), Rel("Used_for"), Method("training method"))])
pred: [['NIST evaluation metric', 'Evaluate_for', 'translation accuracy'], ['translation accuracy', 'Used_for', 'training method']]
trues: [['statistical translation model', 'Used_for', 'phrases'], ['maximization of translation accuracy', 'Used_for', 'training method'], ['NIST evaluation metric', 'Evaluate_for', 'statistical translation model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35833333333333334, 0.32452830188679244, 0.3405940594059406]
text: The task of machine translation ( MT ) evaluation is closely related to the task of sentence-level semantic equivalence classification .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('machine translation ( MT ) evaluation')
# Task('sentence-level semantic equivalence classification')
# Task('sentence-level semantic equivalence classification')
# Generic('task')

extract = Extract([Triple(Task("machine translation ( MT ) evaluation"), Rel("Evaluate_for"), Task("sentence-level semantic equivalence classification")), Triple(Task("sentence-level semantic equivalence classification"), Rel("Evaluate_for"), Generic("task"))])
pred: [['machine translation ( MT ) evaluation', 'Evaluate_for', 'sentence-level semantic equivalence classification'], ['sentence-level semantic equivalence classification', 'Evaluate_for', 'task']]
trues: [['machine translation ( MT ) evaluation', 'Conjunction', 'sentence-level semantic equivalence classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35537190082644626, 0.3233082706766917, 0.3385826771653543]
text: The new criterion -- meaning-entailing substitutability -- fits the needs of semantic-oriented NLP applications and can be evaluated directly ( independent of an application ) at a good level of human agreement .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('human agreement')
# Other_scientific_term('meaning-entailing substitutability')

extract = Extract([Triple(Metric("human agreement"), Rel("Evaluate_for"), Other_scientific_term("meaning-entailing substitutability"))])
pred: [['human agreement', 'Evaluate_for', 'meaning-entailing substitutability']]
trues: [['meaning-entailing substitutability', 'Used_for', 'semantic-oriented NLP applications'], ['human agreement', 'Evaluate_for', 'meaning-entailing substitutability']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.35802469135802467, 0.3246268656716418, 0.34050880626223085]
text: Examples are given that demonstrate the robustness of the new algorithm to spatial and temporal artefacts for long stereo video streams .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('algorithm')
# Other_scientific_term('spatial and temporal artefacts')
# Material('stereo video streams')
# Generic('algorithm')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Other_scientific_term("spatial and temporal artefacts")), Triple(Material("stereo video streams"), Rel("Evaluate_for"), Generic("algorithm"))])
pred: [['algorithm', 'Used_for', 'spatial and temporal artefacts'], ['stereo video streams', 'Evaluate_for', 'algorithm']]
trues: [['robustness', 'Evaluate_for', 'algorithm'], ['algorithm', 'Used_for', 'spatial and temporal artefacts'], ['spatial and temporal artefacts', 'Used_for', 'long stereo video streams']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.35918367346938773, 0.3247232472324723, 0.3410852713178295]
text: In this paper , we propose a new method for the modeling and subtraction of such scenes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('modeling and subtraction of such scenes')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("modeling and subtraction of such scenes"))])
pred: [['method', 'Used_for', 'modeling and subtraction of such scenes']]
trues: [['method', 'Used_for', 'modeling and subtraction of such scenes']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3617886178861789, 0.3272058823529412, 0.34362934362934366]
text: Unlike other techniques that handle large outlier percentages , MINPRAN does not rely on a known error bound for the good data .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('techniques')
# Method('MINPRAN')

extract = Extract([Triple(Generic("techniques"), Rel("Compare"), Method("MINPRAN"))])
pred: [['techniques', 'Compare', 'MINPRAN']]
trues: [['techniques', 'Used_for', 'large outlier percentages'], ['techniques', 'Compare', 'MINPRAN']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3643724696356275, 0.3284671532846715, 0.34548944337811893]
text: The psycholinguistic literature provides evidence for syntactic priming , i.e. , the tendency to repeat structures .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('psycholinguistic literature')
# Task('syntactic priming')

extract = Extract([Triple(Material("psycholinguistic literature"), Rel("Used_for"), Task("syntactic priming"))])
pred: [['psycholinguistic literature', 'Used_for', 'syntactic priming']]
trues: [['psycholinguistic literature', 'Used_for', 'syntactic priming']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.36693548387096775, 0.33090909090909093, 0.3479923518164436]
text: This paper presents a novel representation for three-dimensional objects in terms of affine-invariant image patches and their spatial relationships .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('affine-invariant image patches')
# Method('representation')
# Method('affine-invariant image patches')
# Other_scientific_term('spatial relationships')
# Other_scientific_term('spatial relationships')
# Method('representation')

extract = Extract([Triple(Method("affine-invariant image patches"), Rel("Used_for"), Method("representation")), Triple(Method("affine-invariant image patches"), Rel("Conjunction"), Other_scientific_term("spatial relationships")), Triple(Other_scientific_term("spatial relationships"), Rel("Used_for"), Method("representation"))])
pred: [['affine-invariant image patches', 'Used_for', 'representation'], ['affine-invariant image patches', 'Conjunction', 'spatial relationships'], ['spatial relationships', 'Used_for', 'representation']]
trues: [['representation', 'Used_for', 'three-dimensional objects'], ['affine-invariant image patches', 'Feature_of', 'three-dimensional objects'], ['spatial relationships', 'Feature_of', 'affine-invariant image patches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.36254980079681276, 0.3273381294964029, 0.34404536862003776]
text: Towards deep analysis of compositional classes of paraphrases , we have examined a class-oriented framework for collecting paraphrase examples , in which sentential paraphrases are collected for each paraphrase class separately by means of automatic candidate generation and manual judgement .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('class-oriented framework')
# Material('paraphrase examples')
# Generic('we')
# Material('paraphrase examples')
# Method('class-oriented framework')
# Other_scientific_term('sentential paraphrases')
# Method('automatic candidate generation')
# Method('class-oriented framework')
# Method('automatic candidate generation')
# Method('manual judgement')
# Method('manual judgement')
# Method('class-oriented framework')

extract = Extract([Triple(Method("class-oriented framework"), Rel("Used_for"), Material("paraphrase examples")), Triple(Generic("we"), Rel("Used_for"), Material("paraphrase examples")), Triple(Method("class-oriented framework"), Rel("Used_for"), Other_scientific_term("sentential paraphrases")), Triple(Method("automatic candidate generation"), Rel("Conjunction"), Method("class-oriented framework")), Triple(Method("automatic candidate generation"), Rel("Used_for"), Method("manual judgement")), Triple(Method("manual judgement"), Rel("Used_for"), Method("class-oriented framework"))])
pred: [['class-oriented framework', 'Used_for', 'paraphrase examples'], ['we', 'Used_for', 'paraphrase examples'], ['class-oriented framework', 'Used_for', 'sentential paraphrases'], ['automatic candidate generation', 'Conjunction', 'class-oriented framework'], ['automatic candidate generation', 'Used_for', 'manual judgement'], ['manual judgement', 'Used_for', 'class-oriented framework']]
trues: [['class-oriented framework', 'Used_for', 'compositional classes of paraphrases'], ['class-oriented framework', 'Used_for', 'paraphrase examples'], ['automatic candidate generation', 'Used_for', 'sentential paraphrases'], ['automatic candidate generation', 'Conjunction', 'manual judgement'], ['manual judgement', 'Used_for', 'sentential paraphrases']]
metrics_sample: [0.16666666666666666, 0.2, 0.1818181818181818]
metrics_current: [0.35797665369649806, 0.3250883392226148, 0.3407407407407408]
text: Simulated and experimental results show that our method recovers scene geometry with high subpixel precision , and that it can handle many challenges of active reconstruction systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('scene geometry')
# Metric('subpixel precision')
# Generic('method')
# Method('active reconstruction systems')
# Generic('it')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("scene geometry")), Triple(Metric("subpixel precision"), Rel("Evaluate_for"), Generic("method")), Triple(Method("active reconstruction systems"), Rel("Used_for"), Generic("it"))])
pred: [['method', 'Used_for', 'scene geometry'], ['subpixel precision', 'Evaluate_for', 'method'], ['active reconstruction systems', 'Used_for', 'it']]
trues: [['method', 'Used_for', 'scene geometry'], ['subpixel precision', 'Feature_of', 'scene geometry'], ['it', 'Used_for', 'active reconstruction systems']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3576923076923077, 0.32517482517482516, 0.34065934065934067]
text: Some of the extracts were expert human translations , others were machine translation outputs .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('expert human translations')
# Material('machine translation outputs')

extract = Extract([Triple(Material("expert human translations"), Rel("Conjunction"), Material("machine translation outputs"))])
pred: [['expert human translations', 'Conjunction', 'machine translation outputs']]
trues: [['machine translation outputs', 'Conjunction', 'expert human translations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3563218390804598, 0.3240418118466899, 0.3394160583941606]
text: We provide a principled and provable solution for this problem ; it is parameterless and requires no data insights .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('it')
# Generic('problem')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Generic("problem"))])
pred: [['it', 'Used_for', 'problem']]
trues: [['principled and provable solution', 'Used_for', 'problem']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3549618320610687, 0.3229166666666667, 0.3381818181818182]
text: It is presented as a generalization of the recursive descent parser .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('recursive descent parser')
# Generic('It')

extract = Extract([Triple(Method("recursive descent parser"), Rel("Hyponym_of"), Generic("It"))])
pred: [['recursive descent parser', 'Hyponym_of', 'It']]
trues: [['recursive descent parser', 'Used_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35361216730038025, 0.3217993079584775, 0.3369565217391304]
text: We investigate several voting - and arbiter-based combination strategies over a diverse pool of unsupervised WSD systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('voting - and arbiter-based combination strategies')
# Method('unsupervised WSD systems')

extract = Extract([Triple(Method("voting - and arbiter-based combination strategies"), Rel("Used_for"), Method("unsupervised WSD systems"))])
pred: [['voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems']]
trues: [['voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3560606060606061, 0.32413793103448274, 0.33935018050541516]
text: This paper investigates the utility of applying standard MT evaluation methods ( BLEU , NIST , WER and PER ) to building classifiers to predict semantic equivalence and entailment .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('MT evaluation methods')
# Method('classifiers')
# Metric('BLEU')
# Metric('MT evaluation methods')
# Metric('BLEU')
# Metric('NIST')
# Metric('NIST')
# Metric('MT evaluation methods')
# Metric('NIST')
# Metric('WER')
# Metric('WER')
# Metric('MT evaluation methods')
# Metric('WER')
# Metric('PER')
# Metric('PER')
# Metric('MT evaluation methods')

extract = Extract([Triple(Metric("MT evaluation methods"), Rel("Evaluate_for"), Method("classifiers")), Triple(Metric("BLEU"), Rel("Hyponym_of"), Metric("MT evaluation methods")), Triple(Metric("BLEU"), Rel("Conjunction"), Metric("NIST")), Triple(Metric("NIST"), Rel("Hyponym_of"), Metric("MT evaluation methods")), Triple(Metric("NIST"), Rel("Evaluate_for"), Metric("WER")), Triple(Metric("WER"), Rel("Used_for"), Metric("MT evaluation methods")), Triple(Metric("WER"), Rel("Conjunction"), Metric("PER")), Triple(Metric("PER"), Rel("Hyponym_of"), Metric("MT evaluation methods"))])
pred: [['MT evaluation methods', 'Evaluate_for', 'classifiers'], ['BLEU', 'Hyponym_of', 'MT evaluation methods'], ['BLEU', 'Conjunction', 'NIST'], ['NIST', 'Hyponym_of', 'MT evaluation methods'], ['NIST', 'Evaluate_for', 'WER'], ['WER', 'Used_for', 'MT evaluation methods'], ['WER', 'Conjunction', 'PER'], ['PER', 'Hyponym_of', 'MT evaluation methods']]
trues: [['MT evaluation methods', 'Used_for', 'classifiers'], ['BLEU', 'Hyponym_of', 'MT evaluation methods'], ['BLEU', 'Conjunction', 'NIST'], ['NIST', 'Hyponym_of', 'MT evaluation methods'], ['NIST', 'Conjunction', 'WER'], ['WER', 'Hyponym_of', 'MT evaluation methods'], ['WER', 'Conjunction', 'PER'], ['PER', 'Hyponym_of', 'MT evaluation methods'], ['classifiers', 'Used_for', 'semantic equivalence'], ['classifiers', 'Used_for', 'entailment'], ['semantic equivalence', 'Conjunction', 'entailment']]
metrics_sample: [0.625, 0.45454545454545453, 0.5263157894736842]
metrics_current: [0.3639705882352941, 0.3289036544850498, 0.34554973821989526]
text: This model is meant to account for productive rules of interpretation which are inferred from the morpho-syntactic and semantic characteristics of the nominal constituents .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Other_scientific_term('productive rules of interpretation')
# Other_scientific_term('morpho-syntactic and semantic characteristics')
# Other_scientific_term('nominal constituents')
# Other_scientific_term('nominal constituents')
# Other_scientific_term('productive rules of interpretation')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Other_scientific_term("productive rules of interpretation")), Triple(Other_scientific_term("morpho-syntactic and semantic characteristics"), Rel("Used_for"), Other_scientific_term("nominal constituents")), Triple(Other_scientific_term("nominal constituents"), Rel("Used_for"), Other_scientific_term("productive rules of interpretation"))])
pred: [['model', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Used_for', 'nominal constituents'], ['nominal constituents', 'Used_for', 'productive rules of interpretation']]
trues: [['model', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Feature_of', 'nominal constituents']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.36363636363636365, 0.32894736842105265, 0.34542314335060453]
text: We propose a novel probabilistic framework for learning visual models of 3D object categories by combining appearance information and geometric constraints .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('probabilistic framework')
# Method('visual models of 3D object categories')
# Other_scientific_term('appearance information')
# Method('visual models of 3D object categories')
# Other_scientific_term('appearance information')
# Other_scientific_term('geometric constraints')

extract = Extract([Triple(Method("probabilistic framework"), Rel("Used_for"), Method("visual models of 3D object categories")), Triple(Other_scientific_term("appearance information"), Rel("Used_for"), Method("visual models of 3D object categories")), Triple(Other_scientific_term("appearance information"), Rel("Conjunction"), Other_scientific_term("geometric constraints"))])
pred: [['probabilistic framework', 'Used_for', 'visual models of 3D object categories'], ['appearance information', 'Used_for', 'visual models of 3D object categories'], ['appearance information', 'Conjunction', 'geometric constraints']]
trues: [['probabilistic framework', 'Used_for', 'visual models of 3D object categories'], ['appearance information', 'Used_for', 'probabilistic framework'], ['appearance information', 'Conjunction', 'geometric constraints'], ['geometric constraints', 'Used_for', 'probabilistic framework']]
metrics_sample: [0.6666666666666666, 0.5, 0.5714285714285715]
metrics_current: [0.3669064748201439, 0.33116883116883117, 0.34812286689419797]
text: Our approach to the Multi-lingual Evaluation Task ( MET ) for Japanese text is to consider the given task as a morphological analysis problem in Japanese .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('Multi-lingual Evaluation Task ( MET )')
# Task('morphological analysis problem')
# Material('Japanese text')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("Multi-lingual Evaluation Task ( MET )")), Triple(Task("morphological analysis problem"), Rel("Used_for"), Material("Japanese text"))])
pred: [['approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET )'], ['morphological analysis problem', 'Used_for', 'Japanese text']]
trues: [['approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET )'], ['Multi-lingual Evaluation Task ( MET )', 'Used_for', 'Japanese text'], ['morphological analysis problem', 'Used_for', 'task'], ['Japanese', 'Used_for', 'morphological analysis problem']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.3678571428571429, 0.3301282051282051, 0.347972972972973]
text: This model mimics the way in which images are processed in the visual pathway , rendering a feasible alternative for the implementation of early vision applications in standard technologies .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('early vision applications')
# Other_scientific_term('visual pathway')
# Generic('model')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("early vision applications")), Triple(Other_scientific_term("visual pathway"), Rel("Used_for"), Generic("model"))])
pred: [['model', 'Used_for', 'early vision applications'], ['visual pathway', 'Used_for', 'model']]
trues: [['visual pathway', 'Used_for', 'images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.36524822695035464, 0.329073482428115, 0.346218487394958]
text: A domain independent model is proposed for the automated interpretation of nominal compounds in English .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('automated interpretation of nominal compounds')
# Material('English')
# Task('automated interpretation of nominal compounds')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("automated interpretation of nominal compounds")), Triple(Material("English"), Rel("Used_for"), Task("automated interpretation of nominal compounds"))])
pred: [['model', 'Used_for', 'automated interpretation of nominal compounds'], ['English', 'Used_for', 'automated interpretation of nominal compounds']]
trues: [['domain independent model', 'Used_for', 'automated interpretation of nominal compounds'], ['English', 'Feature_of', 'nominal compounds']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3626760563380282, 0.326984126984127, 0.34390651085141904]
text: Our numerical hybrid local and global mode-seeking tracker is validated on challenging airborne videos with heavy occlusion and large camera motions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('numerical hybrid local and global mode-seeking tracker')
# Material('airborne videos')
# Other_scientific_term('heavy occlusion')
# Material('airborne videos')
# Other_scientific_term('heavy occlusion')
# Other_scientific_term('large camera motions')
# Other_scientific_term('large camera motions')
# Material('airborne videos')

extract = Extract([Triple(Method("numerical hybrid local and global mode-seeking tracker"), Rel("Used_for"), Material("airborne videos")), Triple(Other_scientific_term("heavy occlusion"), Rel("Feature_of"), Material("airborne videos")), Triple(Other_scientific_term("heavy occlusion"), Rel("Conjunction"), Other_scientific_term("large camera motions")), Triple(Other_scientific_term("large camera motions"), Rel("Feature_of"), Material("airborne videos"))])
pred: [['numerical hybrid local and global mode-seeking tracker', 'Used_for', 'airborne videos'], ['heavy occlusion', 'Feature_of', 'airborne videos'], ['heavy occlusion', 'Conjunction', 'large camera motions'], ['large camera motions', 'Feature_of', 'airborne videos']]
trues: [['airborne videos', 'Evaluate_for', 'numerical hybrid local and global mode-seeking tracker'], ['heavy occlusion', 'Feature_of', 'airborne videos'], ['heavy occlusion', 'Conjunction', 'camera motions'], ['camera motions', 'Feature_of', 'airborne videos']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.3611111111111111, 0.32601880877742945, 0.34266886326194396]
text: In previous work , we have developed hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers that integrate textual and prosodic knowledge sources for detecting sentence boundaries .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('hidden Markov model ( HMM ) classifiers')
# Task('detecting sentence boundaries')
# Method('maximum entropy ( Maxent ) classifiers')
# Task('detecting sentence boundaries')
# Other_scientific_term('textual and prosodic knowledge sources')
# Method('hidden Markov model ( HMM ) classifiers')
# Other_scientific_term('textual and prosodic knowledge sources')
# Method('maximum entropy ( Maxent ) classifiers')

extract = Extract([Triple(Method("hidden Markov model ( HMM ) classifiers"), Rel("Used_for"), Task("detecting sentence boundaries")), Triple(Method("maximum entropy ( Maxent ) classifiers"), Rel("Used_for"), Task("detecting sentence boundaries")), Triple(Other_scientific_term("textual and prosodic knowledge sources"), Rel("Conjunction"), Method("hidden Markov model ( HMM ) classifiers")), Triple(Other_scientific_term("textual and prosodic knowledge sources"), Rel("Used_for"), Method("maximum entropy ( Maxent ) classifiers"))])
pred: [['hidden Markov model ( HMM ) classifiers', 'Used_for', 'detecting sentence boundaries'], ['maximum entropy ( Maxent ) classifiers', 'Used_for', 'detecting sentence boundaries'], ['textual and prosodic knowledge sources', 'Conjunction', 'hidden Markov model ( HMM ) classifiers'], ['textual and prosodic knowledge sources', 'Used_for', 'maximum entropy ( Maxent ) classifiers']]
trues: [['hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers', 'Used_for', 'detecting sentence boundaries'], ['textual and prosodic knowledge sources', 'Used_for', 'hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3561643835616438, 0.32398753894080995, 0.33931484502446985]
text: This paper deals with the problem of generating the fundamental frequency ( F0 ) contour of speech from a text input for text-to-speech synthesis .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('generating the fundamental frequency ( F0 ) contour of speech')
# Task('text-to-speech synthesis')
# Material('text input')
# Task('generating the fundamental frequency ( F0 ) contour of speech')

extract = Extract([Triple(Task("generating the fundamental frequency ( F0 ) contour of speech"), Rel("Used_for"), Task("text-to-speech synthesis")), Triple(Material("text input"), Rel("Used_for"), Task("generating the fundamental frequency ( F0 ) contour of speech"))])
pred: [['generating the fundamental frequency ( F0 ) contour of speech', 'Used_for', 'text-to-speech synthesis'], ['text input', 'Used_for', 'generating the fundamental frequency ( F0 ) contour of speech']]
trues: [['fundamental frequency ( F0 ) contour of speech', 'Used_for', 'text-to-speech synthesis'], ['text input', 'Used_for', 'fundamental frequency ( F0 ) contour of speech']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35374149659863946, 0.3219814241486068, 0.3371150729335494]
text: Turkish is an agglutinative language with word structures formed by productive affixations of derivational and inflectional suffixes to root words .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('agglutinative language')
# Generic('Turkish')
# Other_scientific_term('word structures')
# Other_scientific_term('agglutinative language')
# Other_scientific_term('productive affixations')
# Other_scientific_term('word structures')
# Other_scientific_term('derivational and inflectional suffixes')
# Other_scientific_term('productive affixations')

extract = Extract([Triple(Other_scientific_term("agglutinative language"), Rel("Feature_of"), Generic("Turkish")), Triple(Other_scientific_term("word structures"), Rel("Part_of"), Other_scientific_term("agglutinative language")), Triple(Other_scientific_term("productive affixations"), Rel("Conjunction"), Other_scientific_term("word structures")), Triple(Other_scientific_term("derivational and inflectional suffixes"), Rel("Part_of"), Other_scientific_term("productive affixations"))])
pred: [['agglutinative language', 'Feature_of', 'Turkish'], ['word structures', 'Part_of', 'agglutinative language'], ['productive affixations', 'Conjunction', 'word structures'], ['derivational and inflectional suffixes', 'Part_of', 'productive affixations']]
trues: [['Turkish', 'Hyponym_of', 'agglutinative language'], ['word structures', 'Feature_of', 'agglutinative language'], ['productive affixations of derivational and inflectional suffixes', 'Part_of', 'word structures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.348993288590604, 0.31901840490797545, 0.3333333333333333]
text: The goal of this work is the enrichment of human-machine interactions in a natural language environment .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Material('natural language environment')
# Task('human-machine interactions')

extract = Extract([Triple(Material("natural language environment"), Rel("Part_of"), Task("human-machine interactions"))])
pred: [['natural language environment', 'Part_of', 'human-machine interactions']]
trues: [['natural language environment', 'Feature_of', 'human-machine interactions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34782608695652173, 0.3180428134556575, 0.33226837060702874]
text: A purely functional implementation of LR-parsers is given , together with a simple correctness proof .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('purely functional implementation')
# Method('LR-parsers')
# Method('purely functional implementation')
# Method('correctness proof')

extract = Extract([Triple(Method("purely functional implementation"), Rel("Used_for"), Method("LR-parsers")), Triple(Method("purely functional implementation"), Rel("Used_for"), Method("correctness proof"))])
pred: [['purely functional implementation', 'Used_for', 'LR-parsers'], ['purely functional implementation', 'Used_for', 'correctness proof']]
trues: [['correctness proof', 'Conjunction', 'LR-parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34551495016611294, 0.3170731707317073, 0.33068362480127184]
text: The experiments show that the system is able to detect scf types with 70 % precision and 66 % recall rate .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('precision')
# Generic('system')
# Metric('recall rate')
# Generic('system')

extract = Extract([Triple(Metric("precision"), Rel("Evaluate_for"), Generic("system")), Triple(Metric("recall rate"), Rel("Evaluate_for"), Generic("system"))])
pred: [['precision', 'Evaluate_for', 'system'], ['recall rate', 'Evaluate_for', 'system']]
trues: [['precision', 'Evaluate_for', 'system'], ['precision', 'Conjunction', 'recall'], ['recall', 'Evaluate_for', 'system']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3465346534653465, 0.31722054380664655, 0.3312302839116719]
text: A method for producing such phrases from a word-aligned corpora is proposed .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('word-aligned corpora')
# Other_scientific_term('phrases')

extract = Extract([Triple(Material("word-aligned corpora"), Rel("Used_for"), Other_scientific_term("phrases"))])
pred: [['word-aligned corpora', 'Used_for', 'phrases']]
trues: [['method', 'Used_for', 'phrases'], ['word-aligned corpora', 'Evaluate_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34539473684210525, 0.3153153153153153, 0.32967032967032966]
text: We then derive a scalable stochastic gradient descent algorithm for the resulting learning problem .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('scalable stochastic gradient descent algorithm')
# Generic('learning problem')

extract = Extract([Triple(Method("scalable stochastic gradient descent algorithm"), Rel("Used_for"), Generic("learning problem"))])
pred: [['scalable stochastic gradient descent algorithm', 'Used_for', 'learning problem']]
trues: [['stochastic gradient descent algorithm', 'Used_for', 'learning problem']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3442622950819672, 0.3143712574850299, 0.3286384976525822]
text: We explain this distinction and we show how this model may be applied to the interpretation of compounds in real texts , provided that complementary semantic information are retrieved .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('interpretation of compounds')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("interpretation of compounds"))])
pred: [['model', 'Used_for', 'interpretation of compounds']]
trues: [['model', 'Used_for', 'interpretation of compounds']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3464052287581699, 0.3164179104477612, 0.33073322932917315]
text: Based on this , MINPRAN uses random sampling to search for the t and the number of inliers to the t that are least likely to have occurred randomly .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('random sampling')
# Generic('MINPRAN')

extract = Extract([Triple(Method("random sampling"), Rel("Used_for"), Generic("MINPRAN"))])
pred: [['random sampling', 'Used_for', 'MINPRAN']]
trues: [['random sampling', 'Used_for', 'MINPRAN']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3485342019543974, 0.31845238095238093, 0.3328149300155521]
text: However , acquiring the necessary training data is typically a tedious and time consuming task that involves manual interaction , active sensing devices and/or synthetic scenes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('manual interaction')
# Material('training data')
# Material('manual interaction')
# Material('active sensing devices')
# Material('active sensing devices')
# Material('training data')
# Material('active sensing devices')
# Material('synthetic scenes')
# Material('synthetic scenes')
# Material('training data')

extract = Extract([Triple(Material("manual interaction"), Rel("Used_for"), Material("training data")), Triple(Material("manual interaction"), Rel("Conjunction"), Material("active sensing devices")), Triple(Material("active sensing devices"), Rel("Used_for"), Material("training data")), Triple(Material("active sensing devices"), Rel("Conjunction"), Material("synthetic scenes")), Triple(Material("synthetic scenes"), Rel("Used_for"), Material("training data"))])
pred: [['manual interaction', 'Used_for', 'training data'], ['manual interaction', 'Conjunction', 'active sensing devices'], ['active sensing devices', 'Used_for', 'training data'], ['active sensing devices', 'Conjunction', 'synthetic scenes'], ['synthetic scenes', 'Used_for', 'training data']]
trues: [['manual interaction', 'Used_for', 'task'], ['manual interaction', 'Conjunction', 'active sensing devices'], ['active sensing devices', 'Used_for', 'task'], ['active sensing devices', 'Conjunction', 'synthetic scenes'], ['synthetic scenes', 'Used_for', 'task']]
metrics_sample: [0.4, 0.4, 0.4000000000000001]
metrics_current: [0.34935897435897434, 0.3196480938416422, 0.33384379785604895]
text: Our results show that MT evaluation techniques are able to produce useful features for paraphrase classification and to a lesser extent entailment .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MT evaluation techniques')
# Task('paraphrase classification')
# Method('MT evaluation techniques')
# Task('entailment')
# Method('MT evaluation techniques')
# Other_scientific_term('features')

extract = Extract([Triple(Method("MT evaluation techniques"), Rel("Used_for"), Task("paraphrase classification")), Triple(Method("MT evaluation techniques"), Rel("Used_for"), Task("entailment")), Triple(Method("MT evaluation techniques"), Rel("Used_for"), Other_scientific_term("features"))])
pred: [['MT evaluation techniques', 'Used_for', 'paraphrase classification'], ['MT evaluation techniques', 'Used_for', 'entailment'], ['MT evaluation techniques', 'Used_for', 'features']]
trues: [['MT evaluation techniques', 'Used_for', 'features'], ['MT evaluation techniques', 'Used_for', 'paraphrase classification'], ['MT evaluation techniques', 'Used_for', 'entailment'], ['paraphrase classification', 'Conjunction', 'entailment']]
metrics_sample: [1.0, 0.75, 0.8571428571428571]
metrics_current: [0.35555555555555557, 0.32463768115942027, 0.33939393939393936]
text: Translations are produced by means of a beam-search decoder .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('beam-search decoder')
# Generic('Translations')

extract = Extract([Triple(Method("beam-search decoder"), Rel("Used_for"), Generic("Translations"))])
pred: [['beam-search decoder', 'Used_for', 'Translations']]
trues: [['beam-search decoder', 'Used_for', 'Translations']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3575949367088608, 0.3265895953757225, 0.3413897280966767]
text: The automated segmentation of images into semantically meaningful parts requires shape information since low-level feature analysis alone often fails to reach this goal .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('shape information')
# Task('segmentation of images')
# Method('low-level feature analysis')
# Task('segmentation of images')

extract = Extract([Triple(Other_scientific_term("shape information"), Rel("Used_for"), Task("segmentation of images")), Triple(Method("low-level feature analysis"), Rel("Used_for"), Task("segmentation of images"))])
pred: [['shape information', 'Used_for', 'segmentation of images'], ['low-level feature analysis', 'Used_for', 'segmentation of images']]
trues: [['images', 'Used_for', 'automated segmentation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3553459119496855, 0.3256484149855908, 0.3398496240601504]
text: This reflects contemporary methods for unsupervised object discovery from groups of images , and it allows us to define intuitive evaluation met-rics for our sets of segmentations based on the accurate and parsimonious delineation of scene objects .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('it')
# Task('unsupervised object discovery')
# Metric('accurate and parsimonious delineation of scene objects')
# Generic('it')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Task("unsupervised object discovery")), Triple(Metric("accurate and parsimonious delineation of scene objects"), Rel("Evaluate_for"), Generic("it"))])
pred: [['it', 'Used_for', 'unsupervised object discovery'], ['accurate and parsimonious delineation of scene objects', 'Evaluate_for', 'it']]
trues: [['contemporary methods', 'Used_for', 'unsupervised object discovery']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.353125, 0.32471264367816094, 0.3383233532934132]
text: Many practical modeling problems involve discrete data that are best represented as draws from multinomial or categorical distributions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('multinomial or categorical distributions')
# Material('discrete data')

extract = Extract([Triple(Other_scientific_term("multinomial or categorical distributions"), Rel("Used_for"), Material("discrete data"))])
pred: [['multinomial or categorical distributions', 'Used_for', 'discrete data']]
trues: [['discrete data', 'Used_for', 'modeling problems'], ['multinomial or categorical distributions', 'Used_for', 'modeling problems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35202492211838005, 0.32285714285714284, 0.3368107302533531]
text: First , we investigate how well the addressee of a dialogue act can be predicted based on gaze , utterance and conversational context features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('gaze')
# Task('prediction')
# Other_scientific_term('gaze')
# Other_scientific_term('utterance')
# Other_scientific_term('utterance')
# Task('prediction')
# Other_scientific_term('utterance')
# Other_scientific_term('conversational context features')
# Other_scientific_term('conversational context features')
# Task('prediction')

extract = Extract([Triple(Other_scientific_term("gaze"), Rel("Used_for"), Task("prediction")), Triple(Other_scientific_term("gaze"), Rel("Conjunction"), Other_scientific_term("utterance")), Triple(Other_scientific_term("utterance"), Rel("Used_for"), Task("prediction")), Triple(Other_scientific_term("utterance"), Rel("Conjunction"), Other_scientific_term("conversational context features")), Triple(Other_scientific_term("conversational context features"), Rel("Used_for"), Task("prediction"))])
pred: [['gaze', 'Used_for', 'prediction'], ['gaze', 'Conjunction', 'utterance'], ['utterance', 'Used_for', 'prediction'], ['utterance', 'Conjunction', 'conversational context features'], ['conversational context features', 'Used_for', 'prediction']]
trues: [['gaze', 'Used_for', 'addressee of a dialogue act'], ['gaze', 'Conjunction', 'utterance'], ['utterance', 'Used_for', 'addressee of a dialogue act'], ['utterance', 'Conjunction', 'conversational context features'], ['conversational context features', 'Used_for', 'addressee of a dialogue act']]
metrics_sample: [0.4, 0.4, 0.4000000000000001]
metrics_current: [0.35276073619631904, 0.323943661971831, 0.3377386196769457]
text: The objective of this work is to recognize faces using video sequences both for training and recognition input , in a realistic , unconstrained setup in which lighting , pose and user motion pattern have a wide variability and face images are of low resolution .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Material('video sequences')
# Task('recognize faces')
# Material('video sequences')
# Material('recognition input')
# Other_scientific_term('lighting')
# Other_scientific_term('pose')
# Other_scientific_term('pose')
# Other_scientific_term('user motion pattern')
# Other_scientific_term('user motion pattern')
# Other_scientific_term('lighting')
# Other_scientific_term('user motion pattern')
# Other_scientific_term('pose')
# Other_scientific_term('low resolution')
# Other_scientific_term('face images')

extract = Extract([Triple(Material("video sequences"), Rel("Used_for"), Task("recognize faces")), Triple(Material("video sequences"), Rel("Used_for"), Material("recognition input")), Triple(Other_scientific_term("lighting"), Rel("Feature_of"), Other_scientific_term("pose")), Triple(Other_scientific_term("pose"), Rel("Conjunction"), Other_scientific_term("user motion pattern")), Triple(Other_scientific_term("user motion pattern"), Rel("Feature_of"), Other_scientific_term("lighting")), Triple(Other_scientific_term("user motion pattern"), Rel("Conjunction"), Other_scientific_term("pose")), Triple(Other_scientific_term("low resolution"), Rel("Feature_of"), Other_scientific_term("face images"))])
pred: [['video sequences', 'Used_for', 'recognize faces'], ['video sequences', 'Used_for', 'recognition input'], ['lighting', 'Feature_of', 'pose'], ['pose', 'Conjunction', 'user motion pattern'], ['user motion pattern', 'Feature_of', 'lighting'], ['user motion pattern', 'Conjunction', 'pose'], ['low resolution', 'Feature_of', 'face images']]
trues: [['lighting', 'Conjunction', 'pose'], ['pose', 'Conjunction', 'user motion pattern'], ['resolution', 'Feature_of', 'face images']]
metrics_sample: [0.14285714285714285, 0.3333333333333333, 0.2]
metrics_current: [0.3483483483483483, 0.3240223463687151, 0.3357452966714906]
text: We examine the relationship between the two grammatical formalisms : Tree Adjoining Grammars and Head Grammars .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Tree Adjoining Grammars')
# Method('Head Grammars')

extract = Extract([Triple(Method("Tree Adjoining Grammars"), Rel("Conjunction"), Method("Head Grammars"))])
pred: [['Tree Adjoining Grammars', 'Conjunction', 'Head Grammars']]
trues: [['Tree Adjoining Grammars', 'Hyponym_of', 'grammatical formalisms'], ['Tree Adjoining Grammars', 'Compare', 'Head Grammars'], ['Head Grammars', 'Hyponym_of', 'grammatical formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3473053892215569, 0.32132963988919666, 0.33381294964028774]
text: We conclude that previous approaches have neglected to evaluate systems in the context of their use , e.g. solving a task requiring data retrieval .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('task requiring data retrieval')
# Generic('systems')

extract = Extract([Triple(Task("task requiring data retrieval"), Rel("Evaluate_for"), Generic("systems"))])
pred: [['task requiring data retrieval', 'Evaluate_for', 'systems']]
trues: [['approaches', 'Evaluate_for', 'systems'], ['systems', 'Used_for', 'task'], ['data retrieval', 'Part_of', 'task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34626865671641793, 0.31868131868131866, 0.33190271816881256]
text: We evaluated the topic signatures on a WSD task , where we trained a second-order vector cooccurrence algorithm on standard WSD datasets , with promising results .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('WSD task')
# Other_scientific_term('topic signatures')
# Method('second-order vector cooccurrence algorithm')
# Task('WSD datasets')
# Method('second-order vector cooccurrence algorithm')
# Task('WSD task')

extract = Extract([Triple(Task("WSD task"), Rel("Evaluate_for"), Other_scientific_term("topic signatures")), Triple(Method("second-order vector cooccurrence algorithm"), Rel("Used_for"), Task("WSD datasets")), Triple(Method("second-order vector cooccurrence algorithm"), Rel("Used_for"), Task("WSD task"))])
pred: [['WSD task', 'Evaluate_for', 'topic signatures'], ['second-order vector cooccurrence algorithm', 'Used_for', 'WSD datasets'], ['second-order vector cooccurrence algorithm', 'Used_for', 'WSD task']]
trues: [['WSD task', 'Evaluate_for', 'topic signatures'], ['WSD datasets', 'Used_for', 'second-order vector cooccurrence algorithm']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.34615384615384615, 0.319672131147541, 0.33238636363636365]
text: The combined approach is formulated in the framework of Bayesian statistics to account for the robust-ness requirement in image understanding .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Bayesian statistics')
# Generic('approach')

extract = Extract([Triple(Method("Bayesian statistics"), Rel("Used_for"), Generic("approach"))])
pred: [['Bayesian statistics', 'Used_for', 'approach']]
trues: [['approach', 'Used_for', 'robust-ness requirement in image understanding'], ['Bayesian statistics', 'Used_for', 'approach']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3480825958702065, 0.32065217391304346, 0.33380480905233384]
text: The perception of transparent objects from images is known to be a very hard problem in vision .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('images')
# Task('perception of transparent objects')

extract = Extract([Triple(Material("images"), Rel("Used_for"), Task("perception of transparent objects"))])
pred: [['images', 'Used_for', 'perception of transparent objects']]
trues: [['images', 'Used_for', 'perception of transparent objects']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.35, 0.3224932249322493, 0.33568406205923834]
text: In particular , our guarantee suggests that a substantial amount of low rank matrices , which can not be recovered by standard robust PCA , become re-coverable by our proposed method .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Generic('method')
# Other_scientific_term('low rank matrices')
# Generic('method')
# Method('robust PCA')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Other_scientific_term("low rank matrices")), Triple(Generic("method"), Rel("Compare"), Method("robust PCA"))])
pred: [['method', 'Used_for', 'low rank matrices'], ['method', 'Compare', 'robust PCA']]
trues: [['method', 'Used_for', 'low rank matrices']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3508771929824561, 0.32432432432432434, 0.33707865168539325]
text: Specifically , we show how to incorporate a simple prior on the distribution of natural images into support vector machines .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('prior on the distribution of natural images')
# Method('support vector machines')
# Method('support vector machines')
# Generic('we')

extract = Extract([Triple(Other_scientific_term("prior on the distribution of natural images"), Rel("Used_for"), Method("support vector machines")), Triple(Method("support vector machines"), Rel("Used_for"), Generic("we"))])
pred: [['prior on the distribution of natural images', 'Used_for', 'support vector machines'], ['support vector machines', 'Used_for', 'we']]
trues: [['prior on the distribution of natural images', 'Used_for', 'support vector machines']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.35174418604651164, 0.3261455525606469, 0.33846153846153854]
text: We use novel priors , generate sparse and dense detection maps and our results show high detection rate with rejection to pathological motion and occlusion .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('priors')
# Generic('results')
# Other_scientific_term('priors')
# Other_scientific_term('detection maps')
# Other_scientific_term('detection maps')
# Generic('results')
# Other_scientific_term('detection maps')
# Other_scientific_term('pathological motion')
# Other_scientific_term('pathological motion')
# Other_scientific_term('occlusion')
# Other_scientific_term('occlusion')
# Other_scientific_term('pathological motion')

extract = Extract([Triple(Other_scientific_term("priors"), Rel("Used_for"), Generic("results")), Triple(Other_scientific_term("priors"), Rel("Used_for"), Other_scientific_term("detection maps")), Triple(Other_scientific_term("detection maps"), Rel("Used_for"), Generic("results")), Triple(Other_scientific_term("detection maps"), Rel("Conjunction"), Other_scientific_term("pathological motion")), Triple(Other_scientific_term("pathological motion"), Rel("Used_for"), Other_scientific_term("occlusion")), Triple(Other_scientific_term("occlusion"), Rel("Used_for"), Other_scientific_term("pathological motion"))])
pred: [['priors', 'Used_for', 'results'], ['priors', 'Used_for', 'detection maps'], ['detection maps', 'Used_for', 'results'], ['detection maps', 'Conjunction', 'pathological motion'], ['pathological motion', 'Used_for', 'occlusion'], ['occlusion', 'Used_for', 'pathological motion']]
trues: [['priors', 'Used_for', 'sparse and dense detection maps'], ['pathological motion', 'Conjunction', 'occlusion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3457142857142857, 0.32439678284182305, 0.33471645919778703]
text: This paper outlines Plume as it currently exists and describes our detailed design for extending Plume to handle passives , relative clauses , and interrogatives in a general manner .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('it')
# Method('Plume')
# Generic('it')
# Other_scientific_term('passives')
# Other_scientific_term('passives')
# Other_scientific_term('relative clauses')
# Other_scientific_term('relative clauses')
# Generic('it')
# Other_scientific_term('relative clauses')
# Other_scientific_term('interrogatives')
# Other_scientific_term('interrogatives')
# Generic('it')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Method("Plume")), Triple(Generic("it"), Rel("Used_for"), Other_scientific_term("passives")), Triple(Other_scientific_term("passives"), Rel("Conjunction"), Other_scientific_term("relative clauses")), Triple(Other_scientific_term("relative clauses"), Rel("Used_for"), Generic("it")), Triple(Other_scientific_term("relative clauses"), Rel("Conjunction"), Other_scientific_term("interrogatives")), Triple(Other_scientific_term("interrogatives"), Rel("Used_for"), Generic("it"))])
pred: [['it', 'Used_for', 'Plume'], ['it', 'Used_for', 'passives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Used_for', 'it'], ['relative clauses', 'Conjunction', 'interrogatives'], ['interrogatives', 'Used_for', 'it']]
trues: [['Plume', 'Used_for', 'passives'], ['Plume', 'Used_for', 'relative clauses'], ['Plume', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [0.3333333333333333, 0.4, 0.3636363636363636]
metrics_current: [0.3455056179775281, 0.3253968253968254, 0.33514986376021794]
text: We present a novel approach for automatically acquiring English topic signatures .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('automatically acquiring English topic signatures')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("automatically acquiring English topic signatures"))])
pred: [['approach', 'Used_for', 'automatically acquiring English topic signatures']]
trues: [['approach', 'Used_for', 'automatically acquiring English topic signatures']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3473389355742297, 0.32717678100263853, 0.3369565217391304]
text: We integrate a spoken language understanding system with intelligent mobile agents that mediate between users and information sources .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Part_of')
# The candidate entities for this text are:
# Method('spoken language understanding system')
# Method('intelligent mobile agents')
# Method('spoken language understanding system')
# Other_scientific_term('users')
# Method('intelligent mobile agents')
# Other_scientific_term('information sources')

extract = Extract([Triple(Method("spoken language understanding system"), Rel("Conjunction"), Method("intelligent mobile agents")), Triple(Method("spoken language understanding system"), Rel("Part_of"), Other_scientific_term("users")), Triple(Method("intelligent mobile agents"), Rel("Part_of"), Other_scientific_term("information sources"))])
pred: [['spoken language understanding system', 'Conjunction', 'intelligent mobile agents'], ['spoken language understanding system', 'Part_of', 'users'], ['intelligent mobile agents', 'Part_of', 'information sources']]
trues: [['intelligent mobile agents', 'Part_of', 'spoken language understanding system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34444444444444444, 0.3263157894736842, 0.33513513513513515]
text: The seven categories of the scheme are based on rhetorical moves of argumentation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('rhetorical moves of argumentation')
# Generic('scheme')

extract = Extract([Triple(Other_scientific_term("rhetorical moves of argumentation"), Rel("Used_for"), Generic("scheme"))])
pred: [['rhetorical moves of argumentation', 'Used_for', 'scheme']]
trues: [['rhetorical moves of argumentation', 'Used_for', 'scheme']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3462603878116344, 0.32808398950131235, 0.3369272237196766]
text: We present a new part-of-speech tagger that demonstrates the following ideas : ( i ) explicit use of both preceding and following tag contexts via a dependency network representation , ( ii ) broad use of lexical features , including jointly conditioning on multiple consecutive words , ( iii ) effective use of priors in conditional loglinear models , and ( iv ) fine-grained modeling of unknown word features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('ideas')
# Method('part-of-speech tagger')
# Other_scientific_term('preceding and following tag contexts')
# Generic('ideas')
# Method('dependency network representation')
# Other_scientific_term('preceding and following tag contexts')
# Other_scientific_term('preceding and following tag contexts')
# Other_scientific_term('lexical features')
# Other_scientific_term('preceding and following tag contexts')
# Other_scientific_term('unknown word features')
# Other_scientific_term('preceding and following tag contexts')
# Other_scientific_term('consecutive words')
# Other_scientific_term('lexical features')
# Other_scientific_term('unknown word features')
# Other_scientific_term('unknown word features')
# Generic('ideas')

extract = Extract([Triple(Generic("ideas"), Rel("Used_for"), Method("part-of-speech tagger")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Used_for"), Generic("ideas")), Triple(Method("dependency network representation"), Rel("Used_for"), Other_scientific_term("preceding and following tag contexts")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Conjunction"), Other_scientific_term("lexical features")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Used_for"), Other_scientific_term("unknown word features")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Conjunction"), Other_scientific_term("consecutive words")), Triple(Other_scientific_term("lexical features"), Rel("Used_for"), Other_scientific_term("unknown word features")), Triple(Other_scientific_term("unknown word features"), Rel("Conjunction"), Generic("ideas"))])
pred: [['ideas', 'Used_for', 'part-of-speech tagger'], ['preceding and following tag contexts', 'Used_for', 'ideas'], ['dependency network representation', 'Used_for', 'preceding and following tag contexts'], ['preceding and following tag contexts', 'Conjunction', 'lexical features'], ['preceding and following tag contexts', 'Used_for', 'unknown word features'], ['preceding and following tag contexts', 'Conjunction', 'consecutive words'], ['lexical features', 'Used_for', 'unknown word features'], ['unknown word features', 'Conjunction', 'ideas']]
trues: [['tag contexts', 'Used_for', 'part-of-speech tagger'], ['dependency network representation', 'Used_for', 'tag contexts'], ['lexical features', 'Used_for', 'part-of-speech tagger'], ['priors in conditional loglinear models', 'Used_for', 'part-of-speech tagger'], ['fine-grained modeling of unknown word features', 'Used_for', 'part-of-speech tagger']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33875338753387535, 0.3238341968911917, 0.3311258278145695]
text: This posterior encodes sparse se-lectional preferences between a head word and its dependents .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('sparse se-lectional preferences')
# Generic('posterior')

extract = Extract([Triple(Other_scientific_term("sparse se-lectional preferences"), Rel("Used_for"), Generic("posterior"))])
pred: [['sparse se-lectional preferences', 'Used_for', 'posterior']]
trues: [['posterior', 'Used_for', 'sparse se-lectional preferences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33783783783783783, 0.32299741602067183, 0.33025099075297226]
text: A critical step in encoding sound for neuronal processing occurs when the analog pressure wave is coded into discrete nerve-action potentials .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('discrete nerve-action potentials')
# Other_scientific_term('analog pressure wave')

extract = Extract([Triple(Other_scientific_term("discrete nerve-action potentials"), Rel("Used_for"), Other_scientific_term("analog pressure wave"))])
pred: [['discrete nerve-action potentials', 'Used_for', 'analog pressure wave']]
trues: [['encoding sound', 'Used_for', 'neuronal processing'], ['discrete nerve-action potentials', 'Used_for', 'analog pressure wave']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.33962264150943394, 0.32390745501285345, 0.331578947368421]
text: Kernel space embedding decouples the training and prediction costs from the data dimension and enables us to plug inarbitrary distance measures which are more natural for the features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('Kernel space embedding')
# Other_scientific_term('training and prediction costs')
# Other_scientific_term('arbitrary distance measures')
# Other_scientific_term('features')

extract = Extract([Triple(Other_scientific_term("Kernel space embedding"), Rel("Used_for"), Other_scientific_term("training and prediction costs")), Triple(Other_scientific_term("arbitrary distance measures"), Rel("Used_for"), Other_scientific_term("features"))])
pred: [['Kernel space embedding', 'Used_for', 'training and prediction costs'], ['arbitrary distance measures', 'Used_for', 'features']]
trues: [['Kernel space embedding', 'Used_for', 'inarbitrary distance measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3378016085790885, 0.3230769230769231, 0.3302752293577982]
text: Moreover , a cost zero solution always exists and can only be excluded by hard budget constraints .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('hard budget constraints')
# Generic('solution')

extract = Extract([Triple(Other_scientific_term("hard budget constraints"), Rel("Feature_of"), Generic("solution"))])
pred: [['hard budget constraints', 'Feature_of', 'solution']]
trues: [['hard budget constraints', 'Used_for', 'cost zero solution']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33689839572192515, 0.32225063938618925, 0.32941176470588235]
text: We evaluate the proposed methods through several transliteration/backtransliteration experiments for English/Chinese and English/Japanese language pairs .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('transliteration/backtransliteration experiments')
# Generic('methods')
# Material('English/Chinese')
# Material('English/Japanese')
# Material('English/Chinese')
# Generic('methods')

extract = Extract([Triple(Task("transliteration/backtransliteration experiments"), Rel("Evaluate_for"), Generic("methods")), Triple(Material("English/Chinese"), Rel("Conjunction"), Material("English/Japanese")), Triple(Material("English/Chinese"), Rel("Evaluate_for"), Generic("methods"))])
pred: [['transliteration/backtransliteration experiments', 'Evaluate_for', 'methods'], ['English/Chinese', 'Conjunction', 'English/Japanese'], ['English/Chinese', 'Evaluate_for', 'methods']]
trues: [['transliteration/backtransliteration', 'Evaluate_for', 'methods'], ['transliteration/backtransliteration', 'Used_for', 'English/Chinese and English/Japanese language pairs']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33421750663129973, 0.32061068702290074, 0.32727272727272727]
text: To a large extent , these statistics reflect semantic constraints and thus are used to disambiguate anaphora references and syntactic ambiguities .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('semantic constraints')
# Task('anaphora references')
# Other_scientific_term('semantic constraints')
# Task('syntactic ambiguities')
# Task('anaphora references')
# Task('syntactic ambiguities')

extract = Extract([Triple(Other_scientific_term("semantic constraints"), Rel("Used_for"), Task("anaphora references")), Triple(Other_scientific_term("semantic constraints"), Rel("Used_for"), Task("syntactic ambiguities")), Triple(Task("anaphora references"), Rel("Conjunction"), Task("syntactic ambiguities"))])
pred: [['semantic constraints', 'Used_for', 'anaphora references'], ['semantic constraints', 'Used_for', 'syntactic ambiguities'], ['anaphora references', 'Conjunction', 'syntactic ambiguities']]
trues: [['semantic constraints', 'Used_for', 'anaphora references'], ['semantic constraints', 'Used_for', 'syntactic ambiguities'], ['anaphora references', 'Conjunction', 'syntactic ambiguities']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3394736842105263, 0.32575757575757575, 0.3324742268041237]
text: Language resource quality is crucial in NLP .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('Language resource')
# Task('NLP')

extract = Extract([Triple(Other_scientific_term("Language resource"), Rel("Feature_of"), Task("NLP"))])
pred: [['Language resource', 'Feature_of', 'NLP']]
trues: [['Language resource quality', 'Feature_of', 'NLP']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33858267716535434, 0.3249370277078086, 0.33161953727506427]
text: With relevant approach , we identify important contents by PageRank algorithm on the event map constructed from documents .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('PageRank algorithm')
# Other_scientific_term('important contents')
# Other_scientific_term('event map')
# Material('documents')

extract = Extract([Triple(Method("PageRank algorithm"), Rel("Used_for"), Other_scientific_term("important contents")), Triple(Other_scientific_term("event map"), Rel("Used_for"), Material("documents"))])
pred: [['PageRank algorithm', 'Used_for', 'important contents'], ['event map', 'Used_for', 'documents']]
trues: [['PageRank algorithm', 'Used_for', 'relevant approach'], ['event map', 'Used_for', 'PageRank algorithm'], ['documents', 'Used_for', 'event map']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3368146214099217, 0.3225, 0.32950191570881227]
text: This probably occurs because each model has different strengths and weaknesses for modeling the knowledge sources .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('models')
# Other_scientific_term('knowledge sources')

extract = Extract([Triple(Generic("models"), Rel("Used_for"), Other_scientific_term("knowledge sources"))])
pred: [['models', 'Used_for', 'knowledge sources']]
trues: [['model', 'Used_for', 'knowledge sources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3359375, 0.32169576059850374, 0.3286624203821656]
text: Starting from a DP-based solution to the traveling salesman problem , we present a novel technique to restrict the possible word reordering between source and target language in order to achieve an efficient search algorithm .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('DP-based solution')
# Task('traveling salesman problem')
# Other_scientific_term('word reordering')
# Other_scientific_term('source and target language')

extract = Extract([Triple(Method("DP-based solution"), Rel("Used_for"), Task("traveling salesman problem")), Triple(Other_scientific_term("word reordering"), Rel("Used_for"), Other_scientific_term("source and target language"))])
pred: [['DP-based solution', 'Used_for', 'traveling salesman problem'], ['word reordering', 'Used_for', 'source and target language']]
trues: [['technique', 'Used_for', 'search algorithm']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33419689119170987, 0.3208955223880597, 0.32741116751269034]
text: FERRET utilizes a novel approach to Q/A known as predictive questioning which attempts to identify the questions ( and answers ) that users need by analyzing how a user interacts with a system while gathering information related to a particular scenario .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('predictive questioning')
# Method('FERRET')

extract = Extract([Triple(Method("predictive questioning"), Rel("Used_for"), Method("FERRET"))])
pred: [['predictive questioning', 'Used_for', 'FERRET']]
trues: [['approach', 'Used_for', 'FERRET'], ['approach', 'Used_for', 'Q/A']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3193069306930693, 0.32616940581542353]
text: This distribution has numerous applications in computer Go , including serving as an efficient stand-alone Go player .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('distribution')
# Task('computer Go')
# Generic('distribution')
# Method('efficient stand-alone Go player')

extract = Extract([Triple(Generic("distribution"), Rel("Used_for"), Task("computer Go")), Triple(Generic("distribution"), Rel("Used_for"), Method("efficient stand-alone Go player"))])
pred: [['distribution', 'Used_for', 'computer Go'], ['distribution', 'Used_for', 'efficient stand-alone Go player']]
trues: [['distribution', 'Used_for', 'computer Go']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3341902313624679, 0.32098765432098764, 0.327455919395466]
text: In the experiments , we used a variety of methods for preparing a segmented corpus and compared the language models by their speech recognition accuracies .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('methods')
# Material('segmented corpus')
# Metric('speech recognition accuracies')
# Method('language models')

extract = Extract([Triple(Generic("methods"), Rel("Used_for"), Material("segmented corpus")), Triple(Metric("speech recognition accuracies"), Rel("Evaluate_for"), Method("language models"))])
pred: [['methods', 'Used_for', 'segmented corpus'], ['speech recognition accuracies', 'Evaluate_for', 'language models']]
trues: [['methods', 'Used_for', 'preparing a segmented corpus'], ['speech recognition accuracies', 'Evaluate_for', 'language models']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3350383631713555, 0.32186732186732187, 0.3283208020050125]
text: While sentence extraction as an approach to summarization has been shown to work in documents of certain genres , because of the conversational nature of email communication where utterances are made in relation to one made previously , sentence extraction may not capture the necessary segments of dialogue that would make a summary coherent .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Task('sentence extraction')
# Task('summarization')
# Material('documents of certain genres')
# Task('sentence extraction')
# Other_scientific_term('conversational nature of email communication')
# Task('sentence extraction')

extract = Extract([Triple(Task("sentence extraction"), Rel("Used_for"), Task("summarization")), Triple(Material("documents of certain genres"), Rel("Used_for"), Task("sentence extraction")), Triple(Other_scientific_term("conversational nature of email communication"), Rel("Feature_of"), Task("sentence extraction"))])
pred: [['sentence extraction', 'Used_for', 'summarization'], ['documents of certain genres', 'Used_for', 'sentence extraction'], ['conversational nature of email communication', 'Feature_of', 'sentence extraction']]
trues: [['sentence extraction', 'Used_for', 'summarization']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3350253807106599, 0.3235294117647059, 0.32917705735660846]
text: Listen-Communicate-Show ( LCS ) is a new paradigm for human interaction with data sources .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Listen-Communicate-Show ( LCS )')
# Method('paradigm')

extract = Extract([Triple(Method("Listen-Communicate-Show ( LCS )"), Rel("Hyponym_of"), Method("paradigm"))])
pred: [['Listen-Communicate-Show ( LCS )', 'Hyponym_of', 'paradigm']]
trues: [['Listen-Communicate-Show ( LCS )', 'Used_for', 'human interaction with data sources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3341772151898734, 0.32273838630806845, 0.32835820895522394]
text: We show that combining anisotropic meshing with a non-quadratic approach to regularization enables us to obtain satisfactory reconstruction results using triangulations with few vertices .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('anisotropic meshing')
# Method('non-quadratic approach to regularization')
# Method('anisotropic meshing')
# Task('reconstruction')
# Method('non-quadratic approach to regularization')
# Task('reconstruction')

extract = Extract([Triple(Method("anisotropic meshing"), Rel("Conjunction"), Method("non-quadratic approach to regularization")), Triple(Method("anisotropic meshing"), Rel("Used_for"), Task("reconstruction")), Triple(Method("non-quadratic approach to regularization"), Rel("Used_for"), Task("reconstruction"))])
pred: [['anisotropic meshing', 'Conjunction', 'non-quadratic approach to regularization'], ['anisotropic meshing', 'Used_for', 'reconstruction'], ['non-quadratic approach to regularization', 'Used_for', 'reconstruction']]
trues: [['anisotropic meshing', 'Conjunction', 'non-quadratic approach'], ['anisotropic meshing', 'Used_for', 'reconstruction'], ['non-quadratic approach', 'Used_for', 'regularization'], ['non-quadratic approach', 'Used_for', 'reconstruction'], ['triangulations', 'Used_for', 'reconstruction']]
metrics_sample: [0.3333333333333333, 0.2, 0.25]
metrics_current: [0.3341708542713568, 0.321256038647343, 0.32758620689655177]
text: In spite of over two decades of intense research , illumination and pose invariance remain prohibitively challenging aspects of face recognition for most practical applications .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('illumination and pose invariance')
# Task('face recognition')

extract = Extract([Triple(Other_scientific_term("illumination and pose invariance"), Rel("Conjunction"), Task("face recognition"))])
pred: [['illumination and pose invariance', 'Conjunction', 'face recognition']]
trues: [['illumination', 'Conjunction', 'pose invariance'], ['illumination', 'Part_of', 'face recognition'], ['pose invariance', 'Part_of', 'face recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.31894484412470026, 0.32598039215686275]
text: We propose a novel approach to associate objects across multiple PTZ cameras that can be used to perform camera handoff in wide-area surveillance scenarios .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('camera handoff')
# Task('camera handoff')
# Task('wide-area surveillance scenarios')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("camera handoff")), Triple(Task("camera handoff"), Rel("Used_for"), Task("wide-area surveillance scenarios"))])
pred: [['approach', 'Used_for', 'camera handoff'], ['camera handoff', 'Used_for', 'wide-area surveillance scenarios']]
trues: [['approach', 'Used_for', 'camera handoff in wide-area surveillance scenarios']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3316708229426434, 0.3181818181818182, 0.32478632478632474]
text: We further demonstrate synthesis from a freely translating virtual camera .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('freely translating virtual camera')
# Task('synthesis')

extract = Extract([Triple(Other_scientific_term("freely translating virtual camera"), Rel("Used_for"), Task("synthesis"))])
pred: [['freely translating virtual camera', 'Used_for', 'synthesis']]
trues: [['translating virtual camera', 'Used_for', 'synthesis']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3308457711442786, 0.31742243436754175, 0.3239951278928137]
text: With the rise of deep archi-tectures , the prime focus has been on object category recognition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('object category recognition')
# Method('deep archi-tectures')

extract = Extract([Triple(Task("object category recognition"), Rel("Used_for"), Method("deep archi-tectures"))])
pred: [['object category recognition', 'Used_for', 'deep archi-tectures']]
trues: [['deep archi-tectures', 'Used_for', 'object category recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33002481389578164, 0.31666666666666665, 0.32320777642770354]
text: Given a new image , detection and classification are achieved by determining the position and viewpoint of the model that maximize recognition scores of the candidate objects .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('detection')
# Generic('model')
# Task('classification')
# Metric('recognition scores')
# Other_scientific_term('candidate objects')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("detection")), Triple(Generic("model"), Rel("Used_for"), Task("classification")), Triple(Metric("recognition scores"), Rel("Used_for"), Other_scientific_term("candidate objects"))])
pred: [['model', 'Used_for', 'detection'], ['model', 'Used_for', 'classification'], ['recognition scores', 'Used_for', 'candidate objects']]
trues: [['image', 'Used_for', 'detection'], ['image', 'Used_for', 'classification'], ['detection', 'Conjunction', 'classification'], ['position', 'Used_for', 'detection'], ['position', 'Used_for', 'classification'], ['position', 'Conjunction', 'viewpoint'], ['viewpoint', 'Used_for', 'detection'], ['viewpoint', 'Used_for', 'classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3275862068965517, 0.3107476635514019, 0.3189448441247003]
text: Using these ideas together , the resulting tagger gives a 97.24 % accuracy on the Penn Treebank WSJ , an error reduction of 4.4 % on the best previous single automatically learned tagging result .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('Penn Treebank WSJ')
# Method('tagger')
# Metric('accuracy')
# Method('tagger')
# Metric('accuracy')
# Generic('ideas')
# Generic('ideas')
# Method('tagger')
# Generic('ideas')
# Method('tagger')
# Metric('error reduction')
# Method('tagger')
# Metric('error reduction')
# Method('best previous single automatically learned tagging result')

extract = Extract([Triple(Material("Penn Treebank WSJ"), Rel("Evaluate_for"), Method("tagger")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Method("tagger")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("ideas")), Triple(Generic("ideas"), Rel("Compare"), Method("tagger")), Triple(Generic("ideas"), Rel("Evaluate_for"), Method("tagger")), Triple(Metric("error reduction"), Rel("Evaluate_for"), Method("tagger")), Triple(Metric("error reduction"), Rel("Evaluate_for"), Method("best previous single automatically learned tagging result"))])
pred: [['Penn Treebank WSJ', 'Evaluate_for', 'tagger'], ['accuracy', 'Evaluate_for', 'tagger'], ['accuracy', 'Evaluate_for', 'ideas'], ['ideas', 'Compare', 'tagger'], ['ideas', 'Evaluate_for', 'tagger'], ['error reduction', 'Evaluate_for', 'tagger'], ['error reduction', 'Evaluate_for', 'best previous single automatically learned tagging result']]
trues: [['accuracy', 'Evaluate_for', 'tagger'], ['Penn Treebank WSJ', 'Evaluate_for', 'tagger'], ['error', 'Evaluate_for', 'tagger']]
metrics_sample: [0.2857142857142857, 0.6666666666666666, 0.4]
metrics_current: [0.3268765133171913, 0.31322505800464034, 0.3199052132701422]
text: It is particularly valuable to empirical MT research .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('It')
# Task('empirical MT research')

extract = Extract([Triple(Generic("It"), Rel("Used_for"), Task("empirical MT research"))])
pred: [['It', 'Used_for', 'empirical MT research']]
trues: [['It', 'Used_for', 'empirical MT research']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3285024154589372, 0.3148148148148148, 0.3215130023640662]
text: The subjects were given three minutes per extract to determine whether they believed the sample output to be an expert human translation or a machine translation .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('expert human translation')
# Other_scientific_term('machine translation')

extract = Extract([Triple(Other_scientific_term("expert human translation"), Rel("Conjunction"), Other_scientific_term("machine translation"))])
pred: [['expert human translation', 'Conjunction', 'machine translation']]
trues: [['expert human translation', 'Compare', 'machine translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.327710843373494, 0.3140877598152425, 0.3207547169811321]
text: It uses a powerful pattern-matching language to classify grs into frames hierarchically in a way that mirrors inheritance-based lexica .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('pattern-matching language')
# Other_scientific_term('grs')
# Other_scientific_term('frames')
# Other_scientific_term('grs')

extract = Extract([Triple(Method("pattern-matching language"), Rel("Used_for"), Other_scientific_term("grs")), Triple(Other_scientific_term("frames"), Rel("Used_for"), Other_scientific_term("grs"))])
pred: [['pattern-matching language', 'Used_for', 'grs'], ['frames', 'Used_for', 'grs']]
trues: [['pattern-matching language', 'Used_for', 'It'], ['pattern-matching language', 'Used_for', 'grs']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.328537170263789, 0.31494252873563217, 0.32159624413145543]
text: Experiment results on ACE corpora show that this spectral clustering based approach outperforms the other clustering methods .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('spectral clustering based approach')
# Method('clustering methods')
# Material('ACE corpora')
# Generic('spectral clustering based approach')
# Material('ACE corpora')
# Method('clustering methods')

extract = Extract([Triple(Generic("spectral clustering based approach"), Rel("Compare"), Method("clustering methods")), Triple(Material("ACE corpora"), Rel("Evaluate_for"), Generic("spectral clustering based approach")), Triple(Material("ACE corpora"), Rel("Evaluate_for"), Method("clustering methods"))])
pred: [['spectral clustering based approach', 'Compare', 'clustering methods'], ['ACE corpora', 'Evaluate_for', 'spectral clustering based approach'], ['ACE corpora', 'Evaluate_for', 'clustering methods']]
trues: [['ACE corpora', 'Evaluate_for', 'spectral clustering based approach'], ['ACE corpora', 'Evaluate_for', 'clustering methods'], ['spectral clustering based approach', 'Compare', 'clustering methods']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3333333333333333, 0.319634703196347, 0.32634032634032634]
text: A new algorithm is proposed for novel view generation in one-to-one teleconferencing applications .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('algorithm')
# Task('novel view generation in one-to-one teleconferencing applications')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Task("novel view generation in one-to-one teleconferencing applications"))])
pred: [['algorithm', 'Used_for', 'novel view generation in one-to-one teleconferencing applications']]
trues: [['algorithm', 'Used_for', 'novel view generation'], ['novel view generation', 'Used_for', 'one-to-one teleconferencing applications']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.332541567695962, 0.3181818181818182, 0.3252032520325204]
text: Building on previous work at Carnegie-Mellon University e.g. [ 4 , 5 , 8 ] , Plume 's approach to parsing is based on semantic caseframe instantiation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('semantic caseframe instantiation')
# Method('Plume 's approach to parsing')

extract = Extract([Triple(Method("semantic caseframe instantiation"), Rel("Used_for"), Method("Plume 's approach to parsing"))])
pred: [['semantic caseframe instantiation', 'Used_for', "Plume 's approach to parsing"]]
trues: [["Plume 's approach", 'Used_for', 'parsing'], ['semantic caseframe instantiation', 'Used_for', "Plume 's approach"]]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33175355450236965, 0.3167420814479638, 0.32407407407407407]
text: The applicability of many current information extraction techniques is severely limited by the need for supervised training data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('supervised training data')
# Method('information extraction techniques')

extract = Extract([Triple(Material("supervised training data"), Rel("Used_for"), Method("information extraction techniques"))])
pred: [['supervised training data', 'Used_for', 'information extraction techniques']]
trues: [['supervised training data', 'Used_for', 'information extraction techniques']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3333333333333333, 0.3182844243792325, 0.32563510392609696]
text: Joint matrix triangularization is often used for estimating the joint eigenstructure of a set M of matrices , with applications in signal processing and machine learning .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Joint matrix triangularization')
# Other_scientific_term('joint eigenstructure')
# Method('Joint matrix triangularization')
# Generic('applications')
# Generic('applications')
# Task('signal processing and machine learning')

extract = Extract([Triple(Method("Joint matrix triangularization"), Rel("Used_for"), Other_scientific_term("joint eigenstructure")), Triple(Method("Joint matrix triangularization"), Rel("Used_for"), Generic("applications")), Triple(Generic("applications"), Rel("Used_for"), Task("signal processing and machine learning"))])
pred: [['Joint matrix triangularization', 'Used_for', 'joint eigenstructure'], ['Joint matrix triangularization', 'Used_for', 'applications'], ['applications', 'Used_for', 'signal processing and machine learning']]
trues: [['Joint matrix triangularization', 'Used_for', 'joint eigenstructure'], ['joint eigenstructure', 'Used_for', 'signal processing'], ['joint eigenstructure', 'Used_for', 'machine learning'], ['signal processing', 'Conjunction', 'machine learning']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.3333333333333333, 0.31767337807606266, 0.32531500572737687]
text: Our method has two major components : a ) a pattern extraction scheme for efficiently harvesting patterns of given size and shape from expert game records and b ) a Bayesian learning algorithm ( in two variants ) that learns a distribution over the values of a move given a board position based on the local pattern context .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('pattern extraction scheme')
# Generic('major components')
# Method('pattern extraction scheme')
# Material('expert game records')
# Method('Bayesian learning algorithm')
# Generic('major components')
# Method('Bayesian learning algorithm')
# Other_scientific_term('distribution')
# Method('Bayesian learning algorithm')
# Other_scientific_term('local pattern context')
# Other_scientific_term('distribution')
# Other_scientific_term('move')
# Other_scientific_term('local pattern context')
# Other_scientific_term('move')

extract = Extract([Triple(Method("pattern extraction scheme"), Rel("Used_for"), Generic("major components")), Triple(Method("pattern extraction scheme"), Rel("Used_for"), Material("expert game records")), Triple(Method("Bayesian learning algorithm"), Rel("Used_for"), Generic("major components")), Triple(Method("Bayesian learning algorithm"), Rel("Conjunction"), Other_scientific_term("distribution")), Triple(Method("Bayesian learning algorithm"), Rel("Used_for"), Other_scientific_term("distribution")), Triple(Method("Bayesian learning algorithm"), Rel("Used_for"), Other_scientific_term("local pattern context")), Triple(Other_scientific_term("distribution"), Rel("Conjunction"), Other_scientific_term("move")), Triple(Other_scientific_term("local pattern context"), Rel("Conjunction"), Other_scientific_term("move"))])
pred: [['pattern extraction scheme', 'Used_for', 'major components'], ['pattern extraction scheme', 'Used_for', 'expert game records'], ['Bayesian learning algorithm', 'Used_for', 'major components'], ['Bayesian learning algorithm', 'Conjunction', 'distribution'], ['Bayesian learning algorithm', 'Used_for', 'distribution'], ['Bayesian learning algorithm', 'Used_for', 'local pattern context'], ['distribution', 'Conjunction', 'move'], ['local pattern context', 'Conjunction', 'move']]
trues: [['pattern extraction scheme', 'Part_of', 'method'], ['pattern extraction scheme', 'Conjunction', 'Bayesian learning algorithm'], ['Bayesian learning algorithm', 'Part_of', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3271889400921659, 0.31555555555555553, 0.3212669683257918]
text: We present a new method for detecting interest points using histogram information .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('histogram information')
# Method('interest points')

extract = Extract([Triple(Other_scientific_term("histogram information"), Rel("Used_for"), Method("interest points"))])
pred: [['histogram information', 'Used_for', 'interest points']]
trues: [['method', 'Used_for', 'detecting interest points'], ['histogram information', 'Used_for', 'detecting interest points']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3264367816091954, 0.3141592920353982, 0.32018038331454335]
text: In general , our CRF model yields a lower error rate than the HMM and Max-ent models on the NIST sentence boundary detection task in speech , although it is interesting to note that the best results are achieved by three-way voting among the classifiers .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('CRF model')
# Method('HMM and Max-ent models')
# Task('NIST sentence boundary detection task in speech')
# Method('CRF model')
# Task('NIST sentence boundary detection task in speech')
# Method('HMM and Max-ent models')
# Task('NIST sentence boundary detection task in speech')
# Generic('it')
# Method('three-way voting')
# Generic('classifiers')

extract = Extract([Triple(Method("CRF model"), Rel("Compare"), Method("HMM and Max-ent models")), Triple(Task("NIST sentence boundary detection task in speech"), Rel("Evaluate_for"), Method("CRF model")), Triple(Task("NIST sentence boundary detection task in speech"), Rel("Evaluate_for"), Method("HMM and Max-ent models")), Triple(Task("NIST sentence boundary detection task in speech"), Rel("Evaluate_for"), Generic("it")), Triple(Method("three-way voting"), Rel("Used_for"), Generic("classifiers"))])
pred: [['CRF model', 'Compare', 'HMM and Max-ent models'], ['NIST sentence boundary detection task in speech', 'Evaluate_for', 'CRF model'], ['NIST sentence boundary detection task in speech', 'Evaluate_for', 'HMM and Max-ent models'], ['NIST sentence boundary detection task in speech', 'Evaluate_for', 'it'], ['three-way voting', 'Used_for', 'classifiers']]
trues: [['CRF model', 'Compare', 'HMM and Max-ent models'], ['error rate', 'Evaluate_for', 'CRF model'], ['error rate', 'Evaluate_for', 'HMM and Max-ent models'], ['NIST sentence boundary detection task', 'Evaluate_for', 'CRF model'], ['NIST sentence boundary detection task', 'Evaluate_for', 'HMM and Max-ent models'], ['speech', 'Feature_of', 'NIST sentence boundary detection task'], ['classifiers', 'Used_for', 'three-way voting']]
metrics_sample: [0.2, 0.14285714285714285, 0.16666666666666666]
metrics_current: [0.325, 0.3115468409586057, 0.3181312569521691]
text: Given the video streams acquired by two cameras placed on either side of a computer monitor , the proposed algorithm synthesises images from a virtual camera in arbitrary position ( typically located within the monitor ) to facilitate eye contact .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('video streams')
# Generic('algorithm')
# Material('video streams')
# Other_scientific_term('images')
# Other_scientific_term('images')
# Generic('algorithm')

extract = Extract([Triple(Material("video streams"), Rel("Used_for"), Generic("algorithm")), Triple(Material("video streams"), Rel("Used_for"), Other_scientific_term("images")), Triple(Other_scientific_term("images"), Rel("Used_for"), Generic("algorithm"))])
pred: [['video streams', 'Used_for', 'algorithm'], ['video streams', 'Used_for', 'images'], ['images', 'Used_for', 'algorithm']]
trues: [['cameras', 'Used_for', 'video streams'], ['algorithm', 'Used_for', 'eye contact'], ['virtual camera', 'Used_for', 'images'], ['arbitrary position', 'Feature_of', 'virtual camera']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3227990970654628, 0.30885529157667385, 0.31567328918322296]
text: It is based on a weakly supervised dependency parser that can model speech syntax without relying on any annotated training corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('weakly supervised dependency parser')
# Method('speech syntax')
# Material('annotated training corpus')
# Method('weakly supervised dependency parser')

extract = Extract([Triple(Method("weakly supervised dependency parser"), Rel("Used_for"), Method("speech syntax")), Triple(Material("annotated training corpus"), Rel("Used_for"), Method("weakly supervised dependency parser"))])
pred: [['weakly supervised dependency parser', 'Used_for', 'speech syntax'], ['annotated training corpus', 'Used_for', 'weakly supervised dependency parser']]
trues: [['weakly supervised dependency parser', 'Used_for', 'speech syntax']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3235955056179775, 0.3103448275862069, 0.31683168316831684]
text: To our knowledge , this is the first a posteriori bound for joint matrix decomposition .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('a posteriori bound')
# Task('joint matrix decomposition')

extract = Extract([Triple(Metric("a posteriori bound"), Rel("Evaluate_for"), Task("joint matrix decomposition"))])
pred: [['a posteriori bound', 'Evaluate_for', 'joint matrix decomposition']]
trues: [['posteriori bound', 'Used_for', 'joint matrix decomposition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32286995515695066, 0.3096774193548387, 0.3161361141602635]
text: The integrated learning system has been experimentally validated in simulated construction and ooce domains .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('integrated learning system')
# Task('simulated construction and ooce domains')
# Material('simulated construction and ooce domains')
# Method('integrated learning system')

extract = Extract([Triple(Method("integrated learning system"), Rel("Used_for"), Task("simulated construction and ooce domains")), Triple(Material("simulated construction and ooce domains"), Rel("Evaluate_for"), Method("integrated learning system"))])
pred: [['integrated learning system', 'Used_for', 'simulated construction and ooce domains'], ['simulated construction and ooce domains', 'Evaluate_for', 'integrated learning system']]
trues: [['simulated construction', 'Evaluate_for', 'integrated learning system'], ['simulated construction', 'Conjunction', 'ooce domains'], ['ooce domains', 'Evaluate_for', 'integrated learning system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32142857142857145, 0.3076923076923077, 0.314410480349345]
text: We have implemented a restricted domain parser called Plume .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Plume')
# Method('restricted domain parser')

extract = Extract([Triple(Method("Plume"), Rel("Hyponym_of"), Method("restricted domain parser"))])
pred: [['Plume', 'Hyponym_of', 'restricted domain parser']]
trues: [['Plume', 'Hyponym_of', 'restricted domain parser']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32293986636971045, 0.3091684434968017, 0.3159041394335512]
text: A separation method is proposed that is nearly statistically efficient ( approaching the corresponding Cramér-Rao lower bound ) , if the separated signals obey the assumed model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('separation method')
# Generic('method')
# Generic('statistically efficient')
# Other_scientific_term('model')
# Other_scientific_term('separated signals')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("separation method")), Triple(Generic("method"), Rel("Compare"), Generic("statistically efficient")), Triple(Other_scientific_term("model"), Rel("Used_for"), Other_scientific_term("separated signals"))])
pred: [['method', 'Used_for', 'separation method'], ['method', 'Compare', 'statistically efficient'], ['model', 'Used_for', 'separated signals']]
trues: [['Cramér-Rao lower bound )', 'Feature_of', 'separation method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32079646017699115, 0.30851063829787234, 0.31453362255965295]
text: In this paper , we explore geometric structures of 3D lines in ray space for improving light field triangulation and stereo matching .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('geometric structures of 3D lines in ray space')
# Task('light field triangulation')
# Other_scientific_term('geometric structures of 3D lines in ray space')
# Task('stereo matching')
# Task('light field triangulation')
# Task('stereo matching')
# Generic('this')
# Other_scientific_term('geometric structures of 3D lines in ray space')

extract = Extract([Triple(Other_scientific_term("geometric structures of 3D lines in ray space"), Rel("Used_for"), Task("light field triangulation")), Triple(Other_scientific_term("geometric structures of 3D lines in ray space"), Rel("Used_for"), Task("stereo matching")), Triple(Task("light field triangulation"), Rel("Used_for"), Task("stereo matching")), Triple(Generic("this"), Rel("Conjunction"), Other_scientific_term("geometric structures of 3D lines in ray space"))])
pred: [['geometric structures of 3D lines in ray space', 'Used_for', 'light field triangulation'], ['geometric structures of 3D lines in ray space', 'Used_for', 'stereo matching'], ['light field triangulation', 'Used_for', 'stereo matching'], ['this', 'Conjunction', 'geometric structures of 3D lines in ray space']]
trues: [['geometric structures of 3D lines', 'Used_for', 'light field triangulation'], ['geometric structures of 3D lines', 'Used_for', 'stereo matching'], ['ray space', 'Feature_of', 'geometric structures of 3D lines'], ['light field triangulation', 'Conjunction', 'stereo matching']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31798245614035087, 0.3059071729957806, 0.3118279569892473]
text: This research is part of a larger study of anaphoric expressions , the results of which will be incorporated into a natural language generation system .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('anaphoric expressions')
# Generic('results')
# Generic('results')
# Method('natural language generation system')

extract = Extract([Triple(Task("anaphoric expressions"), Rel("Part_of"), Generic("results")), Triple(Generic("results"), Rel("Used_for"), Method("natural language generation system"))])
pred: [['anaphoric expressions', 'Part_of', 'results'], ['results', 'Used_for', 'natural language generation system']]
trues: [['anaphoric expressions', 'Used_for', 'natural language generation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3165938864628821, 0.30526315789473685, 0.3108252947481243]
text: We also derive an efficient non-linear extension of WARCA by using the kernel trick .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('kernel trick')
# Method('non-linear extension of WARCA')
# Method('kernel trick')
# Method('non-linear extension of WARCA')

extract = Extract([Triple(Method("kernel trick"), Rel("Used_for"), Method("non-linear extension of WARCA")), Triple(Method("kernel trick"), Rel("Used_for"), Method("non-linear extension of WARCA"))])
pred: [['kernel trick', 'Used_for', 'non-linear extension of WARCA'], ['kernel trick', 'Used_for', 'non-linear extension of WARCA']]
trues: [['kernel trick', 'Used_for', 'non-linear extension of WARCA']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31808278867102396, 0.3067226890756303, 0.31229946524064167]
text: Establishing a `` best '' correspondence between the '' UNL-tree + L0 '' and the '' MS-L0 structure '' , a lattice , may be done using the dictionary and trying to align the tree and the selected trajectory with as few crossing liaisons as possible .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('UNL-tree')
# Other_scientific_term('L0')
# Other_scientific_term('UNL-tree')
# Other_scientific_term('MS-L0 structure')
# Other_scientific_term('MS-L0 structure')
# Other_scientific_term('lattice')

extract = Extract([Triple(Other_scientific_term("UNL-tree"), Rel("Conjunction"), Other_scientific_term("L0")), Triple(Other_scientific_term("UNL-tree"), Rel("Used_for"), Other_scientific_term("MS-L0 structure")), Triple(Other_scientific_term("MS-L0 structure"), Rel("Used_for"), Other_scientific_term("lattice"))])
pred: [['UNL-tree', 'Conjunction', 'L0'], ['UNL-tree', 'Used_for', 'MS-L0 structure'], ['MS-L0 structure', 'Used_for', 'lattice']]
trues: [['UNL-tree + L0', 'Conjunction', 'MS-L0 structure'], ['dictionary', 'Used_for', 'lattice']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31601731601731603, 0.3054393305439331, 0.31063829787234043]
text: At the core of the externally digital architecture is a high-density , low-power analog array performing binary-binary partial matrix-vector multiplication .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('high-density , low-power analog array')
# Method('externally digital architecture')
# Task('binary-binary partial matrix-vector multiplication')
# Other_scientific_term('high-density , low-power analog array')

extract = Extract([Triple(Other_scientific_term("high-density , low-power analog array"), Rel("Part_of"), Method("externally digital architecture")), Triple(Task("binary-binary partial matrix-vector multiplication"), Rel("Used_for"), Other_scientific_term("high-density , low-power analog array"))])
pred: [['high-density , low-power analog array', 'Part_of', 'externally digital architecture'], ['binary-binary partial matrix-vector multiplication', 'Used_for', 'high-density , low-power analog array']]
trues: [['high-density , low-power analog array', 'Part_of', 'externally digital architecture'], ['binary-binary partial matrix-vector multiplication', 'Used_for', 'high-density , low-power analog array']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31896551724137934, 0.30833333333333335, 0.3135593220338983]
text: The NCA is created statistically from a large corpus and recomposed under concept hierarchy constraints and frequency of occurrences .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('large corpus')
# Other_scientific_term('NCA')
# Other_scientific_term('concept hierarchy constraints')
# Other_scientific_term('NCA')
# Other_scientific_term('concept hierarchy constraints')
# Other_scientific_term('frequency of occurrences')

extract = Extract([Triple(Material("large corpus"), Rel("Used_for"), Other_scientific_term("NCA")), Triple(Other_scientific_term("concept hierarchy constraints"), Rel("Used_for"), Other_scientific_term("NCA")), Triple(Other_scientific_term("concept hierarchy constraints"), Rel("Conjunction"), Other_scientific_term("frequency of occurrences"))])
pred: [['large corpus', 'Used_for', 'NCA'], ['concept hierarchy constraints', 'Used_for', 'NCA'], ['concept hierarchy constraints', 'Conjunction', 'frequency of occurrences']]
trues: [['concept hierarchy constraints', 'Used_for', 'NCA'], ['frequency of occurrences', 'Used_for', 'NCA']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.31905781584582443, 0.3091286307053942, 0.3140147523709168]
text: In both domains , we found that unsupervised methods can attain accuracies with 400 unlabeled examples comparable to those attained by supervised methods on 50 labeled examples , and that semi-supervised methods can make good use of small amounts of labeled data .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('unsupervised methods')
# Method('supervised methods')
# Metric('accuracies')
# Method('unsupervised methods')
# Metric('accuracies')
# Method('supervised methods')
# Metric('accuracies')
# Method('semi-supervised methods')
# Metric('unlabeled examples')
# Method('unsupervised methods')
# Metric('unlabeled examples')
# Method('supervised methods')
# Metric('unlabeled examples')
# Method('semi-supervised methods')

extract = Extract([Triple(Method("unsupervised methods"), Rel("Compare"), Method("supervised methods")), Triple(Metric("accuracies"), Rel("Evaluate_for"), Method("unsupervised methods")), Triple(Metric("accuracies"), Rel("Evaluate_for"), Method("supervised methods")), Triple(Metric("accuracies"), Rel("Evaluate_for"), Method("semi-supervised methods")), Triple(Metric("unlabeled examples"), Rel("Evaluate_for"), Method("unsupervised methods")), Triple(Metric("unlabeled examples"), Rel("Conjunction"), Method("supervised methods")), Triple(Metric("unlabeled examples"), Rel("Evaluate_for"), Method("semi-supervised methods"))])
pred: [['unsupervised methods', 'Compare', 'supervised methods'], ['accuracies', 'Evaluate_for', 'unsupervised methods'], ['accuracies', 'Evaluate_for', 'supervised methods'], ['accuracies', 'Evaluate_for', 'semi-supervised methods'], ['unlabeled examples', 'Evaluate_for', 'unsupervised methods'], ['unlabeled examples', 'Conjunction', 'supervised methods'], ['unlabeled examples', 'Evaluate_for', 'semi-supervised methods']]
trues: [['unsupervised methods', 'Compare', 'supervised methods'], ['accuracies', 'Evaluate_for', 'unsupervised methods'], ['accuracies', 'Evaluate_for', 'supervised methods'], ['unlabeled examples', 'Used_for', 'unsupervised methods'], ['labeled examples', 'Used_for', 'supervised methods'], ['labeled data', 'Used_for', 'semi-supervised methods']]
metrics_sample: [0.42857142857142855, 0.5, 0.4615384615384615]
metrics_current: [0.3206751054852321, 0.3114754098360656, 0.316008316008316]
text: GLOSSER is designed to support reading and learning to read in a foreign language .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('GLOSSER')
# Task('reading and learning')

extract = Extract([Triple(Method("GLOSSER"), Rel("Used_for"), Task("reading and learning"))])
pred: [['GLOSSER', 'Used_for', 'reading and learning']]
trues: [['GLOSSER', 'Used_for', 'reading and learning']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32210526315789473, 0.3128834355828221, 0.31742738589211617]
text: Here , we leverage a logistic stick-breaking representation and recent innovations in Pólya-gamma augmentation to reformu-late the multinomial distribution in terms of latent variables with jointly Gaussian likelihoods , enabling us to take advantage of a host of Bayesian inference techniques for Gaussian models with minimal overhead .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('logistic stick-breaking representation')
# Other_scientific_term('multinomial distribution')
# Method('Pólya-gamma augmentation')
# Other_scientific_term('multinomial distribution')
# Other_scientific_term('jointly Gaussian likelihoods')
# Other_scientific_term('multinomial distribution')
# Method('Bayesian inference techniques')
# Other_scientific_term('multinomial distribution')
# Other_scientific_term('Bayesian inference techniques')
# Other_scientific_term('Gaussian models')

extract = Extract([Triple(Method("logistic stick-breaking representation"), Rel("Used_for"), Other_scientific_term("multinomial distribution")), Triple(Method("Pólya-gamma augmentation"), Rel("Used_for"), Other_scientific_term("multinomial distribution")), Triple(Other_scientific_term("jointly Gaussian likelihoods"), Rel("Used_for"), Other_scientific_term("multinomial distribution")), Triple(Method("Bayesian inference techniques"), Rel("Used_for"), Other_scientific_term("multinomial distribution")), Triple(Method("Bayesian inference techniques"), Rel("Used_for"), Other_scientific_term("Gaussian models"))])
pred: [['logistic stick-breaking representation', 'Used_for', 'multinomial distribution'], ['Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'], ['jointly Gaussian likelihoods', 'Used_for', 'multinomial distribution'], ['Bayesian inference techniques', 'Used_for', 'multinomial distribution'], ['Bayesian inference techniques', 'Used_for', 'Gaussian models']]
trues: [['logistic stick-breaking representation', 'Used_for', 'multinomial distribution'], ['Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'], ['latent variables', 'Part_of', 'multinomial distribution'], ['jointly Gaussian likelihoods', 'Feature_of', 'latent variables'], ['Bayesian inference techniques', 'Used_for', 'Gaussian models'], ['minimal overhead', 'Feature_of', 'Gaussian models']]
metrics_sample: [0.6, 0.5, 0.5454545454545454]
metrics_current: [0.325, 0.3151515151515151, 0.32]
text: Our approach outperforms state-of-the-art trackers on the VIVID benchmark datasets .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('approach')
# Generic('trackers')
# Material('VIVID benchmark datasets')
# Generic('approach')

extract = Extract([Triple(Generic("approach"), Rel("Compare"), Generic("trackers")), Triple(Material("VIVID benchmark datasets"), Rel("Evaluate_for"), Generic("approach"))])
pred: [['approach', 'Compare', 'trackers'], ['VIVID benchmark datasets', 'Evaluate_for', 'approach']]
trues: [['state-of-the-art trackers', 'Compare', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'state-of-the-art trackers']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3257261410788382, 0.3152610441767068, 0.32040816326530613]
text: Recent progress in computer vision has been driven by high-capacity models trained on large datasets .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('high-capacity models')
# Task('computer vision')
# Material('large datasets')
# Method('high-capacity models')

extract = Extract([Triple(Method("high-capacity models"), Rel("Used_for"), Task("computer vision")), Triple(Material("large datasets"), Rel("Used_for"), Method("high-capacity models"))])
pred: [['high-capacity models', 'Used_for', 'computer vision'], ['large datasets', 'Used_for', 'high-capacity models']]
trues: [['high-capacity models', 'Used_for', 'computer vision'], ['large datasets', 'Used_for', 'high-capacity models']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3285123966942149, 0.318, 0.3231707317073171]
text: We further propose a parameter training algorithm for the present model based on a decision tree-based context clustering .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('parameter training algorithm')
# Generic('model')

extract = Extract([Triple(Method("parameter training algorithm"), Rel("Used_for"), Generic("model"))])
pred: [['parameter training algorithm', 'Used_for', 'model']]
trues: [['parameter training algorithm', 'Used_for', 'model'], ['decision tree-based context clustering', 'Used_for', 'parameter training algorithm']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32989690721649484, 0.3187250996015936, 0.3242147922998987]
text: In this paper we present a new UV procedure with two major features : a ) Confidence tests are applied to decoded string hypotheses obtained from using word and garbage models that represent OOV words and noises .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('UV procedure')
# Generic('major features')
# Method('Confidence tests')
# Other_scientific_term('decoded string hypotheses')
# Method('word and garbage models')
# Other_scientific_term('OOV words')
# Method('word and garbage models')
# Other_scientific_term('noises')
# Other_scientific_term('OOV words')
# Other_scientific_term('noises')
# Other_scientific_term('noises')
# Method('word and garbage models')

extract = Extract([Triple(Method("UV procedure"), Rel("Used_for"), Generic("major features")), Triple(Method("Confidence tests"), Rel("Used_for"), Other_scientific_term("decoded string hypotheses")), Triple(Method("word and garbage models"), Rel("Used_for"), Other_scientific_term("OOV words")), Triple(Method("word and garbage models"), Rel("Conjunction"), Other_scientific_term("noises")), Triple(Other_scientific_term("OOV words"), Rel("Used_for"), Other_scientific_term("noises")), Triple(Other_scientific_term("noises"), Rel("Used_for"), Method("word and garbage models"))])
pred: [['UV procedure', 'Used_for', 'major features'], ['Confidence tests', 'Used_for', 'decoded string hypotheses'], ['word and garbage models', 'Used_for', 'OOV words'], ['word and garbage models', 'Conjunction', 'noises'], ['OOV words', 'Used_for', 'noises'], ['noises', 'Used_for', 'word and garbage models']]
trues: [['Confidence tests', 'Used_for', 'decoded string hypotheses'], ['noises', 'Conjunction', 'OOV words']]
metrics_sample: [0.16666666666666666, 0.5, 0.25]
metrics_current: [0.32790224032586557, 0.3194444444444444, 0.3236180904522613]
text: In this paper , we introduce an annotation scheme for scientific articles which can be used to build such a resource in a consistent way .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('annotation scheme')
# Material('scientific articles')

extract = Extract([Triple(Method("annotation scheme"), Rel("Used_for"), Material("scientific articles"))])
pred: [['annotation scheme', 'Used_for', 'scientific articles']]
trues: [['annotation scheme', 'Used_for', 'scientific articles'], ['annotation scheme', 'Used_for', 'resource']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32926829268292684, 0.3201581027667984, 0.3246492985971944]
text: Thus , the limitations of the automatic metrics used within MT are also discussed in this regard .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('automatic metrics')
# Task('MT')

extract = Extract([Triple(Metric("automatic metrics"), Rel("Used_for"), Task("MT"))])
pred: [['automatic metrics', 'Used_for', 'MT']]
trues: [['automatic metrics', 'Evaluate_for', 'MT']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3286004056795132, 0.31952662721893493, 0.32400000000000007]
text: MINPRAN 's properties are connrmed experimentally on synthetic data and compare favorably to least median of squares .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('MINPRAN 's properties')
# Method('least median of squares')

extract = Extract([Triple(Generic("MINPRAN 's properties"), Rel("Compare"), Method("least median of squares"))])
pred: [["MINPRAN 's properties", 'Compare', 'least median of squares']]
trues: [['synthetic data', 'Evaluate_for', 'MINPRAN'], ['least median of squares', 'Compare', 'MINPRAN']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32793522267206476, 0.3182711198428291, 0.32303090727816547]
text: b ) The UV procedure is based on three different confidence tests , two based on acoustic measures and one founded on linguistic information , applied in a hierarchical structure .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('confidence tests')
# Method('UV procedure')
# Metric('acoustic measures')
# Other_scientific_term('confidence tests')
# Metric('acoustic measures')
# Other_scientific_term('confidence tests')
# Other_scientific_term('confidence tests')
# Other_scientific_term('hierarchical structure')
# Other_scientific_term('linguistic information')
# Other_scientific_term('confidence tests')
# Other_scientific_term('linguistic information')
# Other_scientific_term('confidence tests')
# Other_scientific_term('hierarchical structure')

extract = Extract([Triple(Other_scientific_term("confidence tests"), Rel("Used_for"), Method("UV procedure")), Triple(Metric("acoustic measures"), Rel("Used_for"), Other_scientific_term("confidence tests")), Triple(Metric("acoustic measures"), Rel("Conjunction"), Other_scientific_term("confidence tests")), Triple(Other_scientific_term("confidence tests"), Rel("Used_for"), Other_scientific_term("hierarchical structure")), Triple(Other_scientific_term("linguistic information"), Rel("Conjunction"), Other_scientific_term("confidence tests")), Triple(Other_scientific_term("linguistic information"), Rel("Used_for"), Other_scientific_term("hierarchical structure"))])
pred: [['confidence tests', 'Used_for', 'UV procedure'], ['acoustic measures', 'Used_for', 'confidence tests'], ['acoustic measures', 'Conjunction', 'confidence tests'], ['confidence tests', 'Used_for', 'hierarchical structure'], ['linguistic information', 'Conjunction', 'confidence tests'], ['linguistic information', 'Used_for', 'hierarchical structure']]
trues: [['confidence tests', 'Used_for', 'UV procedure'], ['confidence tests', 'Used_for', 'hierarchical structure'], ['two', 'Hyponym_of', 'confidence tests'], ['acoustic measures', 'Used_for', 'two'], ['one', 'Hyponym_of', 'confidence tests'], ['linguistic information', 'Used_for', 'one']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.328, 0.31844660194174756, 0.3231527093596059]
text: We evaluate across two corpora ( conversational telephone speech and broadcast news speech ) on both human transcriptions and speech recognition output .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('human transcriptions')
# Generic('corpora')
# Material('human transcriptions')
# Material('speech recognition output')
# Material('human transcriptions')
# Material('speech recognition output')
# Material('speech recognition output')
# Generic('corpora')

extract = Extract([Triple(Material("human transcriptions"), Rel("Evaluate_for"), Generic("corpora")), Triple(Material("human transcriptions"), Rel("Evaluate_for"), Material("speech recognition output")), Triple(Material("human transcriptions"), Rel("Conjunction"), Material("speech recognition output")), Triple(Material("speech recognition output"), Rel("Evaluate_for"), Generic("corpora"))])
pred: [['human transcriptions', 'Evaluate_for', 'corpora'], ['human transcriptions', 'Evaluate_for', 'speech recognition output'], ['human transcriptions', 'Conjunction', 'speech recognition output'], ['speech recognition output', 'Evaluate_for', 'corpora']]
trues: [['corpora', 'Evaluate_for', 'human transcriptions'], ['corpora', 'Evaluate_for', 'speech recognition output'], ['conversational telephone speech', 'Hyponym_of', 'corpora'], ['conversational telephone speech', 'Conjunction', 'broadcast news speech'], ['broadcast news speech', 'Hyponym_of', 'corpora'], ['human transcriptions', 'Conjunction', 'speech recognition output']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.3273809523809524, 0.31669865642994244, 0.32195121951219513]
text: The result is a discrete motor control representation of the continuous pen motion , via the quantized levels of the model parameters .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('discrete motor control representation')
# Other_scientific_term('continuous pen motion')
# Other_scientific_term('quantized levels of the model parameters')
# Method('discrete motor control representation')

extract = Extract([Triple(Method("discrete motor control representation"), Rel("Used_for"), Other_scientific_term("continuous pen motion")), Triple(Other_scientific_term("quantized levels of the model parameters"), Rel("Used_for"), Method("discrete motor control representation"))])
pred: [['discrete motor control representation', 'Used_for', 'continuous pen motion'], ['quantized levels of the model parameters', 'Used_for', 'discrete motor control representation']]
trues: [['discrete motor control representation', 'Used_for', 'continuous pen motion']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.32806324110671936, 0.31800766283524906, 0.3229571984435798]
text: In the case of natural speech signals , the method is shown to have separation accuracy better than the state-of-the-art methods .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('method')
# Generic('state-of-the-art methods')

extract = Extract([Triple(Generic("method"), Rel("Compare"), Generic("state-of-the-art methods"))])
pred: [['method', 'Compare', 'state-of-the-art methods']]
trues: [['method', 'Used_for', 'natural speech signals'], ['method', 'Compare', 'methods'], ['separation accuracy', 'Evaluate_for', 'method'], ['separation accuracy', 'Evaluate_for', 'methods'], ['methods', 'Used_for', 'natural speech signals']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32741617357001973, 0.31499051233396586, 0.3210831721470019]
text: In this paper , a novel framework for machine transliteration/backtransliteration that allows us to carry out direct orthographical mapping ( DOM ) between two different languages is presented .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('framework')
# Task('machine transliteration/backtransliteration')
# Method('direct orthographical mapping ( DOM )')
# Other_scientific_term('languages')

extract = Extract([Triple(Generic("framework"), Rel("Used_for"), Task("machine transliteration/backtransliteration")), Triple(Method("direct orthographical mapping ( DOM )"), Rel("Used_for"), Other_scientific_term("languages"))])
pred: [['framework', 'Used_for', 'machine transliteration/backtransliteration'], ['direct orthographical mapping ( DOM )', 'Used_for', 'languages']]
trues: [['framework', 'Used_for', 'machine transliteration/backtransliteration'], ['machine transliteration/backtransliteration', 'Used_for', 'direct orthographical mapping ( DOM )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3280943025540275, 0.31568998109640833, 0.3217726396917148]
text: Amorph recognizes NE items in two stages : dictionary lookup and rule application .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('dictionary lookup')
# Other_scientific_term('NE items')
# Method('rule application')
# Other_scientific_term('NE items')

extract = Extract([Triple(Method("dictionary lookup"), Rel("Used_for"), Other_scientific_term("NE items")), Triple(Method("rule application"), Rel("Used_for"), Other_scientific_term("NE items"))])
pred: [['dictionary lookup', 'Used_for', 'NE items'], ['rule application', 'Used_for', 'NE items']]
trues: [['Amorph', 'Used_for', 'NE items'], ['dictionary lookup', 'Part_of', 'Amorph'], ['dictionary lookup', 'Conjunction', 'rule application'], ['rule application', 'Part_of', 'Amorph']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3268101761252446, 0.3133208255159475, 0.31992337164750956]
text: In this paper , we discuss language model adaptation methods given a word list and a raw corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('word list')
# Method('language model adaptation methods')
# Material('word list')
# Material('raw corpus')
# Material('raw corpus')
# Method('language model adaptation methods')

extract = Extract([Triple(Material("word list"), Rel("Used_for"), Method("language model adaptation methods")), Triple(Material("word list"), Rel("Conjunction"), Material("raw corpus")), Triple(Material("raw corpus"), Rel("Used_for"), Method("language model adaptation methods"))])
pred: [['word list', 'Used_for', 'language model adaptation methods'], ['word list', 'Conjunction', 'raw corpus'], ['raw corpus', 'Used_for', 'language model adaptation methods']]
trues: [['word list', 'Used_for', 'language model adaptation methods'], ['word list', 'Conjunction', 'raw corpus'], ['raw corpus', 'Used_for', 'language model adaptation methods']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33073929961089493, 0.31716417910447764, 0.3238095238095238]
text: Many of the resources used are derived from data created by human beings out of an NLP context , especially regarding MT and reference translations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('resources')
# Generic('data')
# Generic('data')
# Generic('resources')
# Material('MT')
# Material('reference translations')

extract = Extract([Triple(Generic("resources"), Rel("Used_for"), Generic("data")), Triple(Generic("data"), Rel("Used_for"), Generic("resources")), Triple(Material("MT"), Rel("Conjunction"), Material("reference translations"))])
pred: [['resources', 'Used_for', 'data'], ['data', 'Used_for', 'resources'], ['MT', 'Conjunction', 'reference translations']]
trues: [['MT', 'Hyponym_of', 'NLP'], ['MT', 'Conjunction', 'reference translations'], ['reference translations', 'Hyponym_of', 'NLP']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3307543520309478, 0.3172541743970315, 0.3238636363636363]
text: Under this framework , a joint source-channel transliteration model , also called n-gram transliteration model ( n-gram TM ) , is further proposed to model the transliteration process .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('joint source-channel transliteration model')
# Other_scientific_term('transliteration process')
# Method('n-gram transliteration model ( n-gram TM )')
# Method('joint source-channel transliteration model')

extract = Extract([Triple(Method("joint source-channel transliteration model"), Rel("Used_for"), Other_scientific_term("transliteration process")), Triple(Method("n-gram transliteration model ( n-gram TM )"), Rel("Hyponym_of"), Method("joint source-channel transliteration model"))])
pred: [['joint source-channel transliteration model', 'Used_for', 'transliteration process'], ['n-gram transliteration model ( n-gram TM )', 'Hyponym_of', 'joint source-channel transliteration model']]
trues: [['framework', 'Used_for', 'joint source-channel transliteration model'], ['n-gram transliteration model ( n-gram TM )', 'Used_for', 'transliteration process']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32947976878612717, 0.31608133086876156, 0.32264150943396225]
text: In the Object Recognition task , there exists a di-chotomy between the categorization of objects and estimating object pose , where the former necessitates a view-invariant representation , while the latter requires a representation capable of capturing pose information over different categories of objects .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('categorization of objects')
# Task('Object Recognition task')
# Task('categorization of objects')
# Task('estimating object pose')
# Method('view-invariant representation')
# Task('categorization of objects')
# Method('representation capable of capturing pose information')
# Task('estimating object pose')

extract = Extract([Triple(Task("categorization of objects"), Rel("Part_of"), Task("Object Recognition task")), Triple(Task("categorization of objects"), Rel("Conjunction"), Task("estimating object pose")), Triple(Method("view-invariant representation"), Rel("Used_for"), Task("categorization of objects")), Triple(Method("representation capable of capturing pose information"), Rel("Used_for"), Task("estimating object pose"))])
pred: [['categorization of objects', 'Part_of', 'Object Recognition task'], ['categorization of objects', 'Conjunction', 'estimating object pose'], ['view-invariant representation', 'Used_for', 'categorization of objects'], ['representation capable of capturing pose information', 'Used_for', 'estimating object pose']]
trues: [['categorization of objects', 'Part_of', 'Object Recognition task'], ['categorization of objects', 'Conjunction', 'estimating object pose'], ['estimating object pose', 'Part_of', 'Object Recognition task'], ['view-invariant representation', 'Used_for', 'former'], ['representation', 'Used_for', 'latter'], ['representation', 'Used_for', 'pose information']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.33078393881453155, 0.3162705667276051, 0.32336448598130846]
text: We also found that OA is crucial for auditory processing by onset neurons ( ONs ) in the next neuronal stage , the auditory brainstem .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('OA')
# Method('auditory processing')
# Other_scientific_term('ONs')
# Other_scientific_term('auditory brainstem')

extract = Extract([Triple(Other_scientific_term("OA"), Rel("Used_for"), Method("auditory processing")), Triple(Other_scientific_term("ONs"), Rel("Part_of"), Other_scientific_term("auditory brainstem"))])
pred: [['OA', 'Used_for', 'auditory processing'], ['ONs', 'Part_of', 'auditory brainstem']]
trues: [['OA', 'Used_for', 'auditory processing'], ['onset neurons ( ONs )', 'Used_for', 'OA']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3314285714285714, 0.31693989071038253, 0.3240223463687151]
text: A language learning experiment showed that assessors can differentiate native from non-native language essays in less than 100 words .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('native from non-native language essays')
# Other_scientific_term('assessors')

extract = Extract([Triple(Material("native from non-native language essays"), Rel("Evaluate_for"), Other_scientific_term("assessors"))])
pred: [['native from non-native language essays', 'Evaluate_for', 'assessors']]
trues: [['language learning', 'Evaluate_for', 'assessors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33079847908745247, 0.31636363636363635, 0.32342007434944237]
text: Machine transliteration/back-transliteration plays an important role in many multilingual speech and language applications .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Machine transliteration/back-transliteration')
# Task('multilingual speech and language applications')

extract = Extract([Triple(Task("Machine transliteration/back-transliteration"), Rel("Used_for"), Task("multilingual speech and language applications"))])
pred: [['Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications']]
trues: [['Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33206831119544594, 0.3176043557168784, 0.32467532467532473]
text: Here we develop an approach for 1 distance that begins with an explicit and exactly distance-preserving embedding of the points into 2 2 .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('2 2')
# Generic('approach')

extract = Extract([Triple(Other_scientific_term("2 2"), Rel("Used_for"), Generic("approach"))])
pred: [['2 2', 'Used_for', 'approach']]
trues: [['approach', 'Used_for', '1 distance']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3314393939393939, 0.3170289855072464, 0.324074074074074]
text: Thus , our method can be applied with great benefit to language pairs for which only scarce resources are available .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Material('scarce resources')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Material("scarce resources"))])
pred: [['method', 'Used_for', 'scarce resources']]
trues: [['scarce resources', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33081285444234404, 0.31645569620253167, 0.32347504621072093]
text: MINPRAN , a new robust operator , nds good ts in data sets where more than 50 % of the points are outliers .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MINPRAN')
# Other_scientific_term('robust operator')

extract = Extract([Triple(Method("MINPRAN"), Rel("Used_for"), Other_scientific_term("robust operator"))])
pred: [['MINPRAN', 'Used_for', 'robust operator']]
trues: [['MINPRAN', 'Hyponym_of', 'robust operator']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.330188679245283, 0.315884476534296, 0.32287822878228783]
text: Using the IEMOCAP database , discrete ( categorical ) and continuous ( attribute ) emotional assessments evaluated by the actors and na ¨ ıve listeners are compared .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('IEMOCAP database')
# Other_scientific_term('discrete ( categorical ) and continuous ( attribute ) emotional assessments')
# Other_scientific_term('discrete ( categorical ) and continuous ( attribute ) emotional assessments')
# Other_scientific_term('actors')
# Other_scientific_term('discrete ( categorical ) and continuous ( attribute ) emotional assessments')
# Other_scientific_term('na ¨ ıve listeners')
# Other_scientific_term('actors')
# Other_scientific_term('na ¨ ıve listeners')

extract = Extract([Triple(Material("IEMOCAP database"), Rel("Evaluate_for"), Other_scientific_term("discrete ( categorical ) and continuous ( attribute ) emotional assessments")), Triple(Other_scientific_term("discrete ( categorical ) and continuous ( attribute ) emotional assessments"), Rel("Evaluate_for"), Other_scientific_term("actors")), Triple(Other_scientific_term("discrete ( categorical ) and continuous ( attribute ) emotional assessments"), Rel("Conjunction"), Other_scientific_term("na ¨ ıve listeners")), Triple(Other_scientific_term("actors"), Rel("Evaluate_for"), Other_scientific_term("na ¨ ıve listeners"))])
pred: [['IEMOCAP database', 'Evaluate_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments'], ['discrete ( categorical ) and continuous ( attribute ) emotional assessments', 'Evaluate_for', 'actors'], ['discrete ( categorical ) and continuous ( attribute ) emotional assessments', 'Conjunction', 'na ¨ ıve listeners'], ['actors', 'Evaluate_for', 'na ¨ ıve listeners']]
trues: [['IEMOCAP database', 'Used_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32771535580524347, 0.3153153153153153, 0.32139577594123053]
text: Our approach is based on the iterative deformation of a 3 -- D surface mesh to minimize an objective function .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('iterative deformation of a 3 -- D surface mesh')
# Generic('approach')

extract = Extract([Triple(Method("iterative deformation of a 3 -- D surface mesh"), Rel("Used_for"), Generic("approach"))])
pred: [['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'approach']]
trues: [['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'approach'], ['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'objective function']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32897196261682243, 0.31597845601436264, 0.3223443223443223]
text: We rigorously establish the correctness of the methodology and show by experimentation using LSH that it is competitive in practice with available alternatives .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Method('LSH')
# Generic('alternatives')

extract = Extract([Triple(Method("LSH"), Rel("Compare"), Generic("alternatives"))])
pred: [['LSH', 'Compare', 'alternatives']]
trues: [['it', 'Compare', 'alternatives']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3283582089552239, 0.3154121863799283, 0.3217550274223035]
text: We show that the trainable sentence planner performs better than the rule-based systems and the baselines , and as well as the hand-crafted system .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Compare')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('trainable sentence planner')
# Method('rule-based systems')
# Method('trainable sentence planner')
# Method('baselines')
# Method('trainable sentence planner')
# Method('hand-crafted system')
# Metric('performance')
# Method('trainable sentence planner')
# Metric('performance')
# Method('rule-based systems')
# Metric('performance')
# Method('baselines')
# Metric('performance')
# Method('hand-crafted system')

extract = Extract([Triple(Method("trainable sentence planner"), Rel("Compare"), Method("rule-based systems")), Triple(Method("trainable sentence planner"), Rel("Compare"), Method("baselines")), Triple(Method("trainable sentence planner"), Rel("Compare"), Method("hand-crafted system")), Triple(Metric("performance"), Rel("Evaluate_for"), Method("trainable sentence planner")), Triple(Metric("performance"), Rel("Evaluate_for"), Method("rule-based systems")), Triple(Metric("performance"), Rel("Evaluate_for"), Method("baselines")), Triple(Metric("performance"), Rel("Evaluate_for"), Method("hand-crafted system"))])
pred: [['trainable sentence planner', 'Compare', 'rule-based systems'], ['trainable sentence planner', 'Compare', 'baselines'], ['trainable sentence planner', 'Compare', 'hand-crafted system'], ['performance', 'Evaluate_for', 'trainable sentence planner'], ['performance', 'Evaluate_for', 'rule-based systems'], ['performance', 'Evaluate_for', 'baselines'], ['performance', 'Evaluate_for', 'hand-crafted system']]
trues: [['trainable sentence planner', 'Compare', 'rule-based systems'], ['trainable sentence planner', 'Compare', 'baselines'], ['trainable sentence planner', 'Compare', 'hand-crafted system'], ['rule-based systems', 'Conjunction', 'baselines'], ['baselines', 'Conjunction', 'hand-crafted system']]
metrics_sample: [0.42857142857142855, 0.6, 0.5]
metrics_current: [0.3296500920810313, 0.31793960923623443, 0.3236889692585895]
text: The results of the experiment show that in most of the cases the cooccurrence statistics indeed reflect the semantic constraints and thus provide a basis for a useful disambiguation tool .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('cooccurrence statistics')
# Method('disambiguation tool')

extract = Extract([Triple(Other_scientific_term("cooccurrence statistics"), Rel("Used_for"), Method("disambiguation tool"))])
pred: [['cooccurrence statistics', 'Used_for', 'disambiguation tool']]
trues: [['cooccurrence statistics', 'Used_for', 'disambiguation tool']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33088235294117646, 0.3191489361702128, 0.3249097472924187]
text: The surface realizations of morphological constructions are constrained and modified by a number of phonetic rules such as vowel harmony .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('vowel harmony')
# Other_scientific_term('phonetic rules')

extract = Extract([Triple(Other_scientific_term("vowel harmony"), Rel("Part_of"), Other_scientific_term("phonetic rules"))])
pred: [['vowel harmony', 'Part_of', 'phonetic rules']]
trues: [['phonetic rules', 'Used_for', 'surface realizations of morphological constructions'], ['vowel harmony', 'Hyponym_of', 'phonetic rules']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3302752293577982, 0.31802120141342755, 0.324032403240324]
text: Our study reveals that the proposed method not only reduces an extensive system development effort but also improves the transliteration accuracy significantly .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('method')
# Metric('transliteration accuracy')
# Metric('transliteration accuracy')
# Generic('method')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Metric("transliteration accuracy")), Triple(Metric("transliteration accuracy"), Rel("Evaluate_for"), Generic("method"))])
pred: [['method', 'Used_for', 'transliteration accuracy'], ['transliteration accuracy', 'Evaluate_for', 'method']]
trues: [['transliteration accuracy', 'Evaluate_for', 'method']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.33089579524680074, 0.31922398589065254, 0.3249551166965889]
text: Based on these results , we present an ECA that uses verbal and nonverbal grounding acts to update dialogue state .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('verbal and nonverbal grounding acts')
# Method('ECA')
# Other_scientific_term('verbal and nonverbal grounding acts')
# Other_scientific_term('dialogue state')

extract = Extract([Triple(Other_scientific_term("verbal and nonverbal grounding acts"), Rel("Used_for"), Method("ECA")), Triple(Other_scientific_term("verbal and nonverbal grounding acts"), Rel("Used_for"), Other_scientific_term("dialogue state"))])
pred: [['verbal and nonverbal grounding acts', 'Used_for', 'ECA'], ['verbal and nonverbal grounding acts', 'Used_for', 'dialogue state']]
trues: [['verbal and nonverbal grounding acts', 'Used_for', 'ECA'], ['verbal and nonverbal grounding acts', 'Used_for', 'dialogue state']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3333333333333333, 0.3216168717047452, 0.3273703041144902]
text: Our method takes advantage of the different way in which word senses are lexicalised in English and Chinese , and also exploits the large amount of Chinese text available in corpora and on the Web .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('English')
# Other_scientific_term('word senses')
# Material('Chinese text')
# Generic('method')

extract = Extract([Triple(Material("English"), Rel("Used_for"), Other_scientific_term("word senses")), Triple(Material("Chinese text"), Rel("Used_for"), Generic("method"))])
pred: [['English', 'Used_for', 'word senses'], ['Chinese text', 'Used_for', 'method']]
trues: [['Chinese text', 'Part_of', 'corpora'], ['Chinese text', 'Part_of', 'Web'], ['corpora', 'Conjunction', 'Web']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33212341197822143, 0.31993006993006995, 0.3259127337488869]
text: Another problem with determiners is their inherent ambiguity .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('ambiguity')
# Other_scientific_term('determiners')

extract = Extract([Triple(Other_scientific_term("ambiguity"), Rel("Feature_of"), Other_scientific_term("determiners"))])
pred: [['ambiguity', 'Feature_of', 'determiners']]
trues: [['ambiguity', 'Feature_of', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3333333333333333, 0.32111692844677137, 0.3271111111111111]
text: We evaluate the demands that task dialogues collected using this technique , place upon a prototype Natural Language system .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('technique')
# Task('task dialogues')

extract = Extract([Triple(Generic("technique"), Rel("Used_for"), Task("task dialogues"))])
pred: [['technique', 'Used_for', 'task dialogues']]
trues: [['task dialogues', 'Used_for', 'prototype Natural Language system'], ['technique', 'Used_for', 'task dialogues']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3345388788426763, 0.3217391304347826, 0.32801418439716307]
text: The purpose of this research is to test the efficacy of applying automated evaluation techniques , originally devised for the evaluation of human language learners , to the output of machine translation ( MT ) systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('automated evaluation techniques')
# Generic('research')
# Method('automated evaluation techniques')
# Other_scientific_term('human language learners')
# Method('automated evaluation techniques')
# Method('machine translation ( MT ) systems')
# Metric('evaluation')
# Method('automated evaluation techniques')
# Metric('evaluation')
# Method('machine translation ( MT ) systems')

extract = Extract([Triple(Method("automated evaluation techniques"), Rel("Used_for"), Generic("research")), Triple(Method("automated evaluation techniques"), Rel("Used_for"), Other_scientific_term("human language learners")), Triple(Method("automated evaluation techniques"), Rel("Evaluate_for"), Method("machine translation ( MT ) systems")), Triple(Metric("evaluation"), Rel("Evaluate_for"), Method("automated evaluation techniques")), Triple(Metric("evaluation"), Rel("Evaluate_for"), Method("machine translation ( MT ) systems"))])
pred: [['automated evaluation techniques', 'Used_for', 'research'], ['automated evaluation techniques', 'Used_for', 'human language learners'], ['automated evaluation techniques', 'Evaluate_for', 'machine translation ( MT ) systems'], ['evaluation', 'Evaluate_for', 'automated evaluation techniques'], ['evaluation', 'Evaluate_for', 'machine translation ( MT ) systems']]
trues: [['automated evaluation techniques', 'Used_for', 'evaluation of human language learners']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33154121863799285, 0.3211805555555556, 0.3262786596119929]
text: The objects can be complex in that they may be composed of multiple layers with different refractive indices .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('layers')
# Generic('objects')

extract = Extract([Triple(Other_scientific_term("layers"), Rel("Part_of"), Generic("objects"))])
pred: [['layers', 'Part_of', 'objects']]
trues: [['multiple layers', 'Part_of', 'they'], ['refractive indices', 'Feature_of', 'multiple layers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33094812164579607, 0.32006920415224915, 0.32541776605101147]
text: Our approach is among the first to propose a generative proba-bilistic framework for 3D object categorization .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('generative proba-bilistic framework')
# Task('3D object categorization')

extract = Extract([Triple(Method("generative proba-bilistic framework"), Rel("Used_for"), Task("3D object categorization"))])
pred: [['generative proba-bilistic framework', 'Used_for', '3D object categorization']]
trues: [['generative proba-bilistic framework', 'Used_for', '3D object categorization']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33214285714285713, 0.32124352331606215, 0.3266022827041264]
text: The two main contributions of this paper are : i ) a new type of three-plane graph for dense-stereo dynamic-programming , that encourages correct occlusion labeling ; ii ) a compact geometric derivation for novel-view synthesis by direct projection of the minimum-cost surface .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('three-plane graph')
# Method('dense-stereo dynamic-programming')
# Method('three-plane graph')
# Other_scientific_term('occlusion labeling')
# Method('geometric derivation')
# Task('novel-view synthesis')

extract = Extract([Triple(Method("three-plane graph"), Rel("Used_for"), Method("dense-stereo dynamic-programming")), Triple(Method("three-plane graph"), Rel("Used_for"), Other_scientific_term("occlusion labeling")), Triple(Method("geometric derivation"), Rel("Used_for"), Task("novel-view synthesis"))])
pred: [['three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'], ['three-plane graph', 'Used_for', 'occlusion labeling'], ['geometric derivation', 'Used_for', 'novel-view synthesis']]
trues: [['three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'], ['dense-stereo dynamic-programming', 'Used_for', 'occlusion labeling'], ['compact geometric derivation', 'Used_for', 'novel-view synthesis'], ['direct projection of the minimum-cost surface', 'Used_for', 'compact geometric derivation']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.3321492007104796, 0.32075471698113206, 0.32635253054101226]
text: We demonstrate that for certain field structured extraction tasks , such as classified advertisements and bibliographic citations , small amounts of prior knowledge can be used to learn effective models in a primarily unsupervised fashion .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Task('classified advertisements')
# Task('field structured extraction tasks')
# Task('classified advertisements')
# Task('bibliographic citations')
# Task('bibliographic citations')
# Task('field structured extraction tasks')

extract = Extract([Triple(Task("classified advertisements"), Rel("Hyponym_of"), Task("field structured extraction tasks")), Triple(Task("classified advertisements"), Rel("Conjunction"), Task("bibliographic citations")), Triple(Task("bibliographic citations"), Rel("Hyponym_of"), Task("field structured extraction tasks"))])
pred: [['classified advertisements', 'Hyponym_of', 'field structured extraction tasks'], ['classified advertisements', 'Conjunction', 'bibliographic citations'], ['bibliographic citations', 'Hyponym_of', 'field structured extraction tasks']]
trues: [['classified advertisements', 'Hyponym_of', 'field structured extraction tasks'], ['classified advertisements', 'Conjunction', 'bibliographic citations'], ['bibliographic citations', 'Hyponym_of', 'field structured extraction tasks'], ['prior knowledge', 'Used_for', 'field structured extraction tasks']]
metrics_sample: [1.0, 0.75, 0.8571428571428571]
metrics_current: [0.33568904593639576, 0.32367972742759793, 0.3295750216825672]
text: The resulting logical expression is then transformed by a planning algorithm into efficient Prolog , cf. query optimisation in a relational database .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('planning algorithm')
# Other_scientific_term('logical expression')
# Method('Prolog')
# Method('planning algorithm')

extract = Extract([Triple(Method("planning algorithm"), Rel("Used_for"), Other_scientific_term("logical expression")), Triple(Method("Prolog"), Rel("Used_for"), Method("planning algorithm"))])
pred: [['planning algorithm', 'Used_for', 'logical expression'], ['Prolog', 'Used_for', 'planning algorithm']]
trues: [['planning algorithm', 'Used_for', 'logical expression'], ['relational database', 'Used_for', 'query optimisation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3362676056338028, 0.3242784380305603, 0.3301642178046672]
text: Our system incorporates a linguistic parser/generator for LFG , a transfer component for parse reduction operating on packed parse forests , and a maximum-entropy model for stochastic output selection .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('linguistic parser/generator')
# Generic('system')
# Method('linguistic parser/generator')
# Method('transfer component')
# Method('transfer component')
# Generic('system')
# Method('transfer component')
# Method('parse reduction')
# Method('parse reduction')
# Other_scientific_term('packed parse forests')
# Method('parse reduction')
# Method('maximum-entropy model')
# Method('maximum-entropy model')
# Method('stochastic output selection')

extract = Extract([Triple(Method("linguistic parser/generator"), Rel("Part_of"), Generic("system")), Triple(Method("linguistic parser/generator"), Rel("Conjunction"), Method("transfer component")), Triple(Method("transfer component"), Rel("Part_of"), Generic("system")), Triple(Method("transfer component"), Rel("Used_for"), Method("parse reduction")), Triple(Method("parse reduction"), Rel("Used_for"), Other_scientific_term("packed parse forests")), Triple(Method("parse reduction"), Rel("Conjunction"), Method("maximum-entropy model")), Triple(Method("maximum-entropy model"), Rel("Used_for"), Method("stochastic output selection"))])
pred: [['linguistic parser/generator', 'Part_of', 'system'], ['linguistic parser/generator', 'Conjunction', 'transfer component'], ['transfer component', 'Part_of', 'system'], ['transfer component', 'Used_for', 'parse reduction'], ['parse reduction', 'Used_for', 'packed parse forests'], ['parse reduction', 'Conjunction', 'maximum-entropy model'], ['maximum-entropy model', 'Used_for', 'stochastic output selection']]
trues: [['linguistic parser/generator', 'Part_of', 'system'], ['linguistic parser/generator', 'Used_for', 'LFG'], ['linguistic parser/generator', 'Conjunction', 'transfer component'], ['transfer component', 'Part_of', 'system'], ['transfer component', 'Used_for', 'parse reduction'], ['transfer component', 'Conjunction', 'maximum-entropy model'], ['packed parse forests', 'Used_for', 'parse reduction'], ['maximum-entropy model', 'Part_of', 'system'], ['maximum-entropy model', 'Used_for', 'stochastic output selection']]
metrics_sample: [0.7142857142857143, 0.5555555555555556, 0.6250000000000001]
metrics_current: [0.3408695652173913, 0.3277591973244147, 0.33418584825234443]
text: This paper highlights a particular class of miscommunication -- reference problems -- by describing a case study and techniques for avoiding failures of reference .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('reference problems')
# Other_scientific_term('miscommunication')
# Generic('techniques')
# Task('failures of reference')

extract = Extract([Triple(Other_scientific_term("reference problems"), Rel("Hyponym_of"), Other_scientific_term("miscommunication")), Triple(Generic("techniques"), Rel("Used_for"), Task("failures of reference"))])
pred: [['reference problems', 'Hyponym_of', 'miscommunication'], ['techniques', 'Used_for', 'failures of reference']]
trues: [['reference problems', 'Hyponym_of', 'miscommunication'], ['techniques', 'Used_for', 'failures of reference']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3431542461005199, 0.33, 0.3364485981308411]
text: The modified graph is then sent to the UNL-L0 deconverter and the result shown .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('modified graph')
# Method('UNL-L0 deconverter')

extract = Extract([Triple(Generic("modified graph"), Rel("Used_for"), Method("UNL-L0 deconverter"))])
pred: [['modified graph', 'Used_for', 'UNL-L0 deconverter']]
trues: [['graph', 'Used_for', 'UNL-L0 deconverter']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34256055363321797, 0.32945091514143093, 0.33587786259541985]
text: We introduce a novel method of shape constrained image segmentation which is based on mixtures of feature distributions for color and texture as well as probabilistic shape knowledge .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('shape constrained image segmentation')
# Generic('method')
# Method('mixtures of feature distributions')
# Method('mixtures of feature distributions')
# Task('shape constrained image segmentation')
# Method('mixtures of feature distributions')
# Other_scientific_term('color and texture')
# Other_scientific_term('color and texture')
# Task('shape constrained image segmentation')
# Other_scientific_term('probabilistic shape knowledge')
# Generic('method')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("shape constrained image segmentation")), Triple(Generic("method"), Rel("Used_for"), Method("mixtures of feature distributions")), Triple(Method("mixtures of feature distributions"), Rel("Used_for"), Task("shape constrained image segmentation")), Triple(Method("mixtures of feature distributions"), Rel("Conjunction"), Other_scientific_term("color and texture")), Triple(Other_scientific_term("color and texture"), Rel("Used_for"), Task("shape constrained image segmentation")), Triple(Other_scientific_term("probabilistic shape knowledge"), Rel("Used_for"), Generic("method"))])
pred: [['method', 'Used_for', 'shape constrained image segmentation'], ['method', 'Used_for', 'mixtures of feature distributions'], ['mixtures of feature distributions', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Conjunction', 'color and texture'], ['color and texture', 'Used_for', 'shape constrained image segmentation'], ['probabilistic shape knowledge', 'Used_for', 'method']]
trues: [['method', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Used_for', 'method'], ['mixtures of feature distributions', 'Used_for', 'color'], ['mixtures of feature distributions', 'Used_for', 'texture'], ['mixtures of feature distributions', 'Used_for', 'probabilistic shape knowledge'], ['color', 'Conjunction', 'texture'], ['texture', 'Conjunction', 'probabilistic shape knowledge']]
metrics_sample: [0.16666666666666666, 0.14285714285714285, 0.15384615384615383]
metrics_current: [0.3407534246575342, 0.32730263157894735, 0.3338926174496644]
text: Criteria for anaphora resolution within sentence boundaries rephrase major concepts from GB 's binding theory , while those for text-level anaphora incorporate an adapted version of a Grosz-Sidner-style focus model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('binding theory')
# Task('anaphora resolution')
# Other_scientific_term('binding theory')
# Task('anaphora resolution')
# Method('Grosz-Sidner-style focus model')
# Task('text-level anaphora')

extract = Extract([Triple(Other_scientific_term("binding theory"), Rel("Used_for"), Task("anaphora resolution")), Triple(Other_scientific_term("binding theory"), Rel("Part_of"), Task("anaphora resolution")), Triple(Method("Grosz-Sidner-style focus model"), Rel("Used_for"), Task("text-level anaphora"))])
pred: [['binding theory', 'Used_for', 'anaphora resolution'], ['binding theory', 'Part_of', 'anaphora resolution'], ['Grosz-Sidner-style focus model', 'Used_for', 'text-level anaphora']]
trues: [['Criteria', 'Used_for', 'anaphora resolution within sentence boundaries'], ["GB 's binding theory", 'Used_for', 'Criteria'], ['those', 'Used_for', 'text-level anaphora'], ['Grosz-Sidner-style focus model', 'Part_of', 'those']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3390119250425894, 0.32516339869281047, 0.3319432860717264]
text: The system is trained on 181,000 expert games and shows excellent prediction performance as indicated by its ability to perfectly predict the moves made by professional Go players in 34 % of test positions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('expert games')
# Generic('system')
# Metric('prediction performance')
# Generic('system')

extract = Extract([Triple(Material("expert games"), Rel("Used_for"), Generic("system")), Triple(Metric("prediction performance"), Rel("Evaluate_for"), Generic("system"))])
pred: [['expert games', 'Used_for', 'system'], ['prediction performance', 'Evaluate_for', 'system']]
trues: [['expert games', 'Used_for', 'system']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3395585738539898, 0.3262642740619902, 0.33277870216306155]
text: The proposed detectors are able to capture large-scale structures and distinctive textured patterns , and exhibit strong invariance to rotation , illumination variation , and blur .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('detectors')
# Other_scientific_term('large-scale structures')
# Generic('detectors')
# Other_scientific_term('textured patterns')
# Other_scientific_term('large-scale structures')
# Other_scientific_term('textured patterns')
# Generic('invariance')
# Generic('detectors')
# Generic('invariance')
# Other_scientific_term('rotation')
# Generic('invariance')
# Other_scientific_term('illumination variation')
# Generic('invariance')
# Other_scientific_term('illumination variation')
# Other_scientific_term('blur')

extract = Extract([Triple(Generic("detectors"), Rel("Used_for"), Other_scientific_term("large-scale structures")), Triple(Generic("detectors"), Rel("Used_for"), Other_scientific_term("textured patterns")), Triple(Other_scientific_term("large-scale structures"), Rel("Conjunction"), Other_scientific_term("textured patterns")), Triple(Generic("invariance"), Rel("Used_for"), Generic("detectors")), Triple(Generic("invariance"), Rel("Used_for"), Other_scientific_term("rotation")), Triple(Generic("invariance"), Rel("Conjunction"), Other_scientific_term("illumination variation")), Triple(Generic("invariance"), Rel("Used_for"), Other_scientific_term("illumination variation")), Triple(Generic("invariance"), Rel("Used_for"), Other_scientific_term("blur"))])
pred: [['detectors', 'Used_for', 'large-scale structures'], ['detectors', 'Used_for', 'textured patterns'], ['large-scale structures', 'Conjunction', 'textured patterns'], ['invariance', 'Used_for', 'detectors'], ['invariance', 'Used_for', 'rotation'], ['invariance', 'Conjunction', 'illumination variation'], ['invariance', 'Used_for', 'illumination variation'], ['invariance', 'Used_for', 'blur']]
trues: [['detectors', 'Used_for', 'large-scale structures'], ['detectors', 'Used_for', 'distinctive textured patterns'], ['detectors', 'Used_for', 'rotation'], ['detectors', 'Used_for', 'illumination variation'], ['detectors', 'Used_for', 'blur'], ['large-scale structures', 'Conjunction', 'distinctive textured patterns'], ['rotation', 'Conjunction', 'illumination variation'], ['illumination variation', 'Conjunction', 'blur']]
metrics_sample: [0.125, 0.125, 0.125]
metrics_current: [0.33668341708542715, 0.32367149758454106, 0.33004926108374383]
text: Computing power per area and power consumption is amongst the highest reported for a single chip .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Metric('Computing power per area')
# Metric('power consumption')

extract = Extract([Triple(Metric("Computing power per area"), Rel("Conjunction"), Metric("power consumption"))])
pred: [['Computing power per area', 'Conjunction', 'power consumption']]
trues: [['Computing power per area', 'Conjunction', 'power consumption']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3377926421404682, 0.3247588424437299, 0.33114754098360655]
text: We argue that it is necessary to draw a line between generalizable semantic principles and domain-specific semantic information .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('generalizable semantic principles')
# Other_scientific_term('domain-specific semantic information')

extract = Extract([Triple(Other_scientific_term("generalizable semantic principles"), Rel("Conjunction"), Other_scientific_term("domain-specific semantic information"))])
pred: [['generalizable semantic principles', 'Conjunction', 'domain-specific semantic information']]
trues: [['generalizable semantic principles', 'Compare', 'domain-specific semantic information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.337228714524207, 0.32423756019261635, 0.3306055646481178]
text: Overall summarization quality of the proposed system is state-of-the-art , with guaranteed grammaticality of the system output due to the use of a constraint-based parser/generator .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('summarization quality')
# Generic('system')
# Method('constraint-based parser/generator')
# Generic('system')

extract = Extract([Triple(Metric("summarization quality"), Rel("Evaluate_for"), Generic("system")), Triple(Method("constraint-based parser/generator"), Rel("Used_for"), Generic("system"))])
pred: [['summarization quality', 'Evaluate_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'system']]
trues: [['summarization quality', 'Evaluate_for', 'system'], ['grammaticality', 'Evaluate_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'system']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.33943427620632277, 0.3258785942492013, 0.332518337408313]
text: Compared to the exhaustive procedure that thus far is the state-of-the-art for cascade evaluation , the proposed method requires fewer evaluations of the classifier functions , thereby speeding up the search .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('method')
# Method('exhaustive procedure')
# Task('cascade evaluation')
# Generic('method')
# Task('cascade evaluation')
# Method('exhaustive procedure')

extract = Extract([Triple(Generic("method"), Rel("Compare"), Method("exhaustive procedure")), Triple(Task("cascade evaluation"), Rel("Evaluate_for"), Generic("method")), Triple(Task("cascade evaluation"), Rel("Evaluate_for"), Method("exhaustive procedure"))])
pred: [['method', 'Compare', 'exhaustive procedure'], ['cascade evaluation', 'Evaluate_for', 'method'], ['cascade evaluation', 'Evaluate_for', 'exhaustive procedure']]
trues: [['exhaustive procedure', 'Used_for', 'cascade evaluation'], ['exhaustive procedure', 'Compare', 'method'], ['method', 'Used_for', 'search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33774834437086093, 0.32432432432432434, 0.3309002433090025]
text: SVMs are known to be robust to overfitting ; however , a few training examples usually do not represent well the structure of the class .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('SVMs')
# Task('overfitting')

extract = Extract([Triple(Method("SVMs"), Rel("Used_for"), Task("overfitting"))])
pred: [['SVMs', 'Used_for', 'overfitting']]
trues: [['SVMs', 'Used_for', 'overfitting']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33884297520661155, 0.3253968253968254, 0.3319838056680162]
text: We present Minimum Bayes-Risk ( MBR ) decoding for statistical machine translation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Minimum Bayes-Risk ( MBR ) decoding')
# Task('statistical machine translation')

extract = Extract([Triple(Method("Minimum Bayes-Risk ( MBR ) decoding"), Rel("Used_for"), Task("statistical machine translation"))])
pred: [['Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation']]
trues: [['Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33993399339933994, 0.3264659270998415, 0.3330638641875505]
text: OA improved phase locking in the auditory nerve ( AN ) and raised ASR accuracy for features derived from AN fibers ( ANFs ) .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Other_scientific_term('OA')
# Other_scientific_term('phase locking')
# Metric('ASR accuracy')
# Other_scientific_term('features')
# Other_scientific_term('AN fibers ( ANFs )')
# Other_scientific_term('features')

extract = Extract([Triple(Other_scientific_term("OA"), Rel("Used_for"), Other_scientific_term("phase locking")), Triple(Metric("ASR accuracy"), Rel("Evaluate_for"), Other_scientific_term("features")), Triple(Other_scientific_term("AN fibers ( ANFs )"), Rel("Evaluate_for"), Other_scientific_term("features"))])
pred: [['OA', 'Used_for', 'phase locking'], ['ASR accuracy', 'Evaluate_for', 'features'], ['AN fibers ( ANFs )', 'Evaluate_for', 'features']]
trues: [['OA', 'Used_for', 'phase locking in the auditory nerve ( AN )'], ['OA', 'Used_for', 'features'], ['ASR accuracy', 'Evaluate_for', 'features'], ['AN fibers ( ANFs )', 'Used_for', 'features']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.3399014778325123, 0.32598425196850395, 0.3327974276527331]
text: We introduce a method to accelerate the evaluation of object detection cascades with the help of a divide-and-conquer procedure in the space of candidate regions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('evaluation of object detection cascades')
# Method('divide-and-conquer procedure')
# Other_scientific_term('candidate regions')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("evaluation of object detection cascades")), Triple(Method("divide-and-conquer procedure"), Rel("Used_for"), Other_scientific_term("candidate regions"))])
pred: [['method', 'Used_for', 'evaluation of object detection cascades'], ['divide-and-conquer procedure', 'Used_for', 'candidate regions']]
trues: [['method', 'Used_for', 'evaluation of object detection cascades'], ['divide-and-conquer procedure', 'Used_for', 'method'], ['space of candidate regions', 'Feature_of', 'divide-and-conquer procedure']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3404255319148936, 0.32601880877742945, 0.33306645316253003]
text: Coedition of a natural language text and its representation in some interlingual form seems the best and simplest way to share text revision across languages .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('natural language text')
# Other_scientific_term('interlingual form')

extract = Extract([Triple(Material("natural language text"), Rel("Conjunction"), Other_scientific_term("interlingual form"))])
pred: [['natural language text', 'Conjunction', 'interlingual form']]
trues: [['Coedition', 'Used_for', 'text revision'], ['natural language text', 'Used_for', 'Coedition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33986928104575165, 0.325, 0.33226837060702874]
text: A model-based approach to on-line cursive handwriting analysis and recognition is presented and evaluated .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('model-based approach')
# Task('on-line cursive handwriting analysis and recognition')
# Task('on-line cursive handwriting analysis and recognition')
# Generic('evaluated')

extract = Extract([Triple(Method("model-based approach"), Rel("Used_for"), Task("on-line cursive handwriting analysis and recognition")), Triple(Task("on-line cursive handwriting analysis and recognition"), Rel("Used_for"), Generic("evaluated"))])
pred: [['model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition'], ['on-line cursive handwriting analysis and recognition', 'Used_for', 'evaluated']]
trues: [['model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.34039087947882735, 0.32605304212168484, 0.3330677290836653]
text: Furthermore , this paper presents a novel algorithm for the temporal maintenance of a background model to enhance the rendering of occlusions and reduce temporal artefacts ( flicker ) ; and a cost aggregation algorithm that acts directly on our three-dimensional matching cost space .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('algorithm')
# Method('temporal maintenance of a background model')
# Generic('algorithm')
# Other_scientific_term('occlusions')
# Generic('algorithm')
# Other_scientific_term('temporal artefacts ( flicker )')
# Other_scientific_term('occlusions')
# Other_scientific_term('temporal artefacts ( flicker )')
# Method('cost aggregation algorithm')
# Method('three-dimensional matching cost space')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Method("temporal maintenance of a background model")), Triple(Generic("algorithm"), Rel("Used_for"), Other_scientific_term("occlusions")), Triple(Generic("algorithm"), Rel("Used_for"), Other_scientific_term("temporal artefacts ( flicker )")), Triple(Other_scientific_term("occlusions"), Rel("Conjunction"), Other_scientific_term("temporal artefacts ( flicker )")), Triple(Method("cost aggregation algorithm"), Rel("Used_for"), Method("three-dimensional matching cost space"))])
pred: [['algorithm', 'Used_for', 'temporal maintenance of a background model'], ['algorithm', 'Used_for', 'occlusions'], ['algorithm', 'Used_for', 'temporal artefacts ( flicker )'], ['occlusions', 'Conjunction', 'temporal artefacts ( flicker )'], ['cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space']]
trues: [['algorithm', 'Used_for', 'temporal maintenance of a background model'], ['algorithm', 'Used_for', 'rendering of occlusions'], ['algorithm', 'Used_for', 'temporal artefacts ( flicker )'], ['cost aggregation algorithm', 'Conjunction', 'algorithm'], ['cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space']]
metrics_sample: [0.6, 0.6, 0.6]
metrics_current: [0.34248788368336025, 0.3281733746130031, 0.33517786561264823]
text: Among other experiments , we demonstrate the potential of our approach by boosting the performance of three learned confidence measures on the KITTI2012 dataset by simply training them on a vast amount of automatically generated training data rather than a limited amount of laser ground truth data .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Metric('performance')
# Method('learned confidence measures')
# Material('KITTI2012 dataset')
# Method('learned confidence measures')
# Material('automatically generated training data')
# Method('learned confidence measures')
# Material('automatically generated training data')
# Material('laser ground truth data')

extract = Extract([Triple(Metric("performance"), Rel("Evaluate_for"), Method("learned confidence measures")), Triple(Material("KITTI2012 dataset"), Rel("Evaluate_for"), Method("learned confidence measures")), Triple(Material("automatically generated training data"), Rel("Used_for"), Method("learned confidence measures")), Triple(Material("automatically generated training data"), Rel("Compare"), Material("laser ground truth data"))])
pred: [['performance', 'Evaluate_for', 'learned confidence measures'], ['KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'learned confidence measures'], ['automatically generated training data', 'Compare', 'laser ground truth data']]
trues: [['approach', 'Used_for', 'learned confidence measures'], ['KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'them'], ['laser ground truth data', 'Compare', 'automatically generated training data']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.3418940609951846, 0.32769230769230767, 0.33464257659073054]
text: Such a triangulation provides a piecewise-linear interpolant useful for light field super-resolution .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('piecewise-linear interpolant')
# Task('light field super-resolution')

extract = Extract([Triple(Other_scientific_term("piecewise-linear interpolant"), Rel("Used_for"), Task("light field super-resolution"))])
pred: [['piecewise-linear interpolant', 'Used_for', 'light field super-resolution']]
trues: [['triangulation', 'Used_for', 'piecewise-linear interpolant'], ['piecewise-linear interpolant', 'Used_for', 'light field super-resolution']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.34294871794871795, 0.3282208588957055, 0.33542319749216304]
text: Labeled data is replaced by a few hand-crafted rules that encode basic syntactic knowledge .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('hand-crafted rules')
# Material('Labeled data')

extract = Extract([Triple(Other_scientific_term("hand-crafted rules"), Rel("Used_for"), Material("Labeled data"))])
pred: [['hand-crafted rules', 'Used_for', 'Labeled data']]
trues: [['hand-crafted rules', 'Used_for', 'syntactic knowledge']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3424, 0.327718223583461, 0.3348982785602504]
text: We present an application of ambiguity packing and stochastic disambiguation techniques for Lexical-Functional Grammars ( LFG ) to the domain of sentence condensation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('ambiguity packing')
# Task('sentence condensation')
# Method('ambiguity packing')
# Method('stochastic disambiguation techniques')
# Method('stochastic disambiguation techniques')
# Task('sentence condensation')

extract = Extract([Triple(Method("ambiguity packing"), Rel("Used_for"), Task("sentence condensation")), Triple(Method("ambiguity packing"), Rel("Used_for"), Method("stochastic disambiguation techniques")), Triple(Method("stochastic disambiguation techniques"), Rel("Used_for"), Task("sentence condensation"))])
pred: [['ambiguity packing', 'Used_for', 'sentence condensation'], ['ambiguity packing', 'Used_for', 'stochastic disambiguation techniques'], ['stochastic disambiguation techniques', 'Used_for', 'sentence condensation']]
trues: [['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'], ['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'sentence condensation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34076433121019106, 0.3267175572519084, 0.33359314107560406]
text: Learned confidence measures gain increasing importance for outlier removal and quality improvement in stereo vision .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Metric('confidence measures')
# Task('outlier removal')
# Metric('confidence measures')
# Task('quality improvement in stereo vision')
# Task('outlier removal')
# Task('quality improvement in stereo vision')

extract = Extract([Triple(Metric("confidence measures"), Rel("Used_for"), Task("outlier removal")), Triple(Metric("confidence measures"), Rel("Used_for"), Task("quality improvement in stereo vision")), Triple(Task("outlier removal"), Rel("Conjunction"), Task("quality improvement in stereo vision"))])
pred: [['confidence measures', 'Used_for', 'outlier removal'], ['confidence measures', 'Used_for', 'quality improvement in stereo vision'], ['outlier removal', 'Conjunction', 'quality improvement in stereo vision']]
trues: [['Learned confidence measures', 'Used_for', 'outlier removal'], ['Learned confidence measures', 'Used_for', 'quality improvement'], ['outlier removal', 'Conjunction', 'quality improvement'], ['outlier removal', 'Part_of', 'stereo vision'], ['quality improvement', 'Part_of', 'stereo vision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33914421553090335, 0.3242424242424242, 0.33152594887683967]
text: The results show that the features in terms of which we formulate our heuristic principles have significant predictive power , and that rules that closely resemble our Horn clauses can be learnt automatically from these features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('features')
# Method('heuristic principles')
# Other_scientific_term('features')
# Method('Horn clauses')

extract = Extract([Triple(Other_scientific_term("features"), Rel("Used_for"), Method("heuristic principles")), Triple(Other_scientific_term("features"), Rel("Used_for"), Method("Horn clauses"))])
pred: [['features', 'Used_for', 'heuristic principles'], ['features', 'Used_for', 'Horn clauses']]
trues: [['features', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3380726698262243, 0.3237518910741301, 0.330757341576507]
text: This paper presents the results of automatically inducing a Combinatory Categorial Grammar ( CCG ) lexicon from a Turkish dependency treebank .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Combinatory Categorial Grammar ( CCG ) lexicon')
# Generic('this')
# Material('Turkish dependency treebank')
# Method('Combinatory Categorial Grammar ( CCG ) lexicon')

extract = Extract([Triple(Method("Combinatory Categorial Grammar ( CCG ) lexicon"), Rel("Used_for"), Generic("this")), Triple(Material("Turkish dependency treebank"), Rel("Used_for"), Method("Combinatory Categorial Grammar ( CCG ) lexicon"))])
pred: [['Combinatory Categorial Grammar ( CCG ) lexicon', 'Used_for', 'this'], ['Turkish dependency treebank', 'Used_for', 'Combinatory Categorial Grammar ( CCG ) lexicon']]
trues: [['Combinatory Categorial Grammar ( CCG ) lexicon', 'Part_of', 'Turkish dependency treebank']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33700787401574805, 0.32326283987915405, 0.3299922898997687]
text: Multi-layer perceptrons ( MLPs ) performed much better than standard Gaussian mixture models ( GMMs ) for both our ANF-based and ON-based auditory features .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Multi-layer perceptrons ( MLPs )')
# Method('Gaussian mixture models ( GMMs )')
# Method('Multi-layer perceptrons ( MLPs )')
# Other_scientific_term('ANF-based and ON-based auditory features')
# Method('Gaussian mixture models ( GMMs )')
# Other_scientific_term('ANF-based and ON-based auditory features')
# Method('Gaussian mixture models ( GMMs )')
# Other_scientific_term('ANF-based auditory features')
# Method('Gaussian mixture models ( GMMs )')
# Other_scientific_term('ON-based auditory features')

extract = Extract([Triple(Method("Multi-layer perceptrons ( MLPs )"), Rel("Compare"), Method("Gaussian mixture models ( GMMs )")), Triple(Method("Multi-layer perceptrons ( MLPs )"), Rel("Used_for"), Other_scientific_term("ANF-based and ON-based auditory features")), Triple(Method("Gaussian mixture models ( GMMs )"), Rel("Used_for"), Other_scientific_term("ANF-based and ON-based auditory features")), Triple(Method("Gaussian mixture models ( GMMs )"), Rel("Conjunction"), Other_scientific_term("ANF-based auditory features")), Triple(Method("Gaussian mixture models ( GMMs )"), Rel("Used_for"), Other_scientific_term("ON-based auditory features"))])
pred: [['Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'], ['Multi-layer perceptrons ( MLPs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Conjunction', 'ANF-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ON-based auditory features']]
trues: [['Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'], ['Multi-layer perceptrons ( MLPs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ANF-based and ON-based auditory features']]
metrics_sample: [0.6, 1.0, 0.7499999999999999]
metrics_current: [0.3390625, 0.3263157894736842, 0.3325670498084291]
text: Multi-view constraints associated with groups of patches are combined with a normalized representation of their appearance to guide matching and reconstruction , allowing the acquisition of true three-dimensional affine and Euclidean models from multiple images and their recognition in a single photograph taken from an arbitrary viewpoint .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('Multi-view constraints')
# Other_scientific_term('normalized representation of their appearance')
# Other_scientific_term('Multi-view constraints')
# Other_scientific_term('matching')
# Other_scientific_term('normalized representation of their appearance')
# Other_scientific_term('matching')
# Other_scientific_term('normalized representation of their appearance')
# Other_scientific_term('reconstruction')
# Other_scientific_term('normalized representation of their appearance')
# Other_scientific_term('three-dimensional affine and Euclidean models')
# Other_scientific_term('multiple images')
# Other_scientific_term('three-dimensional affine and Euclidean models')
# Other_scientific_term('recognition')
# Other_scientific_term('multiple images')
# Other_scientific_term('recognition')
# Other_scientific_term('single photograph')

extract = Extract([Triple(Other_scientific_term("Multi-view constraints"), Rel("Conjunction"), Other_scientific_term("normalized representation of their appearance")), Triple(Other_scientific_term("Multi-view constraints"), Rel("Used_for"), Other_scientific_term("matching")), Triple(Other_scientific_term("normalized representation of their appearance"), Rel("Used_for"), Other_scientific_term("matching")), Triple(Other_scientific_term("normalized representation of their appearance"), Rel("Used_for"), Other_scientific_term("reconstruction")), Triple(Other_scientific_term("normalized representation of their appearance"), Rel("Used_for"), Other_scientific_term("three-dimensional affine and Euclidean models")), Triple(Other_scientific_term("multiple images"), Rel("Used_for"), Other_scientific_term("three-dimensional affine and Euclidean models")), Triple(Other_scientific_term("multiple images"), Rel("Used_for"), Other_scientific_term("recognition")), Triple(Other_scientific_term("multiple images"), Rel("Conjunction"), Other_scientific_term("single photograph"))])
pred: [['Multi-view constraints', 'Conjunction', 'normalized representation of their appearance'], ['Multi-view constraints', 'Used_for', 'matching'], ['normalized representation of their appearance', 'Used_for', 'matching'], ['normalized representation of their appearance', 'Used_for', 'reconstruction'], ['normalized representation of their appearance', 'Used_for', 'three-dimensional affine and Euclidean models'], ['multiple images', 'Used_for', 'three-dimensional affine and Euclidean models'], ['multiple images', 'Used_for', 'recognition'], ['multiple images', 'Conjunction', 'single photograph']]
trues: [['Multi-view constraints', 'Conjunction', 'normalized representation'], ['Multi-view constraints', 'Used_for', 'matching'], ['Multi-view constraints', 'Used_for', 'reconstruction'], ['normalized representation', 'Used_for', 'matching'], ['normalized representation', 'Used_for', 'reconstruction'], ['matching', 'Conjunction', 'reconstruction'], ['images', 'Used_for', 'acquisition of true three-dimensional affine and Euclidean models']]
metrics_sample: [0.125, 0.14285714285714285, 0.13333333333333333]
metrics_current: [0.33641975308641975, 0.3244047619047619, 0.3303030303030303]
text: We explored possible ways to obtain a compact lexicon , consistent with CCG principles , from a treebank which is an order of magnitude smaller than Penn WSJ .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('treebank')
# Other_scientific_term('compact lexicon')
# Material('treebank')
# Material('Penn WSJ')

extract = Extract([Triple(Material("treebank"), Rel("Used_for"), Other_scientific_term("compact lexicon")), Triple(Material("treebank"), Rel("Compare"), Material("Penn WSJ"))])
pred: [['treebank', 'Used_for', 'compact lexicon'], ['treebank', 'Compare', 'Penn WSJ']]
trues: [['compact lexicon', 'Part_of', 'treebank'], ['treebank', 'Compare', 'Penn WSJ']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33692307692307694, 0.3249258160237389, 0.33081570996978854]
text: From this point of view , selecting suitable positive ( i.e. intra-class ) training samples within a local range is critical for training the CNN embedding , especially when the data has large intra-class variations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('local range')
# Other_scientific_term('positive ( i.e. intra-class ) training samples')

extract = Extract([Triple(Other_scientific_term("local range"), Rel("Used_for"), Other_scientific_term("positive ( i.e. intra-class ) training samples"))])
pred: [['local range', 'Used_for', 'positive ( i.e. intra-class ) training samples']]
trues: [['intra-class variations', 'Feature_of', 'data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33640552995391704, 0.3244444444444444, 0.33031674208144796]
text: We extract a set of heuristic principles from a corpus-based sample and formulate them as probabilistic Horn clauses .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('corpus-based sample')
# Other_scientific_term('heuristic principles')

extract = Extract([Triple(Material("corpus-based sample"), Rel("Used_for"), Other_scientific_term("heuristic principles"))])
pred: [['corpus-based sample', 'Used_for', 'heuristic principles']]
trues: [['corpus-based sample', 'Used_for', 'heuristic principles'], ['probabilistic Horn clauses', 'Feature_of', 'heuristic principles']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3374233128834356, 0.3249630723781389, 0.3310759969902182]
text: Our core motivation is that minimizing a weighted rank loss is a natural criterion for many problems in computer vision such as person re-identification .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Task('minimizing a weighted rank loss')
# Generic('problems')
# Task('minimizing a weighted rank loss')
# Task('computer vision')

extract = Extract([Triple(Task("minimizing a weighted rank loss"), Rel("Used_for"), Generic("problems")), Triple(Task("minimizing a weighted rank loss"), Rel("Hyponym_of"), Task("computer vision"))])
pred: [['minimizing a weighted rank loss', 'Used_for', 'problems'], ['minimizing a weighted rank loss', 'Hyponym_of', 'computer vision']]
trues: [['weighted rank loss', 'Used_for', 'computer vision'], ['weighted rank loss', 'Used_for', 'person re-identification'], ['person re-identification', 'Hyponym_of', 'computer vision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3363914373088685, 0.3235294117647059, 0.32983508245877063]
text: Experiments using the SemCor and Senseval-3 data sets demonstrate that our ensembles yield significantly better results when compared with state-of-the-art .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('SemCor and Senseval-3 data sets')
# Generic('ensembles')
# Generic('ensembles')
# Generic('state-of-the-art')

extract = Extract([Triple(Material("SemCor and Senseval-3 data sets"), Rel("Used_for"), Generic("ensembles")), Triple(Generic("ensembles"), Rel("Compare"), Generic("state-of-the-art"))])
pred: [['SemCor and Senseval-3 data sets', 'Used_for', 'ensembles'], ['ensembles', 'Compare', 'state-of-the-art']]
trues: [['SemCor and Senseval-3 data sets', 'Evaluate_for', 'ensembles'], ['SemCor and Senseval-3 data sets', 'Evaluate_for', 'state-of-the-art']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3353658536585366, 0.3225806451612903, 0.32884902840059793]
text: This statistical approach aims to minimize expected loss of translation errors under loss functions that measure translation performance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('statistical approach')
# Other_scientific_term('translation errors')
# Metric('loss functions')
# Other_scientific_term('translation performance')

extract = Extract([Triple(Generic("statistical approach"), Rel("Used_for"), Other_scientific_term("translation errors")), Triple(Metric("loss functions"), Rel("Used_for"), Other_scientific_term("translation performance"))])
pred: [['statistical approach', 'Used_for', 'translation errors'], ['loss functions', 'Used_for', 'translation performance']]
trues: [['loss functions', 'Evaluate_for', 'translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3343465045592705, 0.32210834553440704, 0.32811334824757643]
text: Subpixel accuracy is achieved by considering several zero-crossings defined by the difference between pairs of unstructured patterns .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('zero-crossings')
# Metric('Subpixel accuracy')

extract = Extract([Triple(Other_scientific_term("zero-crossings"), Rel("Used_for"), Metric("Subpixel accuracy"))])
pred: [['zero-crossings', 'Used_for', 'Subpixel accuracy']]
trues: [['zero-crossings', 'Used_for', 'Subpixel accuracy']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3353566009104704, 0.3230994152046784, 0.32911392405063294]
text: The system incorporates a decision-tree classifier for 30 scf types which tests for the presence of grammatical relations ( grs ) in the output of a robust statistical parser .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('decision-tree classifier')
# Generic('system')
# Method('decision-tree classifier')
# Other_scientific_term('scf types')
# Other_scientific_term('grammatical relations ( grs )')
# Method('decision-tree classifier')
# Method('robust statistical parser')
# Other_scientific_term('grammatical relations ( grs )')

extract = Extract([Triple(Method("decision-tree classifier"), Rel("Used_for"), Generic("system")), Triple(Method("decision-tree classifier"), Rel("Used_for"), Other_scientific_term("scf types")), Triple(Other_scientific_term("grammatical relations ( grs )"), Rel("Part_of"), Method("decision-tree classifier")), Triple(Method("robust statistical parser"), Rel("Used_for"), Other_scientific_term("grammatical relations ( grs )"))])
pred: [['decision-tree classifier', 'Used_for', 'system'], ['decision-tree classifier', 'Used_for', 'scf types'], ['grammatical relations ( grs )', 'Part_of', 'decision-tree classifier'], ['robust statistical parser', 'Used_for', 'grammatical relations ( grs )']]
trues: [['decision-tree classifier', 'Part_of', 'system'], ['decision-tree classifier', 'Used_for', 'grammatical relations ( grs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.32215743440233235, 0.32765011119347665]
text: As a Monte Carlo approach , ASA stochastically samples the parameter space , in contrast to local deterministic search .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Method('ASA')
# Other_scientific_term('parameter space')
# Method('ASA')
# Method('local deterministic search')

extract = Extract([Triple(Method("ASA"), Rel("Used_for"), Other_scientific_term("parameter space")), Triple(Method("ASA"), Rel("Compare"), Method("local deterministic search"))])
pred: [['ASA', 'Used_for', 'parameter space'], ['ASA', 'Compare', 'local deterministic search']]
trues: [['ASA', 'Hyponym_of', 'Monte Carlo approach'], ['ASA', 'Compare', 'local deterministic search']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33383458646616543, 0.3226744186046512, 0.32815964523281593]
text: Experiments on the PASCAL VOC 2006 dataset show an acceleration of more than 50 % by our method compared to standard cascade evaluation .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('PASCAL VOC 2006 dataset')
# Generic('method')
# Material('PASCAL VOC 2006 dataset')
# Method('cascade evaluation')
# Generic('method')
# Method('cascade evaluation')

extract = Extract([Triple(Material("PASCAL VOC 2006 dataset"), Rel("Evaluate_for"), Generic("method")), Triple(Material("PASCAL VOC 2006 dataset"), Rel("Evaluate_for"), Method("cascade evaluation")), Triple(Generic("method"), Rel("Compare"), Method("cascade evaluation"))])
pred: [['PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'], ['PASCAL VOC 2006 dataset', 'Evaluate_for', 'cascade evaluation'], ['method', 'Compare', 'cascade evaluation']]
trues: [['PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'], ['PASCAL VOC 2006 dataset', 'Evaluate_for', 'cascade evaluation'], ['cascade evaluation', 'Compare', 'method']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.33532934131736525, 0.32416787264833574, 0.329654157468727]
text: Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('Memo-functions')
# Other_scientific_term('parse forest')

extract = Extract([Triple(Other_scientific_term("Memo-functions"), Rel("Used_for"), Other_scientific_term("parse forest"))])
pred: [['Memo-functions', 'Used_for', 'parse forest']]
trues: [['Memo-functions', 'Used_for', 'parse forest']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.336322869955157, 0.32514450867052025, 0.33063923585598826]
text: Towards this goal , we also propose a novel Multiple Instance Learning ( MIL ) formulation for the problem based on the logistic softmax function of covariance-based region features within a MAP estimation framework .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# Rel('Part_of')
# The candidate entities for this text are:
# Method('Multiple Instance Learning ( MIL ) formulation')
# Generic('problem')
# Other_scientific_term('logistic softmax function of covariance-based region features')
# Method('Multiple Instance Learning ( MIL ) formulation')
# Other_scientific_term('logistic softmax function of covariance-based region features')
# Method('MAP estimation framework')
# Method('MAP estimation framework')
# Method('Multiple Instance Learning ( MIL ) formulation')

extract = Extract([Triple(Method("Multiple Instance Learning ( MIL ) formulation"), Rel("Used_for"), Generic("problem")), Triple(Other_scientific_term("logistic softmax function of covariance-based region features"), Rel("Used_for"), Method("Multiple Instance Learning ( MIL ) formulation")), Triple(Other_scientific_term("logistic softmax function of covariance-based region features"), Rel("Part_of"), Method("MAP estimation framework")), Triple(Method("MAP estimation framework"), Rel("Part_of"), Method("Multiple Instance Learning ( MIL ) formulation"))])
pred: [['Multiple Instance Learning ( MIL ) formulation', 'Used_for', 'problem'], ['logistic softmax function of covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'], ['logistic softmax function of covariance-based region features', 'Part_of', 'MAP estimation framework'], ['MAP estimation framework', 'Part_of', 'Multiple Instance Learning ( MIL ) formulation']]
trues: [['logistic softmax function of covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'], ['MAP estimation framework', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.33580980683506684, 0.3256484149855908, 0.3306510607168983]
text: First , it uses several kinds of dictionaries to segment and tag Japanese character strings .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('dictionaries')
# Other_scientific_term('Japanese character strings')
# Other_scientific_term('dictionaries')
# Task('segment and tag')

extract = Extract([Triple(Other_scientific_term("dictionaries"), Rel("Used_for"), Other_scientific_term("Japanese character strings")), Triple(Other_scientific_term("dictionaries"), Rel("Used_for"), Task("segment and tag"))])
pred: [['dictionaries', 'Used_for', 'Japanese character strings'], ['dictionaries', 'Used_for', 'segment and tag']]
trues: [['dictionaries', 'Used_for', 'it'], ['dictionaries', 'Used_for', 'Japanese character strings']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3362962962962963, 0.3261494252873563, 0.3311451495258935]
text: An experimental evaluation of summarization quality shows a close correlation between the automatic parse-based evaluation and a manual evaluation of generated strings .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Metric('automatic parse-based evaluation')
# Task('summarization')
# Metric('automatic parse-based evaluation')
# Other_scientific_term('manual evaluation')
# Other_scientific_term('manual evaluation')
# Task('summarization')
# Other_scientific_term('manual evaluation')
# Generic('strings')
# Generic('strings')
# Task('summarization')

extract = Extract([Triple(Metric("automatic parse-based evaluation"), Rel("Evaluate_for"), Task("summarization")), Triple(Metric("automatic parse-based evaluation"), Rel("Evaluate_for"), Other_scientific_term("manual evaluation")), Triple(Other_scientific_term("manual evaluation"), Rel("Evaluate_for"), Task("summarization")), Triple(Other_scientific_term("manual evaluation"), Rel("Conjunction"), Generic("strings")), Triple(Generic("strings"), Rel("Evaluate_for"), Task("summarization"))])
pred: [['automatic parse-based evaluation', 'Evaluate_for', 'summarization'], ['automatic parse-based evaluation', 'Evaluate_for', 'manual evaluation'], ['manual evaluation', 'Evaluate_for', 'summarization'], ['manual evaluation', 'Conjunction', 'strings'], ['strings', 'Evaluate_for', 'summarization']]
trues: [['summarization quality', 'Evaluate_for', 'automatic parse-based evaluation'], ['automatic parse-based evaluation', 'Compare', 'manual evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3338235294117647, 0.32521489971346706, 0.3294629898403483]
text: There are four language pairs currently supported by GLOSSER : English-Bulgarian , English-Estonian , English-Hungarian and French-Dutch .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Conjunction')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Material('Bulgarian')
# Material('Estonian')
# Material('Bulgarian')
# Material('Hungarian')
# Material('Estonian')
# Material('Hungarian')
# Material('Bulgarian')
# Generic('language pairs')
# Material('Estonian')
# Generic('language pairs')
# Material('Hungarian')
# Generic('language pairs')
# Material('Hungarian')
# Material('French-Dutch')
# Material('Hungarian')
# Material('French-Dutch')
# Material('French-Dutch')
# Generic('language pairs')

extract = Extract([Triple(Material("Bulgarian"), Rel("Conjunction"), Material("Estonian")), Triple(Material("Bulgarian"), Rel("Conjunction"), Material("Hungarian")), Triple(Material("Estonian"), Rel("Conjunction"), Material("Hungarian")), Triple(Material("Bulgarian"), Rel("Hyponym_of"), Generic("language pairs")), Triple(Material("Estonian"), Rel("Hyponym_of"), Generic("language pairs")), Triple(Material("Hungarian"), Rel("Conjunction"), Generic("language pairs")), Triple(Material("Hungarian"), Rel("Hyponym_of"), Material("French-Dutch")), Triple(Material("Hungarian"), Rel("Conjunction"), Material("French-Dutch")), Triple(Material("French-Dutch"), Rel("Hyponym_of"), Generic("language pairs"))])
pred: [['Bulgarian', 'Conjunction', 'Estonian'], ['Bulgarian', 'Conjunction', 'Hungarian'], ['Estonian', 'Conjunction', 'Hungarian'], ['Bulgarian', 'Hyponym_of', 'language pairs'], ['Estonian', 'Hyponym_of', 'language pairs'], ['Hungarian', 'Conjunction', 'language pairs'], ['Hungarian', 'Hyponym_of', 'French-Dutch'], ['Hungarian', 'Conjunction', 'French-Dutch'], ['French-Dutch', 'Hyponym_of', 'language pairs']]
trues: [['language pairs', 'Used_for', 'GLOSSER'], ['English-Bulgarian', 'Hyponym_of', 'language pairs'], ['English-Bulgarian', 'Conjunction', 'English-Estonian'], ['English-Estonian', 'Hyponym_of', 'language pairs'], ['English-Estonian', 'Conjunction', 'English-Hungarian'], ['English-Hungarian', 'Hyponym_of', 'language pairs'], ['English-Hungarian', 'Conjunction', 'French-Dutch'], ['French-Dutch', 'Hyponym_of', 'language pairs']]
metrics_sample: [0.1111111111111111, 0.125, 0.11764705882352941]
metrics_current: [0.3309143686502177, 0.32294617563739375, 0.3268817204301075]
text: Our combination methods rely on predominant senses which are derived automatically from raw text .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('predominant senses')
# Method('combination methods')

extract = Extract([Triple(Other_scientific_term("predominant senses"), Rel("Used_for"), Method("combination methods"))])
pred: [['predominant senses', 'Used_for', 'combination methods']]
trues: [['predominant senses', 'Used_for', 'combination methods'], ['raw text', 'Used_for', 'predominant senses']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3318840579710145, 0.3234463276836158, 0.32761087267525035]
text: The intentional structure captures the discourse-relevant purposes , expressed in each of the linguistic segments as well as relationships among them .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('intentional structure')
# Other_scientific_term('discourse-relevant purposes')

extract = Extract([Triple(Other_scientific_term("intentional structure"), Rel("Used_for"), Other_scientific_term("discourse-relevant purposes"))])
pred: [['intentional structure', 'Used_for', 'discourse-relevant purposes']]
trues: [['intentional structure', 'Used_for', 'discourse-relevant purposes']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33285094066570187, 0.3244005641748942, 0.32857142857142857]
text: Background modeling is an important component of many vision systems .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Task('Background modeling')
# Task('vision systems')

extract = Extract([Triple(Task("Background modeling"), Rel("Part_of"), Task("vision systems"))])
pred: [['Background modeling', 'Part_of', 'vision systems']]
trues: [['Background modeling', 'Part_of', 'vision systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3338150289017341, 0.32535211267605635, 0.32952924393723254]
text: We suggest a new goal and evaluation criterion for word similarity measures .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('evaluation criterion')
# Method('word similarity measures')

extract = Extract([Triple(Metric("evaluation criterion"), Rel("Evaluate_for"), Method("word similarity measures"))])
pred: [['evaluation criterion', 'Evaluate_for', 'word similarity measures']]
trues: [['evaluation criterion', 'Used_for', 'word similarity measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.32489451476793246, 0.32905982905982906]
text: Specifically , by leveraging the merits of the deep Long Short-Term Memory ( LSTM ) subnetwork , the proposed model automatically captures the complex long-range temporal dynamics , which naturally avoids the typical sliding window design and thus ensures high computational efficiency .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('deep Long Short-Term Memory ( LSTM ) subnetwork')
# Generic('model')
# Method('deep Long Short-Term Memory ( LSTM ) subnetwork')
# Other_scientific_term('long-range temporal dynamics')

extract = Extract([Triple(Method("deep Long Short-Term Memory ( LSTM ) subnetwork"), Rel("Used_for"), Generic("model")), Triple(Method("deep Long Short-Term Memory ( LSTM ) subnetwork"), Rel("Used_for"), Other_scientific_term("long-range temporal dynamics"))])
pred: [['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'], ['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'long-range temporal dynamics']]
trues: [['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'], ['long-range temporal dynamics', 'Feature_of', 'model']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3338129496402878, 0.32538569424964936, 0.3295454545454546]
text: We present a strong detector based on combining a set of weak detectors .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('detector')
# Generic('We')
# Method('weak detectors')
# Generic('detector')

extract = Extract([Triple(Generic("detector"), Rel("Used_for"), Generic("We")), Triple(Method("weak detectors"), Rel("Used_for"), Generic("detector"))])
pred: [['detector', 'Used_for', 'We'], ['weak detectors', 'Used_for', 'detector']]
trues: [['detectors', 'Used_for', 'detector']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3328550932568149, 0.32492997198879553, 0.32884479092841956]
text: We show promising results in both the detection and viewpoint classification tasks on these two challenging datasets .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('datasets')
# Task('detection and viewpoint classification tasks')
# Generic('datasets')
# Generic('tasks')
# Task('detection and viewpoint classification tasks')
# Generic('datasets')
# Task('detection and viewpoint classification tasks')
# Generic('tasks')

extract = Extract([Triple(Generic("datasets"), Rel("Used_for"), Task("detection and viewpoint classification tasks")), Triple(Generic("datasets"), Rel("Evaluate_for"), Generic("tasks")), Triple(Task("detection and viewpoint classification tasks"), Rel("Conjunction"), Generic("datasets")), Triple(Task("detection and viewpoint classification tasks"), Rel("Evaluate_for"), Generic("tasks"))])
pred: [['datasets', 'Used_for', 'detection and viewpoint classification tasks'], ['datasets', 'Evaluate_for', 'tasks'], ['detection and viewpoint classification tasks', 'Conjunction', 'datasets'], ['detection and viewpoint classification tasks', 'Evaluate_for', 'tasks']]
trues: [['datasets', 'Evaluate_for', 'detection and viewpoint classification tasks']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3309557774607703, 0.32447552447552447, 0.3276836158192091]
text: The goal is to sample a small set of records over which evaluating aggregate queries can be done both efficiently and accurately .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('aggregate queries')
# Generic('records')

extract = Extract([Triple(Other_scientific_term("aggregate queries"), Rel("Used_for"), Generic("records"))])
pred: [['aggregate queries', 'Used_for', 'records']]
trues: [['aggregate queries', 'Evaluate_for', 'records']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33048433048433046, 0.3240223463687151, 0.32722143864598024]
text: Topical blog post retrieval is the task of ranking blog posts with respect to their relevance for a given topic .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('ranking blog posts')
# Task('Topical blog post retrieval')

extract = Extract([Triple(Task("ranking blog posts"), Rel("Used_for"), Task("Topical blog post retrieval"))])
pred: [['ranking blog posts', 'Used_for', 'Topical blog post retrieval']]
trues: [['Topical blog post retrieval', 'Hyponym_of', 'ranking blog posts'], ['relevance', 'Feature_of', 'blog posts']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33001422475106684, 0.3231197771587744, 0.32653061224489793]
text: We analyzed eye gaze , head nods and attentional focus in the context of a direction-giving task .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('eye gaze')
# Other_scientific_term('head nods')
# Other_scientific_term('eye gaze')
# Task('direction-giving task')
# Other_scientific_term('head nods')
# Task('direction-giving task')

extract = Extract([Triple(Other_scientific_term("eye gaze"), Rel("Conjunction"), Other_scientific_term("head nods")), Triple(Other_scientific_term("eye gaze"), Rel("Feature_of"), Task("direction-giving task")), Triple(Other_scientific_term("head nods"), Rel("Feature_of"), Task("direction-giving task"))])
pred: [['eye gaze', 'Conjunction', 'head nods'], ['eye gaze', 'Feature_of', 'direction-giving task'], ['head nods', 'Feature_of', 'direction-giving task']]
trues: [['eye gaze', 'Conjunction', 'head nods'], ['eye gaze', 'Part_of', 'direction-giving task'], ['head nods', 'Conjunction', 'attentional focus'], ['head nods', 'Part_of', 'direction-giving task'], ['attentional focus', 'Part_of', 'direction-giving task']]
metrics_sample: [0.3333333333333333, 0.2, 0.25]
metrics_current: [0.330028328611898, 0.32226832641770403, 0.3261021693491952]
text: The key idea of our approach is to use different view points for reasoning about contradictions and consistencies between multiple depth maps generated with the same stereo algorithm .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('view points')
# Other_scientific_term('contradictions')
# Other_scientific_term('view points')
# Other_scientific_term('consistencies')
# Other_scientific_term('stereo algorithm')
# Other_scientific_term('depth maps')

extract = Extract([Triple(Other_scientific_term("view points"), Rel("Used_for"), Other_scientific_term("contradictions")), Triple(Other_scientific_term("view points"), Rel("Used_for"), Other_scientific_term("consistencies")), Triple(Other_scientific_term("stereo algorithm"), Rel("Used_for"), Other_scientific_term("depth maps"))])
pred: [['view points', 'Used_for', 'contradictions'], ['view points', 'Used_for', 'consistencies'], ['stereo algorithm', 'Used_for', 'depth maps']]
trues: [['view points', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32863187588152326, 0.3218232044198895, 0.3251919050942079]
text: Fast algorithms for nearest neighbor ( NN ) search have in large part focused on 2 distance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Fast algorithms')
# Task('nearest neighbor ( NN ) search')

extract = Extract([Triple(Method("Fast algorithms"), Rel("Used_for"), Task("nearest neighbor ( NN ) search"))])
pred: [['Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search']]
trues: [['Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3295774647887324, 0.32275862068965516, 0.3261324041811847]
text: We have built and will demonstrate an application of this approach called LCS-Marine .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('application')
# Generic('approach')

extract = Extract([Triple(Generic("application"), Rel("Hyponym_of"), Generic("approach"))])
pred: [['application', 'Hyponym_of', 'approach']]
trues: [['approach', 'Used_for', 'LCS-Marine']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3291139240506329, 0.32231404958677684, 0.32567849686847594]
text: We present a novel method for discovering parallel sentences in comparable , non-parallel corpora .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('method')
# Task('discovering parallel sentences')
# Material('comparable , non-parallel corpora')
# Task('discovering parallel sentences')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("discovering parallel sentences")), Triple(Material("comparable , non-parallel corpora"), Rel("Feature_of"), Task("discovering parallel sentences"))])
pred: [['method', 'Used_for', 'discovering parallel sentences'], ['comparable , non-parallel corpora', 'Feature_of', 'discovering parallel sentences']]
trues: [['method', 'Used_for', 'discovering parallel sentences'], ['comparable , non-parallel corpora', 'Used_for', 'discovering parallel sentences']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32959326788218796, 0.3228021978021978, 0.32616238723108953]
text: Therefore , the study presented in this paper may be useful in inspiring new designs of deep models for person re-identification .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('deep models')
# Task('person re-identification')

extract = Extract([Triple(Method("deep models"), Rel("Used_for"), Task("person re-identification"))])
pred: [['deep models', 'Used_for', 'person re-identification']]
trues: [['deep models', 'Used_for', 'person re-identification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33053221288515405, 0.32373113854595337, 0.32709632709632713]
text: We compare our results to state of the art methods such as mi-cro phase shifting and modulated phase shifting .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('results')
# Method('state of the art methods')
# Method('mi-cro phase shifting')
# Method('state of the art methods')
# Method('mi-cro phase shifting')
# Method('modulated phase shifting')
# Method('modulated phase shifting')
# Method('state of the art methods')

extract = Extract([Triple(Generic("results"), Rel("Compare"), Method("state of the art methods")), Triple(Method("mi-cro phase shifting"), Rel("Hyponym_of"), Method("state of the art methods")), Triple(Method("mi-cro phase shifting"), Rel("Conjunction"), Method("modulated phase shifting")), Triple(Method("modulated phase shifting"), Rel("Hyponym_of"), Method("state of the art methods"))])
pred: [['results', 'Compare', 'state of the art methods'], ['mi-cro phase shifting', 'Hyponym_of', 'state of the art methods'], ['mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'], ['modulated phase shifting', 'Hyponym_of', 'state of the art methods']]
trues: [['mi-cro phase shifting', 'Hyponym_of', 'state of the art methods'], ['mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'], ['modulated phase shifting', 'Hyponym_of', 'state of the art methods']]
metrics_sample: [0.75, 1.0, 0.8571428571428571]
metrics_current: [0.3328690807799443, 0.32650273224043713, 0.32965517241379316]
text: This paper gives an overall account of a prototype natural language question answering system , called Chat-80 .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Chat-80')
# Method('natural language question answering system')

extract = Extract([Triple(Method("Chat-80"), Rel("Hyponym_of"), Method("natural language question answering system"))])
pred: [['Chat-80', 'Hyponym_of', 'natural language question answering system']]
trues: [['Chat-80', 'Hyponym_of', 'natural language question answering system']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3337969401947149, 0.3274215552523875, 0.3305785123966943]
text: Furthermore , we propose the use of standard parser evaluation methods for automatically evaluating the summarization quality of sentence condensation systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('parser evaluation methods')
# Metric('summarization quality')
# Metric('summarization quality')
# Method('sentence condensation systems')

extract = Extract([Triple(Method("parser evaluation methods"), Rel("Used_for"), Metric("summarization quality")), Triple(Metric("summarization quality"), Rel("Evaluate_for"), Method("sentence condensation systems"))])
pred: [['parser evaluation methods', 'Used_for', 'summarization quality'], ['summarization quality', 'Evaluate_for', 'sentence condensation systems']]
trues: [['parser evaluation methods', 'Evaluate_for', 'summarization quality'], ['summarization quality', 'Evaluate_for', 'sentence condensation systems']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3342579750346741, 0.32789115646258504, 0.33104395604395603]
text: Branch and bound strategies have previously attempted to curb this complexity whilst maintaining global optimality .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Branch and bound strategies')
# Other_scientific_term('complexity')

extract = Extract([Triple(Method("Branch and bound strategies"), Rel("Used_for"), Other_scientific_term("complexity"))])
pred: [['Branch and bound strategies', 'Used_for', 'complexity']]
trues: [['Branch and bound strategies', 'Used_for', 'complexity'], ['global optimality', 'Feature_of', 'Branch and bound strategies']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.33518005540166207, 0.3283582089552239, 0.3317340644276902]
text: This paper proposes to use a convolution kernel over parse trees to model syntactic structure information for relation extraction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('convolution kernel')
# Other_scientific_term('syntactic structure information')
# Method('convolution kernel')
# Task('relation extraction')

extract = Extract([Triple(Method("convolution kernel"), Rel("Used_for"), Other_scientific_term("syntactic structure information")), Triple(Method("convolution kernel"), Rel("Used_for"), Task("relation extraction"))])
pred: [['convolution kernel', 'Used_for', 'syntactic structure information'], ['convolution kernel', 'Used_for', 'relation extraction']]
trues: [['convolution kernel over parse trees', 'Used_for', 'syntactic structure information'], ['syntactic structure information', 'Used_for', 'relation extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3342541436464088, 0.3274695534506089, 0.3308270676691729]
text: These methods diier from previous work in the area in two ways : the use of an action model formalism which is better suited to the needs of a re-active agent , and successful implementation of noise-handling mechanisms .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('action model formalism')
# Other_scientific_term('re-active agent')
# Method('noise-handling mechanisms')
# Generic('methods')

extract = Extract([Triple(Method("action model formalism"), Rel("Used_for"), Other_scientific_term("re-active agent")), Triple(Method("noise-handling mechanisms"), Rel("Used_for"), Generic("methods"))])
pred: [['action model formalism', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Used_for', 'methods']]
trues: [['action model formalism', 'Used_for', 'methods'], ['action model formalism', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Used_for', 'methods']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.33608815426997246, 0.3288409703504043, 0.33242506811989103]
text: This phenomenon causes many image processing techniques to fail as they assume the presence of only one layer at each examined site e.g. motion estimation and object recognition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('image processing techniques')
# Generic('they')
# Generic('they')
# Task('motion estimation')
# Task('motion estimation')
# Task('object recognition')
# Task('motion estimation')
# Task('object recognition')
# Task('object recognition')
# Generic('they')

extract = Extract([Triple(Generic("image processing techniques"), Rel("Used_for"), Generic("they")), Triple(Generic("they"), Rel("Used_for"), Task("motion estimation")), Triple(Task("motion estimation"), Rel("Hyponym_of"), Task("object recognition")), Triple(Task("motion estimation"), Rel("Conjunction"), Task("object recognition")), Triple(Task("object recognition"), Rel("Hyponym_of"), Generic("they"))])
pred: [['image processing techniques', 'Used_for', 'they'], ['they', 'Used_for', 'motion estimation'], ['motion estimation', 'Hyponym_of', 'object recognition'], ['motion estimation', 'Conjunction', 'object recognition'], ['object recognition', 'Hyponym_of', 'they']]
trues: [['motion estimation', 'Conjunction', 'object recognition']]
metrics_sample: [0.2, 1.0, 0.33333333333333337]
metrics_current: [0.33515731874145005, 0.3297442799461642, 0.33242876526458615]
text: In this paper , we present an approach to rapidly creating pixel-accurate semantic label maps for images extracted from modern computer games .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Other_scientific_term('pixel-accurate semantic label maps')
# Material('computer games')
# Other_scientific_term('pixel-accurate semantic label maps')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Other_scientific_term("pixel-accurate semantic label maps")), Triple(Material("computer games"), Rel("Used_for"), Other_scientific_term("pixel-accurate semantic label maps"))])
pred: [['approach', 'Used_for', 'pixel-accurate semantic label maps'], ['computer games', 'Used_for', 'pixel-accurate semantic label maps']]
trues: [['approach', 'Used_for', 'pixel-accurate semantic label maps'], ['pixel-accurate semantic label maps', 'Used_for', 'images'], ['images', 'Part_of', 'modern computer games']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.33560709413369716, 0.3297587131367292, 0.332657200811359]
text: This paper examines the benefits of system combination for unsupervised WSD .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('system combination')
# Task('unsupervised WSD')

extract = Extract([Triple(Method("system combination"), Rel("Used_for"), Task("unsupervised WSD"))])
pred: [['system combination', 'Used_for', 'unsupervised WSD']]
trues: [['system combination', 'Used_for', 'unsupervised WSD']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33651226158038144, 0.33065595716198126, 0.3335584064821067]
text: One remarkable feature of this model is that it has allowed us to derive an efficient algorithm based on powerful statistical methods for estimating the Fujisaki-model parameters from raw F0 contours .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Generic('algorithm')
# Method('statistical methods')
# Generic('algorithm')
# Other_scientific_term('Fujisaki-model parameters')
# Other_scientific_term('raw F0 contours')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Generic("algorithm")), Triple(Method("statistical methods"), Rel("Used_for"), Generic("algorithm")), Triple(Other_scientific_term("Fujisaki-model parameters"), Rel("Used_for"), Other_scientific_term("raw F0 contours"))])
pred: [['model', 'Used_for', 'algorithm'], ['statistical methods', 'Used_for', 'algorithm'], ['Fujisaki-model parameters', 'Used_for', 'raw F0 contours']]
trues: [['remarkable feature', 'Feature_of', 'model'], ['algorithm', 'Used_for', 'Fujisaki-model parameters'], ['statistical methods', 'Used_for', 'algorithm'], ['raw F0 contours', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.33649932157394846, 0.33022636484687085, 0.33333333333333337]
text: Our main result is a first-order upper bound on the distance between any approximate joint triangularizer of the matrices in M ' and any exact joint triangularizer of the matrices in M .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('first-order upper bound')
# Method('approximate joint triangularizer')
# Method('approximate joint triangularizer')
# Method('exact joint triangularizer')
# Method('exact joint triangularizer')
# Material('matrices in M')

extract = Extract([Triple(Generic("first-order upper bound"), Rel("Compare"), Method("approximate joint triangularizer")), Triple(Method("approximate joint triangularizer"), Rel("Used_for"), Method("exact joint triangularizer")), Triple(Method("exact joint triangularizer"), Rel("Used_for"), Material("matrices in M"))])
pred: [['first-order upper bound', 'Compare', 'approximate joint triangularizer'], ['approximate joint triangularizer', 'Used_for', 'exact joint triangularizer'], ['exact joint triangularizer', 'Used_for', 'matrices in M']]
trues: [['approximate joint triangularizer', 'Conjunction', 'exact joint triangularizer']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33513513513513515, 0.32978723404255317, 0.3324396782841823]
text: In this paper we specialize the projective unifocal , bifo-cal , and trifocal tensors to the affine case , and show how the tensors obtained relate to the registered tensors encountered in previous work .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('projective unifocal , bifo-cal , and trifocal tensors')
# Other_scientific_term('affine case')
# Method('registered tensors')
# Generic('tensors')

extract = Extract([Triple(Method("projective unifocal , bifo-cal , and trifocal tensors"), Rel("Used_for"), Other_scientific_term("affine case")), Triple(Method("registered tensors"), Rel("Used_for"), Generic("tensors"))])
pred: [['projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case'], ['registered tensors', 'Used_for', 'tensors']]
trues: [['projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.33557951482479786, 0.33067729083665337, 0.33311036789297654]
text: We evaluate several proposals for constraining them , basing our assessment on computational tractability and explanatory adequacy .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('proposals')
# Other_scientific_term('them')

extract = Extract([Triple(Generic("proposals"), Rel("Used_for"), Other_scientific_term("them"))])
pred: [['proposals', 'Used_for', 'them']]
trues: [['computational tractability and explanatory adequacy', 'Evaluate_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3351278600269179, 0.3302387267904509, 0.33266533066132264]
text: Experiments on synthetic and real data show that both our triangulation and LAGC algorithms outperform state-of-the-art solutions in accuracy and visual quality .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('algorithms')
# Generic('state-of-the-art solutions')
# Metric('accuracy')
# Generic('algorithms')
# Metric('accuracy')
# Generic('state-of-the-art solutions')
# Metric('visual quality')
# Generic('algorithms')
# Metric('visual quality')
# Generic('state-of-the-art solutions')
# Metric('accuracy')
# Metric('visual quality')
# Metric('accuracy')
# Generic('algorithms')
# Metric('visual quality')
# Generic('state-of-the-art solutions')
# Metric('visual quality')
# Generic('algorithms')
# Metric('visual quality')
# Generic('state-of-the-art solutions')

extract = Extract([Triple(Generic("algorithms"), Rel("Compare"), Generic("state-of-the-art solutions")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("algorithms")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("state-of-the-art solutions")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("algorithms")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("state-of-the-art solutions")), Triple(Metric("accuracy"), Rel("Conjunction"), Metric("visual quality")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("algorithms")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("state-of-the-art solutions")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("algorithms")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("state-of-the-art solutions"))])
pred: [['algorithms', 'Compare', 'state-of-the-art solutions'], ['accuracy', 'Evaluate_for', 'algorithms'], ['accuracy', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions'], ['accuracy', 'Conjunction', 'visual quality'], ['accuracy', 'Evaluate_for', 'algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions']]
trues: [['synthetic and real data', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['synthetic and real data', 'Evaluate_for', 'state-of-the-art solutions'], ['triangulation and LAGC algorithms', 'Compare', 'state-of-the-art solutions'], ['accuracy', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['accuracy', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions']]
metrics_sample: [0.3333333333333333, 0.2857142857142857, 0.30769230769230765]
metrics_current: [0.33511348464619495, 0.32982917214191854, 0.33245033112582784]
text: In particular there are three areas of novelty : ( i ) we show how a photometric model of image formation can be combined with a statistical model of generic face appearance variation , learnt offline , to generalize in the presence of extreme illumination changes ; ( ii ) we use the smoothness of geodesically local appearance manifold structure and a robust same-identity likelihood to achieve invariance to unseen head poses ; and ( iii ) we introduce an accurate video sequence '' reillumination '' algorithm to achieve robustness to face motion patterns in video .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('photometric model of image formation')
# Method('statistical model of generic face appearance variation')
# Method('photometric model of image formation')
# Generic('areas')
# Method('statistical model of generic face appearance variation')
# Generic('areas')
# Method('statistical model of generic face appearance variation')
# Other_scientific_term('illumination changes')
# Method('smoothness of geodesically local appearance manifold structure')
# Method('same-identity likelihood')
# Method('smoothness of geodesically local appearance manifold structure')
# Other_scientific_term('unseen head poses')
# Method('same-identity likelihood')
# Other_scientific_term('unseen head poses')
# Other_scientific_term('face motion patterns')
# Method('video sequence '' reillumination '' algorithm')
# Other_scientific_term('face motion patterns')
# Other_scientific_term('illumination changes')

extract = Extract([Triple(Method("photometric model of image formation"), Rel("Conjunction"), Method("statistical model of generic face appearance variation")), Triple(Method("photometric model of image formation"), Rel("Used_for"), Generic("areas")), Triple(Method("statistical model of generic face appearance variation"), Rel("Used_for"), Generic("areas")), Triple(Method("statistical model of generic face appearance variation"), Rel("Used_for"), Other_scientific_term("illumination changes")), Triple(Method("smoothness of geodesically local appearance manifold structure"), Rel("Used_for"), Method("same-identity likelihood")), Triple(Method("smoothness of geodesically local appearance manifold structure"), Rel("Used_for"), Other_scientific_term("unseen head poses")), Triple(Method("same-identity likelihood"), Rel("Conjunction"), Other_scientific_term("unseen head poses")), Triple(Method("same-identity likelihood"), Rel("Used_for"), Other_scientific_term("face motion patterns")), Triple(Method("video sequence '' reillumination '' algorithm"), Rel("Used_for"), Other_scientific_term("face motion patterns")), Triple(Other_scientific_term("face motion patterns"), Rel("Used_for"), Other_scientific_term("illumination changes"))])
pred: [['photometric model of image formation', 'Conjunction', 'statistical model of generic face appearance variation'], ['photometric model of image formation', 'Used_for', 'areas'], ['statistical model of generic face appearance variation', 'Used_for', 'areas'], ['statistical model of generic face appearance variation', 'Used_for', 'illumination changes'], ['smoothness of geodesically local appearance manifold structure', 'Used_for', 'same-identity likelihood'], ['smoothness of geodesically local appearance manifold structure', 'Used_for', 'unseen head poses'], ['same-identity likelihood', 'Conjunction', 'unseen head poses'], ['same-identity likelihood', 'Used_for', 'face motion patterns'], ["video sequence '' reillumination '' algorithm", 'Used_for', 'face motion patterns'], ['face motion patterns', 'Used_for', 'illumination changes']]
trues: [['photometric model', 'Used_for', 'image formation'], ['photometric model', 'Conjunction', 'statistical model'], ['statistical model', 'Used_for', 'generic face appearance variation'], ['statistical model', 'Used_for', 'extreme illumination changes'], ['smoothness', 'Feature_of', 'geodesically local appearance manifold structure'], ['geodesically local appearance manifold structure', 'Conjunction', 'robust same-identity likelihood'], ['robustness', 'Evaluate_for', "video sequence '' reillumination '' algorithm"], ['face motion patterns', 'Feature_of', 'robustness'], ['face motion patterns', 'Part_of', 'video']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33069828722002637, 0.32597402597402597, 0.32831916285153695]
text: The approach is validated with real image data , and with experimental results from a CID/DRAM analog array prototype in 0.5 cents m CMOS .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('real image data')
# Generic('approach')
# Material('CID/DRAM analog array prototype in 0.5 cents m CMOS')
# Generic('approach')

extract = Extract([Triple(Material("real image data"), Rel("Used_for"), Generic("approach")), Triple(Material("CID/DRAM analog array prototype in 0.5 cents m CMOS"), Rel("Used_for"), Generic("approach"))])
pred: [['real image data', 'Used_for', 'approach'], ['CID/DRAM analog array prototype in 0.5 cents m CMOS', 'Used_for', 'approach']]
trues: [['real image data', 'Evaluate_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32982917214191854, 0.32555123216601817, 0.32767624020887726]
text: In this work , we study how Convolutional Neural Networks ( CNN ) architectures can be adapted to the task of simultaneous object recognition and pose estimation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Convolutional Neural Networks ( CNN ) architectures')
# Task('simultaneous object recognition and pose estimation')
# Method('Convolutional Neural Networks ( CNN ) architectures')
# Task('simultaneous object recognition and pose estimation')

extract = Extract([Triple(Method("Convolutional Neural Networks ( CNN ) architectures"), Rel("Used_for"), Task("simultaneous object recognition and pose estimation")), Triple(Method("Convolutional Neural Networks ( CNN ) architectures"), Rel("Used_for"), Task("simultaneous object recognition and pose estimation"))])
pred: [['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'simultaneous object recognition and pose estimation'], ['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'simultaneous object recognition and pose estimation']]
trues: [['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'object recognition'], ['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'pose estimation'], ['object recognition', 'Conjunction', 'pose estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3293963254593176, 0.3242894056847545, 0.3268229166666667]
text: Evaluation on the ACE 2003 corpus shows that the convolution kernel over parse trees can achieve comparable performance with the previous best-reported feature-based methods on the 24 ACE relation subtypes .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('ACE 2003 corpus')
# Method('convolution kernel over parse trees')
# Material('ACE 2003 corpus')
# Method('feature-based methods')
# Method('convolution kernel over parse trees')
# Method('feature-based methods')
# Metric('24 ACE relation subtypes')
# Material('ACE 2003 corpus')

extract = Extract([Triple(Material("ACE 2003 corpus"), Rel("Evaluate_for"), Method("convolution kernel over parse trees")), Triple(Material("ACE 2003 corpus"), Rel("Evaluate_for"), Method("feature-based methods")), Triple(Method("convolution kernel over parse trees"), Rel("Compare"), Method("feature-based methods")), Triple(Metric("24 ACE relation subtypes"), Rel("Evaluate_for"), Material("ACE 2003 corpus"))])
pred: [['ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'], ['ACE 2003 corpus', 'Evaluate_for', 'feature-based methods'], ['convolution kernel over parse trees', 'Compare', 'feature-based methods'], ['24 ACE relation subtypes', 'Evaluate_for', 'ACE 2003 corpus']]
trues: [['ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'], ['feature-based methods', 'Compare', 'convolution kernel over parse trees']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.3289817232375979, 0.3247422680412371, 0.32684824902723736]
text: In this paper , we propose a novel moderate positive sample mining method to train robust CNN for person re-identification , dealing with the problem of large variation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('moderate positive sample mining method')
# Method('robust CNN')
# Method('robust CNN')
# Task('person re-identification')

extract = Extract([Triple(Method("moderate positive sample mining method"), Rel("Used_for"), Method("robust CNN")), Triple(Method("robust CNN"), Rel("Used_for"), Task("person re-identification"))])
pred: [['moderate positive sample mining method', 'Used_for', 'robust CNN'], ['robust CNN', 'Used_for', 'person re-identification']]
trues: [['moderate positive sample mining method', 'Used_for', 'robust CNN'], ['robust CNN', 'Used_for', 'person re-identification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3307291666666667, 0.3264781491002571, 0.32858990944372574]
text: For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('memo-functions')
# Method('parser')

extract = Extract([Triple(Method("memo-functions"), Rel("Used_for"), Method("parser"))])
pred: [['memo-functions', 'Used_for', 'parser']]
trues: [['time-complexity', 'Evaluate_for', 'parser'], ['parser', 'Used_for', 'non-LR grammars'], ['memo-functions', 'Used_for', 'parser']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.33159947984395316, 0.3265044814340589, 0.32903225806451614]
text: An extension of our method to space-time interest point detection for action classification is also presented .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('space-time interest point detection')
# Task('space-time interest point detection')
# Task('action classification')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("space-time interest point detection")), Triple(Task("space-time interest point detection"), Rel("Used_for"), Task("action classification"))])
pred: [['method', 'Used_for', 'space-time interest point detection'], ['space-time interest point detection', 'Used_for', 'action classification']]
trues: [['method', 'Used_for', 'space-time interest point detection'], ['space-time interest point detection', 'Used_for', 'action classification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3333333333333333, 0.3282247765006386, 0.3307593307593307]
text: We then use the predicates of such clauses to create a set of domain independent features to annotate an input dataset , and run two different machine learning algorithms : SLIPPER , a rule-based learning algorithm , and TiMBL , a memory-based system .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('predicates')
# Other_scientific_term('clauses')
# Other_scientific_term('predicates')
# Other_scientific_term('features')
# Other_scientific_term('features')
# Generic('dataset')
# Method('machine learning algorithms')
# Other_scientific_term('features')
# Method('SLIPPER')
# Method('machine learning algorithms')
# Method('SLIPPER')
# Method('TiMBL')
# Method('TiMBL')
# Method('machine learning algorithms')

extract = Extract([Triple(Other_scientific_term("predicates"), Rel("Used_for"), Other_scientific_term("clauses")), Triple(Other_scientific_term("predicates"), Rel("Hyponym_of"), Other_scientific_term("features")), Triple(Other_scientific_term("features"), Rel("Conjunction"), Generic("dataset")), Triple(Method("machine learning algorithms"), Rel("Hyponym_of"), Other_scientific_term("features")), Triple(Method("SLIPPER"), Rel("Used_for"), Method("machine learning algorithms")), Triple(Method("SLIPPER"), Rel("Used_for"), Method("TiMBL")), Triple(Method("TiMBL"), Rel("Used_for"), Method("machine learning algorithms"))])
pred: [['predicates', 'Used_for', 'clauses'], ['predicates', 'Hyponym_of', 'features'], ['features', 'Conjunction', 'dataset'], ['machine learning algorithms', 'Hyponym_of', 'features'], ['SLIPPER', 'Used_for', 'machine learning algorithms'], ['SLIPPER', 'Used_for', 'TiMBL'], ['TiMBL', 'Used_for', 'machine learning algorithms']]
trues: [['SLIPPER', 'Hyponym_of', 'rule-based learning algorithm'], ['rule-based learning algorithm', 'Part_of', 'machine learning algorithms'], ['rule-based learning algorithm', 'Compare', 'memory-based system'], ['TiMBL', 'Hyponym_of', 'memory-based system'], ['memory-based system', 'Part_of', 'machine learning algorithms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33033419023136246, 0.32614213197969544, 0.3282247765006386]
text: These models simulate the reading time advantage for parallel structures found in human data , and also yield a small increase in overall parsing accuracy .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('models')
# Other_scientific_term('parallel structures')
# Generic('models')
# Metric('parsing accuracy')
# Metric('parsing accuracy')
# Generic('models')

extract = Extract([Triple(Generic("models"), Rel("Used_for"), Other_scientific_term("parallel structures")), Triple(Generic("models"), Rel("Used_for"), Metric("parsing accuracy")), Triple(Metric("parsing accuracy"), Rel("Evaluate_for"), Generic("models"))])
pred: [['models', 'Used_for', 'parallel structures'], ['models', 'Used_for', 'parsing accuracy'], ['parsing accuracy', 'Evaluate_for', 'models']]
trues: [['parallel structures', 'Part_of', 'human data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3290653008962868, 0.3257287705956908, 0.32738853503184717]
text: In this paper , we evaluate the use of a conditional random field ( CRF ) for this task and relate results with this model to our prior work .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('conditional random field ( CRF )')
# Generic('task')

extract = Extract([Triple(Method("conditional random field ( CRF )"), Rel("Used_for"), Generic("task"))])
pred: [['conditional random field ( CRF )', 'Used_for', 'task']]
trues: [['conditional random field ( CRF )', 'Used_for', 'task']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.329923273657289, 0.3265822784810127, 0.32824427480916035]
text: We present results on addressee identification in four-participants face-to-face meetings using Bayesian Network and Naive Bayes classifiers .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Bayesian Network and Naive Bayes classifiers')
# Task('addressee identification')
# Method('Bayesian Network and Naive Bayes classifiers')
# Material('four-participants face-to-face meetings')
# Method('Bayesian Network')
# Method('Naive Bayes classifiers')

extract = Extract([Triple(Method("Bayesian Network and Naive Bayes classifiers"), Rel("Used_for"), Task("addressee identification")), Triple(Method("Bayesian Network and Naive Bayes classifiers"), Rel("Used_for"), Material("four-participants face-to-face meetings")), Triple(Method("Bayesian Network"), Rel("Conjunction"), Method("Naive Bayes classifiers"))])
pred: [['Bayesian Network and Naive Bayes classifiers', 'Used_for', 'addressee identification'], ['Bayesian Network and Naive Bayes classifiers', 'Used_for', 'four-participants face-to-face meetings'], ['Bayesian Network', 'Conjunction', 'Naive Bayes classifiers']]
trues: [['Bayesian Network', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Conjunction', 'Bayesian Network']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3286624203821656, 0.3253467843631778, 0.32699619771863114]
text: Experiments show that these two strategies are effective in learning robust deep metrics for person re-identification , and accordingly our deep model significantly outperforms the state-of-the-art methods on several benchmarks of person re-identification .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('strategies')
# Method('robust deep metrics')
# Generic('strategies')
# Task('person re-identification')
# Generic('strategies')
# Method('deep model')
# Method('deep model')
# Task('person re-identification')
# Method('deep model')
# Method('state-of-the-art methods')
# Task('person re-identification')
# Method('state-of-the-art methods')
# Method('deep model')

extract = Extract([Triple(Generic("strategies"), Rel("Used_for"), Method("robust deep metrics")), Triple(Generic("strategies"), Rel("Used_for"), Task("person re-identification")), Triple(Generic("strategies"), Rel("Compare"), Method("deep model")), Triple(Method("deep model"), Rel("Evaluate_for"), Task("person re-identification")), Triple(Method("deep model"), Rel("Evaluate_for"), Method("state-of-the-art methods")), Triple(Task("person re-identification"), Rel("Evaluate_for"), Method("state-of-the-art methods")), Triple(Method("deep model"), Rel("Evaluate_for"), Method("state-of-the-art methods"))])
pred: [['strategies', 'Used_for', 'robust deep metrics'], ['strategies', 'Used_for', 'person re-identification'], ['strategies', 'Compare', 'deep model'], ['deep model', 'Evaluate_for', 'person re-identification'], ['deep model', 'Evaluate_for', 'state-of-the-art methods'], ['person re-identification', 'Evaluate_for', 'state-of-the-art methods'], ['deep model', 'Evaluate_for', 'state-of-the-art methods']]
trues: [['robust deep metrics', 'Used_for', 'person re-identification'], ['deep model', 'Compare', 'state-of-the-art methods'], ['deep model', 'Used_for', 'person re-identification'], ['state-of-the-art methods', 'Used_for', 'person re-identification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32616940581542353, 0.3237139272271016, 0.3249370277078086]
text: A new tool for linguistic annotation of scfs in corpus data is also introduced which can considerably alleviate the process of obtaining training and test data for subcategorization acquisition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('tool')
# Task('linguistic annotation of scfs')
# Material('corpus data')
# Task('linguistic annotation of scfs')

extract = Extract([Triple(Generic("tool"), Rel("Used_for"), Task("linguistic annotation of scfs")), Triple(Material("corpus data"), Rel("Used_for"), Task("linguistic annotation of scfs"))])
pred: [['tool', 'Used_for', 'linguistic annotation of scfs'], ['corpus data', 'Used_for', 'linguistic annotation of scfs']]
trues: [['tool', 'Used_for', 'linguistic annotation of scfs'], ['training and test data', 'Used_for', 'subcategorization acquisition']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3266078184110971, 0.3241551939924906, 0.32537688442211055]
text: This paper describes FERRET , an interactive question-answering ( Q/A ) system designed to address the challenges of integrating automatic Q/A applications into real-world environments .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('FERRET')
# Method('interactive question-answering ( Q/A ) system')
# Method('interactive question-answering ( Q/A ) system')
# Task('integrating automatic Q/A applications into real-world environments')

extract = Extract([Triple(Method("FERRET"), Rel("Hyponym_of"), Method("interactive question-answering ( Q/A ) system")), Triple(Method("interactive question-answering ( Q/A ) system"), Rel("Used_for"), Task("integrating automatic Q/A applications into real-world environments"))])
pred: [['FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'], ['interactive question-answering ( Q/A ) system', 'Used_for', 'integrating automatic Q/A applications into real-world environments']]
trues: [['FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'], ['FERRET', 'Used_for', 'integrating automatic Q/A applications into real-world environments']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3270440251572327, 0.32459425717852686, 0.3258145363408521]
text: We apply cluster analysis on the sampled parameter space to redetect the object and renew the local tracker .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('cluster analysis')
# Other_scientific_term('parameter space')
# Method('cluster analysis')
# Other_scientific_term('object')

extract = Extract([Triple(Method("cluster analysis"), Rel("Used_for"), Other_scientific_term("parameter space")), Triple(Method("cluster analysis"), Rel("Used_for"), Other_scientific_term("object"))])
pred: [['cluster analysis', 'Used_for', 'parameter space'], ['cluster analysis', 'Used_for', 'object']]
trues: [['cluster analysis', 'Used_for', 'sampled parameter space'], ['cluster analysis', 'Used_for', 'local tracker']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32622333751568383, 0.32378580323785805, 0.325]
text: In this paper , we present an unlexicalized parser for German which employs smoothing and suffix analysis to achieve a labelled bracket F-score of 76.2 , higher than previously reported results on the NEGRA corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# The candidate entities for this text are:
# Method('unlexicalized parser')
# Material('German')
# Method('smoothing')
# Method('unlexicalized parser')
# Method('smoothing')
# Method('suffix analysis')
# Method('smoothing')
# Metric('labelled bracket F-score')
# Method('suffix analysis')
# Method('unlexicalized parser')
# Metric('labelled bracket F-score')
# Generic('results')

extract = Extract([Triple(Method("unlexicalized parser"), Rel("Used_for"), Material("German")), Triple(Method("smoothing"), Rel("Used_for"), Method("unlexicalized parser")), Triple(Method("smoothing"), Rel("Evaluate_for"), Metric("labelled bracket F-score")), Triple(Method("suffix analysis"), Rel("Evaluate_for"), Method("unlexicalized parser")), Triple(Metric("labelled bracket F-score"), Rel("Compare"), Generic("results"))])
pred: [['unlexicalized parser', 'Used_for', 'German'], ['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Evaluate_for', 'labelled bracket F-score'], ['suffix analysis', 'Evaluate_for', 'unlexicalized parser'], ['labelled bracket F-score', 'Compare', 'results']]
trues: [['unlexicalized parser', 'Used_for', 'German'], ['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Conjunction', 'suffix analysis'], ['suffix analysis', 'Used_for', 'unlexicalized parser'], ['labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'], ['NEGRA corpus', 'Evaluate_for', 'unlexicalized parser']]
metrics_sample: [0.4, 0.3333333333333333, 0.3636363636363636]
metrics_current: [0.3266832917705736, 0.3238566131025958, 0.32526381129733084]
text: Topic signatures can be useful in a number of Natural Language Processing ( NLP ) applications , such as Word Sense Disambiguation ( WSD ) and Text Summarisation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Topic signatures')
# Task('Natural Language Processing ( NLP ) applications')
# Task('Word Sense Disambiguation ( WSD )')
# Task('Natural Language Processing ( NLP ) applications')
# Task('Word Sense Disambiguation ( WSD )')
# Task('Text Summarisation')
# Task('Text Summarisation')
# Task('Natural Language Processing ( NLP ) applications')

extract = Extract([Triple(Method("Topic signatures"), Rel("Used_for"), Task("Natural Language Processing ( NLP ) applications")), Triple(Task("Word Sense Disambiguation ( WSD )"), Rel("Hyponym_of"), Task("Natural Language Processing ( NLP ) applications")), Triple(Task("Word Sense Disambiguation ( WSD )"), Rel("Conjunction"), Task("Text Summarisation")), Triple(Task("Text Summarisation"), Rel("Hyponym_of"), Task("Natural Language Processing ( NLP ) applications"))])
pred: [['Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'], ['Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications']]
trues: [['Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'], ['Topic signatures', 'Used_for', 'Word Sense Disambiguation ( WSD )'], ['Topic signatures', 'Used_for', 'Text Summarisation'], ['Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'], ['Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.33002481389578164, 0.3263803680981595, 0.32819247378161626]
text: We show how this can efficiently be combined with random-projection based methods for 2 NN search , such as locality-sensitive hashing ( LSH ) or random projection trees .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('this')
# Method('random-projection based methods')
# Generic('this')
# Task('2 NN search')
# Method('locality-sensitive hashing ( LSH )')
# Method('random-projection based methods')
# Method('locality-sensitive hashing ( LSH )')
# Method('random projection trees')
# Method('random projection trees')
# Method('random-projection based methods')

extract = Extract([Triple(Generic("this"), Rel("Conjunction"), Method("random-projection based methods")), Triple(Generic("this"), Rel("Used_for"), Task("2 NN search")), Triple(Method("locality-sensitive hashing ( LSH )"), Rel("Hyponym_of"), Method("random-projection based methods")), Triple(Method("locality-sensitive hashing ( LSH )"), Rel("Conjunction"), Method("random projection trees")), Triple(Method("random projection trees"), Rel("Hyponym_of"), Method("random-projection based methods"))])
pred: [['this', 'Conjunction', 'random-projection based methods'], ['this', 'Used_for', '2 NN search'], ['locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'], ['locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'], ['random projection trees', 'Hyponym_of', 'random-projection based methods']]
trues: [['this', 'Conjunction', 'random-projection based methods'], ['random-projection based methods', 'Used_for', 'NN search'], ['locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'], ['locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'], ['random projection trees', 'Hyponym_of', 'random-projection based methods']]
metrics_sample: [0.8, 0.8, 0.8000000000000002]
metrics_current: [0.33292231812577067, 0.32926829268292684, 0.3310852237890865]
text: Structural or numerical constraints can then be added locally to the reconstruction process through a constrained optimization scheme .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('constrained optimization scheme')
# Other_scientific_term('Structural or numerical constraints')

extract = Extract([Triple(Method("constrained optimization scheme"), Rel("Used_for"), Other_scientific_term("Structural or numerical constraints"))])
pred: [['constrained optimization scheme', 'Used_for', 'Structural or numerical constraints']]
trues: [['Structural or numerical constraints', 'Used_for', 'reconstruction process'], ['constrained optimization scheme', 'Used_for', 'Structural or numerical constraints']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.33374384236453203, 0.32968369829683697, 0.3317013463892289]
text: Metagrammatical formalisms that combine context-free phrase structure rules and metarules ( MPS grammars ) allow concise statement of generalizations about the syntax of natural languages .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Metagrammatical formalisms')
# Other_scientific_term('syntax of natural languages')
# Method('context-free phrase structure rules and metarules ( MPS grammars )')
# Method('Metagrammatical formalisms')
# Method('context-free phrase structure rules and metarules ( MPS grammars )')
# Generic('generalizations')

extract = Extract([Triple(Method("Metagrammatical formalisms"), Rel("Used_for"), Other_scientific_term("syntax of natural languages")), Triple(Method("context-free phrase structure rules and metarules ( MPS grammars )"), Rel("Used_for"), Method("Metagrammatical formalisms")), Triple(Method("context-free phrase structure rules and metarules ( MPS grammars )"), Rel("Hyponym_of"), Generic("generalizations"))])
pred: [['Metagrammatical formalisms', 'Used_for', 'syntax of natural languages'], ['context-free phrase structure rules and metarules ( MPS grammars )', 'Used_for', 'Metagrammatical formalisms'], ['context-free phrase structure rules and metarules ( MPS grammars )', 'Hyponym_of', 'generalizations']]
trues: [['context-free phrase structure rules', 'Part_of', 'Metagrammatical formalisms'], ['context-free phrase structure rules', 'Conjunction', 'metarules ( MPS grammars )'], ['metarules ( MPS grammars )', 'Part_of', 'Metagrammatical formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3325153374233129, 0.3284848484848485, 0.3304878048780488]
text: We believe that these evaluation techniques will provide information about both the human language learning process , the translation process and the development of machine translation systems .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('evaluation techniques')
# Task('human language learning process')
# Generic('evaluation techniques')
# Task('translation process')
# Task('human language learning process')
# Task('translation process')
# Generic('evaluation techniques')
# Task('development of machine translation systems')

extract = Extract([Triple(Generic("evaluation techniques"), Rel("Evaluate_for"), Task("human language learning process")), Triple(Generic("evaluation techniques"), Rel("Evaluate_for"), Task("translation process")), Triple(Task("human language learning process"), Rel("Conjunction"), Task("translation process")), Triple(Generic("evaluation techniques"), Rel("Evaluate_for"), Task("development of machine translation systems"))])
pred: [['evaluation techniques', 'Evaluate_for', 'human language learning process'], ['evaluation techniques', 'Evaluate_for', 'translation process'], ['human language learning process', 'Conjunction', 'translation process'], ['evaluation techniques', 'Evaluate_for', 'development of machine translation systems']]
trues: [['evaluation techniques', 'Used_for', 'human language learning process'], ['evaluation techniques', 'Used_for', 'translation process'], ['evaluation techniques', 'Used_for', 'machine translation systems'], ['human language learning process', 'Conjunction', 'translation process'], ['translation process', 'Conjunction', 'machine translation systems']]
metrics_sample: [0.25, 0.2, 0.22222222222222224]
metrics_current: [0.3321123321123321, 0.327710843373494, 0.3298969072164948]
text: Furthermore , we show how the recently developed efficient subwindow search ( ESS ) procedure [ 11 ] can be integrated into the last stage of our method .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Method('efficient subwindow search ( ESS ) procedure')
# Generic('last stage')

extract = Extract([Triple(Method("efficient subwindow search ( ESS ) procedure"), Rel("Part_of"), Generic("last stage"))])
pred: [['efficient subwindow search ( ESS ) procedure', 'Part_of', 'last stage']]
trues: [['subwindow search ( ESS ) procedure', 'Part_of', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33170731707317075, 0.32731648616125153, 0.3294972743791642]
text: It works by calculating eigenvectors of an adjacency graph 's Laplacian to recover a submanifold of data from a high dimensionality space and then performing cluster number estimation on the eigenvectors .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('eigenvectors')
# Other_scientific_term('submanifold')
# Other_scientific_term('adjacency graph 's Laplacian')
# Other_scientific_term('eigenvectors')
# Other_scientific_term('eigenvectors')
# Task('cluster number estimation')

extract = Extract([Triple(Other_scientific_term("eigenvectors"), Rel("Used_for"), Other_scientific_term("submanifold")), Triple(Other_scientific_term("adjacency graph 's Laplacian"), Rel("Used_for"), Other_scientific_term("eigenvectors")), Triple(Other_scientific_term("eigenvectors"), Rel("Used_for"), Task("cluster number estimation"))])
pred: [['eigenvectors', 'Used_for', 'submanifold'], ["adjacency graph 's Laplacian", 'Used_for', 'eigenvectors'], ['eigenvectors', 'Used_for', 'cluster number estimation']]
trues: [['It', 'Used_for', 'submanifold'], ['eigenvectors', 'Used_for', 'It'], ["adjacency graph 's Laplacian", 'Feature_of', 'eigenvectors'], ['high dimensionality space', 'Used_for', 'submanifold'], ['cluster number estimation', 'Used_for', 'It'], ['cluster number estimation', 'Used_for', 'eigenvectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.330498177399757, 0.3249701314217443, 0.327710843373494]
text: The model is evaluated on English and Czech newspaper texts , and is then validated on French broadcast news transcriptions .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('English and Czech newspaper texts')
# Generic('model')
# Material('English and Czech newspaper texts')
# Generic('model')
# Material('French broadcast news transcriptions')
# Generic('model')

extract = Extract([Triple(Material("English and Czech newspaper texts"), Rel("Evaluate_for"), Generic("model")), Triple(Material("English and Czech newspaper texts"), Rel("Evaluate_for"), Generic("model")), Triple(Material("French broadcast news transcriptions"), Rel("Evaluate_for"), Generic("model"))])
pred: [['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['French broadcast news transcriptions', 'Evaluate_for', 'model']]
trues: [['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['French broadcast news transcriptions', 'Evaluate_for', 'model']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3321212121212121, 0.3265792610250298, 0.3293269230769231]
text: We evaluate the quality of the extracted data by showing that it improves the performance of a state-of-the-art statistical machine translation system .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('it')
# Method('statistical machine translation system')
# Generic('it')
# Task('statistical machine translation system')

extract = Extract([Triple(Generic("it"), Rel("Evaluate_for"), Method("statistical machine translation system")), Triple(Generic("it"), Rel("Evaluate_for"), Task("statistical machine translation system"))])
pred: [['it', 'Evaluate_for', 'statistical machine translation system'], ['it', 'Evaluate_for', 'statistical machine translation system']]
trues: [['it', 'Used_for', 'statistical machine translation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33171912832929784, 0.3261904761904762, 0.3289315726290516]
text: In this paper , we present our approach for using information extraction annotations to augment document retrieval for distillation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('information extraction annotations')
# Task('document retrieval')
# Task('document retrieval')
# Task('distillation')

extract = Extract([Triple(Other_scientific_term("information extraction annotations"), Rel("Used_for"), Task("document retrieval")), Triple(Task("document retrieval"), Rel("Used_for"), Task("distillation"))])
pred: [['information extraction annotations', 'Used_for', 'document retrieval'], ['document retrieval', 'Used_for', 'distillation']]
trues: [['information extraction annotations', 'Used_for', 'document retrieval for distillation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3309178743961353, 0.3258026159334126, 0.3283403235470342]
text: However , when the object becomes partially or totally occluded , such local tracking is prone to failure , especially when common prediction techniques like the Kalman filter do not provide a good estimate of object parameters in future frames .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('local tracking')
# Generic('object')
# Method('common prediction techniques')
# Method('local tracking')
# Method('Kalman filter')
# Method('common prediction techniques')

extract = Extract([Triple(Method("local tracking"), Rel("Used_for"), Generic("object")), Triple(Method("common prediction techniques"), Rel("Used_for"), Method("local tracking")), Triple(Method("Kalman filter"), Rel("Used_for"), Method("common prediction techniques"))])
pred: [['local tracking', 'Used_for', 'object'], ['common prediction techniques', 'Used_for', 'local tracking'], ['Kalman filter', 'Used_for', 'common prediction techniques']]
trues: [['Kalman filter', 'Part_of', 'prediction techniques']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3297232250300842, 0.3254156769596199, 0.3275552898983861]
text: In comparison with previous works , in this paper it is assumed that the signals are not i.i.d. in each epoch , but obey a first-order autoregressive model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('first-order autoregressive model')
# Other_scientific_term('signals')

extract = Extract([Triple(Other_scientific_term("first-order autoregressive model"), Rel("Used_for"), Other_scientific_term("signals"))])
pred: [['first-order autoregressive model', 'Used_for', 'signals']]
trues: [['first-order autoregressive model', 'Used_for', 'signals']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33052884615384615, 0.3262158956109134, 0.32835820895522383]
text: This paper describes the impact of using different-quality references on evaluation .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('evaluation')
# Other_scientific_term('different-quality references')

extract = Extract([Triple(Generic("evaluation"), Rel("Evaluate_for"), Other_scientific_term("different-quality references"))])
pred: [['evaluation', 'Evaluate_for', 'different-quality references']]
trues: [['different-quality references', 'Used_for', 'evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33013205282112845, 0.32582938388625593, 0.3279666070363745]
text: A mixed-signal paradigm is presented for high-resolution parallel inner-product computation in very high dimensions , suitable for efficient implementation of kernels in image processing .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('mixed-signal paradigm')
# Task('high-resolution parallel inner-product computation')
# Method('mixed-signal paradigm')
# Task('kernels in image processing')

extract = Extract([Triple(Method("mixed-signal paradigm"), Rel("Used_for"), Task("high-resolution parallel inner-product computation")), Triple(Method("mixed-signal paradigm"), Rel("Used_for"), Task("kernels in image processing"))])
pred: [['mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'], ['mixed-signal paradigm', 'Used_for', 'kernels in image processing']]
trues: [['mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'], ['mixed-signal paradigm', 'Used_for', 'kernels'], ['kernels', 'Used_for', 'image processing']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.33053892215568864, 0.32585596221959856, 0.3281807372175981]
text: The unique properties of tree-adjoining grammars ( TAG ) present a challenge for the application of TAGs beyond the limited confines of syntax , for instance , to the task of semantic interpretation or automatic translation of natural language .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('tree-adjoining grammars ( TAG )')
# Generic('task')
# Method('TAGs')
# Task('syntax')
# Task('semantic interpretation')
# Generic('task')
# Task('semantic interpretation')
# Task('automatic translation of natural language')
# Task('automatic translation of natural language')
# Generic('task')

extract = Extract([Triple(Method("tree-adjoining grammars ( TAG )"), Rel("Used_for"), Generic("task")), Triple(Method("TAGs"), Rel("Used_for"), Task("syntax")), Triple(Task("semantic interpretation"), Rel("Hyponym_of"), Generic("task")), Triple(Task("semantic interpretation"), Rel("Conjunction"), Task("automatic translation of natural language")), Triple(Task("automatic translation of natural language"), Rel("Hyponym_of"), Generic("task"))])
pred: [['tree-adjoining grammars ( TAG )', 'Used_for', 'task'], ['TAGs', 'Used_for', 'syntax'], ['semantic interpretation', 'Hyponym_of', 'task'], ['semantic interpretation', 'Conjunction', 'automatic translation of natural language'], ['automatic translation of natural language', 'Hyponym_of', 'task']]
trues: [['TAGs', 'Used_for', 'semantic interpretation'], ['TAGs', 'Used_for', 'automatic translation of natural language'], ['semantic interpretation', 'Conjunction', 'automatic translation of natural language']]
metrics_sample: [0.2, 0.3333333333333333, 0.25]
metrics_current: [0.32976190476190476, 0.32588235294117646, 0.327810650887574]
text: By employing a joint classification and regression optimization objective , this network is capable of automatically localizing the start and end points of actions more accurately .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('joint classification and regression optimization objective')
# Generic('network')
# Generic('network')
# Other_scientific_term('start and end points of actions')

extract = Extract([Triple(Other_scientific_term("joint classification and regression optimization objective"), Rel("Used_for"), Generic("network")), Triple(Generic("network"), Rel("Used_for"), Other_scientific_term("start and end points of actions"))])
pred: [['joint classification and regression optimization objective', 'Used_for', 'network'], ['network', 'Used_for', 'start and end points of actions']]
trues: [['joint classification and regression optimization objective', 'Used_for', 'network']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.33016627078384797, 0.32667450058754405, 0.32841110454813943]
text: The distinction among these components is essential to provide an adequate explanation of such discourse phenomena as cue phrases , referring expressions , and interruptions .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('components')
# Other_scientific_term('discourse phenomena')
# Other_scientific_term('cue phrases')
# Generic('components')
# Other_scientific_term('cue phrases')
# Other_scientific_term('referring expressions')
# Other_scientific_term('referring expressions')
# Generic('components')
# Other_scientific_term('referring expressions')
# Other_scientific_term('interruptions')
# Other_scientific_term('interruptions')
# Generic('components')

extract = Extract([Triple(Generic("components"), Rel("Part_of"), Other_scientific_term("discourse phenomena")), Triple(Other_scientific_term("cue phrases"), Rel("Hyponym_of"), Generic("components")), Triple(Other_scientific_term("cue phrases"), Rel("Conjunction"), Other_scientific_term("referring expressions")), Triple(Other_scientific_term("referring expressions"), Rel("Hyponym_of"), Generic("components")), Triple(Other_scientific_term("referring expressions"), Rel("Conjunction"), Other_scientific_term("interruptions")), Triple(Other_scientific_term("interruptions"), Rel("Hyponym_of"), Generic("components"))])
pred: [['components', 'Part_of', 'discourse phenomena'], ['cue phrases', 'Hyponym_of', 'components'], ['cue phrases', 'Conjunction', 'referring expressions'], ['referring expressions', 'Hyponym_of', 'components'], ['referring expressions', 'Conjunction', 'interruptions'], ['interruptions', 'Hyponym_of', 'components']]
trues: [['cue phrases', 'Hyponym_of', 'discourse phenomena'], ['cue phrases', 'Conjunction', 'referring expressions'], ['referring expressions', 'Hyponym_of', 'discourse phenomena'], ['referring expressions', 'Conjunction', 'interruptions'], ['interruptions', 'Hyponym_of', 'discourse phenomena']]
metrics_sample: [0.3333333333333333, 0.4, 0.3636363636363636]
metrics_current: [0.330188679245283, 0.32710280373831774, 0.3286384976525822]
text: Unlike existing interest point detectors , which measure pixel-wise differences in image intensity , our detectors incorporate histogram-based representations , and thus can find image regions that present a distinct distribution in the neighborhood .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('interest point detectors')
# Generic('detectors')
# Other_scientific_term('histogram-based representations')
# Generic('detectors')
# Other_scientific_term('histogram-based representations')
# Other_scientific_term('image regions')

extract = Extract([Triple(Generic("interest point detectors"), Rel("Compare"), Generic("detectors")), Triple(Other_scientific_term("histogram-based representations"), Rel("Used_for"), Generic("detectors")), Triple(Other_scientific_term("histogram-based representations"), Rel("Used_for"), Other_scientific_term("image regions"))])
pred: [['interest point detectors', 'Compare', 'detectors'], ['histogram-based representations', 'Used_for', 'detectors'], ['histogram-based representations', 'Used_for', 'image regions']]
trues: [['pixel-wise differences in image intensity', 'Evaluate_for', 'interest point detectors'], ['histogram-based representations', 'Part_of', 'detectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3290246768507638, 0.32634032634032634, 0.32767700409596257]
text: A generative framework is used for learning a model that captures the relative position of parts within each of the discretized viewpoints .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('generative framework')
# Generic('model')

extract = Extract([Triple(Method("generative framework"), Rel("Used_for"), Generic("model"))])
pred: [['generative framework', 'Used_for', 'model']]
trues: [['generative framework', 'Used_for', 'model']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32981220657276994, 0.32712456344586727, 0.3284628872004675]
text: While Plume is well adapted to simple declarative and imperative utterances , it handles passives , relative clauses and interrogatives in an ad hoc manner leading to patchy syntactic coverage .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('Plume')
# Other_scientific_term('declarative and imperative utterances')
# Method('Plume')
# Other_scientific_term('passives')
# Other_scientific_term('passives')
# Other_scientific_term('relative clauses and interrogatives')
# Other_scientific_term('relative clauses')
# Other_scientific_term('passives')
# Other_scientific_term('relative clauses')
# Other_scientific_term('interrogatives')
# Other_scientific_term('interrogatives')
# Other_scientific_term('passives')
# Metric('syntactic coverage')
# Other_scientific_term('passives')
# Metric('syntactic coverage')

extract = Extract([Triple(Method("Plume"), Rel("Used_for"), Other_scientific_term("declarative and imperative utterances")), Triple(Method("Plume"), Rel("Used_for"), Other_scientific_term("passives")), Triple(Other_scientific_term("passives"), Rel("Conjunction"), Other_scientific_term("relative clauses and interrogatives")), Triple(Other_scientific_term("relative clauses"), Rel("Feature_of"), Other_scientific_term("passives")), Triple(Other_scientific_term("relative clauses"), Rel("Feature_of"), Other_scientific_term("interrogatives")), Triple(Other_scientific_term("interrogatives"), Rel("Conjunction"), Other_scientific_term("passives")), Triple(Metric("syntactic coverage"), Rel("Feature_of"), Other_scientific_term("passives")), Triple(Metric("syntactic coverage"), Rel("Feature_of"), Other_scientific_term("passives"))])
pred: [['Plume', 'Used_for', 'declarative and imperative utterances'], ['Plume', 'Used_for', 'passives'], ['passives', 'Conjunction', 'relative clauses and interrogatives'], ['relative clauses', 'Feature_of', 'passives'], ['relative clauses', 'Feature_of', 'interrogatives'], ['interrogatives', 'Conjunction', 'passives'], ['syntactic coverage', 'Feature_of', 'passives'], ['syntactic coverage', 'Feature_of', 'passives']]
trues: [['Plume', 'Used_for', 'declarative and imperative utterances'], ['it', 'Used_for', 'passives'], ['it', 'Used_for', 'relative clauses'], ['it', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [0.14285714285714285, 0.16666666666666666, 0.15384615384615383]
metrics_current: [0.32828870779976715, 0.3260115606936416, 0.3271461716937355]
text: In particular , we make extensive use of Pustejovsky 's principles concerning the predicative information associated with nominals .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('Pustejovsky 's principles')
# Other_scientific_term('predicative information associated with nominals')

extract = Extract([Triple(Other_scientific_term("Pustejovsky 's principles"), Rel("Used_for"), Other_scientific_term("predicative information associated with nominals"))])
pred: [["Pustejovsky 's principles", 'Used_for', 'predicative information associated with nominals']]
trues: [['nominals', 'Feature_of', 'predicative information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32790697674418606, 0.325635103926097, 0.3267670915411356]
text: Related work applies MINPRAN to complex range and intensity data 23 ] .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MINPRAN')
# Other_scientific_term('complex range and intensity data')

extract = Extract([Triple(Method("MINPRAN"), Rel("Used_for"), Other_scientific_term("complex range and intensity data"))])
pred: [['MINPRAN', 'Used_for', 'complex range and intensity data']]
trues: [['MINPRAN', 'Used_for', 'complex range'], ['MINPRAN', 'Used_for', 'intensity data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32752613240418116, 0.3248847926267281, 0.32620011567379986]
text: Owing to these variations , the pedestrian data is distributed as highly-curved manifolds in the feature space , despite the current convolutional neural networks ( CNN ) 's capability of feature extraction .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('highly-curved manifolds')
# Other_scientific_term('feature space')

extract = Extract([Triple(Other_scientific_term("highly-curved manifolds"), Rel("Feature_of"), Other_scientific_term("feature space"))])
pred: [['highly-curved manifolds', 'Feature_of', 'feature space']]
trues: [['highly-curved manifolds', 'Used_for', 'pedestrian data'], ['feature space', 'Feature_of', 'highly-curved manifolds'], ['convolutional neural networks ( CNN )', 'Used_for', 'feature extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3271461716937355, 0.3237657864523536, 0.3254472013848817]
text: Utterance Verification ( UV ) is a critical function of an Automatic Speech Recognition ( ASR ) System working on real applications where spontaneous speech , out-of-vocabulary ( OOV ) words and acoustic noises are present .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Task('Utterance Verification ( UV )')
# Task('Automatic Speech Recognition ( ASR ) System')

extract = Extract([Triple(Task("Utterance Verification ( UV )"), Rel("Part_of"), Task("Automatic Speech Recognition ( ASR ) System"))])
pred: [['Utterance Verification ( UV )', 'Part_of', 'Automatic Speech Recognition ( ASR ) System']]
trues: [['Utterance Verification ( UV )', 'Hyponym_of', 'Automatic Speech Recognition ( ASR ) System']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3267670915411356, 0.32339449541284404, 0.3250720461095101]
text: For LR ( 0 ) grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz [ 1 ] and Roberts [ 2 ] .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('algorithm')
# Method('LR ( 0 ) grammars')
# Method('recursive ascent parsers')
# Generic('algorithm')
# Method('recursive ascent parsers')
# Method('Kruse-man Aretz [ 1 ] and Roberts [ 2 ]')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Method("LR ( 0 ) grammars")), Triple(Method("recursive ascent parsers"), Rel("Hyponym_of"), Generic("algorithm")), Triple(Method("recursive ascent parsers"), Rel("Hyponym_of"), Method("Kruse-man Aretz [ 1 ] and Roberts [ 2 ]"))])
pred: [['algorithm', 'Used_for', 'LR ( 0 ) grammars'], ['recursive ascent parsers', 'Hyponym_of', 'algorithm'], ['recursive ascent parsers', 'Hyponym_of', 'Kruse-man Aretz [ 1 ] and Roberts [ 2 ]']]
trues: [['algorithm', 'Used_for', 'LR ( 0 ) grammars'], ['algorithm', 'Conjunction', 'recursive ascent parsers']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.32678983833718245, 0.32379862700228834, 0.3252873563218391]
text: Towards the modeling of the dynamic characteristics , optical flow is computed and utilized as a feature in a higher dimensional space .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('optical flow')
# Other_scientific_term('dynamic characteristics')
# Other_scientific_term('feature')
# Other_scientific_term('higher dimensional space')

extract = Extract([Triple(Method("optical flow"), Rel("Used_for"), Other_scientific_term("dynamic characteristics")), Triple(Other_scientific_term("feature"), Rel("Used_for"), Other_scientific_term("higher dimensional space"))])
pred: [['optical flow', 'Used_for', 'dynamic characteristics'], ['feature', 'Used_for', 'higher dimensional space']]
trues: [['optical flow', 'Used_for', 'modeling of the dynamic characteristics'], ['optical flow', 'Used_for', 'feature'], ['feature', 'Used_for', 'modeling of the dynamic characteristics'], ['higher dimensional space', 'Feature_of', 'feature']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.326036866359447, 0.3223234624145786, 0.3241695303550974]
text: We propose a multi-task end-to-end Joint Classification-Regression Recurrent Neural Network to better explore the action type and temporal localiza-tion information .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('multi-task end-to-end Joint Classification-Regression Recurrent Neural Network')
# Generic('we')
# Other_scientific_term('action type and temporal localiza-tion information')
# Generic('we')

extract = Extract([Triple(Method("multi-task end-to-end Joint Classification-Regression Recurrent Neural Network"), Rel("Used_for"), Generic("we")), Triple(Other_scientific_term("action type and temporal localiza-tion information"), Rel("Used_for"), Generic("we"))])
pred: [['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'we'], ['action type and temporal localiza-tion information', 'Used_for', 'we']]
trues: [['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type'], ['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'temporal localiza-tion information'], ['action type', 'Conjunction', 'temporal localiza-tion information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3252873563218391, 0.32122587968217936, 0.3232438606510566]
text: In this paper , we describe a search procedure for statistical machine translation ( MT ) based on dynamic programming ( DP ) .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('search procedure')
# Task('statistical machine translation ( MT )')
# Method('dynamic programming ( DP )')
# Method('search procedure')

extract = Extract([Triple(Method("search procedure"), Rel("Used_for"), Task("statistical machine translation ( MT )")), Triple(Method("dynamic programming ( DP )"), Rel("Used_for"), Method("search procedure"))])
pred: [['search procedure', 'Used_for', 'statistical machine translation ( MT )'], ['dynamic programming ( DP )', 'Used_for', 'search procedure']]
trues: [['search procedure', 'Used_for', 'statistical machine translation ( MT )'], ['dynamic programming ( DP )', 'Used_for', 'statistical machine translation ( MT )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3256880733944954, 0.32163080407701017, 0.32364672364672364]
text: While previous approaches relied on geometric , appearance , or correlation-based information for establishing correspondences between static cameras , they each have well-known limitations and are not extendable to wide-area settings with PTZ cameras .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('geometric , appearance , or correlation-based information')
# Generic('approaches')
# Other_scientific_term('geometric , appearance , or correlation-based information')
# Task('establishing correspondences between static cameras')
# Other_scientific_term('geometric , appearance , or correlation-based information')
# Generic('they')
# Other_scientific_term('geometric , appearance , or correlation-based information')
# Generic('approaches')
# Task('establishing correspondences between static cameras')
# Generic('they')
# Task('establishing correspondences between static cameras')
# Other_scientific_term('PTZ cameras')

extract = Extract([Triple(Other_scientific_term("geometric , appearance , or correlation-based information"), Rel("Used_for"), Generic("approaches")), Triple(Other_scientific_term("geometric , appearance , or correlation-based information"), Rel("Used_for"), Task("establishing correspondences between static cameras")), Triple(Other_scientific_term("geometric , appearance , or correlation-based information"), Rel("Used_for"), Generic("they")), Triple(Other_scientific_term("geometric , appearance , or correlation-based information"), Rel("Used_for"), Generic("approaches")), Triple(Task("establishing correspondences between static cameras"), Rel("Conjunction"), Generic("they")), Triple(Task("establishing correspondences between static cameras"), Rel("Feature_of"), Other_scientific_term("PTZ cameras"))])
pred: [['geometric , appearance , or correlation-based information', 'Used_for', 'approaches'], ['geometric , appearance , or correlation-based information', 'Used_for', 'establishing correspondences between static cameras'], ['geometric , appearance , or correlation-based information', 'Used_for', 'they'], ['geometric , appearance , or correlation-based information', 'Used_for', 'approaches'], ['establishing correspondences between static cameras', 'Conjunction', 'they'], ['establishing correspondences between static cameras', 'Feature_of', 'PTZ cameras']]
trues: [['geometric , appearance , or correlation-based information', 'Used_for', 'approaches']]
metrics_sample: [0.2, 1.0, 0.33333333333333337]
metrics_current: [0.3249714937286203, 0.3223981900452489, 0.323679727427598]
text: This paper presents an unsupervised learning approach to disambiguate various relations between named entities by use of various lexical and syntactic features from the contexts .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('unsupervised learning approach')
# Task('disambiguate relations between named entities')
# Other_scientific_term('lexical and syntactic features')
# Method('unsupervised learning approach')

extract = Extract([Triple(Method("unsupervised learning approach"), Rel("Used_for"), Task("disambiguate relations between named entities")), Triple(Other_scientific_term("lexical and syntactic features"), Rel("Used_for"), Method("unsupervised learning approach"))])
pred: [['unsupervised learning approach', 'Used_for', 'disambiguate relations between named entities'], ['lexical and syntactic features', 'Used_for', 'unsupervised learning approach']]
trues: [['unsupervised learning approach', 'Used_for', 'relations between named entities'], ['lexical and syntactic features', 'Used_for', 'unsupervised learning approach']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3253697383390216, 0.3227990970654628, 0.3240793201133145]
text: Extension to affine projection enables reconstruction without estimating cameras .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('affine projection')
# Task('reconstruction')

extract = Extract([Triple(Other_scientific_term("affine projection"), Rel("Used_for"), Task("reconstruction"))])
pred: [['affine projection', 'Used_for', 'reconstruction']]
trues: [['affine projection', 'Used_for', 'reconstruction']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3261363636363636, 0.32356257046223225, 0.32484436898698354]
text: This work presents an automated technique for detecting reflections in image sequences by analyzing motion trajectories of feature points .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('automated technique')
# Other_scientific_term('reflections')
# Other_scientific_term('motion trajectories of feature points')
# Generic('automated technique')

extract = Extract([Triple(Generic("automated technique"), Rel("Used_for"), Other_scientific_term("reflections")), Triple(Other_scientific_term("motion trajectories of feature points"), Rel("Used_for"), Generic("automated technique"))])
pred: [['automated technique', 'Used_for', 'reflections'], ['motion trajectories of feature points', 'Used_for', 'automated technique']]
trues: [['technique', 'Used_for', 'detecting reflections in image sequences'], ['motion trajectories', 'Used_for', 'technique'], ['feature points', 'Feature_of', 'motion trajectories']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3253968253968254, 0.32247191011235954, 0.32392776523702027]
text: This has the advantages of efficiency on grammatical input , and robustness in the face of ungrammatical input .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('grammatical input')
# Other_scientific_term('ungrammatical input')

extract = Extract([Triple(Other_scientific_term("grammatical input"), Rel("Conjunction"), Other_scientific_term("ungrammatical input"))])
pred: [['grammatical input', 'Conjunction', 'ungrammatical input']]
trues: [['ungrammatical input', 'Feature_of', 'robustness']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3250283125707814, 0.3221099887766554, 0.32356257046223225]
text: We propose a novel metric learning formulation called Weighted Approximate Rank Component Analysis ( WARCA ) .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Weighted Approximate Rank Component Analysis ( WARCA )')
# Method('metric learning formulation')

extract = Extract([Triple(Method("Weighted Approximate Rank Component Analysis ( WARCA )"), Rel("Hyponym_of"), Method("metric learning formulation"))])
pred: [['Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation']]
trues: [['Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3257918552036199, 0.32286995515695066, 0.32432432432432434]
text: On the other hand , the manifold learning methods suggest to use the Euclidean distance in the local range , combining with the graphical relationship between samples , for approximating the geodesic distance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('Euclidean distance')
# Method('manifold learning methods')
# Other_scientific_term('Euclidean distance')
# Other_scientific_term('graphical relationship')
# Other_scientific_term('graphical relationship')
# Method('manifold learning methods')

extract = Extract([Triple(Other_scientific_term("Euclidean distance"), Rel("Used_for"), Method("manifold learning methods")), Triple(Other_scientific_term("Euclidean distance"), Rel("Conjunction"), Other_scientific_term("graphical relationship")), Triple(Other_scientific_term("graphical relationship"), Rel("Used_for"), Method("manifold learning methods"))])
pred: [['Euclidean distance', 'Used_for', 'manifold learning methods'], ['Euclidean distance', 'Conjunction', 'graphical relationship'], ['graphical relationship', 'Used_for', 'manifold learning methods']]
trues: [['Euclidean distance', 'Used_for', 'manifold learning methods'], ['Euclidean distance', 'Conjunction', 'graphical relationship'], ['Euclidean distance', 'Used_for', 'geodesic distance'], ['local range', 'Feature_of', 'Euclidean distance'], ['graphical relationship', 'Used_for', 'geodesic distance']]
metrics_sample: [0.6666666666666666, 0.4, 0.5]
metrics_current: [0.3269447576099211, 0.3232998885172798, 0.3251121076233184]
text: Indeed , automatic evaluations need high-quality data that allow the comparison of both automatic and human translations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('high-quality data')
# Task('automatic evaluations')

extract = Extract([Triple(Material("high-quality data"), Rel("Used_for"), Task("automatic evaluations"))])
pred: [['high-quality data', 'Used_for', 'automatic evaluations']]
trues: [['high-quality data', 'Evaluate_for', 'automatic evaluations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32657657657657657, 0.32293986636971045, 0.3247480403135498]
text: In this model , on-line handwriting is considered as a modulation of a simple cycloidal pen motion , described by two coupled oscillations with a constant linear drift along the line of the writing .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('model')
# Task('on-line handwriting')
# Other_scientific_term('cycloidal pen motion')
# Generic('model')
# Other_scientific_term('coupled oscillations')
# Other_scientific_term('linear drift')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("on-line handwriting")), Triple(Other_scientific_term("cycloidal pen motion"), Rel("Feature_of"), Generic("model")), Triple(Other_scientific_term("coupled oscillations"), Rel("Feature_of"), Other_scientific_term("linear drift"))])
pred: [['model', 'Used_for', 'on-line handwriting'], ['cycloidal pen motion', 'Feature_of', 'model'], ['coupled oscillations', 'Feature_of', 'linear drift']]
trues: [['model', 'Used_for', 'on-line handwriting'], ['on-line handwriting', 'Part_of', 'cycloidal pen motion']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3265993265993266, 0.3233333333333333, 0.3249581239530988]
text: Sentence boundary detection in speech is important for enriching speech recognition output , making it easier for humans to read and downstream modules to process .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Sentence boundary detection in speech')
# Task('speech recognition')
# Task('Sentence boundary detection in speech')
# Task('enriching speech recognition output')
# Task('enriching speech recognition output')
# Task('downstream modules')

extract = Extract([Triple(Task("Sentence boundary detection in speech"), Rel("Used_for"), Task("speech recognition")), Triple(Task("Sentence boundary detection in speech"), Rel("Used_for"), Task("enriching speech recognition output")), Triple(Task("enriching speech recognition output"), Rel("Used_for"), Task("downstream modules"))])
pred: [['Sentence boundary detection in speech', 'Used_for', 'speech recognition'], ['Sentence boundary detection in speech', 'Used_for', 'enriching speech recognition output'], ['enriching speech recognition output', 'Used_for', 'downstream modules']]
trues: [['Sentence boundary detection', 'Used_for', 'speech recognition output'], ['speech', 'Used_for', 'Sentence boundary detection']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32550335570469796, 0.32261640798226165, 0.32405345211581293]
text: Our study reveals that the syntactic structure features embedded in a parse tree are very effective for relation extraction and these features can be well captured by the convolution tree kernel .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('syntactic structure features')
# Task('relation extraction')
# Other_scientific_term('syntactic structure features')
# Other_scientific_term('parse tree')
# Method('convolution tree kernel')
# Other_scientific_term('syntactic structure features')

extract = Extract([Triple(Other_scientific_term("syntactic structure features"), Rel("Used_for"), Task("relation extraction")), Triple(Other_scientific_term("syntactic structure features"), Rel("Used_for"), Other_scientific_term("parse tree")), Triple(Method("convolution tree kernel"), Rel("Used_for"), Other_scientific_term("syntactic structure features"))])
pred: [['syntactic structure features', 'Used_for', 'relation extraction'], ['syntactic structure features', 'Used_for', 'parse tree'], ['convolution tree kernel', 'Used_for', 'syntactic structure features']]
trues: [['syntactic structure features', 'Feature_of', 'parse tree'], ['syntactic structure features', 'Used_for', 'relation extraction'], ['convolution tree kernel', 'Used_for', 'features']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3255295429208473, 0.32265193370165746, 0.32408435072142067]
text: Given an object model and a black-box measure of similarity between the model and candidate targets , we consider visual object tracking as a numerical optimization problem .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('object model')
# Other_scientific_term('black-box measure of similarity')
# Other_scientific_term('object model')
# Task('visual object tracking')
# Other_scientific_term('black-box measure of similarity')
# Task('visual object tracking')

extract = Extract([Triple(Other_scientific_term("object model"), Rel("Conjunction"), Other_scientific_term("black-box measure of similarity")), Triple(Other_scientific_term("object model"), Rel("Used_for"), Task("visual object tracking")), Triple(Other_scientific_term("black-box measure of similarity"), Rel("Used_for"), Task("visual object tracking"))])
pred: [['object model', 'Conjunction', 'black-box measure of similarity'], ['object model', 'Used_for', 'visual object tracking'], ['black-box measure of similarity', 'Used_for', 'visual object tracking']]
trues: [['numerical optimization problem', 'Used_for', 'visual object tracking']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3244444444444444, 0.32229580573951433, 0.32336655592469543]
text: An important area of learning in autonomous agents is the ability to learn domain-speciic models of actions to be used by planning systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('learning domain-speciic models of actions')
# Method('planning systems')
# Method('learning domain-speciic models of actions')
# Method('planning systems')

extract = Extract([Triple(Method("learning domain-speciic models of actions"), Rel("Used_for"), Method("planning systems")), Triple(Method("learning domain-speciic models of actions"), Rel("Used_for"), Method("planning systems"))])
pred: [['learning domain-speciic models of actions', 'Used_for', 'planning systems'], ['learning domain-speciic models of actions', 'Used_for', 'planning systems']]
trues: [['learning in autonomous agents', 'Used_for', 'domain-speciic models of actions'], ['planning systems', 'Used_for', 'domain-speciic models of actions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32408435072142067, 0.32158590308370044, 0.3228302929795467]
text: Unfortunately , creating large datasets with pixel-level labels has been extremely costly due to the amount of human effort required .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('human effort')
# Material('datasets with pixel-level labels')

extract = Extract([Triple(Other_scientific_term("human effort"), Rel("Feature_of"), Material("datasets with pixel-level labels"))])
pred: [['human effort', 'Feature_of', 'datasets with pixel-level labels']]
trues: [['pixel-level labels', 'Feature_of', 'large datasets']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3237250554323725, 0.32123212321232125, 0.32247377139701827]
text: These mattes are implied by a set of hypothesized object boundary fragments in the scene .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('object boundary fragments')
# Other_scientific_term('mattes')

extract = Extract([Triple(Other_scientific_term("object boundary fragments"), Rel("Feature_of"), Other_scientific_term("mattes"))])
pred: [['object boundary fragments', 'Feature_of', 'mattes']]
trues: [['hypothesized object boundary fragments', 'Used_for', 'mattes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3233665559246955, 0.3208791208791209, 0.3221180364037507]
text: Techniques for automatically training modules of a natural language generator have recently been proposed , but a fundamental concern is whether the quality of utterances produced with trainable components can compete with hand-crafted template-based or rule-based approaches .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Generic('Techniques')
# Method('natural language generator')
# Method('natural language generator')
# Method('template-based or rule-based approaches')

extract = Extract([Triple(Generic("Techniques"), Rel("Used_for"), Method("natural language generator")), Triple(Method("natural language generator"), Rel("Compare"), Method("template-based or rule-based approaches"))])
pred: [['Techniques', 'Used_for', 'natural language generator'], ['natural language generator', 'Compare', 'template-based or rule-based approaches']]
trues: [['Techniques', 'Used_for', 'automatically training modules'], ['automatically training modules', 'Part_of', 'natural language generator'], ['utterances', 'Evaluate_for', 'trainable components'], ['utterances', 'Evaluate_for', 'hand-crafted template-based or rule-based approaches'], ['trainable components', 'Compare', 'hand-crafted template-based or rule-based approaches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32265193370165746, 0.3191256830601093, 0.32087912087912085]
text: This paper presents a critical discussion of the various approaches that have been used in the evaluation of Natural Language systems .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('approaches')
# Task('evaluation of Natural Language systems')

extract = Extract([Triple(Generic("approaches"), Rel("Evaluate_for"), Task("evaluation of Natural Language systems"))])
pred: [['approaches', 'Evaluate_for', 'evaluation of Natural Language systems']]
trues: [['approaches', 'Used_for', 'evaluation of Natural Language systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32229580573951433, 0.31877729257641924, 0.3205268935236004]
text: This paper solves a specialized regression problem to obtain sampling probabilities for records in databases .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('regression problem')
# Other_scientific_term('sampling probabilities')

extract = Extract([Triple(Task("regression problem"), Rel("Used_for"), Other_scientific_term("sampling probabilities"))])
pred: [['regression problem', 'Used_for', 'sampling probabilities']]
trues: [['specialized regression problem', 'Used_for', 'sampling probabilities'], ['sampling probabilities', 'Used_for', 'records'], ['records', 'Part_of', 'databases']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3219404630650496, 0.3177366702937976, 0.3198247535596933]
text: Human action recognition from well-segmented 3D skeleton data has been intensively studied and attracting an increasing attention .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('well-segmented 3D skeleton data')
# Task('Human action recognition')

extract = Extract([Triple(Material("well-segmented 3D skeleton data"), Rel("Used_for"), Task("Human action recognition"))])
pred: [['well-segmented 3D skeleton data', 'Used_for', 'Human action recognition']]
trues: [['well-segmented 3D skeleton data', 'Used_for', 'Human action recognition']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32268722466960353, 0.3184782608695652, 0.3205689277899344]
text: Relaxations of these properties expose some of the interesting ( and unavoidable ) trade-offs at work in well-studied clustering techniques such as single-linkage , sum-of-pairs , k-means , and k-median .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('single-linkage')
# Method('clustering techniques')
# Method('single-linkage')
# Method('sum-of-pairs')
# Method('sum-of-pairs')
# Method('clustering techniques')
# Method('sum-of-pairs')
# Method('k-means')
# Method('k-means')
# Method('clustering techniques')
# Method('k-means')
# Method('k-median')
# Method('k-median')
# Method('clustering techniques')

extract = Extract([Triple(Method("single-linkage"), Rel("Hyponym_of"), Method("clustering techniques")), Triple(Method("single-linkage"), Rel("Conjunction"), Method("sum-of-pairs")), Triple(Method("sum-of-pairs"), Rel("Hyponym_of"), Method("clustering techniques")), Triple(Method("sum-of-pairs"), Rel("Conjunction"), Method("k-means")), Triple(Method("k-means"), Rel("Hyponym_of"), Method("clustering techniques")), Triple(Method("k-means"), Rel("Conjunction"), Method("k-median")), Triple(Method("k-median"), Rel("Hyponym_of"), Method("clustering techniques"))])
pred: [['single-linkage', 'Hyponym_of', 'clustering techniques'], ['single-linkage', 'Conjunction', 'sum-of-pairs'], ['sum-of-pairs', 'Hyponym_of', 'clustering techniques'], ['sum-of-pairs', 'Conjunction', 'k-means'], ['k-means', 'Hyponym_of', 'clustering techniques'], ['k-means', 'Conjunction', 'k-median'], ['k-median', 'Hyponym_of', 'clustering techniques']]
trues: [['single-linkage', 'Hyponym_of', 'well-studied clustering techniques'], ['single-linkage', 'Conjunction', 'sum-of-pairs'], ['sum-of-pairs', 'Hyponym_of', 'well-studied clustering techniques'], ['sum-of-pairs', 'Conjunction', 'k-means'], ['k-means', 'Hyponym_of', 'well-studied clustering techniques'], ['k-means', 'Conjunction', 'k-median'], ['k-median', 'Hyponym_of', 'well-studied clustering techniques']]
metrics_sample: [0.42857142857142855, 0.42857142857142855, 0.42857142857142855]
metrics_current: [0.32349726775956283, 0.3193096008629989, 0.32138979370249726]
text: In this paper , we study the problem of online action detection from the streaming skeleton data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('streaming skeleton data')
# Task('online action detection')

extract = Extract([Triple(Material("streaming skeleton data"), Rel("Used_for"), Task("online action detection"))])
pred: [['streaming skeleton data', 'Used_for', 'online action detection']]
trues: [['streaming skeleton data', 'Used_for', 'online action detection']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.324235807860262, 0.32004310344827586, 0.32212581344902386]
text: In the second half of the paper , we report a laboratory study using the Wizard of Oz technique to identify NL requirements for carrying out this task .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Wizard of Oz technique')
# Task('NL requirements')

extract = Extract([Triple(Method("Wizard of Oz technique"), Rel("Used_for"), Task("NL requirements"))])
pred: [['Wizard of Oz technique', 'Used_for', 'NL requirements']]
trues: [['Wizard of Oz technique', 'Used_for', 'NL requirements'], ['Wizard of Oz technique', 'Used_for', 'task']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3249727371864776, 0.3204301075268817, 0.3226854358419058]
text: We show how features that are imaged through a transparent object behave differently from those that are rigidly attached to the scene .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('features that are imaged through a transparent object')
# Other_scientific_term('those that are rigidly attached to the scene')

extract = Extract([Triple(Other_scientific_term("features that are imaged through a transparent object"), Rel("Conjunction"), Other_scientific_term("those that are rigidly attached to the scene"))])
pred: [['features that are imaged through a transparent object', 'Conjunction', 'those that are rigidly attached to the scene']]
trues: [['those', 'Compare', 'features']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32461873638344224, 0.3200859291084855, 0.32233639805300157]
text: We describe a hierarchy of loss functions that incorporate different levels of linguistic information from word strings , word-to-word alignments from an MT system , and syntactic structure from parse-trees of source and target language sentences .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('word strings')
# Other_scientific_term('word-to-word alignments')
# Other_scientific_term('word strings')
# Generic('loss functions')
# Other_scientific_term('word-to-word alignments')
# Other_scientific_term('syntactic structure')
# Other_scientific_term('word-to-word alignments')
# Generic('loss functions')
# Other_scientific_term('syntactic structure')
# Other_scientific_term('word strings')
# Other_scientific_term('syntactic structure')
# Other_scientific_term('parse-trees')
# Other_scientific_term('syntactic structure')
# Generic('loss functions')
# Other_scientific_term('parse-trees')
# Other_scientific_term('word strings')

extract = Extract([Triple(Other_scientific_term("word strings"), Rel("Conjunction"), Other_scientific_term("word-to-word alignments")), Triple(Other_scientific_term("word strings"), Rel("Feature_of"), Generic("loss functions")), Triple(Other_scientific_term("word-to-word alignments"), Rel("Conjunction"), Other_scientific_term("syntactic structure")), Triple(Other_scientific_term("word-to-word alignments"), Rel("Feature_of"), Generic("loss functions")), Triple(Other_scientific_term("syntactic structure"), Rel("Conjunction"), Other_scientific_term("word strings")), Triple(Other_scientific_term("syntactic structure"), Rel("Feature_of"), Other_scientific_term("parse-trees")), Triple(Other_scientific_term("syntactic structure"), Rel("Conjunction"), Generic("loss functions")), Triple(Other_scientific_term("parse-trees"), Rel("Feature_of"), Other_scientific_term("word strings"))])
pred: [['word strings', 'Conjunction', 'word-to-word alignments'], ['word strings', 'Feature_of', 'loss functions'], ['word-to-word alignments', 'Conjunction', 'syntactic structure'], ['word-to-word alignments', 'Feature_of', 'loss functions'], ['syntactic structure', 'Conjunction', 'word strings'], ['syntactic structure', 'Feature_of', 'parse-trees'], ['syntactic structure', 'Conjunction', 'loss functions'], ['parse-trees', 'Feature_of', 'word strings']]
trues: [['linguistic information', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Part_of', 'MT system'], ['syntactic structure', 'Used_for', 'loss functions'], ['parse-trees', 'Part_of', 'syntactic structure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32181425485961124, 0.31837606837606836, 0.3200859291084855]
text: For example , nucleotides in a DNA sequence , children 's names in a given state and year , and text documents are all commonly modeled with multinomial distributions .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Other_scientific_term('nucleotides')
# Other_scientific_term('children 's names')
# Other_scientific_term('nucleotides')
# Other_scientific_term('DNA sequence')
# Other_scientific_term('children 's names')
# Other_scientific_term('text documents')
# Other_scientific_term('children 's names')
# Other_scientific_term('state and year')
# Other_scientific_term('text documents')
# Other_scientific_term('nucleotides')
# Other_scientific_term('text documents')
# Other_scientific_term('DNA sequence')

extract = Extract([Triple(Other_scientific_term("nucleotides"), Rel("Conjunction"), Other_scientific_term("children 's names")), Triple(Other_scientific_term("nucleotides"), Rel("Hyponym_of"), Other_scientific_term("DNA sequence")), Triple(Other_scientific_term("children 's names"), Rel("Conjunction"), Other_scientific_term("text documents")), Triple(Other_scientific_term("children 's names"), Rel("Hyponym_of"), Other_scientific_term("state and year")), Triple(Other_scientific_term("text documents"), Rel("Conjunction"), Other_scientific_term("nucleotides")), Triple(Other_scientific_term("text documents"), Rel("Hyponym_of"), Other_scientific_term("DNA sequence"))])
pred: [['nucleotides', 'Conjunction', "children 's names"], ['nucleotides', 'Hyponym_of', 'DNA sequence'], ["children 's names", 'Conjunction', 'text documents'], ["children 's names", 'Hyponym_of', 'state and year'], ['text documents', 'Conjunction', 'nucleotides'], ['text documents', 'Hyponym_of', 'DNA sequence']]
trues: [['multinomial distributions', 'Used_for', 'nucleotides in a DNA sequence'], ['multinomial distributions', 'Used_for', 'text documents']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3197424892703863, 0.31769722814498935, 0.31871657754010696]
text: Using this approach , we extract parallel data from large Chinese , Arabic , and English non-parallel newspaper corpora .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Material('parallel data')
# Material('Chinese , Arabic , and English non-parallel newspaper corpora')
# Material('parallel data')
# Material('Chinese , Arabic , and English non-parallel newspaper corpora')
# Material('Arabic , and English non-parallel newspaper corpora')
# Material('Arabic , and English non-parallel newspaper corpora')
# Material('parallel data')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Material("parallel data")), Triple(Material("Chinese , Arabic , and English non-parallel newspaper corpora"), Rel("Used_for"), Material("parallel data")), Triple(Material("Chinese , Arabic , and English non-parallel newspaper corpora"), Rel("Conjunction"), Material("Arabic , and English non-parallel newspaper corpora")), Triple(Material("Arabic , and English non-parallel newspaper corpora"), Rel("Used_for"), Material("parallel data"))])
pred: [['approach', 'Used_for', 'parallel data'], ['Chinese , Arabic , and English non-parallel newspaper corpora', 'Used_for', 'parallel data'], ['Chinese , Arabic , and English non-parallel newspaper corpora', 'Conjunction', 'Arabic , and English non-parallel newspaper corpora'], ['Arabic , and English non-parallel newspaper corpora', 'Used_for', 'parallel data']]
trues: [['approach', 'Used_for', 'parallel data'], ['parallel data', 'Part_of', 'Chinese , Arabic , and English non-parallel newspaper corpora']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.3194444444444444, 0.3180851063829787, 0.3187633262260128]
text: This formalism is both elementary and powerful enough to strongly simulate many grammar formalisms , such as rewriting systems , dependency grammars , TAG , HPSG and LFG .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('formalism')
# Generic('grammar formalisms')
# Method('rewriting systems')
# Generic('grammar formalisms')
# Method('rewriting systems')
# Method('dependency grammars')
# Method('dependency grammars')
# Generic('grammar formalisms')
# Method('dependency grammars')
# Method('TAG')
# Method('TAG')
# Generic('grammar formalisms')
# Method('TAG')
# Method('HPSG')
# Method('HPSG')
# Generic('grammar formalisms')
# Method('HPSG')
# Method('LFG')
# Method('LFG')
# Generic('grammar formalisms')

extract = Extract([Triple(Generic("formalism"), Rel("Used_for"), Generic("grammar formalisms")), Triple(Method("rewriting systems"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("rewriting systems"), Rel("Conjunction"), Method("dependency grammars")), Triple(Method("dependency grammars"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("dependency grammars"), Rel("Conjunction"), Method("TAG")), Triple(Method("TAG"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("TAG"), Rel("Conjunction"), Method("HPSG")), Triple(Method("HPSG"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("HPSG"), Rel("Conjunction"), Method("LFG")), Triple(Method("LFG"), Rel("Hyponym_of"), Generic("grammar formalisms"))])
pred: [['formalism', 'Used_for', 'grammar formalisms'], ['rewriting systems', 'Hyponym_of', 'grammar formalisms'], ['rewriting systems', 'Conjunction', 'dependency grammars'], ['dependency grammars', 'Hyponym_of', 'grammar formalisms'], ['dependency grammars', 'Conjunction', 'TAG'], ['TAG', 'Hyponym_of', 'grammar formalisms'], ['TAG', 'Conjunction', 'HPSG'], ['HPSG', 'Hyponym_of', 'grammar formalisms'], ['HPSG', 'Conjunction', 'LFG'], ['LFG', 'Hyponym_of', 'grammar formalisms']]
trues: [['formalism', 'Used_for', 'grammar formalisms'], ['rewriting systems', 'Hyponym_of', 'grammar formalisms'], ['rewriting systems', 'Conjunction', 'dependency grammars'], ['dependency grammars', 'Hyponym_of', 'grammar formalisms'], ['dependency grammars', 'Conjunction', 'TAG'], ['TAG', 'Hyponym_of', 'grammar formalisms'], ['TAG', 'Conjunction', 'HPSG'], ['HPSG', 'Hyponym_of', 'grammar formalisms'], ['HPSG', 'Conjunction', 'LFG'], ['LFG', 'Hyponym_of', 'grammar formalisms']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3266384778012685, 0.32526315789473687, 0.3259493670886076]
text: On the internal side , liaisons are established between elements of the text and the graph by using broadly available resources such as a LO-English or better a L0-UNL dictionary , a morphosyntactic parser of L0 , and a canonical graph2tree transformation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('broadly available resources')
# Other_scientific_term('liaisons')
# Material('LO-English')
# Material('broadly available resources')
# Material('LO-English')
# Material('L0-UNL dictionary')
# Material('L0-UNL dictionary')
# Material('broadly available resources')
# Method('morphosyntactic parser of L0')
# Material('broadly available resources')
# Method('morphosyntactic parser of L0')
# Other_scientific_term('liaisons')
# Method('canonical graph2tree transformation')
# Other_scientific_term('liaisons')

extract = Extract([Triple(Material("broadly available resources"), Rel("Used_for"), Other_scientific_term("liaisons")), Triple(Material("LO-English"), Rel("Used_for"), Material("broadly available resources")), Triple(Material("LO-English"), Rel("Conjunction"), Material("L0-UNL dictionary")), Triple(Material("L0-UNL dictionary"), Rel("Used_for"), Material("broadly available resources")), Triple(Method("morphosyntactic parser of L0"), Rel("Used_for"), Material("broadly available resources")), Triple(Method("morphosyntactic parser of L0"), Rel("Used_for"), Other_scientific_term("liaisons")), Triple(Method("canonical graph2tree transformation"), Rel("Used_for"), Other_scientific_term("liaisons"))])
pred: [['broadly available resources', 'Used_for', 'liaisons'], ['LO-English', 'Used_for', 'broadly available resources'], ['LO-English', 'Conjunction', 'L0-UNL dictionary'], ['L0-UNL dictionary', 'Used_for', 'broadly available resources'], ['morphosyntactic parser of L0', 'Used_for', 'broadly available resources'], ['morphosyntactic parser of L0', 'Used_for', 'liaisons'], ['canonical graph2tree transformation', 'Used_for', 'liaisons']]
trues: [['resources', 'Used_for', 'liaisons'], ['LO-English or better a L0-UNL dictionary', 'Hyponym_of', 'resources'], ['LO-English or better a L0-UNL dictionary', 'Conjunction', 'morphosyntactic parser of L0'], ['morphosyntactic parser of L0', 'Hyponym_of', 'resources'], ['morphosyntactic parser of L0', 'Conjunction', 'canonical graph2tree transformation'], ['canonical graph2tree transformation', 'Hyponym_of', 'resources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3242392444910808, 0.32322175732217573, 0.32372970141435314]
text: The result theoretically justifies the effectiveness of features in robust PCA .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('features')
# Method('robust PCA')

extract = Extract([Triple(Other_scientific_term("features"), Rel("Part_of"), Method("robust PCA"))])
pred: [['features', 'Part_of', 'robust PCA']]
trues: [['features', 'Feature_of', 'robust PCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3238993710691824, 0.322884012539185, 0.32339089481946626]
text: We then turn to a discussion comparing the linguistic expressiveness of the two formalisms .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('formalisms')
# Other_scientific_term('linguistic expressiveness')

extract = Extract([Triple(Generic("formalisms"), Rel("Compare"), Other_scientific_term("linguistic expressiveness"))])
pred: [['formalisms', 'Compare', 'linguistic expressiveness']]
trues: [['linguistic expressiveness', 'Feature_of', 'formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32356020942408376, 0.32254697286012524, 0.3230527966544694]
text: The robust principal component analysis ( robust PCA ) problem has been considered in many machine learning applications , where the goal is to decompose the data matrix to a low rank part plus a sparse residual .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('robust principal component analysis ( robust PCA )')
# Task('machine learning applications')
# Task('machine learning applications')
# Other_scientific_term('low rank part plus a sparse residual')

extract = Extract([Triple(Method("robust principal component analysis ( robust PCA )"), Rel("Used_for"), Task("machine learning applications")), Triple(Task("machine learning applications"), Rel("Used_for"), Other_scientific_term("low rank part plus a sparse residual"))])
pred: [['robust principal component analysis ( robust PCA )', 'Used_for', 'machine learning applications'], ['machine learning applications', 'Used_for', 'low rank part plus a sparse residual']]
trues: [['robust principal component analysis ( robust PCA ) problem', 'Used_for', 'machine learning applications'], ['low rank part', 'Part_of', 'data matrix'], ['low rank part', 'Conjunction', 'sparse residual'], ['sparse residual', 'Part_of', 'data matrix']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.322884012539185, 0.3212058212058212, 0.32204273058884836]
text: We propose a novel step toward the unsupervised seg-mentation of whole objects by combining '' hints '' of partial scene segmentation offered by multiple soft , binary mattes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('soft , binary mattes')
# Task('unsupervised seg-mentation of whole objects')
# Generic('soft , binary mattes')
# Task('partial scene segmentation')

extract = Extract([Triple(Generic("soft , binary mattes"), Rel("Used_for"), Task("unsupervised seg-mentation of whole objects")), Triple(Generic("soft , binary mattes"), Rel("Used_for"), Task("partial scene segmentation"))])
pred: [['soft , binary mattes', 'Used_for', 'unsupervised seg-mentation of whole objects'], ['soft , binary mattes', 'Used_for', 'partial scene segmentation']]
trues: [['partial scene segmentation', 'Used_for', 'unsupervised seg-mentation of whole objects'], ['soft , binary mattes', 'Used_for', 'partial scene segmentation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3232533889468196, 0.3215767634854772, 0.32241289651586064]
text: Bayesian inference then samples the rules , disambiguating and combining them to create complex tree structures that maximize a discriminative model 's posterior on a target unlabeled corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Bayesian inference')
# Other_scientific_term('rules')
# Other_scientific_term('rules')
# Other_scientific_term('complex tree structures')

extract = Extract([Triple(Method("Bayesian inference"), Rel("Used_for"), Other_scientific_term("rules")), Triple(Other_scientific_term("rules"), Rel("Used_for"), Other_scientific_term("complex tree structures"))])
pred: [['Bayesian inference', 'Used_for', 'rules'], ['rules', 'Used_for', 'complex tree structures']]
trues: [['Bayesian inference', 'Used_for', 'rules'], ['them', 'Used_for', 'complex tree structures'], ['complex tree structures', 'Used_for', "discriminative model 's posterior"], ['unlabeled corpus', 'Used_for', "discriminative model 's posterior"]]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.32362122788761705, 0.3212809917355372, 0.3224468636599274]
text: In this theory , discourse structure is composed of three separate but interrelated components : the structure of the sequence of utterances ( called the linguistic structure ) , a structure of purposes ( called the intentional structure ) , and the state of focus of attention ( called the attentional state ) .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('linguistic structure')
# Other_scientific_term('discourse structure')
# Other_scientific_term('linguistic structure')
# Other_scientific_term('intentional structure')
# Other_scientific_term('intentional structure')
# Other_scientific_term('discourse structure')
# Other_scientific_term('intentional structure')
# Other_scientific_term('attentional state')
# Other_scientific_term('attentional state')
# Other_scientific_term('discourse structure')

extract = Extract([Triple(Other_scientific_term("linguistic structure"), Rel("Part_of"), Other_scientific_term("discourse structure")), Triple(Other_scientific_term("linguistic structure"), Rel("Conjunction"), Other_scientific_term("intentional structure")), Triple(Other_scientific_term("intentional structure"), Rel("Part_of"), Other_scientific_term("discourse structure")), Triple(Other_scientific_term("intentional structure"), Rel("Conjunction"), Other_scientific_term("attentional state")), Triple(Other_scientific_term("attentional state"), Rel("Part_of"), Other_scientific_term("discourse structure"))])
pred: [['linguistic structure', 'Part_of', 'discourse structure'], ['linguistic structure', 'Conjunction', 'intentional structure'], ['intentional structure', 'Part_of', 'discourse structure'], ['intentional structure', 'Conjunction', 'attentional state'], ['attentional state', 'Part_of', 'discourse structure']]
trues: [['components', 'Part_of', 'discourse structure'], ['linguistic structure', 'Part_of', 'components'], ['linguistic structure', 'Conjunction', 'intentional structure'], ['intentional structure', 'Part_of', 'components'], ['intentional structure', 'Conjunction', 'attentional state'], ['attentional state', 'Part_of', 'components']]
metrics_sample: [0.4, 0.3333333333333333, 0.3636363636363636]
metrics_current: [0.32401656314699795, 0.3213552361396304, 0.32268041237113404]