from typing import List

class Rel:
    """
    The Rel class represents a relationship between two entities.
    
    Attributes:
        name (str): The name of the relationship.
    """
    def __init__(self, name: str):
        self.name = name

class Adverse_effect(Rel):
    """
    The Adverse_effect class is a specific type of relationship that denotes an adverse effect relationship between entities.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the adverse effect relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Entity:
    """
    The Entity class represents an entity which can participate in relationships.
    
    Attributes:
        name (str): The name of the entity.
    """
    def __init__(self, name: str):
        self.name = name

class Drug(Entity):
    """
    The Drug class represents a drug entity.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the drug.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Disease(Entity):
    """
    The Disease class represents a disease entity.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the disease.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Triple:
    """
    The Triple class represents a triplet structure that defines a relationship between two entities.
    
    Attributes:
        head (Entity): The head entity of the relationship.
        relation (Rel): The relationship between the head and tail entities.
        tail (Entity): The tail entity of the relationship.
    """
    def __init__(self, head: Entity, relation: Rel, tail: Entity):
        self.head = head
        self.relation = relation
        self.tail = tail

class Extract:
    """
    The Extract class is a collection of triples.
    
    Attributes:
        triples (List[Triple]): A list of Triple objects.
    """
    def __init__(self, triples: List[Triple] = []):
        self.triples = triples
