text: The system is trained on 181,000 expert games and shows excellent prediction performance as indicated by its ability to perfectly predict the moves made by professional Go players in 34 % of test positions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('expert games')
# Generic('system')
# Metric('prediction performance')
# Generic('system')
# Metric('prediction performance')
# Other_scientific_term('moves')

extract = Extract([Triple(Material("expert games"), Rel("Used_for"), Generic("system")), Triple(Metric("prediction performance"), Rel("Evaluate_for"), Generic("system")), Triple(Metric("prediction performance"), Rel("Evaluate_for"), Other_scientific_term("moves"))])
pred: [['expert games', 'Used_for', 'system'], ['prediction performance', 'Evaluate_for', 'system'], ['prediction performance', 'Evaluate_for', 'moves']]
trues: [['expert games', 'Used_for', 'system']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3333333333333333, 1.0, 0.5]
text: To associate a sequence of the Fujisaki-model parameters with a text input based on statistical learning , this paper proposes extending this model to a context-dependent one .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Fujisaki-model parameters')
# Generic('one')
# Method('statistical learning')
# Method('Fujisaki-model parameters')
# Method('context-dependent one')
# Generic('one')

extract = Extract([Triple(Method("Fujisaki-model parameters"), Rel("Used_for"), Generic("one")), Triple(Method("statistical learning"), Rel("Used_for"), Method("Fujisaki-model parameters")), Triple(Method("context-dependent one"), Rel("Used_for"), Generic("one"))])
pred: [['Fujisaki-model parameters', 'Used_for', 'one'], ['statistical learning', 'Used_for', 'Fujisaki-model parameters'], ['context-dependent one', 'Used_for', 'one']]
trues: [['text input', 'Used_for', 'Fujisaki-model parameters'], ['statistical learning', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3333333333333333, 0.6666666666666666, 0.4444444444444444]
text: We validate this new method on nine standard person re-identification datasets including two large scale Market-1501 and CUHK03 datasets and show that we improve upon the current state-of-the-art methods on all of them .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# The candidate entities for this text are:
# Generic('method')
# Task('person re-identification datasets')
# Material('Market-1501')
# Task('person re-identification datasets')
# Material('Market-1501')
# Material('CUHK03')
# Material('CUHK03')
# Task('person re-identification datasets')
# Generic('them')
# Generic('method')
# Generic('them')
# Generic('state-of-the-art methods')

extract = Extract([Triple(Generic("method"), Rel("Evaluate_for"), Task("person re-identification datasets")), Triple(Material("Market-1501"), Rel("Hyponym_of"), Task("person re-identification datasets")), Triple(Material("Market-1501"), Rel("Conjunction"), Material("CUHK03")), Triple(Material("CUHK03"), Rel("Hyponym_of"), Task("person re-identification datasets")), Triple(Generic("them"), Rel("Evaluate_for"), Generic("method")), Triple(Generic("them"), Rel("Compare"), Generic("state-of-the-art methods"))])
pred: [['method', 'Evaluate_for', 'person re-identification datasets'], ['Market-1501', 'Hyponym_of', 'person re-identification datasets'], ['Market-1501', 'Conjunction', 'CUHK03'], ['CUHK03', 'Hyponym_of', 'person re-identification datasets'], ['them', 'Evaluate_for', 'method'], ['them', 'Compare', 'state-of-the-art methods']]
trues: [['person re-identification datasets', 'Evaluate_for', 'method'], ['scale Market-1501', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Conjunction', 'scale Market-1501']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.16666666666666666, 0.2857142857142857, 0.2105263157894737]
text: This formalism is both elementary and powerful enough to strongly simulate many grammar formalisms , such as rewriting systems , dependency grammars , TAG , HPSG and LFG .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('formalism')
# Generic('grammar formalisms')
# Method('rewriting systems')
# Generic('grammar formalisms')
# Method('rewriting systems')
# Method('dependency grammars')
# Method('dependency grammars')
# Generic('grammar formalisms')
# Method('dependency grammars')
# Method('TAG')
# Method('TAG')
# Generic('grammar formalisms')
# Method('TAG')
# Method('HPSG')
# Method('HPSG')
# Generic('grammar formalisms')
# Method('HPSG')
# Method('LFG')
# Method('LFG')
# Generic('grammar formalisms')

extract = Extract([Triple(Generic("formalism"), Rel("Used_for"), Generic("grammar formalisms")), Triple(Method("rewriting systems"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("rewriting systems"), Rel("Conjunction"), Method("dependency grammars")), Triple(Method("dependency grammars"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("dependency grammars"), Rel("Conjunction"), Method("TAG")), Triple(Method("TAG"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("TAG"), Rel("Conjunction"), Method("HPSG")), Triple(Method("HPSG"), Rel("Hyponym_of"), Generic("grammar formalisms")), Triple(Method("HPSG"), Rel("Conjunction"), Method("LFG")), Triple(Method("LFG"), Rel("Hyponym_of"), Generic("grammar formalisms"))])
pred: [['formalism', 'Used_for', 'grammar formalisms'], ['rewriting systems', 'Hyponym_of', 'grammar formalisms'], ['rewriting systems', 'Conjunction', 'dependency grammars'], ['dependency grammars', 'Hyponym_of', 'grammar formalisms'], ['dependency grammars', 'Conjunction', 'TAG'], ['TAG', 'Hyponym_of', 'grammar formalisms'], ['TAG', 'Conjunction', 'HPSG'], ['HPSG', 'Hyponym_of', 'grammar formalisms'], ['HPSG', 'Conjunction', 'LFG'], ['LFG', 'Hyponym_of', 'grammar formalisms']]
trues: [['formalism', 'Used_for', 'grammar formalisms'], ['rewriting systems', 'Hyponym_of', 'grammar formalisms'], ['rewriting systems', 'Conjunction', 'dependency grammars'], ['dependency grammars', 'Hyponym_of', 'grammar formalisms'], ['dependency grammars', 'Conjunction', 'TAG'], ['TAG', 'Hyponym_of', 'grammar formalisms'], ['TAG', 'Conjunction', 'HPSG'], ['HPSG', 'Hyponym_of', 'grammar formalisms'], ['HPSG', 'Conjunction', 'LFG'], ['LFG', 'Hyponym_of', 'grammar formalisms']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.5454545454545454, 0.7058823529411765, 0.6153846153846153]
text: The psycholinguistic literature provides evidence for syntactic priming , i.e. , the tendency to repeat structures .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('syntactic priming')
# Other_scientific_term('structures')

extract = Extract([Triple(Task("syntactic priming"), Rel("Used_for"), Other_scientific_term("structures"))])
pred: [['syntactic priming', 'Used_for', 'structures']]
trues: [['psycholinguistic literature', 'Used_for', 'syntactic priming']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.5217391304347826, 0.6666666666666666, 0.5853658536585366]
text: We investigate several voting - and arbiter-based combination strategies over a diverse pool of unsupervised WSD systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('voting - and arbiter-based combination strategies')
# Method('unsupervised WSD systems')
# Method('unsupervised WSD systems')
# Task('WSD')
# Material('diverse pool')
# Method('unsupervised WSD systems')

extract = Extract([Triple(Method("voting - and arbiter-based combination strategies"), Rel("Used_for"), Method("unsupervised WSD systems")), Triple(Method("unsupervised WSD systems"), Rel("Used_for"), Task("WSD")), Triple(Material("diverse pool"), Rel("Used_for"), Method("unsupervised WSD systems"))])
pred: [['voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems'], ['unsupervised WSD systems', 'Used_for', 'WSD'], ['diverse pool', 'Used_for', 'unsupervised WSD systems']]
trues: [['voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.5, 0.6842105263157895, 0.5777777777777778]
text: The robust principal component analysis ( robust PCA ) problem has been considered in many machine learning applications , where the goal is to decompose the data matrix to a low rank part plus a sparse residual .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# The candidate entities for this text are:
# Task('machine learning applications')
# Task('robust principal component analysis ( robust PCA ) problem')
# Generic('goal')
# Task('robust principal component analysis ( robust PCA ) problem')
# Other_scientific_term('low rank part')
# Generic('data matrix')
# Other_scientific_term('low rank part')
# Other_scientific_term('sparse residual')
# Other_scientific_term('sparse residual')
# Generic('data matrix')

extract = Extract([Triple(Task("machine learning applications"), Rel("Used_for"), Task("robust principal component analysis ( robust PCA ) problem")), Triple(Generic("goal"), Rel("Used_for"), Task("robust principal component analysis ( robust PCA ) problem")), Triple(Other_scientific_term("low rank part"), Rel("Used_for"), Generic("data matrix")), Triple(Other_scientific_term("low rank part"), Rel("Part_of"), Other_scientific_term("sparse residual")), Triple(Other_scientific_term("sparse residual"), Rel("Conjunction"), Generic("data matrix"))])
pred: [['machine learning applications', 'Used_for', 'robust principal component analysis ( robust PCA ) problem'], ['goal', 'Used_for', 'robust principal component analysis ( robust PCA ) problem'], ['low rank part', 'Used_for', 'data matrix'], ['low rank part', 'Part_of', 'sparse residual'], ['sparse residual', 'Conjunction', 'data matrix']]
trues: [['robust principal component analysis ( robust PCA ) problem', 'Used_for', 'machine learning applications'], ['low rank part', 'Part_of', 'data matrix'], ['low rank part', 'Conjunction', 'sparse residual'], ['sparse residual', 'Part_of', 'data matrix']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.41935483870967744, 0.5652173913043478, 0.4814814814814815]
text: Unlike existing interest point detectors , which measure pixel-wise differences in image intensity , our detectors incorporate histogram-based representations , and thus can find image regions that present a distinct distribution in the neighborhood .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('interest point detectors')
# Generic('detectors')
# Other_scientific_term('pixel-wise differences in image intensity')
# Method('interest point detectors')
# Other_scientific_term('histogram-based representations')
# Generic('detectors')

extract = Extract([Triple(Method("interest point detectors"), Rel("Compare"), Generic("detectors")), Triple(Other_scientific_term("pixel-wise differences in image intensity"), Rel("Used_for"), Method("interest point detectors")), Triple(Other_scientific_term("histogram-based representations"), Rel("Used_for"), Generic("detectors"))])
pred: [['interest point detectors', 'Compare', 'detectors'], ['pixel-wise differences in image intensity', 'Used_for', 'interest point detectors'], ['histogram-based representations', 'Used_for', 'detectors']]
trues: [['pixel-wise differences in image intensity', 'Evaluate_for', 'interest point detectors'], ['histogram-based representations', 'Part_of', 'detectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38235294117647056, 0.52, 0.4406779661016949]
text: A new tool for linguistic annotation of scfs in corpus data is also introduced which can considerably alleviate the process of obtaining training and test data for subcategorization acquisition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('tool')
# Task('linguistic annotation of scfs')
# Generic('tool')
# Material('corpus data')

extract = Extract([Triple(Generic("tool"), Rel("Used_for"), Task("linguistic annotation of scfs")), Triple(Generic("tool"), Rel("Used_for"), Material("corpus data"))])
pred: [['tool', 'Used_for', 'linguistic annotation of scfs'], ['tool', 'Used_for', 'corpus data']]
trues: [['tool', 'Used_for', 'linguistic annotation of scfs'], ['training and test data', 'Used_for', 'subcategorization acquisition']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3888888888888889, 0.5185185185185185, 0.4444444444444444]
text: We describe how to estimate these indicators and how to integrate them into a retrieval approach based on language models .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Generic('indicators')
# Method('retrieval approach')
# Method('language models')
# Method('retrieval approach')

extract = Extract([Triple(Generic("indicators"), Rel("Used_for"), Method("retrieval approach")), Triple(Method("language models"), Rel("Part_of"), Method("retrieval approach"))])
pred: [['indicators', 'Used_for', 'retrieval approach'], ['language models', 'Part_of', 'retrieval approach']]
trues: [['them', 'Part_of', 'retrieval approach'], ['language models', 'Used_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3684210526315789, 0.4827586206896552, 0.417910447761194]
text: Using the IEMOCAP database , discrete ( categorical ) and continuous ( attribute ) emotional assessments evaluated by the actors and na ¨ ıve listeners are compared .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('IEMOCAP database')
# Other_scientific_term('discrete ( categorical ) and continuous ( attribute ) emotional assessments')
# Other_scientific_term('actors')
# Other_scientific_term('discrete ( categorical ) and continuous ( attribute ) emotional assessments')
# Other_scientific_term('na ¨ ıve listeners')
# Other_scientific_term('discrete ( categorical ) and continuous ( attribute ) emotional assessments')

extract = Extract([Triple(Material("IEMOCAP database"), Rel("Used_for"), Other_scientific_term("discrete ( categorical ) and continuous ( attribute ) emotional assessments")), Triple(Other_scientific_term("actors"), Rel("Evaluate_for"), Other_scientific_term("discrete ( categorical ) and continuous ( attribute ) emotional assessments")), Triple(Other_scientific_term("na ¨ ıve listeners"), Rel("Evaluate_for"), Other_scientific_term("discrete ( categorical ) and continuous ( attribute ) emotional assessments"))])
pred: [['IEMOCAP database', 'Used_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments'], ['actors', 'Evaluate_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments'], ['na ¨ ıve listeners', 'Evaluate_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments']]
trues: [['IEMOCAP database', 'Used_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.36585365853658536, 0.5, 0.4225352112676056]
text: Relaxations of these properties expose some of the interesting ( and unavoidable ) trade-offs at work in well-studied clustering techniques such as single-linkage , sum-of-pairs , k-means , and k-median .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('single-linkage')
# Method('clustering techniques')
# Method('single-linkage')
# Method('sum-of-pairs')
# Method('sum-of-pairs')
# Method('clustering techniques')
# Method('sum-of-pairs')
# Method('k-means')
# Method('k-means')
# Method('clustering techniques')
# Method('k-means')
# Method('k-median')
# Method('k-median')
# Method('clustering techniques')

extract = Extract([Triple(Method("single-linkage"), Rel("Hyponym_of"), Method("clustering techniques")), Triple(Method("single-linkage"), Rel("Conjunction"), Method("sum-of-pairs")), Triple(Method("sum-of-pairs"), Rel("Hyponym_of"), Method("clustering techniques")), Triple(Method("sum-of-pairs"), Rel("Conjunction"), Method("k-means")), Triple(Method("k-means"), Rel("Hyponym_of"), Method("clustering techniques")), Triple(Method("k-means"), Rel("Conjunction"), Method("k-median")), Triple(Method("k-median"), Rel("Hyponym_of"), Method("clustering techniques"))])
pred: [['single-linkage', 'Hyponym_of', 'clustering techniques'], ['single-linkage', 'Conjunction', 'sum-of-pairs'], ['sum-of-pairs', 'Hyponym_of', 'clustering techniques'], ['sum-of-pairs', 'Conjunction', 'k-means'], ['k-means', 'Hyponym_of', 'clustering techniques'], ['k-means', 'Conjunction', 'k-median'], ['k-median', 'Hyponym_of', 'clustering techniques']]
trues: [['single-linkage', 'Hyponym_of', 'well-studied clustering techniques'], ['single-linkage', 'Conjunction', 'sum-of-pairs'], ['sum-of-pairs', 'Hyponym_of', 'well-studied clustering techniques'], ['sum-of-pairs', 'Conjunction', 'k-means'], ['k-means', 'Hyponym_of', 'well-studied clustering techniques'], ['k-means', 'Conjunction', 'k-median'], ['k-median', 'Hyponym_of', 'well-studied clustering techniques']]
metrics_sample: [0.42857142857142855, 0.42857142857142855, 0.42857142857142855]
metrics_current: [0.375, 0.4864864864864865, 0.42352941176470593]
text: Owing to these variations , the pedestrian data is distributed as highly-curved manifolds in the feature space , despite the current convolutional neural networks ( CNN ) 's capability of feature extraction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('feature space')
# Material('pedestrian data')

extract = Extract([Triple(Other_scientific_term("feature space"), Rel("Used_for"), Material("pedestrian data"))])
pred: [['feature space', 'Used_for', 'pedestrian data']]
trues: [['highly-curved manifolds', 'Used_for', 'pedestrian data'], ['feature space', 'Feature_of', 'highly-curved manifolds'], ['convolutional neural networks ( CNN )', 'Used_for', 'feature extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3673469387755102, 0.45, 0.4044943820224719]
text: In particular , we make extensive use of Pustejovsky 's principles concerning the predicative information associated with nominals .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('predicative information')
# Other_scientific_term('nominals')

extract = Extract([Triple(Other_scientific_term("predicative information"), Rel("Used_for"), Other_scientific_term("nominals"))])
pred: [['predicative information', 'Used_for', 'nominals']]
trues: [['nominals', 'Feature_of', 'predicative information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.36, 0.43902439024390244, 0.3956043956043956]
text: We examine the relationship between the two grammatical formalisms : Tree Adjoining Grammars and Head Grammars .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Tree Adjoining Grammars')
# Method('Head Grammars')

extract = Extract([Triple(Method("Tree Adjoining Grammars"), Rel("Conjunction"), Method("Head Grammars"))])
pred: [['Tree Adjoining Grammars', 'Conjunction', 'Head Grammars']]
trues: [['Tree Adjoining Grammars', 'Hyponym_of', 'grammatical formalisms'], ['Tree Adjoining Grammars', 'Compare', 'Head Grammars'], ['Head Grammars', 'Hyponym_of', 'grammatical formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35294117647058826, 0.4090909090909091, 0.37894736842105264]
text: Specifically , by leveraging the merits of the deep Long Short-Term Memory ( LSTM ) subnetwork , the proposed model automatically captures the complex long-range temporal dynamics , which naturally avoids the typical sliding window design and thus ensures high computational efficiency .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('deep Long Short-Term Memory ( LSTM ) subnetwork')
# Generic('model')
# Generic('model')
# Other_scientific_term('complex long-range temporal dynamics')
# Other_scientific_term('complex long-range temporal dynamics')
# Generic('model')

extract = Extract([Triple(Method("deep Long Short-Term Memory ( LSTM ) subnetwork"), Rel("Used_for"), Generic("model")), Triple(Generic("model"), Rel("Used_for"), Other_scientific_term("complex long-range temporal dynamics")), Triple(Other_scientific_term("complex long-range temporal dynamics"), Rel("Feature_of"), Generic("model"))])
pred: [['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'], ['model', 'Used_for', 'complex long-range temporal dynamics'], ['complex long-range temporal dynamics', 'Feature_of', 'model']]
trues: [['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'], ['long-range temporal dynamics', 'Feature_of', 'model']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.35185185185185186, 0.41304347826086957, 0.38]
text: Topical blog post retrieval is the task of ranking blog posts with respect to their relevance for a given topic .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Topical blog post retrieval')
# Task('ranking blog posts')
# Task('ranking blog posts')
# Other_scientific_term('topic')

extract = Extract([Triple(Task("Topical blog post retrieval"), Rel("Used_for"), Task("ranking blog posts")), Triple(Task("ranking blog posts"), Rel("Used_for"), Other_scientific_term("topic"))])
pred: [['Topical blog post retrieval', 'Used_for', 'ranking blog posts'], ['ranking blog posts', 'Used_for', 'topic']]
trues: [['Topical blog post retrieval', 'Hyponym_of', 'ranking blog posts'], ['relevance', 'Feature_of', 'blog posts']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3392857142857143, 0.3958333333333333, 0.36538461538461536]
text: First , we investigate how well the addressee of a dialogue act can be predicted based on gaze , utterance and conversational context features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('gaze')
# Task('addressee of a dialogue act')
# Other_scientific_term('utterance')
# Task('addressee of a dialogue act')
# Other_scientific_term('conversational context features')
# Task('addressee of a dialogue act')
# Other_scientific_term('gaze')
# Other_scientific_term('utterance')
# Other_scientific_term('utterance')
# Other_scientific_term('conversational context features')

extract = Extract([Triple(Other_scientific_term("gaze"), Rel("Used_for"), Task("addressee of a dialogue act")), Triple(Other_scientific_term("utterance"), Rel("Used_for"), Task("addressee of a dialogue act")), Triple(Other_scientific_term("conversational context features"), Rel("Used_for"), Task("addressee of a dialogue act")), Triple(Other_scientific_term("gaze"), Rel("Conjunction"), Other_scientific_term("utterance")), Triple(Other_scientific_term("utterance"), Rel("Conjunction"), Other_scientific_term("conversational context features"))])
pred: [['gaze', 'Used_for', 'addressee of a dialogue act'], ['utterance', 'Used_for', 'addressee of a dialogue act'], ['conversational context features', 'Used_for', 'addressee of a dialogue act'], ['gaze', 'Conjunction', 'utterance'], ['utterance', 'Conjunction', 'conversational context features']]
trues: [['gaze', 'Used_for', 'addressee of a dialogue act'], ['gaze', 'Conjunction', 'utterance'], ['utterance', 'Used_for', 'addressee of a dialogue act'], ['utterance', 'Conjunction', 'conversational context features'], ['conversational context features', 'Used_for', 'addressee of a dialogue act']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.39344262295081966, 0.4528301886792453, 0.42105263157894735]
text: This paper examines the benefits of system combination for unsupervised WSD .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('system combination')
# Task('unsupervised WSD')

extract = Extract([Triple(Task("system combination"), Rel("Used_for"), Task("unsupervised WSD"))])
pred: [['system combination', 'Used_for', 'unsupervised WSD']]
trues: [['system combination', 'Used_for', 'unsupervised WSD']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.4032258064516129, 0.46296296296296297, 0.4310344827586207]
text: We further demonstrate synthesis from a freely translating virtual camera .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('virtual camera')
# Task('synthesis')

extract = Extract([Triple(Other_scientific_term("virtual camera"), Rel("Used_for"), Task("synthesis"))])
pred: [['virtual camera', 'Used_for', 'synthesis']]
trues: [['translating virtual camera', 'Used_for', 'synthesis']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3968253968253968, 0.45454545454545453, 0.423728813559322]
text: In addition , we conduct synthetic experiments as well as a real application on noisy image classification to show that our method also improves the performance in practice by exploiting side information .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('synthetic experiments')
# Generic('method')
# Task('real application')
# Generic('method')

extract = Extract([Triple(Task("synthetic experiments"), Rel("Evaluate_for"), Generic("method")), Triple(Task("real application"), Rel("Evaluate_for"), Generic("method"))])
pred: [['synthetic experiments', 'Evaluate_for', 'method'], ['real application', 'Evaluate_for', 'method']]
trues: [['noisy image classification', 'Evaluate_for', 'method'], ['side information', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38461538461538464, 0.43859649122807015, 0.4098360655737705]
text: On the other hand , the manifold learning methods suggest to use the Euclidean distance in the local range , combining with the graphical relationship between samples , for approximating the geodesic distance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('Euclidean distance')
# Method('manifold learning methods')
# Other_scientific_term('graphical relationship')
# Method('manifold learning methods')
# Metric('Euclidean distance')
# Other_scientific_term('graphical relationship')
# Other_scientific_term('geodesic distance')
# Method('manifold learning methods')

extract = Extract([Triple(Metric("Euclidean distance"), Rel("Used_for"), Method("manifold learning methods")), Triple(Other_scientific_term("graphical relationship"), Rel("Used_for"), Method("manifold learning methods")), Triple(Metric("Euclidean distance"), Rel("Conjunction"), Other_scientific_term("graphical relationship")), Triple(Other_scientific_term("geodesic distance"), Rel("Used_for"), Method("manifold learning methods"))])
pred: [['Euclidean distance', 'Used_for', 'manifold learning methods'], ['graphical relationship', 'Used_for', 'manifold learning methods'], ['Euclidean distance', 'Conjunction', 'graphical relationship'], ['geodesic distance', 'Used_for', 'manifold learning methods']]
trues: [['Euclidean distance', 'Used_for', 'manifold learning methods'], ['Euclidean distance', 'Conjunction', 'graphical relationship'], ['Euclidean distance', 'Used_for', 'geodesic distance'], ['local range', 'Feature_of', 'Euclidean distance'], ['graphical relationship', 'Used_for', 'geodesic distance']]
metrics_sample: [0.5, 0.4, 0.4444444444444445]
metrics_current: [0.391304347826087, 0.43548387096774194, 0.4122137404580153]
text: The system incorporates a decision-tree classifier for 30 scf types which tests for the presence of grammatical relations ( grs ) in the output of a robust statistical parser .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('decision-tree classifier')
# Other_scientific_term('scf types')
# Other_scientific_term('grammatical relations ( grs )')
# Method('decision-tree classifier')
# Method('robust statistical parser')
# Other_scientific_term('grammatical relations ( grs )')

extract = Extract([Triple(Method("decision-tree classifier"), Rel("Used_for"), Other_scientific_term("scf types")), Triple(Other_scientific_term("grammatical relations ( grs )"), Rel("Used_for"), Method("decision-tree classifier")), Triple(Method("robust statistical parser"), Rel("Used_for"), Other_scientific_term("grammatical relations ( grs )"))])
pred: [['decision-tree classifier', 'Used_for', 'scf types'], ['grammatical relations ( grs )', 'Used_for', 'decision-tree classifier'], ['robust statistical parser', 'Used_for', 'grammatical relations ( grs )']]
trues: [['decision-tree classifier', 'Part_of', 'system'], ['decision-tree classifier', 'Used_for', 'grammatical relations ( grs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.375, 0.421875, 0.39705882352941174]
text: Our proposed approach builds on recent advances in spectral clustering , image matting , and boundary detection .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Generic('approaches')
# Method('spectral clustering')
# Generic('approach')
# Method('spectral clustering')
# Method('image matting')
# Method('image matting')
# Generic('approach')
# Method('boundary detection')
# Generic('approach')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Generic("approaches")), Triple(Method("spectral clustering"), Rel("Used_for"), Generic("approach")), Triple(Method("spectral clustering"), Rel("Conjunction"), Method("image matting")), Triple(Method("image matting"), Rel("Used_for"), Generic("approach")), Triple(Method("boundary detection"), Rel("Used_for"), Generic("approach"))])
pred: [['approach', 'Used_for', 'approaches'], ['spectral clustering', 'Used_for', 'approach'], ['spectral clustering', 'Conjunction', 'image matting'], ['image matting', 'Used_for', 'approach'], ['boundary detection', 'Used_for', 'approach']]
trues: [['spectral clustering', 'Used_for', 'approach'], ['spectral clustering', 'Conjunction', 'image matting'], ['image matting', 'Used_for', 'approach'], ['image matting', 'Conjunction', 'boundary detection'], ['boundary detection', 'Used_for', 'approach']]
metrics_sample: [0.8, 0.8, 0.8000000000000002]
metrics_current: [0.4025974025974026, 0.4492753623188406, 0.4246575342465754]
text: The description has been implemented using the PC-KIMMO environment ( Antworth , 1990 ) and is based on a root word lexicon of about 23,000 roots words .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Generic('description')
# Method('PC-KIMMO environment')
# Material('root word lexicon')
# Generic('description')
# Material('root word lexicon')
# Other_scientific_term('roots words')

extract = Extract([Triple(Generic("description"), Rel("Used_for"), Method("PC-KIMMO environment")), Triple(Material("root word lexicon"), Rel("Used_for"), Generic("description")), Triple(Material("root word lexicon"), Rel("Part_of"), Other_scientific_term("roots words"))])
pred: [['description', 'Used_for', 'PC-KIMMO environment'], ['root word lexicon', 'Used_for', 'description'], ['root word lexicon', 'Part_of', 'roots words']]
trues: [['PC-KIMMO environment', 'Used_for', 'description'], ['root word lexicon', 'Used_for', 'description']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.4, 0.4507042253521127, 0.42384105960264906]
text: Many practical modeling problems involve discrete data that are best represented as draws from multinomial or categorical distributions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('discrete data')
# Task('practical modeling problems')
# Other_scientific_term('multinomial or categorical distributions')
# Other_scientific_term('discrete data')

extract = Extract([Triple(Other_scientific_term("discrete data"), Rel("Used_for"), Task("practical modeling problems")), Triple(Other_scientific_term("multinomial or categorical distributions"), Rel("Used_for"), Other_scientific_term("discrete data"))])
pred: [['discrete data', 'Used_for', 'practical modeling problems'], ['multinomial or categorical distributions', 'Used_for', 'discrete data']]
trues: [['discrete data', 'Used_for', 'modeling problems'], ['multinomial or categorical distributions', 'Used_for', 'modeling problems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3902439024390244, 0.4383561643835616, 0.4129032258064516]
text: In this paper , we present our approach for using information extraction annotations to augment document retrieval for distillation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('information extraction annotations')
# Task('document retrieval')
# Method('information extraction annotations')
# Task('distillation')

extract = Extract([Triple(Method("information extraction annotations"), Rel("Used_for"), Task("document retrieval")), Triple(Method("information extraction annotations"), Rel("Used_for"), Task("distillation"))])
pred: [['information extraction annotations', 'Used_for', 'document retrieval'], ['information extraction annotations', 'Used_for', 'distillation']]
trues: [['information extraction annotations', 'Used_for', 'document retrieval for distillation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38095238095238093, 0.43243243243243246, 0.4050632911392405]
text: Machine transliteration/back-transliteration plays an important role in many multilingual speech and language applications .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Machine transliteration/back-transliteration')
# Task('multilingual speech and language applications')
# Task('multilingual speech and language applications')
# Generic('applications')

extract = Extract([Triple(Task("Machine transliteration/back-transliteration"), Rel("Used_for"), Task("multilingual speech and language applications")), Triple(Task("multilingual speech and language applications"), Rel("Used_for"), Generic("applications"))])
pred: [['Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications'], ['multilingual speech and language applications', 'Used_for', 'applications']]
trues: [['Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.38372093023255816, 0.44, 0.4099378881987578]
text: Overall summarization quality of the proposed system is state-of-the-art , with guaranteed grammaticality of the system output due to the use of a constraint-based parser/generator .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('grammaticality')
# Generic('system')
# Method('constraint-based parser/generator')
# Generic('system')
# Method('constraint-based parser/generator')
# Other_scientific_term('grammaticality')

extract = Extract([Triple(Metric("grammaticality"), Rel("Evaluate_for"), Generic("system")), Triple(Method("constraint-based parser/generator"), Rel("Used_for"), Generic("system")), Triple(Method("constraint-based parser/generator"), Rel("Used_for"), Other_scientific_term("grammaticality"))])
pred: [['grammaticality', 'Evaluate_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'grammaticality']]
trues: [['summarization quality', 'Evaluate_for', 'system'], ['grammaticality', 'Evaluate_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'system']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.39325842696629215, 0.44871794871794873, 0.4191616766467066]
text: Finally , a novel feature weighting and selection function is presented , which yields superior feature vectors and better word similarity performance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('feature weighting and selection function')
# Other_scientific_term('feature vectors')

extract = Extract([Triple(Method("feature weighting and selection function"), Rel("Used_for"), Other_scientific_term("feature vectors"))])
pred: [['feature weighting and selection function', 'Used_for', 'feature vectors']]
trues: [['feature weighting and selection function', 'Used_for', 'feature vectors'], ['feature weighting and selection function', 'Used_for', 'word similarity'], ['feature vectors', 'Conjunction', 'word similarity']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.4, 0.4444444444444444, 0.4210526315789474]
text: Although the study of clustering is centered around an intuitively compelling goal , it has been very difficult to develop a unified framework for reasoning about it at a technical level , and profoundly diverse approaches to clustering abound in the research community .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('clustering')
# Task('unified framework')
# Task('clustering')
# Generic('it')
# Generic('it')
# Method('unified framework')

extract = Extract([Triple(Task("clustering"), Rel("Used_for"), Task("unified framework")), Triple(Task("clustering"), Rel("Used_for"), Generic("it")), Triple(Generic("it"), Rel("Used_for"), Method("unified framework"))])
pred: [['clustering', 'Used_for', 'unified framework'], ['clustering', 'Used_for', 'it'], ['it', 'Used_for', 'unified framework']]
trues: [['unified framework', 'Used_for', 'reasoning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3870967741935484, 0.43902439024390244, 0.4114285714285714]
text: We have implemented a restricted domain parser called Plume .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Plume')
# Method('restricted domain parser')

extract = Extract([Triple(Method("Plume"), Rel("Hyponym_of"), Method("restricted domain parser"))])
pred: [['Plume', 'Hyponym_of', 'restricted domain parser']]
trues: [['Plume', 'Hyponym_of', 'restricted domain parser']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.39361702127659576, 0.4457831325301205, 0.4180790960451978]
text: Our experiments clearly indicate the potential of this dynamic representation for complete cursive handwriting recognition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('dynamic representation')
# Task('complete cursive handwriting recognition')

extract = Extract([Triple(Method("dynamic representation"), Rel("Used_for"), Task("complete cursive handwriting recognition"))])
pred: [['dynamic representation', 'Used_for', 'complete cursive handwriting recognition']]
trues: [['dynamic representation', 'Used_for', 'cursive handwriting recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3894736842105263, 0.44047619047619047, 0.41340782122905023]
text: Topic signatures can be useful in a number of Natural Language Processing ( NLP ) applications , such as Word Sense Disambiguation ( WSD ) and Text Summarisation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Topic signatures')
# Task('Natural Language Processing ( NLP ) applications')
# Task('Word Sense Disambiguation ( WSD )')
# Task('Natural Language Processing ( NLP ) applications')
# Task('Word Sense Disambiguation ( WSD )')
# Task('Text Summarisation')
# Task('Text Summarisation')
# Task('Natural Language Processing ( NLP ) applications')

extract = Extract([Triple(Method("Topic signatures"), Rel("Used_for"), Task("Natural Language Processing ( NLP ) applications")), Triple(Task("Word Sense Disambiguation ( WSD )"), Rel("Hyponym_of"), Task("Natural Language Processing ( NLP ) applications")), Triple(Task("Word Sense Disambiguation ( WSD )"), Rel("Conjunction"), Task("Text Summarisation")), Triple(Task("Text Summarisation"), Rel("Hyponym_of"), Task("Natural Language Processing ( NLP ) applications"))])
pred: [['Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'], ['Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications']]
trues: [['Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'], ['Topic signatures', 'Used_for', 'Word Sense Disambiguation ( WSD )'], ['Topic signatures', 'Used_for', 'Text Summarisation'], ['Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'], ['Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.41414141414141414, 0.45555555555555555, 0.4338624338624339]
text: However , acquiring the necessary training data is typically a tedious and time consuming task that involves manual interaction , active sensing devices and/or synthetic scenes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('training data')
# Generic('task')
# Other_scientific_term('manual interaction')
# Generic('task')
# Other_scientific_term('manual interaction')
# Other_scientific_term('active sensing devices')
# Other_scientific_term('active sensing devices')
# Generic('task')
# Other_scientific_term('active sensing devices')
# Other_scientific_term('synthetic scenes')

extract = Extract([Triple(Material("training data"), Rel("Used_for"), Generic("task")), Triple(Other_scientific_term("manual interaction"), Rel("Used_for"), Generic("task")), Triple(Other_scientific_term("manual interaction"), Rel("Used_for"), Other_scientific_term("active sensing devices")), Triple(Other_scientific_term("active sensing devices"), Rel("Conjunction"), Generic("task")), Triple(Other_scientific_term("active sensing devices"), Rel("Conjunction"), Other_scientific_term("synthetic scenes"))])
pred: [['training data', 'Used_for', 'task'], ['manual interaction', 'Used_for', 'task'], ['manual interaction', 'Used_for', 'active sensing devices'], ['active sensing devices', 'Conjunction', 'task'], ['active sensing devices', 'Conjunction', 'synthetic scenes']]
trues: [['manual interaction', 'Used_for', 'task'], ['manual interaction', 'Conjunction', 'active sensing devices'], ['active sensing devices', 'Used_for', 'task'], ['active sensing devices', 'Conjunction', 'synthetic scenes'], ['synthetic scenes', 'Used_for', 'task']]
metrics_sample: [0.4, 0.4, 0.4000000000000001]
metrics_current: [0.41346153846153844, 0.45263157894736844, 0.43216080402010054]
text: In order to perform an exhaustive comparison , we also evaluate a hand-crafted template-based generation component , two rule-based sentence planners , and two baseline sentence planners .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('hand-crafted template-based generation component')
# Method('rule-based sentence planners')
# Method('hand-crafted template-based generation component')
# Method('baseline sentence planners')
# Method('rule-based sentence planners')
# Method('baseline sentence planners')
# Method('baseline sentence planners')
# Method('rule-based sentence planners')
# Method('rule-based sentence planners')
# Generic('baseline sentence planners')

extract = Extract([Triple(Method("hand-crafted template-based generation component"), Rel("Conjunction"), Method("rule-based sentence planners")), Triple(Method("hand-crafted template-based generation component"), Rel("Evaluate_for"), Method("baseline sentence planners")), Triple(Method("rule-based sentence planners"), Rel("Evaluate_for"), Method("baseline sentence planners")), Triple(Method("baseline sentence planners"), Rel("Conjunction"), Method("rule-based sentence planners")), Triple(Method("rule-based sentence planners"), Rel("Evaluate_for"), Generic("baseline sentence planners"))])
pred: [['hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'], ['hand-crafted template-based generation component', 'Evaluate_for', 'baseline sentence planners'], ['rule-based sentence planners', 'Evaluate_for', 'baseline sentence planners'], ['baseline sentence planners', 'Conjunction', 'rule-based sentence planners'], ['rule-based sentence planners', 'Evaluate_for', 'baseline sentence planners']]
trues: [['hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'], ['rule-based sentence planners', 'Conjunction', 'baseline sentence planners']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.4074074074074074, 0.4536082474226804, 0.4292682926829268]
text: We demonstrate that for certain field structured extraction tasks , such as classified advertisements and bibliographic citations , small amounts of prior knowledge can be used to learn effective models in a primarily unsupervised fashion .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('prior knowledge')
# Task('field structured extraction tasks')
# Other_scientific_term('classified advertisements')
# Task('field structured extraction tasks')
# Other_scientific_term('classified advertisements')
# Other_scientific_term('bibliographic citations')
# Other_scientific_term('bibliographic citations')
# Task('field structured extraction tasks')

extract = Extract([Triple(Generic("prior knowledge"), Rel("Used_for"), Task("field structured extraction tasks")), Triple(Other_scientific_term("classified advertisements"), Rel("Hyponym_of"), Task("field structured extraction tasks")), Triple(Other_scientific_term("classified advertisements"), Rel("Conjunction"), Other_scientific_term("bibliographic citations")), Triple(Other_scientific_term("bibliographic citations"), Rel("Hyponym_of"), Task("field structured extraction tasks"))])
pred: [['prior knowledge', 'Used_for', 'field structured extraction tasks'], ['classified advertisements', 'Hyponym_of', 'field structured extraction tasks'], ['classified advertisements', 'Conjunction', 'bibliographic citations'], ['bibliographic citations', 'Hyponym_of', 'field structured extraction tasks']]
trues: [['classified advertisements', 'Hyponym_of', 'field structured extraction tasks'], ['classified advertisements', 'Conjunction', 'bibliographic citations'], ['bibliographic citations', 'Hyponym_of', 'field structured extraction tasks'], ['prior knowledge', 'Used_for', 'field structured extraction tasks']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.42857142857142855, 0.4752475247524752, 0.45070422535211263]
text: We show that various features based on the structure of email-threads can be used to improve upon lexical similarity of discourse segments for question-answer pairing .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('features')
# Generic('features')
# Other_scientific_term('structure of email-threads')
# Other_scientific_term('features')
# Other_scientific_term('structure of email-threads')
# Other_scientific_term('lexical similarity of discourse segments')
# Other_scientific_term('lexical similarity of discourse segments')
# Task('question-answer pairing')

extract = Extract([Triple(Other_scientific_term("features"), Rel("Used_for"), Generic("features")), Triple(Other_scientific_term("structure of email-threads"), Rel("Used_for"), Other_scientific_term("features")), Triple(Other_scientific_term("structure of email-threads"), Rel("Used_for"), Other_scientific_term("lexical similarity of discourse segments")), Triple(Other_scientific_term("lexical similarity of discourse segments"), Rel("Conjunction"), Task("question-answer pairing"))])
pred: [['features', 'Used_for', 'features'], ['structure of email-threads', 'Used_for', 'features'], ['structure of email-threads', 'Used_for', 'lexical similarity of discourse segments'], ['lexical similarity of discourse segments', 'Conjunction', 'question-answer pairing']]
trues: [['features', 'Used_for', 'lexical similarity'], ['features', 'Used_for', 'question-answer pairing'], ['structure of email-threads', 'Used_for', 'features'], ['lexical similarity', 'Feature_of', 'discourse segments']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.4224137931034483, 0.4666666666666667, 0.44343891402714936]
text: Our combination methods rely on predominant senses which are derived automatically from raw text .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('raw text')
# Other_scientific_term('predominant senses')

extract = Extract([Triple(Material("raw text"), Rel("Used_for"), Other_scientific_term("predominant senses"))])
pred: [['raw text', 'Used_for', 'predominant senses']]
trues: [['predominant senses', 'Used_for', 'combination methods'], ['raw text', 'Used_for', 'predominant senses']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.42735042735042733, 0.4672897196261682, 0.44642857142857145]
text: We suggest a new goal and evaluation criterion for word similarity measures .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('evaluation criterion')
# Method('word similarity measures')

extract = Extract([Triple(Metric("evaluation criterion"), Rel("Evaluate_for"), Method("word similarity measures"))])
pred: [['evaluation criterion', 'Evaluate_for', 'word similarity measures']]
trues: [['evaluation criterion', 'Used_for', 'word similarity measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.423728813559322, 0.46296296296296297, 0.44247787610619466]
text: The proposed detectors are able to capture large-scale structures and distinctive textured patterns , and exhibit strong invariance to rotation , illumination variation , and blur .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('detectors')
# Other_scientific_term('large-scale structures')
# Generic('detectors')
# Other_scientific_term('textured patterns')
# Other_scientific_term('large-scale structures')
# Other_scientific_term('textured patterns')
# Other_scientific_term('invariance')
# Other_scientific_term('large-scale structures')
# Other_scientific_term('invariance')
# Other_scientific_term('textured patterns')
# Other_scientific_term('invariance')
# Other_scientific_term('blur')

extract = Extract([Triple(Generic("detectors"), Rel("Used_for"), Other_scientific_term("large-scale structures")), Triple(Generic("detectors"), Rel("Used_for"), Other_scientific_term("textured patterns")), Triple(Other_scientific_term("large-scale structures"), Rel("Conjunction"), Other_scientific_term("textured patterns")), Triple(Other_scientific_term("invariance"), Rel("Conjunction"), Other_scientific_term("large-scale structures")), Triple(Other_scientific_term("invariance"), Rel("Conjunction"), Other_scientific_term("textured patterns")), Triple(Other_scientific_term("invariance"), Rel("Conjunction"), Other_scientific_term("blur"))])
pred: [['detectors', 'Used_for', 'large-scale structures'], ['detectors', 'Used_for', 'textured patterns'], ['large-scale structures', 'Conjunction', 'textured patterns'], ['invariance', 'Conjunction', 'large-scale structures'], ['invariance', 'Conjunction', 'textured patterns'], ['invariance', 'Conjunction', 'blur']]
trues: [['detectors', 'Used_for', 'large-scale structures'], ['detectors', 'Used_for', 'distinctive textured patterns'], ['detectors', 'Used_for', 'rotation'], ['detectors', 'Used_for', 'illumination variation'], ['detectors', 'Used_for', 'blur'], ['large-scale structures', 'Conjunction', 'distinctive textured patterns'], ['rotation', 'Conjunction', 'illumination variation'], ['illumination variation', 'Conjunction', 'blur']]
metrics_sample: [0.16666666666666666, 0.125, 0.14285714285714288]
metrics_current: [0.4112903225806452, 0.4396551724137931, 0.42500000000000004]
text: Furthermore , we show how the recently developed efficient subwindow search ( ESS ) procedure [ 11 ] can be integrated into the last stage of our method .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('subwindow search ( ESS ) procedure')
# Generic('method')

extract = Extract([Triple(Method("subwindow search ( ESS ) procedure"), Rel("Used_for"), Generic("method"))])
pred: [['subwindow search ( ESS ) procedure', 'Used_for', 'method']]
trues: [['subwindow search ( ESS ) procedure', 'Part_of', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.408, 0.4358974358974359, 0.42148760330578516]
text: Towards deep analysis of compositional classes of paraphrases , we have examined a class-oriented framework for collecting paraphrase examples , in which sentential paraphrases are collected for each paraphrase class separately by means of automatic candidate generation and manual judgement .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('class-oriented framework')
# Task('deep analysis of compositional classes of paraphrases')
# Other_scientific_term('paraphrase class')
# Method('class-oriented framework')
# Method('automatic candidate generation')
# Other_scientific_term('paraphrase class')
# Method('automatic candidate generation')
# Method('manual judgement')
# Method('manual judgement')
# Other_scientific_term('paraphrase class')

extract = Extract([Triple(Method("class-oriented framework"), Rel("Used_for"), Task("deep analysis of compositional classes of paraphrases")), Triple(Other_scientific_term("paraphrase class"), Rel("Used_for"), Method("class-oriented framework")), Triple(Method("automatic candidate generation"), Rel("Used_for"), Other_scientific_term("paraphrase class")), Triple(Method("automatic candidate generation"), Rel("Conjunction"), Method("manual judgement")), Triple(Method("manual judgement"), Rel("Used_for"), Other_scientific_term("paraphrase class"))])
pred: [['class-oriented framework', 'Used_for', 'deep analysis of compositional classes of paraphrases'], ['paraphrase class', 'Used_for', 'class-oriented framework'], ['automatic candidate generation', 'Used_for', 'paraphrase class'], ['automatic candidate generation', 'Conjunction', 'manual judgement'], ['manual judgement', 'Used_for', 'paraphrase class']]
trues: [['class-oriented framework', 'Used_for', 'compositional classes of paraphrases'], ['class-oriented framework', 'Used_for', 'paraphrase examples'], ['automatic candidate generation', 'Used_for', 'sentential paraphrases'], ['automatic candidate generation', 'Conjunction', 'manual judgement'], ['manual judgement', 'Used_for', 'sentential paraphrases']]
metrics_sample: [0.2, 0.2, 0.20000000000000004]
metrics_current: [0.4, 0.4262295081967213, 0.4126984126984127]
text: The subjects were given three minutes per extract to determine whether they believed the sample output to be an expert human translation or a machine translation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('extract')
# Other_scientific_term('expert human translation')
# Generic('extract')
# Generic('machine translation')

extract = Extract([Triple(Generic("extract"), Rel("Used_for"), Other_scientific_term("expert human translation")), Triple(Generic("extract"), Rel("Evaluate_for"), Generic("machine translation"))])
pred: [['extract', 'Used_for', 'expert human translation'], ['extract', 'Evaluate_for', 'machine translation']]
trues: [['expert human translation', 'Compare', 'machine translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3939393939393939, 0.42276422764227645, 0.407843137254902]
text: We further propose a parameter training algorithm for the present model based on a decision tree-based context clustering .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('parameter training algorithm')
# Generic('model')
# Method('decision tree-based context clustering')
# Method('parameter training algorithm')

extract = Extract([Triple(Method("parameter training algorithm"), Rel("Used_for"), Generic("model")), Triple(Method("decision tree-based context clustering"), Rel("Used_for"), Method("parameter training algorithm"))])
pred: [['parameter training algorithm', 'Used_for', 'model'], ['decision tree-based context clustering', 'Used_for', 'parameter training algorithm']]
trues: [['parameter training algorithm', 'Used_for', 'model'], ['decision tree-based context clustering', 'Used_for', 'parameter training algorithm']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.40298507462686567, 0.432, 0.41698841698841693]
text: Joint matrix triangularization is often used for estimating the joint eigenstructure of a set M of matrices , with applications in signal processing and machine learning .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Joint matrix triangularization')
# Task('joint eigenstructure of a set M of matrices')
# Task('joint eigenstructure of a set M of matrices')
# Material('signal processing and machine learning')
# Material('signal processing')
# Material('machine learning')

extract = Extract([Triple(Method("Joint matrix triangularization"), Rel("Used_for"), Task("joint eigenstructure of a set M of matrices")), Triple(Task("joint eigenstructure of a set M of matrices"), Rel("Used_for"), Material("signal processing and machine learning")), Triple(Material("signal processing"), Rel("Conjunction"), Material("machine learning"))])
pred: [['Joint matrix triangularization', 'Used_for', 'joint eigenstructure of a set M of matrices'], ['joint eigenstructure of a set M of matrices', 'Used_for', 'signal processing and machine learning'], ['signal processing', 'Conjunction', 'machine learning']]
trues: [['Joint matrix triangularization', 'Used_for', 'joint eigenstructure'], ['joint eigenstructure', 'Used_for', 'signal processing'], ['joint eigenstructure', 'Used_for', 'machine learning'], ['signal processing', 'Conjunction', 'machine learning']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.40145985401459855, 0.4263565891472868, 0.41353383458646614]
text: This model mimics the way in which images are processed in the visual pathway , rendering a feasible alternative for the implementation of early vision applications in standard technologies .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Material('images')
# Generic('model')
# Task('early vision applications')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Material("images")), Triple(Generic("model"), Rel("Used_for"), Task("early vision applications"))])
pred: [['model', 'Used_for', 'images'], ['model', 'Used_for', 'early vision applications']]
trues: [['visual pathway', 'Used_for', 'images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.39568345323741005, 0.4230769230769231, 0.40892193308550184]
text: We provide a unified account of sentence-level and text-level anaphora within the framework of a dependency-based grammar model .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('sentence-level and text-level anaphora')
# Method('dependency-based grammar model')
# Method('dependency-based grammar model')
# Other_scientific_term('sentence-level and text-level anaphora')

extract = Extract([Triple(Other_scientific_term("sentence-level and text-level anaphora"), Rel("Feature_of"), Method("dependency-based grammar model")), Triple(Method("dependency-based grammar model"), Rel("Used_for"), Other_scientific_term("sentence-level and text-level anaphora"))])
pred: [['sentence-level and text-level anaphora', 'Feature_of', 'dependency-based grammar model'], ['dependency-based grammar model', 'Used_for', 'sentence-level and text-level anaphora']]
trues: [['dependency-based grammar model', 'Used_for', 'sentence-level and text-level anaphora']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3971631205673759, 0.42748091603053434, 0.411764705882353]
text: We also derive an efficient non-linear extension of WARCA by using the kernel trick .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('kernel trick')
# Method('non-linear extension of WARCA')

extract = Extract([Triple(Method("kernel trick"), Rel("Used_for"), Method("non-linear extension of WARCA"))])
pred: [['kernel trick', 'Used_for', 'non-linear extension of WARCA']]
trues: [['kernel trick', 'Used_for', 'non-linear extension of WARCA']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.4014084507042254, 0.4318181818181818, 0.416058394160584]
text: An extension of our method to space-time interest point detection for action classification is also presented .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('space-time interest point detection')
# Task('space-time interest point detection')
# Task('action classification')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("space-time interest point detection")), Triple(Task("space-time interest point detection"), Rel("Used_for"), Task("action classification"))])
pred: [['method', 'Used_for', 'space-time interest point detection'], ['space-time interest point detection', 'Used_for', 'action classification']]
trues: [['method', 'Used_for', 'space-time interest point detection'], ['space-time interest point detection', 'Used_for', 'action classification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.4097222222222222, 0.44029850746268656, 0.4244604316546763]
text: This posterior encodes sparse se-lectional preferences between a head word and its dependents .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('dependents')
# Other_scientific_term('sparse se-lectional preferences')

extract = Extract([Triple(Other_scientific_term("dependents"), Rel("Feature_of"), Other_scientific_term("sparse se-lectional preferences"))])
pred: [['dependents', 'Feature_of', 'sparse se-lectional preferences']]
trues: [['posterior', 'Used_for', 'sparse se-lectional preferences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4068965517241379, 0.43703703703703706, 0.42142857142857143]
text: In this model , on-line handwriting is considered as a modulation of a simple cycloidal pen motion , described by two coupled oscillations with a constant linear drift along the line of the writing .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('model')
# Task('on-line handwriting')
# Other_scientific_term('modulation')
# Task('on-line handwriting')
# Other_scientific_term('modulation')
# Other_scientific_term('cycloidal pen motion')
# Other_scientific_term('cycloidal pen motion')
# Task('on-line handwriting')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("on-line handwriting")), Triple(Other_scientific_term("modulation"), Rel("Feature_of"), Task("on-line handwriting")), Triple(Other_scientific_term("modulation"), Rel("Conjunction"), Other_scientific_term("cycloidal pen motion")), Triple(Other_scientific_term("cycloidal pen motion"), Rel("Feature_of"), Task("on-line handwriting"))])
pred: [['model', 'Used_for', 'on-line handwriting'], ['modulation', 'Feature_of', 'on-line handwriting'], ['modulation', 'Conjunction', 'cycloidal pen motion'], ['cycloidal pen motion', 'Feature_of', 'on-line handwriting']]
trues: [['model', 'Used_for', 'on-line handwriting'], ['on-line handwriting', 'Part_of', 'cycloidal pen motion']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.40268456375838924, 0.43795620437956206, 0.4195804195804196]
text: Our technique is based on an improved , dynamic-programming , stereo algorithm for efficient novel-view generation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('dynamic-programming, stereo algorithm')
# Generic('technique')
# Generic('technique')
# Task('novel-view generation')

extract = Extract([Triple(Method("dynamic-programming, stereo algorithm"), Rel("Used_for"), Generic("technique")), Triple(Generic("technique"), Rel("Used_for"), Task("novel-view generation"))])
pred: [['dynamic-programming, stereo algorithm', 'Used_for', 'technique'], ['technique', 'Used_for', 'novel-view generation']]
trues: [['technique', 'Used_for', 'novel-view generation'], ['dynamic-programming , stereo algorithm', 'Used_for', 'technique']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.40397350993377484, 0.43884892086330934, 0.4206896551724138]
text: The result is a discrete motor control representation of the continuous pen motion , via the quantized levels of the model parameters .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('quantized levels of the model parameters')
# Method('discrete motor control representation')

extract = Extract([Triple(Method("quantized levels of the model parameters"), Rel("Used_for"), Method("discrete motor control representation"))])
pred: [['quantized levels of the model parameters', 'Used_for', 'discrete motor control representation']]
trues: [['discrete motor control representation', 'Used_for', 'continuous pen motion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.40131578947368424, 0.4357142857142857, 0.4178082191780822]
text: In order to build robust automatic abstracting systems , there is a need for better training resources than are currently available .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('training resources')
# Method('automatic abstracting systems')

extract = Extract([Triple(Material("training resources"), Rel("Used_for"), Method("automatic abstracting systems"))])
pred: [['training resources', 'Used_for', 'automatic abstracting systems']]
trues: [['training resources', 'Used_for', 'automatic abstracting systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.40522875816993464, 0.4397163120567376, 0.4217687074829932]
text: Based on this , MINPRAN uses random sampling to search for the t and the number of inliers to the t that are least likely to have occurred randomly .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('random sampling')
# Method('MINPRAN')
# Other_scientific_term('inliers')
# Method('MINPRAN')

extract = Extract([Triple(Method("random sampling"), Rel("Used_for"), Method("MINPRAN")), Triple(Other_scientific_term("inliers"), Rel("Used_for"), Method("MINPRAN"))])
pred: [['random sampling', 'Used_for', 'MINPRAN'], ['inliers', 'Used_for', 'MINPRAN']]
trues: [['random sampling', 'Used_for', 'MINPRAN']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.4064516129032258, 0.44366197183098594, 0.42424242424242425]
text: Experimental results on our dataset and the public G3D dataset both demonstrate very promising performance of our scheme .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('dataset')
# Generic('scheme')
# Material('G3D dataset')
# Generic('scheme')

extract = Extract([Triple(Material("dataset"), Rel("Evaluate_for"), Generic("scheme")), Triple(Material("G3D dataset"), Rel("Evaluate_for"), Generic("scheme"))])
pred: [['dataset', 'Evaluate_for', 'scheme'], ['G3D dataset', 'Evaluate_for', 'scheme']]
trues: [['dataset', 'Conjunction', 'G3D dataset']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4012738853503185, 0.4405594405594406, 0.42000000000000004]
text: Based on these results , we present an ECA that uses verbal and nonverbal grounding acts to update dialogue state .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('ECA')
# Task('updating dialogue state')
# Other_scientific_term('verbal and nonverbal grounding acts')
# Method('ECA')

extract = Extract([Triple(Method("ECA"), Rel("Used_for"), Task("updating dialogue state")), Triple(Other_scientific_term("verbal and nonverbal grounding acts"), Rel("Used_for"), Method("ECA"))])
pred: [['ECA', 'Used_for', 'updating dialogue state'], ['verbal and nonverbal grounding acts', 'Used_for', 'ECA']]
trues: [['verbal and nonverbal grounding acts', 'Used_for', 'ECA'], ['verbal and nonverbal grounding acts', 'Used_for', 'dialogue state']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.4025157232704403, 0.4413793103448276, 0.42105263157894735]
text: We propose a multi-task end-to-end Joint Classification-Regression Recurrent Neural Network to better explore the action type and temporal localiza-tion information .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('multi-task end-to-end Joint Classification-Regression Recurrent Neural Network')
# Other_scientific_term('action type and temporal localiza-tion information')
# Other_scientific_term('action type')
# Other_scientific_term('action type and temporal localiza-tion information')
# Other_scientific_term('temporal localiza-tion information')
# Other_scientific_term('action type and temporal localiza-tion information')
# Other_scientific_term('action type')
# Other_scientific_term('temporal localiza-tion information')

extract = Extract([Triple(Method("multi-task end-to-end Joint Classification-Regression Recurrent Neural Network"), Rel("Used_for"), Other_scientific_term("action type and temporal localiza-tion information")), Triple(Other_scientific_term("action type"), Rel("Used_for"), Other_scientific_term("action type and temporal localiza-tion information")), Triple(Other_scientific_term("temporal localiza-tion information"), Rel("Used_for"), Other_scientific_term("action type and temporal localiza-tion information")), Triple(Other_scientific_term("action type"), Rel("Conjunction"), Other_scientific_term("temporal localiza-tion information"))])
pred: [['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type and temporal localiza-tion information'], ['action type', 'Used_for', 'action type and temporal localiza-tion information'], ['temporal localiza-tion information', 'Used_for', 'action type and temporal localiza-tion information'], ['action type', 'Conjunction', 'temporal localiza-tion information']]
trues: [['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type'], ['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'temporal localiza-tion information'], ['action type', 'Conjunction', 'temporal localiza-tion information']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.3987730061349693, 0.4391891891891892, 0.4180064308681672]
text: The strong description and modeling properties of differential features make them useful tools that can be efficiently used as constraints for 3 -- D reconstruction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('differential features')
# Task('3 -- D reconstruction')
# Other_scientific_term('constraints')
# Task('3 -- D reconstruction')

extract = Extract([Triple(Other_scientific_term("differential features"), Rel("Used_for"), Task("3 -- D reconstruction")), Triple(Other_scientific_term("constraints"), Rel("Used_for"), Task("3 -- D reconstruction"))])
pred: [['differential features', 'Used_for', '3 -- D reconstruction'], ['constraints', 'Used_for', '3 -- D reconstruction']]
trues: [['them', 'Used_for', '3 -- D reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3939393939393939, 0.436241610738255, 0.41401273885350315]
text: The distinction among these components is essential to provide an adequate explanation of such discourse phenomena as cue phrases , referring expressions , and interruptions .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Other_scientific_term('cue phrases')
# Other_scientific_term('discourse phenomena')
# Other_scientific_term('cue phrases')
# Other_scientific_term('referring expressions')
# Other_scientific_term('referring expressions')
# Other_scientific_term('discourse phenomena')
# Other_scientific_term('referring expressions')
# Other_scientific_term('interruptions')
# Other_scientific_term('interruptions')
# Other_scientific_term('discourse phenomena')

extract = Extract([Triple(Other_scientific_term("cue phrases"), Rel("Hyponym_of"), Other_scientific_term("discourse phenomena")), Triple(Other_scientific_term("cue phrases"), Rel("Conjunction"), Other_scientific_term("referring expressions")), Triple(Other_scientific_term("referring expressions"), Rel("Hyponym_of"), Other_scientific_term("discourse phenomena")), Triple(Other_scientific_term("referring expressions"), Rel("Conjunction"), Other_scientific_term("interruptions")), Triple(Other_scientific_term("interruptions"), Rel("Hyponym_of"), Other_scientific_term("discourse phenomena"))])
pred: [['cue phrases', 'Hyponym_of', 'discourse phenomena'], ['cue phrases', 'Conjunction', 'referring expressions'], ['referring expressions', 'Hyponym_of', 'discourse phenomena'], ['referring expressions', 'Conjunction', 'interruptions'], ['interruptions', 'Hyponym_of', 'discourse phenomena']]
trues: [['cue phrases', 'Hyponym_of', 'discourse phenomena'], ['cue phrases', 'Conjunction', 'referring expressions'], ['referring expressions', 'Hyponym_of', 'discourse phenomena'], ['referring expressions', 'Conjunction', 'interruptions'], ['interruptions', 'Hyponym_of', 'discourse phenomena']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.4117647058823529, 0.45454545454545453, 0.4320987654320988]
text: We describe a fully automatic recognition system based on the proposed method and an extensive evaluation on 171 individuals and over 1300 video sequences with extreme illumination , pose and head motion variation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('fully automatic recognition system')
# Generic('method')
# Generic('evaluation')
# Method('fully automatic recognition system')
# Other_scientific_term('extreme illumination')
# Generic('evaluation')
# Other_scientific_term('extreme illumination')
# Other_scientific_term('pose')
# Other_scientific_term('pose')
# Other_scientific_term('head motion variation')
# Other_scientific_term('head motion variation')
# Generic('evaluation')

extract = Extract([Triple(Method("fully automatic recognition system"), Rel("Used_for"), Generic("method")), Triple(Generic("evaluation"), Rel("Evaluate_for"), Method("fully automatic recognition system")), Triple(Other_scientific_term("extreme illumination"), Rel("Feature_of"), Generic("evaluation")), Triple(Other_scientific_term("extreme illumination"), Rel("Conjunction"), Other_scientific_term("pose")), Triple(Other_scientific_term("pose"), Rel("Conjunction"), Other_scientific_term("head motion variation")), Triple(Other_scientific_term("head motion variation"), Rel("Conjunction"), Generic("evaluation"))])
pred: [['fully automatic recognition system', 'Used_for', 'method'], ['evaluation', 'Evaluate_for', 'fully automatic recognition system'], ['extreme illumination', 'Feature_of', 'evaluation'], ['extreme illumination', 'Conjunction', 'pose'], ['pose', 'Conjunction', 'head motion variation'], ['head motion variation', 'Conjunction', 'evaluation']]
trues: [['method', 'Used_for', 'fully automatic recognition system'], ['video sequences', 'Evaluate_for', 'fully automatic recognition system'], ['illumination', 'Feature_of', 'video sequences'], ['illumination', 'Conjunction', 'pose'], ['pose', 'Feature_of', 'video sequences'], ['pose', 'Conjunction', 'head motion variation'], ['head motion variation', 'Feature_of', 'video sequences']]
metrics_sample: [0.16666666666666666, 0.14285714285714285, 0.15384615384615383]
metrics_current: [0.4034090909090909, 0.4409937888198758, 0.42136498516320475]
text: With the aid of a logic-based grammar formalism called extraposition grammars , Chat-80 translates English questions into the Prolog subset of logic .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('logic-based grammar formalism')
# Generic('Chat-80')
# Method('extraposition grammars')
# Method('logic-based grammar formalism')
# Generic('Chat-80')
# Material('Prolog subset of logic')

extract = Extract([Triple(Method("logic-based grammar formalism"), Rel("Used_for"), Generic("Chat-80")), Triple(Method("extraposition grammars"), Rel("Hyponym_of"), Method("logic-based grammar formalism")), Triple(Generic("Chat-80"), Rel("Used_for"), Material("Prolog subset of logic"))])
pred: [['logic-based grammar formalism', 'Used_for', 'Chat-80'], ['extraposition grammars', 'Hyponym_of', 'logic-based grammar formalism'], ['Chat-80', 'Used_for', 'Prolog subset of logic']]
trues: [['extraposition grammars', 'Hyponym_of', 'logic-based grammar formalism'], ['extraposition grammars', 'Used_for', 'Chat-80']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.4022346368715084, 0.44171779141104295, 0.4210526315789474]
text: Multi-view constraints associated with groups of patches are combined with a normalized representation of their appearance to guide matching and reconstruction , allowing the acquisition of true three-dimensional affine and Euclidean models from multiple images and their recognition in a single photograph taken from an arbitrary viewpoint .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('normalized representation of their appearance')
# Method('matching')
# Method('matching')
# Other_scientific_term('reconstruction')
# Other_scientific_term('normalized representation of their appearance')
# Other_scientific_term('reconstruction')
# Other_scientific_term('reconstruction')
# Method('three-dimensional affine and Euclidean models')
# Method('three-dimensional affine and Euclidean models')
# Other_scientific_term('single photograph')

extract = Extract([Triple(Other_scientific_term("normalized representation of their appearance"), Rel("Used_for"), Method("matching")), Triple(Method("matching"), Rel("Conjunction"), Other_scientific_term("reconstruction")), Triple(Other_scientific_term("normalized representation of their appearance"), Rel("Used_for"), Other_scientific_term("reconstruction")), Triple(Other_scientific_term("reconstruction"), Rel("Used_for"), Method("three-dimensional affine and Euclidean models")), Triple(Method("three-dimensional affine and Euclidean models"), Rel("Used_for"), Other_scientific_term("single photograph"))])
pred: [['normalized representation of their appearance', 'Used_for', 'matching'], ['matching', 'Conjunction', 'reconstruction'], ['normalized representation of their appearance', 'Used_for', 'reconstruction'], ['reconstruction', 'Used_for', 'three-dimensional affine and Euclidean models'], ['three-dimensional affine and Euclidean models', 'Used_for', 'single photograph']]
trues: [['Multi-view constraints', 'Conjunction', 'normalized representation'], ['Multi-view constraints', 'Used_for', 'matching'], ['Multi-view constraints', 'Used_for', 'reconstruction'], ['normalized representation', 'Used_for', 'matching'], ['normalized representation', 'Used_for', 'reconstruction'], ['matching', 'Conjunction', 'reconstruction'], ['images', 'Used_for', 'acquisition of true three-dimensional affine and Euclidean models']]
metrics_sample: [0.2, 0.14285714285714285, 0.16666666666666666]
metrics_current: [0.3967391304347826, 0.4294117647058823, 0.4124293785310734]
text: We rigorously establish the correctness of the methodology and show by experimentation using LSH that it is competitive in practice with available alternatives .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('LSH')
# Generic('alternatives')

extract = Extract([Triple(Method("LSH"), Rel("Evaluate_for"), Generic("alternatives"))])
pred: [['LSH', 'Evaluate_for', 'alternatives']]
trues: [['it', 'Compare', 'alternatives']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3945945945945946, 0.4269005847953216, 0.4101123595505618]
text: Criteria for anaphora resolution within sentence boundaries rephrase major concepts from GB 's binding theory , while those for text-level anaphora incorporate an adapted version of a Grosz-Sidner-style focus model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('Criteria')
# Task('anaphora resolution')
# Method('GB's binding theory')
# Generic('Criteria')
# Method('Grosz-Sidner-style focus model')
# Generic('Criteria')
# Method('Grosz-Sidner-style focus model')
# Task('text-level anaphora')

extract = Extract([Triple(Generic("Criteria"), Rel("Used_for"), Task("anaphora resolution")), Triple(Method("GB's binding theory"), Rel("Used_for"), Generic("Criteria")), Triple(Method("Grosz-Sidner-style focus model"), Rel("Used_for"), Generic("Criteria")), Triple(Method("Grosz-Sidner-style focus model"), Rel("Used_for"), Task("text-level anaphora"))])
pred: [['Criteria', 'Used_for', 'anaphora resolution'], ["GB's binding theory", 'Used_for', 'Criteria'], ['Grosz-Sidner-style focus model', 'Used_for', 'Criteria'], ['Grosz-Sidner-style focus model', 'Used_for', 'text-level anaphora']]
trues: [['Criteria', 'Used_for', 'anaphora resolution within sentence boundaries'], ["GB 's binding theory", 'Used_for', 'Criteria'], ['those', 'Used_for', 'text-level anaphora'], ['Grosz-Sidner-style focus model', 'Part_of', 'those']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3862433862433862, 0.41714285714285715, 0.4010989010989011]
text: In this paper , we describe a search procedure for statistical machine translation ( MT ) based on dynamic programming ( DP ) .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('search procedure')
# Task('statistical machine translation ( MT )')
# Method('dynamic programming ( DP )')
# Method('search procedure')

extract = Extract([Triple(Method("search procedure"), Rel("Used_for"), Task("statistical machine translation ( MT )")), Triple(Method("dynamic programming ( DP )"), Rel("Used_for"), Method("search procedure"))])
pred: [['search procedure', 'Used_for', 'statistical machine translation ( MT )'], ['dynamic programming ( DP )', 'Used_for', 'search procedure']]
trues: [['search procedure', 'Used_for', 'statistical machine translation ( MT )'], ['dynamic programming ( DP )', 'Used_for', 'statistical machine translation ( MT )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.387434554973822, 0.4180790960451977, 0.40217391304347827]
text: Extended CF grammars ( grammars with regular expressions at the right hand side ) can be parsed with a simple modification of the LR-parser for normal CF grammars .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('regular expressions')
# Other_scientific_term('right hand side')
# Method('LR-parser')
# Method('grammars')
# Method('LR-parser')
# Method('grammars')
# Method('LR-parser')
# Other_scientific_term('Extended CF grammars ( grammars with regular expressions at the right hand side )')

extract = Extract([Triple(Method("regular expressions"), Rel("Used_for"), Other_scientific_term("right hand side")), Triple(Method("LR-parser"), Rel("Hyponym_of"), Method("grammars")), Triple(Method("LR-parser"), Rel("Used_for"), Method("grammars")), Triple(Method("LR-parser"), Rel("Used_for"), Other_scientific_term("Extended CF grammars ( grammars with regular expressions at the right hand side )"))])
pred: [['regular expressions', 'Used_for', 'right hand side'], ['LR-parser', 'Hyponym_of', 'grammars'], ['LR-parser', 'Used_for', 'grammars'], ['LR-parser', 'Used_for', 'Extended CF grammars ( grammars with regular expressions at the right hand side )']]
trues: [['regular expressions', 'Feature_of', 'grammars'], ['LR-parser', 'Used_for', 'Extended CF grammars'], ['LR-parser', 'Used_for', 'CF grammars']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.37948717948717947, 0.4111111111111111, 0.3946666666666666]
text: We use novel priors , generate sparse and dense detection maps and our results show high detection rate with rejection to pathological motion and occlusion .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('priors')
# Other_scientific_term('detection maps')
# Other_scientific_term('priors')
# Task('detection rate')
# Other_scientific_term('detection maps')
# Task('detection rate')
# Task('rejection')
# Task('detection rate')
# Task('rejection')
# Task('occlusion')

extract = Extract([Triple(Other_scientific_term("priors"), Rel("Used_for"), Other_scientific_term("detection maps")), Triple(Other_scientific_term("priors"), Rel("Used_for"), Task("detection rate")), Triple(Other_scientific_term("detection maps"), Rel("Used_for"), Task("detection rate")), Triple(Task("rejection"), Rel("Conjunction"), Task("detection rate")), Triple(Task("rejection"), Rel("Conjunction"), Task("occlusion"))])
pred: [['priors', 'Used_for', 'detection maps'], ['priors', 'Used_for', 'detection rate'], ['detection maps', 'Used_for', 'detection rate'], ['rejection', 'Conjunction', 'detection rate'], ['rejection', 'Conjunction', 'occlusion']]
trues: [['priors', 'Used_for', 'sparse and dense detection maps'], ['pathological motion', 'Conjunction', 'occlusion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.37, 0.4065934065934066, 0.387434554973822]
text: A statistical translation model is also presented that deals such phrases , as well as a training method based on the maximization of translation accuracy , as measured with the NIST evaluation metric .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('statistical translation model')
# Other_scientific_term('phrases')
# Method('training method')
# Other_scientific_term('translation accuracy')
# Metric('NIST evaluation metric')
# Other_scientific_term('translation accuracy')

extract = Extract([Triple(Method("statistical translation model"), Rel("Used_for"), Other_scientific_term("phrases")), Triple(Method("training method"), Rel("Used_for"), Other_scientific_term("translation accuracy")), Triple(Metric("NIST evaluation metric"), Rel("Evaluate_for"), Other_scientific_term("translation accuracy"))])
pred: [['statistical translation model', 'Used_for', 'phrases'], ['training method', 'Used_for', 'translation accuracy'], ['NIST evaluation metric', 'Evaluate_for', 'translation accuracy']]
trues: [['statistical translation model', 'Used_for', 'phrases'], ['maximization of translation accuracy', 'Used_for', 'training method'], ['NIST evaluation metric', 'Evaluate_for', 'statistical translation model']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3694581280788177, 0.40540540540540543, 0.3865979381443299]
text: To recover from these inevitable tracking failures , we consider object detection as a global optimization problem and solve it via Adaptive Simulated Annealing ( ASA ) , a method that avoids becoming trapped at local modes and is much faster than exhaustive search .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Method('global optimization problem')
# Method('object detection')
# Method('Adaptive Simulated Annealing ( ASA )')
# Method('global optimization problem')
# Method('Adaptive Simulated Annealing ( ASA )')
# Method('exhaustive search')

extract = Extract([Triple(Method("global optimization problem"), Rel("Used_for"), Method("object detection")), Triple(Method("Adaptive Simulated Annealing ( ASA )"), Rel("Used_for"), Method("global optimization problem")), Triple(Method("Adaptive Simulated Annealing ( ASA )"), Rel("Compare"), Method("exhaustive search"))])
pred: [['global optimization problem', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Used_for', 'global optimization problem'], ['Adaptive Simulated Annealing ( ASA )', 'Compare', 'exhaustive search']]
trues: [['global optimization problem', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Used_for', 'it'], ['method', 'Compare', 'exhaustive search']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.36893203883495146, 0.40425531914893614, 0.3857868020304569]
text: We explain this distinction and we show how this model may be applied to the interpretation of compounds in real texts , provided that complementary semantic information are retrieved .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('interpretation of compounds')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("interpretation of compounds"))])
pred: [['model', 'Used_for', 'interpretation of compounds']]
trues: [['model', 'Used_for', 'interpretation of compounds']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3719806763285024, 0.4074074074074074, 0.3888888888888889]
text: It uses a powerful pattern-matching language to classify grs into frames hierarchically in a way that mirrors inheritance-based lexica .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('pattern-matching language')
# Method('It')
# Method('It')
# Other_scientific_term('grs')
# Other_scientific_term('inheritance-based lexica')
# Method('It')

extract = Extract([Triple(Method("pattern-matching language"), Rel("Used_for"), Method("It")), Triple(Method("It"), Rel("Feature_of"), Other_scientific_term("grs")), Triple(Other_scientific_term("inheritance-based lexica"), Rel("Used_for"), Method("It"))])
pred: [['pattern-matching language', 'Used_for', 'It'], ['It', 'Feature_of', 'grs'], ['inheritance-based lexica', 'Used_for', 'It']]
trues: [['pattern-matching language', 'Used_for', 'It'], ['pattern-matching language', 'Used_for', 'grs']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.37142857142857144, 0.4083769633507853, 0.38902743142144636]
text: This model is meant to account for productive rules of interpretation which are inferred from the morpho-syntactic and semantic characteristics of the nominal constituents .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('model')
# Task('productive rules of interpretation')
# Method('morpho-syntactic and semantic characteristics')
# Task('productive rules of interpretation')
# Method('morpho-syntactic and semantic characteristics')
# Method('nominal constituents')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("productive rules of interpretation")), Triple(Method("morpho-syntactic and semantic characteristics"), Rel("Used_for"), Task("productive rules of interpretation")), Triple(Method("morpho-syntactic and semantic characteristics"), Rel("Conjunction"), Method("nominal constituents"))])
pred: [['model', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Conjunction', 'nominal constituents']]
trues: [['model', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Feature_of', 'nominal constituents']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.3755868544600939, 0.41237113402061853, 0.39312039312039315]
text: We show that the trainable sentence planner performs better than the rule-based systems and the baselines , and as well as the hand-crafted system .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Compare')
# Rel('Compare')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('trainable sentence planner')
# Method('rule-based systems')
# Method('trainable sentence planner')
# Method('baselines')
# Method('trainable sentence planner')
# Method('hand-crafted system')
# Method('rule-based systems')
# Method('baselines')
# Method('baselines')
# Method('hand-crafted system')

extract = Extract([Triple(Method("trainable sentence planner"), Rel("Compare"), Method("rule-based systems")), Triple(Method("trainable sentence planner"), Rel("Compare"), Method("baselines")), Triple(Method("trainable sentence planner"), Rel("Compare"), Method("hand-crafted system")), Triple(Method("rule-based systems"), Rel("Conjunction"), Method("baselines")), Triple(Method("baselines"), Rel("Conjunction"), Method("hand-crafted system"))])
pred: [['trainable sentence planner', 'Compare', 'rule-based systems'], ['trainable sentence planner', 'Compare', 'baselines'], ['trainable sentence planner', 'Compare', 'hand-crafted system'], ['rule-based systems', 'Conjunction', 'baselines'], ['baselines', 'Conjunction', 'hand-crafted system']]
trues: [['trainable sentence planner', 'Compare', 'rule-based systems'], ['trainable sentence planner', 'Compare', 'baselines'], ['trainable sentence planner', 'Compare', 'hand-crafted system'], ['rule-based systems', 'Conjunction', 'baselines'], ['baselines', 'Conjunction', 'hand-crafted system']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.38990825688073394, 0.4271356783919598, 0.407673860911271]
text: In this paper we specialize the projective unifocal , bifo-cal , and trifocal tensors to the affine case , and show how the tensors obtained relate to the registered tensors encountered in previous work .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('tensors')
# Other_scientific_term('projective unifocal, bifo-cal, and trifocal tensors')
# Other_scientific_term('affine case')
# Generic('tensors')
# Other_scientific_term('registered tensors')
# Generic('tensors')

extract = Extract([Triple(Generic("tensors"), Rel("Used_for"), Other_scientific_term("projective unifocal, bifo-cal, and trifocal tensors")), Triple(Other_scientific_term("affine case"), Rel("Used_for"), Generic("tensors")), Triple(Other_scientific_term("registered tensors"), Rel("Used_for"), Generic("tensors")), Triple(Other_scientific_term("registered tensors"), Rel("Conjunction"), Generic("tensors"))])
pred: [['tensors', 'Used_for', 'projective unifocal, bifo-cal, and trifocal tensors'], ['affine case', 'Used_for', 'tensors'], ['registered tensors', 'Used_for', 'tensors'], ['registered tensors', 'Conjunction', 'tensors']]
trues: [['projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38288288288288286, 0.425, 0.4028436018957346]
text: This work presents an automated technique for detecting reflections in image sequences by analyzing motion trajectories of feature points .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('automated technique')
# Task('detecting reflections')
# Method('motion trajectories of feature points')
# Method('automated technique')

extract = Extract([Triple(Method("automated technique"), Rel("Used_for"), Task("detecting reflections")), Triple(Method("motion trajectories of feature points"), Rel("Used_for"), Method("automated technique"))])
pred: [['automated technique', 'Used_for', 'detecting reflections'], ['motion trajectories of feature points', 'Used_for', 'automated technique']]
trues: [['technique', 'Used_for', 'detecting reflections in image sequences'], ['motion trajectories', 'Used_for', 'technique'], ['feature points', 'Feature_of', 'motion trajectories']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3794642857142857, 0.4187192118226601, 0.3981264637002342]
text: We present a new part-of-speech tagger that demonstrates the following ideas : ( i ) explicit use of both preceding and following tag contexts via a dependency network representation , ( ii ) broad use of lexical features , including jointly conditioning on multiple consecutive words , ( iii ) effective use of priors in conditional loglinear models , and ( iv ) fine-grained modeling of unknown word features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Part_of')
# Rel('Part_of')
# The candidate entities for this text are:
# Generic('part-of-speech tagger')
# Generic('ideas')
# Other_scientific_term('preceding and following tag contexts')
# Generic('part-of-speech tagger')
# Other_scientific_term('preceding and following tag contexts')
# Other_scientific_term('dependency network representation')
# Other_scientific_term('preceding and following tag contexts')
# Other_scientific_term('lexical features')
# Other_scientific_term('lexical features')
# Generic('part-of-speech tagger')
# Other_scientific_term('lexical features')
# Other_scientific_term('jointly conditioning on multiple consecutive words')
# Other_scientific_term('jointly conditioning on multiple consecutive words')
# Generic('part-of-speech tagger')
# Other_scientific_term('priors')
# Generic('part-of-speech tagger')
# Method('conditional loglinear models')
# Other_scientific_term('priors')
# Generic('part-of-speech tagger')
# Other_scientific_term('unknown word features')
# Generic('part-of-speech tagger')
# Other_scientific_term('unknown word features')
# Other_scientific_term('fine-grained modeling')

extract = Extract([Triple(Generic("part-of-speech tagger"), Rel("Used_for"), Generic("ideas")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Used_for"), Generic("part-of-speech tagger")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Part_of"), Other_scientific_term("dependency network representation")), Triple(Other_scientific_term("preceding and following tag contexts"), Rel("Conjunction"), Other_scientific_term("lexical features")), Triple(Other_scientific_term("lexical features"), Rel("Part_of"), Generic("part-of-speech tagger")), Triple(Other_scientific_term("lexical features"), Rel("Used_for"), Other_scientific_term("jointly conditioning on multiple consecutive words")), Triple(Other_scientific_term("jointly conditioning on multiple consecutive words"), Rel("Used_for"), Generic("part-of-speech tagger")), Triple(Other_scientific_term("priors"), Rel("Used_for"), Generic("part-of-speech tagger")), Triple(Method("conditional loglinear models"), Rel("Used_for"), Generic("part-of-speech tagger")), Triple(Other_scientific_term("priors"), Rel("Part_of"), Generic("part-of-speech tagger")), Triple(Other_scientific_term("unknown word features"), Rel("Used_for"), Generic("part-of-speech tagger")), Triple(Other_scientific_term("unknown word features"), Rel("Part_of"), Other_scientific_term("fine-grained modeling"))])
pred: [['part-of-speech tagger', 'Used_for', 'ideas'], ['preceding and following tag contexts', 'Used_for', 'part-of-speech tagger'], ['preceding and following tag contexts', 'Part_of', 'dependency network representation'], ['preceding and following tag contexts', 'Conjunction', 'lexical features'], ['lexical features', 'Part_of', 'part-of-speech tagger'], ['lexical features', 'Used_for', 'jointly conditioning on multiple consecutive words'], ['jointly conditioning on multiple consecutive words', 'Used_for', 'part-of-speech tagger'], ['priors', 'Used_for', 'part-of-speech tagger'], ['conditional loglinear models', 'Used_for', 'part-of-speech tagger'], ['priors', 'Part_of', 'part-of-speech tagger'], ['unknown word features', 'Used_for', 'part-of-speech tagger'], ['unknown word features', 'Part_of', 'fine-grained modeling']]
trues: [['tag contexts', 'Used_for', 'part-of-speech tagger'], ['dependency network representation', 'Used_for', 'tag contexts'], ['lexical features', 'Used_for', 'part-of-speech tagger'], ['priors in conditional loglinear models', 'Used_for', 'part-of-speech tagger'], ['fine-grained modeling of unknown word features', 'Used_for', 'part-of-speech tagger']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3601694915254237, 0.40865384615384615, 0.38288288288288286]
text: We propose to incorporate a priori geometric constraints in a 3 -- D stereo reconstruction scheme to cope with the many cases where image information alone is not sufficient to accurately recover 3 -- D shape .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('a priori geometric constraints')
# Method('3 -- D stereo reconstruction scheme')
# Other_scientific_term('image information')
# Other_scientific_term('3 -- D shape')

extract = Extract([Triple(Other_scientific_term("a priori geometric constraints"), Rel("Used_for"), Method("3 -- D stereo reconstruction scheme")), Triple(Other_scientific_term("image information"), Rel("Used_for"), Other_scientific_term("3 -- D shape"))])
pred: [['a priori geometric constraints', 'Used_for', '3 -- D stereo reconstruction scheme'], ['image information', 'Used_for', '3 -- D shape']]
trues: [['priori geometric constraints', 'Part_of', '3 -- D stereo reconstruction scheme'], ['image information', 'Used_for', '3 -- D shape']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.36134453781512604, 0.4095238095238095, 0.38392857142857145]
text: The NCA is created statistically from a large corpus and recomposed under concept hierarchy constraints and frequency of occurrences .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('NCA')
# Generic('corpus')
# Generic('NCA')
# Other_scientific_term('concept hierarchy constraints')
# Other_scientific_term('frequency of occurrences')
# Other_scientific_term('concept hierarchy constraints')

extract = Extract([Triple(Generic("NCA"), Rel("Used_for"), Generic("corpus")), Triple(Generic("NCA"), Rel("Used_for"), Other_scientific_term("concept hierarchy constraints")), Triple(Other_scientific_term("frequency of occurrences"), Rel("Conjunction"), Other_scientific_term("concept hierarchy constraints"))])
pred: [['NCA', 'Used_for', 'corpus'], ['NCA', 'Used_for', 'concept hierarchy constraints'], ['frequency of occurrences', 'Conjunction', 'concept hierarchy constraints']]
trues: [['concept hierarchy constraints', 'Used_for', 'NCA'], ['frequency of occurrences', 'Used_for', 'NCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35684647302904565, 0.4056603773584906, 0.379690949227373]
text: It is presented as a generalization of the recursive descent parser .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('It')
# Method('recursive descent parser')

extract = Extract([Triple(Method("It"), Rel("Hyponym_of"), Method("recursive descent parser"))])
pred: [['It', 'Hyponym_of', 'recursive descent parser']]
trues: [['recursive descent parser', 'Used_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35537190082644626, 0.40375586854460094, 0.378021978021978]
text: Establishing a `` best '' correspondence between the '' UNL-tree + L0 '' and the '' MS-L0 structure '' , a lattice , may be done using the dictionary and trying to align the tree and the selected trajectory with as few crossing liaisons as possible .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('dictionary')
# Other_scientific_term('lattice')
# Other_scientific_term('dictionary')
# Other_scientific_term('UNL-tree + L0')
# Other_scientific_term('UNL-tree + L0')
# Other_scientific_term('MS-L0 structure')

extract = Extract([Triple(Other_scientific_term("dictionary"), Rel("Used_for"), Other_scientific_term("lattice")), Triple(Other_scientific_term("dictionary"), Rel("Used_for"), Other_scientific_term("UNL-tree + L0")), Triple(Other_scientific_term("UNL-tree + L0"), Rel("Used_for"), Other_scientific_term("MS-L0 structure"))])
pred: [['dictionary', 'Used_for', 'lattice'], ['dictionary', 'Used_for', 'UNL-tree + L0'], ['UNL-tree + L0', 'Used_for', 'MS-L0 structure']]
trues: [['UNL-tree + L0', 'Conjunction', 'MS-L0 structure'], ['dictionary', 'Used_for', 'lattice']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3551020408163265, 0.4046511627906977, 0.3782608695652174]
text: This paper outlines Plume as it currently exists and describes our detailed design for extending Plume to handle passives , relative clauses , and interrogatives in a general manner .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Plume')
# Other_scientific_term('passives')
# Method('Plume')
# Other_scientific_term('relative clauses')
# Other_scientific_term('passives')
# Other_scientific_term('relative clauses')
# Method('Plume')
# Other_scientific_term('interrogatives')
# Other_scientific_term('relative clauses')
# Other_scientific_term('interrogatives')

extract = Extract([Triple(Method("Plume"), Rel("Used_for"), Other_scientific_term("passives")), Triple(Method("Plume"), Rel("Used_for"), Other_scientific_term("relative clauses")), Triple(Other_scientific_term("passives"), Rel("Conjunction"), Other_scientific_term("relative clauses")), Triple(Method("Plume"), Rel("Used_for"), Other_scientific_term("interrogatives")), Triple(Other_scientific_term("relative clauses"), Rel("Conjunction"), Other_scientific_term("interrogatives"))])
pred: [['Plume', 'Used_for', 'passives'], ['Plume', 'Used_for', 'relative clauses'], ['passives', 'Conjunction', 'relative clauses'], ['Plume', 'Used_for', 'interrogatives'], ['relative clauses', 'Conjunction', 'interrogatives']]
trues: [['Plume', 'Used_for', 'passives'], ['Plume', 'Used_for', 'relative clauses'], ['Plume', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.368, 0.41818181818181815, 0.39148936170212767]
text: We introduce a novel method of shape constrained image segmentation which is based on mixtures of feature distributions for color and texture as well as probabilistic shape knowledge .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('shape constrained image segmentation')
# Method('mixtures of feature distributions')
# Task('shape constrained image segmentation')
# Method('mixtures of feature distributions')
# Other_scientific_term('color and texture')
# Other_scientific_term('probabilistic shape knowledge')
# Task('shape constrained image segmentation')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("shape constrained image segmentation")), Triple(Method("mixtures of feature distributions"), Rel("Used_for"), Task("shape constrained image segmentation")), Triple(Method("mixtures of feature distributions"), Rel("Conjunction"), Other_scientific_term("color and texture")), Triple(Other_scientific_term("probabilistic shape knowledge"), Rel("Used_for"), Task("shape constrained image segmentation"))])
pred: [['method', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Conjunction', 'color and texture'], ['probabilistic shape knowledge', 'Used_for', 'shape constrained image segmentation']]
trues: [['method', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Used_for', 'method'], ['mixtures of feature distributions', 'Used_for', 'color'], ['mixtures of feature distributions', 'Used_for', 'texture'], ['mixtures of feature distributions', 'Used_for', 'probabilistic shape knowledge'], ['color', 'Conjunction', 'texture'], ['texture', 'Conjunction', 'probabilistic shape knowledge']]
metrics_sample: [0.25, 0.14285714285714285, 0.18181818181818182]
metrics_current: [0.3661417322834646, 0.40969162995594716, 0.38669438669438666]
text: In this paper We experimentally evaluate a trainable sentence planner for a spoken dialogue system by eliciting subjective human judgments .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('subjective human judgments')
# Method('trainable sentence planner')
# Method('trainable sentence planner')
# Task('spoken dialogue system')

extract = Extract([Triple(Metric("subjective human judgments"), Rel("Evaluate_for"), Method("trainable sentence planner")), Triple(Method("trainable sentence planner"), Rel("Used_for"), Task("spoken dialogue system"))])
pred: [['subjective human judgments', 'Evaluate_for', 'trainable sentence planner'], ['trainable sentence planner', 'Used_for', 'spoken dialogue system']]
trues: [['trainable sentence planner', 'Used_for', 'spoken dialogue system'], ['subjective human judgments', 'Evaluate_for', 'trainable sentence planner']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.37109375, 0.4148471615720524, 0.3917525773195877]
text: We investigate and analyze the layers of various CNN models and extensively compare between them with the goal of discovering how the layers of distributed representations within CNNs represent object pose information and how this contradicts with object category representations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('layers of distributed representations')
# Other_scientific_term('object pose information')
# Method('layers of distributed representations')
# Other_scientific_term('object category representations')
# Other_scientific_term('object pose information')
# Other_scientific_term('object category representations')
# Other_scientific_term('object category representations')
# Other_scientific_term('object pose information')

extract = Extract([Triple(Method("layers of distributed representations"), Rel("Used_for"), Other_scientific_term("object pose information")), Triple(Method("layers of distributed representations"), Rel("Used_for"), Other_scientific_term("object category representations")), Triple(Other_scientific_term("object pose information"), Rel("Conjunction"), Other_scientific_term("object category representations")), Triple(Other_scientific_term("object category representations"), Rel("Used_for"), Other_scientific_term("object pose information"))])
pred: [['layers of distributed representations', 'Used_for', 'object pose information'], ['layers of distributed representations', 'Used_for', 'object category representations'], ['object pose information', 'Conjunction', 'object category representations'], ['object category representations', 'Used_for', 'object pose information']]
trues: [['layers', 'Part_of', 'CNN models'], ['layers of distributed representations', 'Part_of', 'CNNs'], ['layers of distributed representations', 'Used_for', 'object pose information'], ['this', 'Compare', 'object category representations']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.36923076923076925, 0.41201716738197425, 0.3894523326572008]
text: While previous approaches relied on geometric , appearance , or correlation-based information for establishing correspondences between static cameras , they each have well-known limitations and are not extendable to wide-area settings with PTZ cameras .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('geometric, appearance, or correlation-based information')
# Generic('approaches')
# Other_scientific_term('geometric, appearance, or correlation-based information')
# Other_scientific_term('establishing correspondences')
# Other_scientific_term('geometric, appearance, or correlation-based information')
# Other_scientific_term('static cameras')
# Other_scientific_term('geometric, appearance, or correlation-based information')
# Other_scientific_term('PTZ cameras')
# Other_scientific_term('PTZ cameras')
# Other_scientific_term('static cameras')

extract = Extract([Triple(Other_scientific_term("geometric, appearance, or correlation-based information"), Rel("Used_for"), Generic("approaches")), Triple(Other_scientific_term("geometric, appearance, or correlation-based information"), Rel("Used_for"), Other_scientific_term("establishing correspondences")), Triple(Other_scientific_term("geometric, appearance, or correlation-based information"), Rel("Used_for"), Other_scientific_term("static cameras")), Triple(Other_scientific_term("geometric, appearance, or correlation-based information"), Rel("Conjunction"), Other_scientific_term("PTZ cameras")), Triple(Other_scientific_term("PTZ cameras"), Rel("Feature_of"), Other_scientific_term("static cameras"))])
pred: [['geometric, appearance, or correlation-based information', 'Used_for', 'approaches'], ['geometric, appearance, or correlation-based information', 'Used_for', 'establishing correspondences'], ['geometric, appearance, or correlation-based information', 'Used_for', 'static cameras'], ['geometric, appearance, or correlation-based information', 'Conjunction', 'PTZ cameras'], ['PTZ cameras', 'Feature_of', 'static cameras']]
trues: [['geometric , appearance , or correlation-based information', 'Used_for', 'approaches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3622641509433962, 0.41025641025641024, 0.38476953907815625]
text: Our approach outperforms state-of-the-art trackers on the VIVID benchmark datasets .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('approach')
# Generic('trackers')
# Generic('trackers')
# Material('VIVID benchmark datasets')
# Generic('approach')
# Material('VIVID benchmark datasets')

extract = Extract([Triple(Generic("approach"), Rel("Compare"), Generic("trackers")), Triple(Generic("trackers"), Rel("Evaluate_for"), Material("VIVID benchmark datasets")), Triple(Generic("approach"), Rel("Evaluate_for"), Material("VIVID benchmark datasets"))])
pred: [['approach', 'Compare', 'trackers'], ['trackers', 'Evaluate_for', 'VIVID benchmark datasets'], ['approach', 'Evaluate_for', 'VIVID benchmark datasets']]
trues: [['state-of-the-art trackers', 'Compare', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'state-of-the-art trackers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3582089552238806, 0.4050632911392405, 0.3801980198019802]
text: We have applied it to real scenes that include transparent objects and recovered the shapes of the objects with high accuracy .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('it')
# Other_scientific_term('real scenes')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Other_scientific_term("real scenes"))])
pred: [['it', 'Used_for', 'real scenes']]
trues: [['it', 'Used_for', 'real scenes'], ['it', 'Used_for', 'shapes of the objects'], ['transparent objects', 'Part_of', 'real scenes'], ['accuracy', 'Evaluate_for', 'shapes of the objects']]
metrics_sample: [1.0, 0.25, 0.4]
metrics_current: [0.36059479553903345, 0.4024896265560166, 0.3803921568627451]
text: Using these ideas together , the resulting tagger gives a 97.24 % accuracy on the Penn Treebank WSJ , an error reduction of 4.4 % on the best previous single automatically learned tagging result .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('Penn Treebank WSJ')
# Method('tagger')
# Metric('accuracy')
# Method('tagger')
# Metric('error reduction')
# Method('tagger')
# Method('tagger')
# Method('single automatically learned tagging result')

extract = Extract([Triple(Material("Penn Treebank WSJ"), Rel("Evaluate_for"), Method("tagger")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Method("tagger")), Triple(Metric("error reduction"), Rel("Evaluate_for"), Method("tagger")), Triple(Method("tagger"), Rel("Compare"), Method("single automatically learned tagging result"))])
pred: [['Penn Treebank WSJ', 'Evaluate_for', 'tagger'], ['accuracy', 'Evaluate_for', 'tagger'], ['error reduction', 'Evaluate_for', 'tagger'], ['tagger', 'Compare', 'single automatically learned tagging result']]
trues: [['accuracy', 'Evaluate_for', 'tagger'], ['Penn Treebank WSJ', 'Evaluate_for', 'tagger'], ['error', 'Evaluate_for', 'tagger']]
metrics_sample: [0.5, 0.6666666666666666, 0.5714285714285715]
metrics_current: [0.3626373626373626, 0.4057377049180328, 0.3829787234042554]
text: Recognition of proper nouns in Japanese text has been studied as a part of the more general problem of morphological analysis in Japanese text processing ( [ 1 ] [ 2 ] ) .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Task('Recognition of proper nouns')
# Task('morphological analysis')
# Material('Japanese text')
# Task('Recognition of proper nouns')
# Material('Japanese text')
# Task('morphological analysis')
# Task('morphological analysis')
# Generic('problem')

extract = Extract([Triple(Task("Recognition of proper nouns"), Rel("Used_for"), Task("morphological analysis")), Triple(Material("Japanese text"), Rel("Hyponym_of"), Task("Recognition of proper nouns")), Triple(Material("Japanese text"), Rel("Conjunction"), Task("morphological analysis")), Triple(Task("morphological analysis"), Rel("Hyponym_of"), Generic("problem"))])
pred: [['Recognition of proper nouns', 'Used_for', 'morphological analysis'], ['Japanese text', 'Hyponym_of', 'Recognition of proper nouns'], ['Japanese text', 'Conjunction', 'morphological analysis'], ['morphological analysis', 'Hyponym_of', 'problem']]
trues: [['Recognition of proper nouns', 'Part_of', 'morphological analysis'], ['proper nouns', 'Part_of', 'Japanese text'], ['morphological analysis', 'Used_for', 'Japanese text processing']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3574007220216607, 0.4008097165991903, 0.3778625954198473]
text: In particular , our guarantee suggests that a substantial amount of low rank matrices , which can not be recovered by standard robust PCA , become re-coverable by our proposed method .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('guarantee')
# Generic('method')
# Other_scientific_term('low rank matrices')
# Generic('method')

extract = Extract([Triple(Generic("guarantee"), Rel("Used_for"), Generic("method")), Triple(Other_scientific_term("low rank matrices"), Rel("Used_for"), Generic("method"))])
pred: [['guarantee', 'Used_for', 'method'], ['low rank matrices', 'Used_for', 'method']]
trues: [['method', 'Used_for', 'low rank matrices']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3548387096774194, 0.39919354838709675, 0.3757115749525617]
text: First , it uses several kinds of dictionaries to segment and tag Japanese character strings .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('dictionaries')
# Method('segment and tag Japanese character strings')
# Other_scientific_term('dictionaries')
# Other_scientific_term('Japanese character strings')

extract = Extract([Triple(Other_scientific_term("dictionaries"), Rel("Used_for"), Method("segment and tag Japanese character strings")), Triple(Other_scientific_term("dictionaries"), Rel("Used_for"), Other_scientific_term("Japanese character strings"))])
pred: [['dictionaries', 'Used_for', 'segment and tag Japanese character strings'], ['dictionaries', 'Used_for', 'Japanese character strings']]
trues: [['dictionaries', 'Used_for', 'it'], ['dictionaries', 'Used_for', 'Japanese character strings']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.35587188612099646, 0.4, 0.3766478342749529]
text: A mixed-signal paradigm is presented for high-resolution parallel inner-product computation in very high dimensions , suitable for efficient implementation of kernels in image processing .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('mixed-signal paradigm')
# Task('high-resolution parallel inner-product computation')
# Task('high-resolution parallel inner-product computation')
# Other_scientific_term('kernels in image processing')
# Other_scientific_term('high dimensions')
# Task('high-resolution parallel inner-product computation')

extract = Extract([Triple(Method("mixed-signal paradigm"), Rel("Used_for"), Task("high-resolution parallel inner-product computation")), Triple(Task("high-resolution parallel inner-product computation"), Rel("Used_for"), Other_scientific_term("kernels in image processing")), Triple(Other_scientific_term("high dimensions"), Rel("Feature_of"), Task("high-resolution parallel inner-product computation"))])
pred: [['mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'], ['high-resolution parallel inner-product computation', 'Used_for', 'kernels in image processing'], ['high dimensions', 'Feature_of', 'high-resolution parallel inner-product computation']]
trues: [['mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'], ['mixed-signal paradigm', 'Used_for', 'kernels'], ['kernels', 'Used_for', 'image processing']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.35563380281690143, 0.39920948616600793, 0.3761638733705774]
text: We demonstrate our approach with multiple PTZ camera sequences in typical outdoor surveillance settings and show a comparison with state-of-the-art approaches .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('PTZ camera sequences')
# Generic('approach')
# Generic('approaches')
# Generic('approach')

extract = Extract([Triple(Material("PTZ camera sequences"), Rel("Evaluate_for"), Generic("approach")), Triple(Generic("approaches"), Rel("Compare"), Generic("approach"))])
pred: [['PTZ camera sequences', 'Evaluate_for', 'approach'], ['approaches', 'Compare', 'approach']]
trues: [['approach', 'Used_for', 'outdoor surveillance settings'], ['approach', 'Compare', 'state-of-the-art approaches'], ['multiple PTZ camera sequences', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3531468531468531, 0.39453125, 0.3726937269372694]
text: This statistical approach aims to minimize expected loss of translation errors under loss functions that measure translation performance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('loss functions')
# Metric('translation performance')

extract = Extract([Triple(Metric("loss functions"), Rel("Used_for"), Metric("translation performance"))])
pred: [['loss functions', 'Used_for', 'translation performance']]
trues: [['loss functions', 'Evaluate_for', 'translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3519163763066202, 0.39299610894941633, 0.3713235294117647]
text: Fast algorithms for nearest neighbor ( NN ) search have in large part focused on 2 distance .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Fast algorithms')
# Task('nearest neighbor ( NN ) search')

extract = Extract([Triple(Method("Fast algorithms"), Rel("Used_for"), Task("nearest neighbor ( NN ) search"))])
pred: [['Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search']]
trues: [['Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3541666666666667, 0.3953488372093023, 0.37362637362637363]
text: A separation method is proposed that is nearly statistically efficient ( approaching the corresponding Cramér-Rao lower bound ) , if the separated signals obey the assumed model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('separation method')
# Other_scientific_term('separated signals')

extract = Extract([Triple(Method("separation method"), Rel("Used_for"), Other_scientific_term("separated signals"))])
pred: [['separation method', 'Used_for', 'separated signals']]
trues: [['Cramér-Rao lower bound )', 'Feature_of', 'separation method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35294117647058826, 0.3938223938223938, 0.3722627737226278]
text: Building on previous work at Carnegie-Mellon University e.g. [ 4 , 5 , 8 ] , Plume 's approach to parsing is based on semantic caseframe instantiation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('previous work')
# Task('Building on previous work')
# Method('Plume's approach to parsing')
# Method('semantic caseframe instantiation')

extract = Extract([Triple(Generic("previous work"), Rel("Used_for"), Task("Building on previous work")), Triple(Method("Plume's approach to parsing"), Rel("Used_for"), Method("semantic caseframe instantiation"))])
pred: [['previous work', 'Used_for', 'Building on previous work'], ["Plume's approach to parsing", 'Used_for', 'semantic caseframe instantiation']]
trues: [["Plume 's approach", 'Used_for', 'parsing'], ['semantic caseframe instantiation', 'Used_for', "Plume 's approach"]]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35051546391752575, 0.39080459770114945, 0.3695652173913043]
text: We present a strong detector based on combining a set of weak detectors .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('detector')
# Generic('detector')
# Method('weak detectors')
# Generic('detector')

extract = Extract([Triple(Generic("detector"), Rel("Used_for"), Generic("detector")), Triple(Method("weak detectors"), Rel("Used_for"), Generic("detector"))])
pred: [['detector', 'Used_for', 'detector'], ['weak detectors', 'Used_for', 'detector']]
trues: [['detectors', 'Used_for', 'detector']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34812286689419797, 0.3893129770992366, 0.3675675675675676]
text: The results show that the features in terms of which we formulate our heuristic principles have significant predictive power , and that rules that closely resemble our Horn clauses can be learnt automatically from these features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('features')
# Other_scientific_term('Horn clauses')
# Other_scientific_term('features')
# Method('rules')

extract = Extract([Triple(Other_scientific_term("features"), Rel("Used_for"), Other_scientific_term("Horn clauses")), Triple(Other_scientific_term("features"), Rel("Used_for"), Method("rules"))])
pred: [['features', 'Used_for', 'Horn clauses'], ['features', 'Used_for', 'rules']]
trues: [['features', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34576271186440677, 0.38783269961977185, 0.3655913978494623]
text: GLOSSER is designed to support reading and learning to read in a foreign language .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('GLOSSER')
# Task('reading')
# Generic('GLOSSER')
# Task('learning to read')

extract = Extract([Triple(Generic("GLOSSER"), Rel("Used_for"), Task("reading")), Triple(Generic("GLOSSER"), Rel("Used_for"), Task("learning to read"))])
pred: [['GLOSSER', 'Used_for', 'reading'], ['GLOSSER', 'Used_for', 'learning to read']]
trues: [['GLOSSER', 'Used_for', 'reading and learning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3434343434343434, 0.38636363636363635, 0.36363636363636365]
text: During normal tracking conditions when the object is visible from frame to frame , local optimization is used to track the local mode of the similarity measure in a parameter space of translation , rotation and scale .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('local optimization')
# Task('tracking')
# Other_scientific_term('local mode')
# Other_scientific_term('similarity measure')
# Other_scientific_term('translation, rotation and scale')
# Method('local optimization')
# Other_scientific_term('translation')
# Other_scientific_term('rotation and scale')
# Other_scientific_term('rotation and scale')
# Other_scientific_term('translation')

extract = Extract([Triple(Method("local optimization"), Rel("Used_for"), Task("tracking")), Triple(Other_scientific_term("local mode"), Rel("Feature_of"), Other_scientific_term("similarity measure")), Triple(Other_scientific_term("translation, rotation and scale"), Rel("Used_for"), Method("local optimization")), Triple(Other_scientific_term("translation"), Rel("Conjunction"), Other_scientific_term("rotation and scale")), Triple(Other_scientific_term("rotation and scale"), Rel("Conjunction"), Other_scientific_term("translation"))])
pred: [['local optimization', 'Used_for', 'tracking'], ['local mode', 'Feature_of', 'similarity measure'], ['translation, rotation and scale', 'Used_for', 'local optimization'], ['translation', 'Conjunction', 'rotation and scale'], ['rotation and scale', 'Conjunction', 'translation']]
trues: [['local optimization', 'Used_for', 'local mode of the similarity measure'], ['parameter space of translation , rotation and scale', 'Used_for', 'local mode of the similarity measure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33774834437086093, 0.38345864661654133, 0.35915492957746475]
text: This paper presents an unsupervised learning approach to disambiguate various relations between named entities by use of various lexical and syntactic features from the contexts .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('unsupervised learning approach')
# Task('disambiguate')
# Other_scientific_term('relations')
# Task('disambiguate')
# Other_scientific_term('lexical and syntactic features')
# Method('unsupervised learning approach')
# Other_scientific_term('lexical and syntactic features')
# Other_scientific_term('contexts')

extract = Extract([Triple(Method("unsupervised learning approach"), Rel("Used_for"), Task("disambiguate")), Triple(Other_scientific_term("relations"), Rel("Used_for"), Task("disambiguate")), Triple(Other_scientific_term("lexical and syntactic features"), Rel("Used_for"), Method("unsupervised learning approach")), Triple(Other_scientific_term("lexical and syntactic features"), Rel("Conjunction"), Other_scientific_term("contexts"))])
pred: [['unsupervised learning approach', 'Used_for', 'disambiguate'], ['relations', 'Used_for', 'disambiguate'], ['lexical and syntactic features', 'Used_for', 'unsupervised learning approach'], ['lexical and syntactic features', 'Conjunction', 'contexts']]
trues: [['unsupervised learning approach', 'Used_for', 'relations between named entities'], ['lexical and syntactic features', 'Used_for', 'unsupervised learning approach']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.3366013071895425, 0.3843283582089552, 0.3588850174216028]
text: We present results on addressee identification in four-participants face-to-face meetings using Bayesian Network and Naive Bayes classifiers .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('four-participants face-to-face meetings')
# Task('addressee identification')
# Method('Bayesian Network')
# Task('addressee identification')
# Method('Naive Bayes classifiers')
# Task('addressee identification')
# Method('Bayesian Network')
# Method('Naive Bayes classifiers')

extract = Extract([Triple(Material("four-participants face-to-face meetings"), Rel("Used_for"), Task("addressee identification")), Triple(Method("Bayesian Network"), Rel("Used_for"), Task("addressee identification")), Triple(Method("Naive Bayes classifiers"), Rel("Used_for"), Task("addressee identification")), Triple(Method("Bayesian Network"), Rel("Conjunction"), Method("Naive Bayes classifiers"))])
pred: [['four-participants face-to-face meetings', 'Used_for', 'addressee identification'], ['Bayesian Network', 'Used_for', 'addressee identification'], ['Naive Bayes classifiers', 'Used_for', 'addressee identification'], ['Bayesian Network', 'Conjunction', 'Naive Bayes classifiers']]
trues: [['Bayesian Network', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Conjunction', 'Bayesian Network']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33225806451612905, 0.3800738007380074, 0.35456110154905335]
text: It has also been studied in the framework of Japanese information extraction ( [ 3 ] ) in recent years .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('It')
# Task('Japanese information extraction')

extract = Extract([Triple(Generic("It"), Rel("Hyponym_of"), Task("Japanese information extraction"))])
pred: [['It', 'Hyponym_of', 'Japanese information extraction']]
trues: [['Japanese information extraction', 'Used_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3311897106109325, 0.3786764705882353, 0.35334476843910806]
text: We introduce a method to accelerate the evaluation of object detection cascades with the help of a divide-and-conquer procedure in the space of candidate regions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('method')
# Task('evaluation of object detection cascades')
# Method('divide-and-conquer procedure')
# Task('evaluation of object detection cascades')
# Other_scientific_term('space of candidate regions')
# Method('divide-and-conquer procedure')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("evaluation of object detection cascades")), Triple(Method("divide-and-conquer procedure"), Rel("Used_for"), Task("evaluation of object detection cascades")), Triple(Other_scientific_term("space of candidate regions"), Rel("Feature_of"), Method("divide-and-conquer procedure"))])
pred: [['method', 'Used_for', 'evaluation of object detection cascades'], ['divide-and-conquer procedure', 'Used_for', 'evaluation of object detection cascades'], ['space of candidate regions', 'Feature_of', 'divide-and-conquer procedure']]
trues: [['method', 'Used_for', 'evaluation of object detection cascades'], ['divide-and-conquer procedure', 'Used_for', 'method'], ['space of candidate regions', 'Feature_of', 'divide-and-conquer procedure']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.3343949044585987, 0.38181818181818183, 0.3565365025466892]
text: The perception of transparent objects from images is known to be a very hard problem in vision .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('perception of transparent objects')
# Material('images')

extract = Extract([Triple(Task("perception of transparent objects"), Rel("Used_for"), Material("images"))])
pred: [['perception of transparent objects', 'Used_for', 'images']]
trues: [['images', 'Used_for', 'perception of transparent objects']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3804347826086957, 0.3553299492385787]
text: We discuss several applications of the result to the problem of distributional approximation of probabilistic context-free grammars by means of probabilistic finite automata .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('result')
# Task('distributional approximation')
# Generic('result')
# Method('probabilistic context-free grammars')
# Generic('result')
# Method('probabilistic finite automata')

extract = Extract([Triple(Generic("result"), Rel("Used_for"), Task("distributional approximation")), Triple(Generic("result"), Rel("Used_for"), Method("probabilistic context-free grammars")), Triple(Generic("result"), Rel("Used_for"), Method("probabilistic finite automata"))])
pred: [['result', 'Used_for', 'distributional approximation'], ['result', 'Used_for', 'probabilistic context-free grammars'], ['result', 'Used_for', 'probabilistic finite automata']]
trues: [['distributional approximation', 'Feature_of', 'probabilistic context-free grammars'], ['probabilistic finite automata', 'Used_for', 'distributional approximation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.330188679245283, 0.3776978417266187, 0.3523489932885906]
text: MINPRAN , a new robust operator , nds good ts in data sets where more than 50 % of the points are outliers .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MINPRAN')
# Other_scientific_term('good ts')

extract = Extract([Triple(Method("MINPRAN"), Rel("Used_for"), Other_scientific_term("good ts"))])
pred: [['MINPRAN', 'Used_for', 'good ts']]
trues: [['MINPRAN', 'Hyponym_of', 'robust operator']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.329153605015674, 0.3763440860215054, 0.35117056856187295]
text: The goal is to sample a small set of records over which evaluating aggregate queries can be done both efficiently and accurately .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('records')
# Task('evaluating aggregate queries')
# Task('evaluating aggregate queries')
# Other_scientific_term('small set of records')

extract = Extract([Triple(Generic("records"), Rel("Used_for"), Task("evaluating aggregate queries")), Triple(Task("evaluating aggregate queries"), Rel("Used_for"), Other_scientific_term("small set of records"))])
pred: [['records', 'Used_for', 'evaluating aggregate queries'], ['evaluating aggregate queries', 'Used_for', 'small set of records']]
trues: [['aggregate queries', 'Evaluate_for', 'records']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32710280373831774, 0.375, 0.34941763727121466]
text: Simulated and experimental results show that our method recovers scene geometry with high subpixel precision , and that it can handle many challenges of active reconstruction systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('scene geometry')
# Metric('subpixel precision')
# Generic('method')
# Method('active reconstruction systems')
# Generic('it')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("scene geometry")), Triple(Metric("subpixel precision"), Rel("Evaluate_for"), Generic("method")), Triple(Method("active reconstruction systems"), Rel("Used_for"), Generic("it"))])
pred: [['method', 'Used_for', 'scene geometry'], ['subpixel precision', 'Evaluate_for', 'method'], ['active reconstruction systems', 'Used_for', 'it']]
trues: [['method', 'Used_for', 'scene geometry'], ['subpixel precision', 'Feature_of', 'scene geometry'], ['it', 'Used_for', 'active reconstruction systems']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3271604938271605, 0.3745583038869258, 0.34925864909390447]
text: We show how this can efficiently be combined with random-projection based methods for 2 NN search , such as locality-sensitive hashing ( LSH ) or random projection trees .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('this')
# Method('random-projection based methods')
# Method('random-projection based methods')
# Task('2 NN search')
# Method('locality-sensitive hashing ( LSH )')
# Method('random-projection based methods')
# Method('locality-sensitive hashing ( LSH )')
# Method('random projection trees')
# Method('random projection trees')
# Method('random-projection based methods')

extract = Extract([Triple(Generic("this"), Rel("Used_for"), Method("random-projection based methods")), Triple(Method("random-projection based methods"), Rel("Conjunction"), Task("2 NN search")), Triple(Method("locality-sensitive hashing ( LSH )"), Rel("Used_for"), Method("random-projection based methods")), Triple(Method("locality-sensitive hashing ( LSH )"), Rel("Hyponym_of"), Method("random projection trees")), Triple(Method("random projection trees"), Rel("Conjunction"), Method("random-projection based methods"))])
pred: [['this', 'Used_for', 'random-projection based methods'], ['random-projection based methods', 'Conjunction', '2 NN search'], ['locality-sensitive hashing ( LSH )', 'Used_for', 'random-projection based methods'], ['locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random projection trees'], ['random projection trees', 'Conjunction', 'random-projection based methods']]
trues: [['this', 'Conjunction', 'random-projection based methods'], ['random-projection based methods', 'Used_for', 'NN search'], ['locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'], ['locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'], ['random projection trees', 'Hyponym_of', 'random-projection based methods']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3221884498480243, 0.3680555555555556, 0.34359805510534847]
text: The experimental results show that the proposed histogram-based interest point detectors perform particularly well for the tasks of matching textured scenes under blur and illumination changes , in terms of repeatability and distinctiveness .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('histogram-based interest point detectors')
# Task('matching textured scenes')
# Material('blur')
# Task('matching textured scenes')
# Material('illumination changes')
# Task('matching textured scenes')
# Material('blur')
# Material('illumination changes')
# Metric('repeatability')
# Metric('distinctiveness')

extract = Extract([Triple(Method("histogram-based interest point detectors"), Rel("Used_for"), Task("matching textured scenes")), Triple(Material("blur"), Rel("Used_for"), Task("matching textured scenes")), Triple(Material("illumination changes"), Rel("Used_for"), Task("matching textured scenes")), Triple(Material("blur"), Rel("Conjunction"), Material("illumination changes")), Triple(Metric("repeatability"), Rel("Conjunction"), Metric("distinctiveness"))])
pred: [['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['blur', 'Used_for', 'matching textured scenes'], ['illumination changes', 'Used_for', 'matching textured scenes'], ['blur', 'Conjunction', 'illumination changes'], ['repeatability', 'Conjunction', 'distinctiveness']]
trues: [['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['repeatability', 'Evaluate_for', 'histogram-based interest point detectors'], ['repeatability', 'Conjunction', 'distinctiveness'], ['distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors']]
metrics_sample: [0.4, 0.5, 0.4444444444444445]
metrics_current: [0.32335329341317365, 0.3698630136986301, 0.3450479233226837]
text: The goal of this work is the enrichment of human-machine interactions in a natural language environment .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('natural language environment')
# Task('human-machine interactions')

extract = Extract([Triple(Material("natural language environment"), Rel("Used_for"), Task("human-machine interactions"))])
pred: [['natural language environment', 'Used_for', 'human-machine interactions']]
trues: [['natural language environment', 'Feature_of', 'human-machine interactions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32238805970149254, 0.36860068259385664, 0.3439490445859873]
text: Motivated by this semantic criterion we analyze the empirical quality of distributional word feature vectors and its impact on word similarity results , proposing an objective measure for evaluating feature vector quality .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('semantic criterion')
# Other_scientific_term('distributional word feature vectors')
# Metric('semantic criterion')
# Other_scientific_term('word similarity results')
# Other_scientific_term('distributional word feature vectors')
# Other_scientific_term('word similarity results')
# Metric('objective measure')
# Other_scientific_term('feature vector quality')

extract = Extract([Triple(Metric("semantic criterion"), Rel("Evaluate_for"), Other_scientific_term("distributional word feature vectors")), Triple(Metric("semantic criterion"), Rel("Evaluate_for"), Other_scientific_term("word similarity results")), Triple(Other_scientific_term("distributional word feature vectors"), Rel("Conjunction"), Other_scientific_term("word similarity results")), Triple(Metric("objective measure"), Rel("Used_for"), Other_scientific_term("feature vector quality"))])
pred: [['semantic criterion', 'Evaluate_for', 'distributional word feature vectors'], ['semantic criterion', 'Evaluate_for', 'word similarity results'], ['distributional word feature vectors', 'Conjunction', 'word similarity results'], ['objective measure', 'Used_for', 'feature vector quality']]
trues: [['semantic criterion', 'Evaluate_for', 'distributional word feature vectors'], ['distributional word feature vectors', 'Used_for', 'word similarity'], ['measure', 'Evaluate_for', 'feature vector quality']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.3215339233038348, 0.36824324324324326, 0.34330708661417325]
text: We apply cluster analysis on the sampled parameter space to redetect the object and renew the local tracker .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('cluster analysis')
# Other_scientific_term('sampled parameter space')
# Method('cluster analysis')
# Method('local tracker')
# Method('local tracker')
# Method('cluster analysis')

extract = Extract([Triple(Method("cluster analysis"), Rel("Used_for"), Other_scientific_term("sampled parameter space")), Triple(Method("cluster analysis"), Rel("Used_for"), Method("local tracker")), Triple(Method("local tracker"), Rel("Conjunction"), Method("cluster analysis"))])
pred: [['cluster analysis', 'Used_for', 'sampled parameter space'], ['cluster analysis', 'Used_for', 'local tracker'], ['local tracker', 'Conjunction', 'cluster analysis']]
trues: [['cluster analysis', 'Used_for', 'sampled parameter space'], ['cluster analysis', 'Used_for', 'local tracker']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.32456140350877194, 0.3724832214765101, 0.34687500000000004]
text: Techniques for automatically training modules of a natural language generator have recently been proposed , but a fundamental concern is whether the quality of utterances produced with trainable components can compete with hand-crafted template-based or rule-based approaches .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('Techniques')
# Task('natural language generator')
# Generic('modules')
# Task('natural language generator')
# Generic('utterances')
# Generic('components')
# Method('hand-crafted template-based or rule-based approaches')
# Generic('utterances')
# Method('hand-crafted template-based or rule-based approaches')
# Generic('components')

extract = Extract([Triple(Generic("Techniques"), Rel("Used_for"), Task("natural language generator")), Triple(Generic("modules"), Rel("Used_for"), Task("natural language generator")), Triple(Generic("utterances"), Rel("Compare"), Generic("components")), Triple(Method("hand-crafted template-based or rule-based approaches"), Rel("Conjunction"), Generic("utterances")), Triple(Method("hand-crafted template-based or rule-based approaches"), Rel("Conjunction"), Generic("components"))])
pred: [['Techniques', 'Used_for', 'natural language generator'], ['modules', 'Used_for', 'natural language generator'], ['utterances', 'Compare', 'components'], ['hand-crafted template-based or rule-based approaches', 'Conjunction', 'utterances'], ['hand-crafted template-based or rule-based approaches', 'Conjunction', 'components']]
trues: [['Techniques', 'Used_for', 'automatically training modules'], ['automatically training modules', 'Part_of', 'natural language generator'], ['utterances', 'Evaluate_for', 'trainable components'], ['utterances', 'Evaluate_for', 'hand-crafted template-based or rule-based approaches'], ['trainable components', 'Compare', 'hand-crafted template-based or rule-based approaches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31988472622478387, 0.36633663366336633, 0.34153846153846157]
text: We present Minimum Bayes-Risk ( MBR ) decoding for statistical machine translation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Minimum Bayes-Risk ( MBR ) decoding')
# Task('statistical machine translation')

extract = Extract([Triple(Method("Minimum Bayes-Risk ( MBR ) decoding"), Rel("Used_for"), Task("statistical machine translation"))])
pred: [['Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation']]
trues: [['Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3218390804597701, 0.3684210526315789, 0.3435582822085889]
text: We consider the problem of computing the Kullback-Leibler distance , also called the relative entropy , between a probabilistic context-free grammar and a probabilistic finite automaton .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('Kullback-Leibler distance')
# Method('probabilistic context-free grammar')
# Metric('Kullback-Leibler distance')
# Method('probabilistic finite automaton')
# Method('probabilistic context-free grammar')
# Method('probabilistic finite automaton')

extract = Extract([Triple(Metric("Kullback-Leibler distance"), Rel("Used_for"), Method("probabilistic context-free grammar")), Triple(Metric("Kullback-Leibler distance"), Rel("Used_for"), Method("probabilistic finite automaton")), Triple(Method("probabilistic context-free grammar"), Rel("Used_for"), Method("probabilistic finite automaton"))])
pred: [['Kullback-Leibler distance', 'Used_for', 'probabilistic context-free grammar'], ['Kullback-Leibler distance', 'Used_for', 'probabilistic finite automaton'], ['probabilistic context-free grammar', 'Used_for', 'probabilistic finite automaton']]
trues: [['probabilistic context-free grammar', 'Compare', 'probabilistic finite automaton']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3190883190883191, 0.36721311475409835, 0.34146341463414637]
text: Many of the resources used are derived from data created by human beings out of an NLP context , especially regarding MT and reference translations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('resources')
# Generic('data')
# Generic('data')
# Task('NLP context')
# Material('reference translations')
# Task('NLP context')
# Material('reference translations')
# Material('MT')
# Material('MT')
# Material('reference translations')

extract = Extract([Triple(Generic("resources"), Rel("Used_for"), Generic("data")), Triple(Generic("data"), Rel("Used_for"), Task("NLP context")), Triple(Material("reference translations"), Rel("Hyponym_of"), Task("NLP context")), Triple(Material("reference translations"), Rel("Conjunction"), Material("MT")), Triple(Material("MT"), Rel("Hyponym_of"), Material("reference translations"))])
pred: [['resources', 'Used_for', 'data'], ['data', 'Used_for', 'NLP context'], ['reference translations', 'Hyponym_of', 'NLP context'], ['reference translations', 'Conjunction', 'MT'], ['MT', 'Hyponym_of', 'reference translations']]
trues: [['MT', 'Hyponym_of', 'NLP'], ['MT', 'Conjunction', 'reference translations'], ['reference translations', 'Hyponym_of', 'NLP']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3146067415730337, 0.36363636363636365, 0.3373493975903615]
text: Some of the extracts were expert human translations , others were machine translation outputs .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Material('expert human translations')
# Generic('extracts')
# Material('expert human translations')
# Material('machine translation outputs')
# Material('machine translation outputs')
# Generic('extracts')

extract = Extract([Triple(Material("expert human translations"), Rel("Hyponym_of"), Generic("extracts")), Triple(Material("expert human translations"), Rel("Conjunction"), Material("machine translation outputs")), Triple(Material("machine translation outputs"), Rel("Hyponym_of"), Generic("extracts"))])
pred: [['expert human translations', 'Hyponym_of', 'extracts'], ['expert human translations', 'Conjunction', 'machine translation outputs'], ['machine translation outputs', 'Hyponym_of', 'extracts']]
trues: [['machine translation outputs', 'Conjunction', 'expert human translations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31197771587743733, 0.36245954692556637, 0.33532934131736525]
text: Specifically , we show how to incorporate a simple prior on the distribution of natural images into support vector machines .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('prior')
# Method('support vector machines')
# Other_scientific_term('distribution of natural images')
# Other_scientific_term('prior')

extract = Extract([Triple(Other_scientific_term("prior"), Rel("Used_for"), Method("support vector machines")), Triple(Other_scientific_term("distribution of natural images"), Rel("Part_of"), Other_scientific_term("prior"))])
pred: [['prior', 'Used_for', 'support vector machines'], ['distribution of natural images', 'Part_of', 'prior']]
trues: [['prior on the distribution of natural images', 'Used_for', 'support vector machines']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31024930747922436, 0.36129032258064514, 0.3338301043219076]
text: Online action detection goes one step further and is more challenging , which identifies the action type and localizes the action positions on the fly from the untrimmed stream .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('untrimmed stream')
# Task('Online action detection')

extract = Extract([Triple(Material("untrimmed stream"), Rel("Used_for"), Task("Online action detection"))])
pred: [['untrimmed stream', 'Used_for', 'Online action detection']]
trues: [['Online action detection', 'Used_for', 'action type'], ['Online action detection', 'Used_for', 'action positions'], ['action type', 'Conjunction', 'action positions'], ['untrimmed stream', 'Used_for', 'Online action detection']]
metrics_sample: [1.0, 0.25, 0.4]
metrics_current: [0.31215469613259667, 0.35987261146496813, 0.3343195266272189]
text: Experimental results from a real telephone application on a natural number recognition task show an 50 % reduction in recognition errors with a moderate 12 % rejection rate of correct utterances and a low 1.5 % rate of false acceptance .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('real telephone application')
# Task('natural number recognition task')
# Metric('recognition errors')
# Material('real telephone application')
# Metric('recognition errors')
# Metric('rejection rate of correct utterances')
# Metric('rejection rate of correct utterances')
# Material('real telephone application')
# Metric('rejection rate of correct utterances')
# Metric('false acceptance')
# Metric('false acceptance')
# Material('real telephone application')

extract = Extract([Triple(Material("real telephone application"), Rel("Evaluate_for"), Task("natural number recognition task")), Triple(Metric("recognition errors"), Rel("Evaluate_for"), Material("real telephone application")), Triple(Metric("recognition errors"), Rel("Evaluate_for"), Metric("rejection rate of correct utterances")), Triple(Metric("rejection rate of correct utterances"), Rel("Evaluate_for"), Material("real telephone application")), Triple(Metric("rejection rate of correct utterances"), Rel("Conjunction"), Metric("false acceptance")), Triple(Metric("false acceptance"), Rel("Conjunction"), Material("real telephone application"))])
pred: [['real telephone application', 'Evaluate_for', 'natural number recognition task'], ['recognition errors', 'Evaluate_for', 'real telephone application'], ['recognition errors', 'Evaluate_for', 'rejection rate of correct utterances'], ['rejection rate of correct utterances', 'Evaluate_for', 'real telephone application'], ['rejection rate of correct utterances', 'Conjunction', 'false acceptance'], ['false acceptance', 'Conjunction', 'real telephone application']]
trues: [['natural number recognition task', 'Feature_of', 'telephone application'], ['recognition errors', 'Evaluate_for', 'natural number recognition task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3070652173913043, 0.3575949367088608, 0.3304093567251462]
text: A demonstration ( in UNIX ) for Applied Natural Language Processing emphasizes components put to novel technical uses in intelligent computer-assisted morphological analysis ( ICALL ) , including disambiguated morphological analysis and lemmatized indexing for an aligned bilingual corpus of word examples .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('UNIX')
# Task('Applied Natural Language Processing')
# Other_scientific_term('components')
# Task('Applied Natural Language Processing')
# Other_scientific_term('components')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')
# Task('Applied Natural Language Processing')
# Other_scientific_term('disambiguated morphological analysis')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')
# Other_scientific_term('disambiguated morphological analysis')
# Other_scientific_term('lemmatized indexing')
# Other_scientific_term('lemmatized indexing')
# Task('intelligent computer-assisted morphological analysis ( ICALL )')

extract = Extract([Triple(Other_scientific_term("UNIX"), Rel("Feature_of"), Task("Applied Natural Language Processing")), Triple(Other_scientific_term("components"), Rel("Part_of"), Task("Applied Natural Language Processing")), Triple(Other_scientific_term("components"), Rel("Conjunction"), Task("intelligent computer-assisted morphological analysis ( ICALL )")), Triple(Task("intelligent computer-assisted morphological analysis ( ICALL )"), Rel("Part_of"), Task("Applied Natural Language Processing")), Triple(Other_scientific_term("disambiguated morphological analysis"), Rel("Used_for"), Task("intelligent computer-assisted morphological analysis ( ICALL )")), Triple(Other_scientific_term("disambiguated morphological analysis"), Rel("Used_for"), Other_scientific_term("lemmatized indexing")), Triple(Other_scientific_term("lemmatized indexing"), Rel("Used_for"), Task("intelligent computer-assisted morphological analysis ( ICALL )"))])
pred: [['UNIX', 'Feature_of', 'Applied Natural Language Processing'], ['components', 'Part_of', 'Applied Natural Language Processing'], ['components', 'Conjunction', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['intelligent computer-assisted morphological analysis ( ICALL )', 'Part_of', 'Applied Natural Language Processing'], ['disambiguated morphological analysis', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['disambiguated morphological analysis', 'Used_for', 'lemmatized indexing'], ['lemmatized indexing', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )']]
trues: [['components', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['disambiguated morphological analysis', 'Hyponym_of', 'components'], ['disambiguated morphological analysis', 'Conjunction', 'lemmatized indexing'], ['disambiguated morphological analysis', 'Used_for', 'aligned bilingual corpus'], ['lemmatized indexing', 'Hyponym_of', 'components'], ['lemmatized indexing', 'Used_for', 'aligned bilingual corpus']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30133333333333334, 0.35093167701863354, 0.3242467718794835]
text: This paper describes the impact of using different-quality references on evaluation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('references')
# Task('evaluation')

extract = Extract([Triple(Material("references"), Rel("Used_for"), Task("evaluation"))])
pred: [['references', 'Used_for', 'evaluation']]
trues: [['different-quality references', 'Used_for', 'evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.300531914893617, 0.3498452012383901, 0.32331902718168815]
text: It also shows that our method significantly outperforms the previous two dependency tree kernels on the 5 ACE relation major types .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('method')
# Method('dependency tree kernels')

extract = Extract([Triple(Generic("method"), Rel("Compare"), Method("dependency tree kernels"))])
pred: [['method', 'Compare', 'dependency tree kernels']]
trues: [['method', 'Compare', 'dependency tree kernels']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30238726790450926, 0.35185185185185186, 0.32524964336661916]
text: We show that there is a closed-form ( analytical ) solution for one part of the Kullback-Leibler distance , viz the cross-entropy .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('cross-entropy')
# Metric('Kullback-Leibler distance')

extract = Extract([Triple(Other_scientific_term("cross-entropy"), Rel("Part_of"), Metric("Kullback-Leibler distance"))])
pred: [['cross-entropy', 'Part_of', 'Kullback-Leibler distance']]
trues: [['closed-form ( analytical ) solution', 'Used_for', 'Kullback-Leibler distance'], ['closed-form ( analytical ) solution', 'Used_for', 'cross-entropy'], ['cross-entropy', 'Part_of', 'Kullback-Leibler distance']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.30423280423280424, 0.3516819571865443, 0.3262411347517731]
text: A model-based approach to on-line cursive handwriting analysis and recognition is presented and evaluated .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('model-based approach')
# Task('on-line cursive handwriting analysis and recognition')

extract = Extract([Triple(Method("model-based approach"), Rel("Used_for"), Task("on-line cursive handwriting analysis and recognition"))])
pred: [['model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition']]
trues: [['model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30606860158311344, 0.35365853658536583, 0.3281471004243281]
text: Given a new image , detection and classification are achieved by determining the position and viewpoint of the model that maximize recognition scores of the candidate objects .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('detection')
# Generic('image')
# Task('detection')
# Task('classification')
# Task('classification')
# Generic('image')

extract = Extract([Triple(Task("detection"), Rel("Used_for"), Generic("image")), Triple(Task("detection"), Rel("Used_for"), Task("classification")), Triple(Task("classification"), Rel("Used_for"), Generic("image"))])
pred: [['detection', 'Used_for', 'image'], ['detection', 'Used_for', 'classification'], ['classification', 'Used_for', 'image']]
trues: [['image', 'Used_for', 'detection'], ['image', 'Used_for', 'classification'], ['detection', 'Conjunction', 'classification'], ['position', 'Used_for', 'detection'], ['position', 'Used_for', 'classification'], ['position', 'Conjunction', 'viewpoint'], ['viewpoint', 'Used_for', 'detection'], ['viewpoint', 'Used_for', 'classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3036649214659686, 0.34523809523809523, 0.3231197771587744]
text: In both domains , we found that unsupervised methods can attain accuracies with 400 unlabeled examples comparable to those attained by supervised methods on 50 labeled examples , and that semi-supervised methods can make good use of small amounts of labeled data .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('unsupervised methods')
# Method('supervised methods')
# Material('unlabeled examples')
# Method('unsupervised methods')
# Material('labeled examples')
# Method('supervised methods')
# Material('labeled data')
# Method('semi-supervised methods')

extract = Extract([Triple(Method("unsupervised methods"), Rel("Compare"), Method("supervised methods")), Triple(Material("unlabeled examples"), Rel("Evaluate_for"), Method("unsupervised methods")), Triple(Material("labeled examples"), Rel("Evaluate_for"), Method("supervised methods")), Triple(Material("labeled data"), Rel("Evaluate_for"), Method("semi-supervised methods"))])
pred: [['unsupervised methods', 'Compare', 'supervised methods'], ['unlabeled examples', 'Evaluate_for', 'unsupervised methods'], ['labeled examples', 'Evaluate_for', 'supervised methods'], ['labeled data', 'Evaluate_for', 'semi-supervised methods']]
trues: [['unsupervised methods', 'Compare', 'supervised methods'], ['accuracies', 'Evaluate_for', 'unsupervised methods'], ['accuracies', 'Evaluate_for', 'supervised methods'], ['unlabeled examples', 'Used_for', 'unsupervised methods'], ['labeled examples', 'Used_for', 'supervised methods'], ['labeled data', 'Used_for', 'semi-supervised methods']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.30310880829015546, 0.34210526315789475, 0.32142857142857145]
text: It is based on a weakly supervised dependency parser that can model speech syntax without relying on any annotated training corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('weakly supervised dependency parser')
# Task('speech syntax')
# Material('annotated training corpus')
# Method('weakly supervised dependency parser')

extract = Extract([Triple(Method("weakly supervised dependency parser"), Rel("Used_for"), Task("speech syntax")), Triple(Material("annotated training corpus"), Rel("Used_for"), Method("weakly supervised dependency parser"))])
pred: [['weakly supervised dependency parser', 'Used_for', 'speech syntax'], ['annotated training corpus', 'Used_for', 'weakly supervised dependency parser']]
trues: [['weakly supervised dependency parser', 'Used_for', 'speech syntax']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.30412371134020616, 0.34402332361516036, 0.3228454172366621]
text: We explored possible ways to obtain a compact lexicon , consistent with CCG principles , from a treebank which is an order of magnitude smaller than Penn WSJ .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('treebank')
# Other_scientific_term('compact lexicon')
# Material('treebank')
# Material('Penn WSJ')
# Metric('order of magnitude')
# Material('Penn WSJ')
# Material('Penn WSJ')
# Material('treebank')

extract = Extract([Triple(Material("treebank"), Rel("Used_for"), Other_scientific_term("compact lexicon")), Triple(Material("treebank"), Rel("Compare"), Material("Penn WSJ")), Triple(Metric("order of magnitude"), Rel("Evaluate_for"), Material("Penn WSJ")), Triple(Material("Penn WSJ"), Rel("Evaluate_for"), Material("treebank"))])
pred: [['treebank', 'Used_for', 'compact lexicon'], ['treebank', 'Compare', 'Penn WSJ'], ['order of magnitude', 'Evaluate_for', 'Penn WSJ'], ['Penn WSJ', 'Evaluate_for', 'treebank']]
trues: [['compact lexicon', 'Part_of', 'treebank'], ['treebank', 'Compare', 'Penn WSJ']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.30357142857142855, 0.34492753623188405, 0.3229308005427408]
text: Training instances are generated from experience and observation , and a variant of GOLEM is used to learn action models from these instances .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('experience')
# Other_scientific_term('Training instances')
# Material('experience')
# Method('GOLEM')
# Material('observation')
# Other_scientific_term('Training instances')

extract = Extract([Triple(Material("experience"), Rel("Used_for"), Other_scientific_term("Training instances")), Triple(Material("experience"), Rel("Used_for"), Method("GOLEM")), Triple(Material("observation"), Rel("Used_for"), Other_scientific_term("Training instances"))])
pred: [['experience', 'Used_for', 'Training instances'], ['experience', 'Used_for', 'GOLEM'], ['observation', 'Used_for', 'Training instances']]
trues: [['GOLEM', 'Used_for', 'action models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3012658227848101, 0.3439306358381503, 0.3211875843454791]
text: We evaluate the proposed methods through several transliteration/backtransliteration experiments for English/Chinese and English/Japanese language pairs .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('methods')
# Task('transliteration/backtransliteration experiments')
# Material('English/Chinese')
# Material('language pairs')
# Material('English/Chinese')
# Material('English/Japanese')
# Material('English/Japanese')
# Material('language pairs')

extract = Extract([Triple(Generic("methods"), Rel("Evaluate_for"), Task("transliteration/backtransliteration experiments")), Triple(Material("English/Chinese"), Rel("Hyponym_of"), Material("language pairs")), Triple(Material("English/Chinese"), Rel("Conjunction"), Material("English/Japanese")), Triple(Material("English/Japanese"), Rel("Hyponym_of"), Material("language pairs"))])
pred: [['methods', 'Evaluate_for', 'transliteration/backtransliteration experiments'], ['English/Chinese', 'Hyponym_of', 'language pairs'], ['English/Chinese', 'Conjunction', 'English/Japanese'], ['English/Japanese', 'Hyponym_of', 'language pairs']]
trues: [['transliteration/backtransliteration', 'Evaluate_for', 'methods'], ['transliteration/backtransliteration', 'Used_for', 'English/Chinese and English/Japanese language pairs']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2982456140350877, 0.34195402298850575, 0.31860776439089694]
text: We propose a novel probabilistic framework for learning visual models of 3D object categories by combining appearance information and geometric constraints .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('framework')
# Method('visual models')
# Other_scientific_term('appearance information')
# Method('visual models')
# Other_scientific_term('appearance information')
# Other_scientific_term('geometric constraints')
# Other_scientific_term('geometric constraints')
# Method('visual models')

extract = Extract([Triple(Generic("framework"), Rel("Used_for"), Method("visual models")), Triple(Other_scientific_term("appearance information"), Rel("Used_for"), Method("visual models")), Triple(Other_scientific_term("appearance information"), Rel("Conjunction"), Other_scientific_term("geometric constraints")), Triple(Other_scientific_term("geometric constraints"), Rel("Used_for"), Method("visual models"))])
pred: [['framework', 'Used_for', 'visual models'], ['appearance information', 'Used_for', 'visual models'], ['appearance information', 'Conjunction', 'geometric constraints'], ['geometric constraints', 'Used_for', 'visual models']]
trues: [['probabilistic framework', 'Used_for', 'visual models of 3D object categories'], ['appearance information', 'Used_for', 'probabilistic framework'], ['appearance information', 'Conjunction', 'geometric constraints'], ['geometric constraints', 'Used_for', 'probabilistic framework']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.2977667493796526, 0.3409090909090909, 0.3178807947019867]
text: The purpose of this research is to test the efficacy of applying automated evaluation techniques , originally devised for the evaluation of human language learners , to the output of machine translation ( MT ) systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('automated evaluation techniques')
# Method('human language learners')
# Method('automated evaluation techniques')
# Method('machine translation ( MT ) systems')

extract = Extract([Triple(Method("automated evaluation techniques"), Rel("Used_for"), Method("human language learners")), Triple(Method("automated evaluation techniques"), Rel("Used_for"), Method("machine translation ( MT ) systems"))])
pred: [['automated evaluation techniques', 'Used_for', 'human language learners'], ['automated evaluation techniques', 'Used_for', 'machine translation ( MT ) systems']]
trues: [['automated evaluation techniques', 'Used_for', 'evaluation of human language learners']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2962962962962963, 0.33994334277620397, 0.31662269129287596]
text: Extension to affine projection enables reconstruction without estimating cameras .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Extension')
# Task('reconstruction')

extract = Extract([Triple(Method("Extension"), Rel("Used_for"), Task("reconstruction"))])
pred: [['Extension', 'Used_for', 'reconstruction']]
trues: [['affine projection', 'Used_for', 'reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2955665024630542, 0.3389830508474576, 0.3157894736842105]
text: In the case of natural speech signals , the method is shown to have separation accuracy better than the state-of-the-art methods .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('natural speech signals')
# Generic('method')
# Generic('method')
# Generic('methods')
# Metric('separation accuracy')
# Generic('method')
# Metric('separation accuracy')
# Generic('methods')

extract = Extract([Triple(Material("natural speech signals"), Rel("Used_for"), Generic("method")), Triple(Generic("method"), Rel("Compare"), Generic("methods")), Triple(Metric("separation accuracy"), Rel("Evaluate_for"), Generic("method")), Triple(Metric("separation accuracy"), Rel("Evaluate_for"), Generic("methods"))])
pred: [['natural speech signals', 'Used_for', 'method'], ['method', 'Compare', 'methods'], ['separation accuracy', 'Evaluate_for', 'method'], ['separation accuracy', 'Evaluate_for', 'methods']]
trues: [['method', 'Used_for', 'natural speech signals'], ['method', 'Compare', 'methods'], ['separation accuracy', 'Evaluate_for', 'method'], ['separation accuracy', 'Evaluate_for', 'methods'], ['methods', 'Used_for', 'natural speech signals']]
metrics_sample: [0.75, 0.6, 0.6666666666666665]
metrics_current: [0.3, 0.3426183844011142, 0.3198959687906372]
text: It is demonstrated qualitatively and quantitatively on a dataset of scenes and is suitable for current work in unsupervised object discovery without top-down knowledge .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('dataset of scenes')
# Generic('It')
# Task('unsupervised object discovery')
# Other_scientific_term('top-down knowledge')

extract = Extract([Triple(Material("dataset of scenes"), Rel("Evaluate_for"), Generic("It")), Triple(Task("unsupervised object discovery"), Rel("Used_for"), Other_scientific_term("top-down knowledge"))])
pred: [['dataset of scenes', 'Evaluate_for', 'It'], ['unsupervised object discovery', 'Used_for', 'top-down knowledge']]
trues: [['It', 'Used_for', 'unsupervised object discovery'], ['dataset of scenes', 'Evaluate_for', 'It']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30097087378640774, 0.34349030470914127, 0.3208279430789133]
text: Subpixel accuracy is achieved by considering several zero-crossings defined by the difference between pairs of unstructured patterns .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('zero-crossings')
# Metric('Subpixel accuracy')
# Other_scientific_term('zero-crossings')
# Other_scientific_term('unstructured patterns')

extract = Extract([Triple(Other_scientific_term("zero-crossings"), Rel("Used_for"), Metric("Subpixel accuracy")), Triple(Other_scientific_term("zero-crossings"), Rel("Used_for"), Other_scientific_term("unstructured patterns"))])
pred: [['zero-crossings', 'Used_for', 'Subpixel accuracy'], ['zero-crossings', 'Used_for', 'unstructured patterns']]
trues: [['zero-crossings', 'Used_for', 'Subpixel accuracy']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.30193236714975846, 0.3453038674033149, 0.32216494845360827]
text: We also show that a good-quality MT system can be built from scratch by starting with a very small parallel corpus ( 100,000 words ) and exploiting a large non-parallel corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('parallel corpus')
# Method('MT system')
# Material('non-parallel corpus')
# Method('MT system')

extract = Extract([Triple(Material("parallel corpus"), Rel("Used_for"), Method("MT system")), Triple(Material("non-parallel corpus"), Rel("Used_for"), Method("MT system"))])
pred: [['parallel corpus', 'Used_for', 'MT system'], ['non-parallel corpus', 'Used_for', 'MT system']]
trues: [['parallel corpus', 'Used_for', 'MT system'], ['parallel corpus', 'Conjunction', 'non-parallel corpus'], ['non-parallel corpus', 'Used_for', 'MT system']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.30528846153846156, 0.34794520547945207, 0.325224071702945]
text: We show promising results in both the detection and viewpoint classification tasks on these two challenging datasets .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('datasets')
# Task('detection and viewpoint classification tasks')
# Generic('datasets')
# Generic('tasks')
# Task('detection and viewpoint classification tasks')
# Generic('tasks')

extract = Extract([Triple(Generic("datasets"), Rel("Used_for"), Task("detection and viewpoint classification tasks")), Triple(Generic("datasets"), Rel("Used_for"), Generic("tasks")), Triple(Task("detection and viewpoint classification tasks"), Rel("Conjunction"), Generic("tasks"))])
pred: [['datasets', 'Used_for', 'detection and viewpoint classification tasks'], ['datasets', 'Used_for', 'tasks'], ['detection and viewpoint classification tasks', 'Conjunction', 'tasks']]
trues: [['datasets', 'Evaluate_for', 'detection and viewpoint classification tasks']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3031026252983294, 0.3469945355191257, 0.3235668789808917]
text: We argue that it is necessary to draw a line between generalizable semantic principles and domain-specific semantic information .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Other_scientific_term('generalizable semantic principles')
# Other_scientific_term('domain-specific semantic information')

extract = Extract([Triple(Other_scientific_term("generalizable semantic principles"), Rel("Compare"), Other_scientific_term("domain-specific semantic information"))])
pred: [['generalizable semantic principles', 'Compare', 'domain-specific semantic information']]
trues: [['generalizable semantic principles', 'Compare', 'domain-specific semantic information']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3047619047619048, 0.34877384196185285, 0.32528589580686146]
text: This paper presents the results of automatically inducing a Combinatory Categorial Grammar ( CCG ) lexicon from a Turkish dependency treebank .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('Turkish dependency treebank')
# Method('Combinatory Categorial Grammar ( CCG ) lexicon')
# Material('Turkish dependency treebank')
# Method('automatically inducing')

extract = Extract([Triple(Material("Turkish dependency treebank"), Rel("Used_for"), Method("Combinatory Categorial Grammar ( CCG ) lexicon")), Triple(Material("Turkish dependency treebank"), Rel("Used_for"), Method("automatically inducing"))])
pred: [['Turkish dependency treebank', 'Used_for', 'Combinatory Categorial Grammar ( CCG ) lexicon'], ['Turkish dependency treebank', 'Used_for', 'automatically inducing']]
trues: [['Combinatory Categorial Grammar ( CCG ) lexicon', 'Part_of', 'Turkish dependency treebank']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3033175355450237, 0.34782608695652173, 0.3240506329113924]
text: They improve the reconstruction results and enforce their consistency with a priori knowledge about object shape .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('They')
# Other_scientific_term('reconstruction')
# Generic('They')
# Other_scientific_term('priori knowledge')
# Other_scientific_term('object shape')
# Other_scientific_term('priori knowledge')

extract = Extract([Triple(Generic("They"), Rel("Used_for"), Other_scientific_term("reconstruction")), Triple(Generic("They"), Rel("Used_for"), Other_scientific_term("priori knowledge")), Triple(Other_scientific_term("object shape"), Rel("Feature_of"), Other_scientific_term("priori knowledge"))])
pred: [['They', 'Used_for', 'reconstruction'], ['They', 'Used_for', 'priori knowledge'], ['object shape', 'Feature_of', 'priori knowledge']]
trues: [['They', 'Used_for', 'reconstruction'], ['object shape', 'Feature_of', 'priori knowledge']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.3058823529411765, 0.35135135135135137, 0.32704402515723274]
text: On the internal side , liaisons are established between elements of the text and the graph by using broadly available resources such as a LO-English or better a L0-UNL dictionary , a morphosyntactic parser of L0 , and a canonical graph2tree transformation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('resources')
# Other_scientific_term('liaisons')
# Generic('resources')
# Other_scientific_term('text and the graph')
# Generic('dictionary')
# Generic('resources')
# Generic('morphosyntactic parser')
# Generic('resources')
# Generic('morphosyntactic parser')
# Other_scientific_term('L0')
# Other_scientific_term('graph2tree transformation')
# Generic('resources')

extract = Extract([Triple(Generic("resources"), Rel("Used_for"), Other_scientific_term("liaisons")), Triple(Generic("resources"), Rel("Used_for"), Other_scientific_term("text and the graph")), Triple(Generic("dictionary"), Rel("Conjunction"), Generic("resources")), Triple(Generic("morphosyntactic parser"), Rel("Used_for"), Generic("resources")), Triple(Generic("morphosyntactic parser"), Rel("Used_for"), Other_scientific_term("L0")), Triple(Other_scientific_term("graph2tree transformation"), Rel("Used_for"), Generic("resources"))])
pred: [['resources', 'Used_for', 'liaisons'], ['resources', 'Used_for', 'text and the graph'], ['dictionary', 'Conjunction', 'resources'], ['morphosyntactic parser', 'Used_for', 'resources'], ['morphosyntactic parser', 'Used_for', 'L0'], ['graph2tree transformation', 'Used_for', 'resources']]
trues: [['resources', 'Used_for', 'liaisons'], ['LO-English or better a L0-UNL dictionary', 'Hyponym_of', 'resources'], ['LO-English or better a L0-UNL dictionary', 'Conjunction', 'morphosyntactic parser of L0'], ['morphosyntactic parser of L0', 'Hyponym_of', 'resources'], ['morphosyntactic parser of L0', 'Conjunction', 'canonical graph2tree transformation'], ['canonical graph2tree transformation', 'Hyponym_of', 'resources']]
metrics_sample: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
metrics_current: [0.3039443155452436, 0.3484042553191489, 0.32465923172242867]
text: We analyzed eye gaze , head nods and attentional focus in the context of a direction-giving task .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Part_of')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('eye gaze')
# Other_scientific_term('head nods')
# Other_scientific_term('eye gaze')
# Task('direction-giving task')
# Other_scientific_term('head nods')
# Task('direction-giving task')
# Other_scientific_term('attentional focus')
# Task('direction-giving task')

extract = Extract([Triple(Other_scientific_term("eye gaze"), Rel("Conjunction"), Other_scientific_term("head nods")), Triple(Other_scientific_term("eye gaze"), Rel("Part_of"), Task("direction-giving task")), Triple(Other_scientific_term("head nods"), Rel("Part_of"), Task("direction-giving task")), Triple(Other_scientific_term("attentional focus"), Rel("Part_of"), Task("direction-giving task"))])
pred: [['eye gaze', 'Conjunction', 'head nods'], ['eye gaze', 'Part_of', 'direction-giving task'], ['head nods', 'Part_of', 'direction-giving task'], ['attentional focus', 'Part_of', 'direction-giving task']]
trues: [['eye gaze', 'Conjunction', 'head nods'], ['eye gaze', 'Part_of', 'direction-giving task'], ['head nods', 'Conjunction', 'attentional focus'], ['head nods', 'Part_of', 'direction-giving task'], ['attentional focus', 'Part_of', 'direction-giving task']]
metrics_sample: [1.0, 0.8, 0.888888888888889]
metrics_current: [0.3103448275862069, 0.3543307086614173, 0.33088235294117646]
text: The approach is validated with real image data , and with experimental results from a CID/DRAM analog array prototype in 0.5 cents m CMOS .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('real image data')
# Generic('approach')
# Generic('results')
# Generic('approach')
# Material('CID/DRAM analog array prototype')
# Generic('approach')

extract = Extract([Triple(Material("real image data"), Rel("Used_for"), Generic("approach")), Triple(Generic("results"), Rel("Evaluate_for"), Generic("approach")), Triple(Material("CID/DRAM analog array prototype"), Rel("Evaluate_for"), Generic("approach"))])
pred: [['real image data', 'Used_for', 'approach'], ['results', 'Evaluate_for', 'approach'], ['CID/DRAM analog array prototype', 'Evaluate_for', 'approach']]
trues: [['real image data', 'Evaluate_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3082191780821918, 0.35340314136125656, 0.32926829268292684]
text: This paper highlights a particular class of miscommunication -- reference problems -- by describing a case study and techniques for avoiding failures of reference .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Task('avoiding failures of reference')
# Other_scientific_term('miscommunication')

extract = Extract([Triple(Task("avoiding failures of reference"), Rel("Hyponym_of"), Other_scientific_term("miscommunication"))])
pred: [['avoiding failures of reference', 'Hyponym_of', 'miscommunication']]
trues: [['reference problems', 'Hyponym_of', 'miscommunication'], ['techniques', 'Used_for', 'failures of reference']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30751708428246016, 0.3515625, 0.32806804374240583]
text: Towards this goal , we also propose a novel Multiple Instance Learning ( MIL ) formulation for the problem based on the logistic softmax function of covariance-based region features within a MAP estimation framework .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Multiple Instance Learning ( MIL )')
# Generic('problem')
# Method('logistic softmax function')
# Generic('problem')
# Method('MAP estimation framework')
# Generic('problem')
# Other_scientific_term('covariance-based region features')
# Method('logistic softmax function')
# Other_scientific_term('covariance-based region features')
# Method('MAP estimation framework')

extract = Extract([Triple(Method("Multiple Instance Learning ( MIL )"), Rel("Used_for"), Generic("problem")), Triple(Method("logistic softmax function"), Rel("Used_for"), Generic("problem")), Triple(Method("MAP estimation framework"), Rel("Used_for"), Generic("problem")), Triple(Other_scientific_term("covariance-based region features"), Rel("Part_of"), Method("logistic softmax function")), Triple(Other_scientific_term("covariance-based region features"), Rel("Conjunction"), Method("MAP estimation framework"))])
pred: [['Multiple Instance Learning ( MIL )', 'Used_for', 'problem'], ['logistic softmax function', 'Used_for', 'problem'], ['MAP estimation framework', 'Used_for', 'problem'], ['covariance-based region features', 'Part_of', 'logistic softmax function'], ['covariance-based region features', 'Conjunction', 'MAP estimation framework']]
trues: [['logistic softmax function of covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'], ['MAP estimation framework', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30405405405405406, 0.34974093264248707, 0.32530120481927716]
text: This paper describes a method for incorporating priming into an incremental probabilistic parser .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('priming')
# Method('incremental probabilistic parser')

extract = Extract([Triple(Method("priming"), Rel("Used_for"), Method("incremental probabilistic parser"))])
pred: [['priming', 'Used_for', 'incremental probabilistic parser']]
trues: [['method', 'Used_for', 'priming'], ['priming', 'Used_for', 'incremental probabilistic parser']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3056179775280899, 0.35051546391752575, 0.32653061224489793]
text: In this paper , we study the problem of online action detection from the streaming skeleton data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('streaming skeleton data')
# Task('online action detection')

extract = Extract([Triple(Material("streaming skeleton data"), Rel("Used_for"), Task("online action detection"))])
pred: [['streaming skeleton data', 'Used_for', 'online action detection']]
trues: [['streaming skeleton data', 'Used_for', 'online action detection']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3071748878923767, 0.35218508997429304, 0.32814371257485037]
text: Under this framework , a joint source-channel transliteration model , also called n-gram transliteration model ( n-gram TM ) , is further proposed to model the transliteration process .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('framework')
# Method('joint source-channel transliteration model')
# Method('joint source-channel transliteration model')
# Method('n-gram transliteration model ( n-gram TM )')
# Method('n-gram transliteration model ( n-gram TM )')
# Task('transliteration process')

extract = Extract([Triple(Generic("framework"), Rel("Used_for"), Method("joint source-channel transliteration model")), Triple(Method("joint source-channel transliteration model"), Rel("Used_for"), Method("n-gram transliteration model ( n-gram TM )")), Triple(Method("n-gram transliteration model ( n-gram TM )"), Rel("Hyponym_of"), Task("transliteration process"))])
pred: [['framework', 'Used_for', 'joint source-channel transliteration model'], ['joint source-channel transliteration model', 'Used_for', 'n-gram transliteration model ( n-gram TM )'], ['n-gram transliteration model ( n-gram TM )', 'Hyponym_of', 'transliteration process']]
trues: [['framework', 'Used_for', 'joint source-channel transliteration model'], ['n-gram transliteration model ( n-gram TM )', 'Used_for', 'transliteration process']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.30734966592427615, 0.35294117647058826, 0.3285714285714286]
text: This paper gives an overall account of a prototype natural language question answering system , called Chat-80 .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Chat-80')
# Method('natural language question answering system')

extract = Extract([Triple(Method("Chat-80"), Rel("Hyponym_of"), Method("natural language question answering system"))])
pred: [['Chat-80', 'Hyponym_of', 'natural language question answering system']]
trues: [['Chat-80', 'Hyponym_of', 'natural language question answering system']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3088888888888889, 0.35459183673469385, 0.33016627078384797]
text: In this situation , the general method is to segment the raw corpus automatically using a word list , correct the output sentences by hand , and build a model from the segmented corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('word list')
# Method('general method')
# Other_scientific_term('word list')
# Other_scientific_term('raw corpus')
# Method('general method')
# Task('segmented corpus')
# Task('segmented corpus')
# Method('model')
# Task('segmented corpus')
# Task('building a model')

extract = Extract([Triple(Other_scientific_term("word list"), Rel("Used_for"), Method("general method")), Triple(Other_scientific_term("word list"), Rel("Used_for"), Other_scientific_term("raw corpus")), Triple(Method("general method"), Rel("Used_for"), Task("segmented corpus")), Triple(Task("segmented corpus"), Rel("Used_for"), Method("model")), Triple(Task("segmented corpus"), Rel("Used_for"), Task("building a model"))])
pred: [['word list', 'Used_for', 'general method'], ['word list', 'Used_for', 'raw corpus'], ['general method', 'Used_for', 'segmented corpus'], ['segmented corpus', 'Used_for', 'model'], ['segmented corpus', 'Used_for', 'building a model']]
trues: [['method', 'Used_for', 'raw corpus'], ['word list', 'Used_for', 'method'], ['segmented corpus', 'Used_for', 'model']]
metrics_sample: [0.2, 0.3333333333333333, 0.25]
metrics_current: [0.3076923076923077, 0.35443037974683544, 0.32941176470588235]
text: We investigate the verbal and nonverbal means for grounding , and propose a design for embodied conversational agents that relies on both kinds of signals to establish common ground in human-computer interaction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('verbal and nonverbal means')
# Task('grounding')
# Other_scientific_term('verbal and nonverbal means')
# Method('embodied conversational agents')

extract = Extract([Triple(Other_scientific_term("verbal and nonverbal means"), Rel("Used_for"), Task("grounding")), Triple(Other_scientific_term("verbal and nonverbal means"), Rel("Used_for"), Method("embodied conversational agents"))])
pred: [['verbal and nonverbal means', 'Used_for', 'grounding'], ['verbal and nonverbal means', 'Used_for', 'embodied conversational agents']]
trues: [['verbal and nonverbal means', 'Used_for', 'grounding'], ['design', 'Used_for', 'embodied conversational agents'], ['common ground', 'Used_for', 'human-computer interaction']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3085339168490153, 0.3542713567839196, 0.3298245614035088]
text: Multi-layer perceptrons ( MLPs ) performed much better than standard Gaussian mixture models ( GMMs ) for both our ANF-based and ON-based auditory features .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Multi-layer perceptrons ( MLPs )')
# Method('Gaussian mixture models ( GMMs )')
# Method('Multi-layer perceptrons ( MLPs )')
# Metric('ANF-based and ON-based auditory features')
# Method('Gaussian mixture models ( GMMs )')
# Metric('ANF-based and ON-based auditory features')
# Method('ANF-based and ON-based auditory features')
# Method('Multi-layer perceptrons ( MLPs )')
# Method('ANF-based and ON-based auditory features')
# Method('Gaussian mixture models ( GMMs )')

extract = Extract([Triple(Method("Multi-layer perceptrons ( MLPs )"), Rel("Compare"), Method("Gaussian mixture models ( GMMs )")), Triple(Method("Multi-layer perceptrons ( MLPs )"), Rel("Evaluate_for"), Metric("ANF-based and ON-based auditory features")), Triple(Method("Gaussian mixture models ( GMMs )"), Rel("Used_for"), Metric("ANF-based and ON-based auditory features")), Triple(Method("ANF-based and ON-based auditory features"), Rel("Used_for"), Method("Multi-layer perceptrons ( MLPs )")), Triple(Method("ANF-based and ON-based auditory features"), Rel("Used_for"), Method("Gaussian mixture models ( GMMs )"))])
pred: [['Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'], ['Multi-layer perceptrons ( MLPs )', 'Evaluate_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['ANF-based and ON-based auditory features', 'Used_for', 'Multi-layer perceptrons ( MLPs )'], ['ANF-based and ON-based auditory features', 'Used_for', 'Gaussian mixture models ( GMMs )']]
trues: [['Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'], ['Multi-layer perceptrons ( MLPs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ANF-based and ON-based auditory features']]
metrics_sample: [0.4, 0.6666666666666666, 0.5]
metrics_current: [0.30952380952380953, 0.3566084788029925, 0.3314020857473928]
text: We propose a novel metric learning formulation called Weighted Approximate Rank Component Analysis ( WARCA ) .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('Weighted Approximate Rank Component Analysis ( WARCA )')
# Method('metric learning formulation')

extract = Extract([Triple(Method("Weighted Approximate Rank Component Analysis ( WARCA )"), Rel("Hyponym_of"), Method("metric learning formulation"))])
pred: [['Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation']]
trues: [['Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31101511879049676, 0.3582089552238806, 0.3329479768786127]
text: On this challenging data set our system consistently demonstrated a nearly perfect recognition rate ( over 99.7 % on all three databases ) , significantly out-performing state-of-the-art commercial software and methods from the literature .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Compare')
# Rel('Compare')
# The candidate entities for this text are:
# Material('challenging data set')
# Generic('system')
# Material('challenging data set')
# Metric('recognition rate')
# Metric('recognition rate')
# Generic('system')
# Generic('system')
# Generic('software')
# Generic('system')
# Generic('methods')
# Generic('software')
# Generic('methods')

extract = Extract([Triple(Material("challenging data set"), Rel("Evaluate_for"), Generic("system")), Triple(Material("challenging data set"), Rel("Evaluate_for"), Metric("recognition rate")), Triple(Metric("recognition rate"), Rel("Evaluate_for"), Generic("system")), Triple(Generic("system"), Rel("Compare"), Generic("software")), Triple(Generic("system"), Rel("Compare"), Generic("methods")), Triple(Generic("software"), Rel("Compare"), Generic("methods"))])
pred: [['challenging data set', 'Evaluate_for', 'system'], ['challenging data set', 'Evaluate_for', 'recognition rate'], ['recognition rate', 'Evaluate_for', 'system'], ['system', 'Compare', 'software'], ['system', 'Compare', 'methods'], ['software', 'Compare', 'methods']]
trues: [['data set', 'Evaluate_for', 'system'], ['system', 'Compare', 'commercial software'], ['system', 'Compare', 'methods'], ['recognition rate', 'Evaluate_for', 'system'], ['commercial software', 'Conjunction', 'methods']]
metrics_sample: [0.3333333333333333, 0.4, 0.3636363636363636]
metrics_current: [0.31130063965884863, 0.35872235872235875, 0.33333333333333337]
text: In general , our CRF model yields a lower error rate than the HMM and Max-ent models on the NIST sentence boundary detection task in speech , although it is interesting to note that the best results are achieved by three-way voting among the classifiers .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('CRF model')
# Method('HMM and Max-ent models')
# Task('NIST sentence boundary detection task')
# Method('CRF model')
# Task('NIST sentence boundary detection task')
# Method('HMM and Max-ent models')
# Task('speech')
# Task('NIST sentence boundary detection task')
# Method('classifiers')
# Other_scientific_term('best results')

extract = Extract([Triple(Method("CRF model"), Rel("Compare"), Method("HMM and Max-ent models")), Triple(Task("NIST sentence boundary detection task"), Rel("Evaluate_for"), Method("CRF model")), Triple(Task("NIST sentence boundary detection task"), Rel("Evaluate_for"), Method("HMM and Max-ent models")), Triple(Task("speech"), Rel("Evaluate_for"), Task("NIST sentence boundary detection task")), Triple(Method("classifiers"), Rel("Used_for"), Other_scientific_term("best results"))])
pred: [['CRF model', 'Compare', 'HMM and Max-ent models'], ['NIST sentence boundary detection task', 'Evaluate_for', 'CRF model'], ['NIST sentence boundary detection task', 'Evaluate_for', 'HMM and Max-ent models'], ['speech', 'Evaluate_for', 'NIST sentence boundary detection task'], ['classifiers', 'Used_for', 'best results']]
trues: [['CRF model', 'Compare', 'HMM and Max-ent models'], ['error rate', 'Evaluate_for', 'CRF model'], ['error rate', 'Evaluate_for', 'HMM and Max-ent models'], ['NIST sentence boundary detection task', 'Evaluate_for', 'CRF model'], ['NIST sentence boundary detection task', 'Evaluate_for', 'HMM and Max-ent models'], ['speech', 'Feature_of', 'NIST sentence boundary detection task'], ['classifiers', 'Used_for', 'three-way voting']]
metrics_sample: [0.6, 0.42857142857142855, 0.5]
metrics_current: [0.3143459915611814, 0.35990338164251207, 0.3355855855855856]
text: These mattes are implied by a set of hypothesized object boundary fragments in the scene .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('hypothesized object boundary fragments')
# Other_scientific_term('mattes')

extract = Extract([Triple(Other_scientific_term("hypothesized object boundary fragments"), Rel("Used_for"), Other_scientific_term("mattes"))])
pred: [['hypothesized object boundary fragments', 'Used_for', 'mattes']]
trues: [['hypothesized object boundary fragments', 'Used_for', 'mattes']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3157894736842105, 0.3614457831325301, 0.3370786516853933]
text: This paper proposes to use a convolution kernel over parse trees to model syntactic structure information for relation extraction .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('convolution kernel over parse trees')
# Task('relation extraction')

extract = Extract([Triple(Other_scientific_term("convolution kernel over parse trees"), Rel("Used_for"), Task("relation extraction"))])
pred: [['convolution kernel over parse trees', 'Used_for', 'relation extraction']]
trues: [['convolution kernel over parse trees', 'Used_for', 'syntactic structure information'], ['syntactic structure information', 'Used_for', 'relation extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31512605042016806, 0.3597122302158273, 0.33594624860022393]
text: While sentence extraction as an approach to summarization has been shown to work in documents of certain genres , because of the conversational nature of email communication where utterances are made in relation to one made previously , sentence extraction may not capture the necessary segments of dialogue that would make a summary coherent .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('sentence extraction')
# Task('summarization')
# Material('documents of certain genres')
# Task('sentence extraction')
# Material('documents of certain genres')
# Material('email communication')
# Other_scientific_term('utterances')
# Other_scientific_term('segments of dialogue')

extract = Extract([Triple(Task("sentence extraction"), Rel("Used_for"), Task("summarization")), Triple(Material("documents of certain genres"), Rel("Used_for"), Task("sentence extraction")), Triple(Material("documents of certain genres"), Rel("Compare"), Material("email communication")), Triple(Other_scientific_term("utterances"), Rel("Used_for"), Other_scientific_term("segments of dialogue"))])
pred: [['sentence extraction', 'Used_for', 'summarization'], ['documents of certain genres', 'Used_for', 'sentence extraction'], ['documents of certain genres', 'Compare', 'email communication'], ['utterances', 'Used_for', 'segments of dialogue']]
trues: [['sentence extraction', 'Used_for', 'summarization']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.3145833333333333, 0.361244019138756, 0.3363028953229399]
text: Translations are produced by means of a beam-search decoder .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('beam-search decoder')
# Material('Translations')

extract = Extract([Triple(Method("beam-search decoder"), Rel("Used_for"), Material("Translations"))])
pred: [['beam-search decoder', 'Used_for', 'Translations']]
trues: [['beam-search decoder', 'Used_for', 'Translations']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.316008316008316, 0.3627684964200477, 0.3377777777777778]
text: Unfortunately , creating large datasets with pixel-level labels has been extremely costly due to the amount of human effort required .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('human effort')
# Material('large datasets')

extract = Extract([Triple(Other_scientific_term("human effort"), Rel("Used_for"), Material("large datasets"))])
pred: [['human effort', 'Used_for', 'large datasets']]
trues: [['pixel-level labels', 'Feature_of', 'large datasets']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3153526970954357, 0.3619047619047619, 0.33702882483370283]
text: In this paper , we discuss language model adaptation methods given a word list and a raw corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('word list')
# Method('language model adaptation methods')
# Material('raw corpus')
# Method('language model adaptation methods')

extract = Extract([Triple(Material("word list"), Rel("Used_for"), Method("language model adaptation methods")), Triple(Material("raw corpus"), Rel("Used_for"), Method("language model adaptation methods"))])
pred: [['word list', 'Used_for', 'language model adaptation methods'], ['raw corpus', 'Used_for', 'language model adaptation methods']]
trues: [['word list', 'Used_for', 'language model adaptation methods'], ['word list', 'Conjunction', 'raw corpus'], ['raw corpus', 'Used_for', 'language model adaptation methods']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.3181818181818182, 0.3640661938534279, 0.3395810363836825]
text: With relevant approach , we identify important contents by PageRank algorithm on the event map constructed from documents .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('PageRank algorithm')
# Other_scientific_term('important contents')
# Material('documents')
# Other_scientific_term('event map')

extract = Extract([Triple(Method("PageRank algorithm"), Rel("Used_for"), Other_scientific_term("important contents")), Triple(Material("documents"), Rel("Used_for"), Other_scientific_term("event map"))])
pred: [['PageRank algorithm', 'Used_for', 'important contents'], ['documents', 'Used_for', 'event map']]
trues: [['PageRank algorithm', 'Used_for', 'relevant approach'], ['event map', 'Used_for', 'PageRank algorithm'], ['documents', 'Used_for', 'event map']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.31893004115226337, 0.36384976525821594, 0.3399122807017544]
text: In particular there are three areas of novelty : ( i ) we show how a photometric model of image formation can be combined with a statistical model of generic face appearance variation , learnt offline , to generalize in the presence of extreme illumination changes ; ( ii ) we use the smoothness of geodesically local appearance manifold structure and a robust same-identity likelihood to achieve invariance to unseen head poses ; and ( iii ) we introduce an accurate video sequence '' reillumination '' algorithm to achieve robustness to face motion patterns in video .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('photometric model of image formation')
# Method('statistical model of generic face appearance variation')
# Method('statistical model of generic face appearance variation')
# Generic('extreme illumination changes')
# Method('smoothness of geodesically local appearance manifold structure')
# Method('invariance to unseen head poses')
# Method('same-identity likelihood')
# Method('invariance to unseen head poses')
# Generic('video sequence '' reillumination '' algorithm')
# Generic('robustness')
# Generic('face motion patterns')
# Generic('robustness')

extract = Extract([Triple(Method("photometric model of image formation"), Rel("Used_for"), Method("statistical model of generic face appearance variation")), Triple(Method("statistical model of generic face appearance variation"), Rel("Used_for"), Generic("extreme illumination changes")), Triple(Method("smoothness of geodesically local appearance manifold structure"), Rel("Used_for"), Method("invariance to unseen head poses")), Triple(Method("same-identity likelihood"), Rel("Used_for"), Method("invariance to unseen head poses")), Triple(Generic("video sequence '' reillumination '' algorithm"), Rel("Used_for"), Generic("robustness")), Triple(Generic("face motion patterns"), Rel("Conjunction"), Generic("robustness"))])
pred: [['photometric model of image formation', 'Used_for', 'statistical model of generic face appearance variation'], ['statistical model of generic face appearance variation', 'Used_for', 'extreme illumination changes'], ['smoothness of geodesically local appearance manifold structure', 'Used_for', 'invariance to unseen head poses'], ['same-identity likelihood', 'Used_for', 'invariance to unseen head poses'], ["video sequence '' reillumination '' algorithm", 'Used_for', 'robustness'], ['face motion patterns', 'Conjunction', 'robustness']]
trues: [['photometric model', 'Used_for', 'image formation'], ['photometric model', 'Conjunction', 'statistical model'], ['statistical model', 'Used_for', 'generic face appearance variation'], ['statistical model', 'Used_for', 'extreme illumination changes'], ['smoothness', 'Feature_of', 'geodesically local appearance manifold structure'], ['geodesically local appearance manifold structure', 'Conjunction', 'robust same-identity likelihood'], ['robustness', 'Evaluate_for', "video sequence '' reillumination '' algorithm"], ['face motion patterns', 'Feature_of', 'robustness'], ['face motion patterns', 'Part_of', 'video']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3150406504065041, 0.3563218390804598, 0.3344120819848975]
text: Our results show that MBR decoding can be used to tune statistical MT performance for specific loss functions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MBR decoding')
# Method('statistical MT')
# Method('statistical MT')
# Other_scientific_term('loss functions')

extract = Extract([Triple(Method("MBR decoding"), Rel("Used_for"), Method("statistical MT")), Triple(Method("statistical MT"), Rel("Used_for"), Other_scientific_term("loss functions"))])
pred: [['MBR decoding', 'Used_for', 'statistical MT'], ['statistical MT', 'Used_for', 'loss functions']]
trues: [['MBR decoding', 'Used_for', 'statistical MT'], ['MBR decoding', 'Used_for', 'loss functions']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3157894736842105, 0.35697940503432496, 0.3351235230934479]
text: FERRET utilizes a novel approach to Q/A known as predictive questioning which attempts to identify the questions ( and answers ) that users need by analyzing how a user interacts with a system while gathering information related to a particular scenario .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('predictive questioning')
# Method('FERRET')
# Other_scientific_term('user interactions')
# Method('predictive questioning')

extract = Extract([Triple(Method("predictive questioning"), Rel("Used_for"), Method("FERRET")), Triple(Other_scientific_term("user interactions"), Rel("Used_for"), Method("predictive questioning"))])
pred: [['predictive questioning', 'Used_for', 'FERRET'], ['user interactions', 'Used_for', 'predictive questioning']]
trues: [['approach', 'Used_for', 'FERRET'], ['approach', 'Used_for', 'Q/A']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31451612903225806, 0.3553530751708428, 0.3336898395721925]
text: Listen-Communicate-Show ( LCS ) is a new paradigm for human interaction with data sources .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('paradigm')
# Material('human interaction with data sources')

extract = Extract([Triple(Generic("paradigm"), Rel("Used_for"), Material("human interaction with data sources"))])
pred: [['paradigm', 'Used_for', 'human interaction with data sources']]
trues: [['Listen-Communicate-Show ( LCS )', 'Used_for', 'human interaction with data sources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31388329979879276, 0.35454545454545455, 0.3329775880469584]
text: This paper presents a novel representation for three-dimensional objects in terms of affine-invariant image patches and their spatial relationships .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('affine-invariant image patches')
# Other_scientific_term('three-dimensional objects')
# Other_scientific_term('spatial relationships')
# Other_scientific_term('three-dimensional objects')

extract = Extract([Triple(Other_scientific_term("affine-invariant image patches"), Rel("Used_for"), Other_scientific_term("three-dimensional objects")), Triple(Other_scientific_term("spatial relationships"), Rel("Used_for"), Other_scientific_term("three-dimensional objects"))])
pred: [['affine-invariant image patches', 'Used_for', 'three-dimensional objects'], ['spatial relationships', 'Used_for', 'three-dimensional objects']]
trues: [['representation', 'Used_for', 'three-dimensional objects'], ['affine-invariant image patches', 'Feature_of', 'three-dimensional objects'], ['spatial relationships', 'Feature_of', 'affine-invariant image patches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.312625250501002, 0.35214446952595935, 0.33121019108280253]
text: When the scene exhibits a persistent dynamic behavior in time , such an assumption is violated and detection performance deteriorates .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('persistent dynamic behavior')
# Material('scene')

extract = Extract([Triple(Other_scientific_term("persistent dynamic behavior"), Rel("Feature_of"), Material("scene"))])
pred: [['persistent dynamic behavior', 'Feature_of', 'scene']]
trues: [['persistent dynamic behavior', 'Feature_of', 'scene']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.314, 0.3536036036036036, 0.3326271186440678]
text: In practice , the current deep embedding methods use the Euclidean distance for the training and test .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Metric('Euclidean distance')
# Method('deep embedding methods')
# Metric('Euclidean distance')
# Task('training')
# Metric('Euclidean distance')
# Task('test')

extract = Extract([Triple(Metric("Euclidean distance"), Rel("Used_for"), Method("deep embedding methods")), Triple(Metric("Euclidean distance"), Rel("Used_for"), Task("training")), Triple(Metric("Euclidean distance"), Rel("Conjunction"), Task("test"))])
pred: [['Euclidean distance', 'Used_for', 'deep embedding methods'], ['Euclidean distance', 'Used_for', 'training'], ['Euclidean distance', 'Conjunction', 'test']]
trues: [['Euclidean distance', 'Used_for', 'deep embedding methods']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.31411530815109345, 0.3550561797752809, 0.33333333333333337]
text: This paper considers the problem of reconstructing the motion of a 3D articulated tree from 2D point correspondences subject to some temporal prior .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('problem')
# Task('reconstructing the motion of a 3D articulated tree')
# Other_scientific_term('2D point correspondences')
# Task('reconstructing the motion of a 3D articulated tree')
# Other_scientific_term('temporal prior')
# Task('reconstructing the motion of a 3D articulated tree')

extract = Extract([Triple(Generic("problem"), Rel("Used_for"), Task("reconstructing the motion of a 3D articulated tree")), Triple(Other_scientific_term("2D point correspondences"), Rel("Used_for"), Task("reconstructing the motion of a 3D articulated tree")), Triple(Other_scientific_term("temporal prior"), Rel("Feature_of"), Task("reconstructing the motion of a 3D articulated tree"))])
pred: [['problem', 'Used_for', 'reconstructing the motion of a 3D articulated tree'], ['2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree'], ['temporal prior', 'Feature_of', 'reconstructing the motion of a 3D articulated tree']]
trues: [['2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3142292490118577, 0.35650224215246634, 0.33403361344537813]
text: It would also be effective as a move selector and move sorter for game tree search and as a training tool for Go players .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('It')
# Method('move selector')
# Generic('It')
# Method('move sorter')
# Method('move sorter')
# Method('game tree search')
# Method('move sorter')
# Method('training tool')

extract = Extract([Triple(Generic("It"), Rel("Used_for"), Method("move selector")), Triple(Generic("It"), Rel("Used_for"), Method("move sorter")), Triple(Method("move sorter"), Rel("Used_for"), Method("game tree search")), Triple(Method("move sorter"), Rel("Used_for"), Method("training tool"))])
pred: [['It', 'Used_for', 'move selector'], ['It', 'Used_for', 'move sorter'], ['move sorter', 'Used_for', 'game tree search'], ['move sorter', 'Used_for', 'training tool']]
trues: [['It', 'Used_for', 'move selector'], ['It', 'Used_for', 'move sorter'], ['It', 'Used_for', 'training tool'], ['move selector', 'Conjunction', 'move sorter'], ['move selector', 'Used_for', 'game tree search'], ['move sorter', 'Used_for', 'game tree search'], ['training tool', 'Used_for', 'Go players']]
metrics_sample: [0.75, 0.42857142857142855, 0.5454545454545454]
metrics_current: [0.3176470588235294, 0.3576158940397351, 0.3364485981308411]
text: In addition to the high accuracy of the model , the use of smoothing in an unlexicalized parser allows us to better examine the interplay between smoothing and parsing results .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('smoothing')
# Method('unlexicalized parser')
# Method('smoothing')
# Other_scientific_term('interplay')
# Other_scientific_term('interplay')
# Task('parsing')

extract = Extract([Triple(Method("smoothing"), Rel("Used_for"), Method("unlexicalized parser")), Triple(Method("smoothing"), Rel("Used_for"), Other_scientific_term("interplay")), Triple(Other_scientific_term("interplay"), Rel("Feature_of"), Task("parsing"))])
pred: [['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Used_for', 'interplay'], ['interplay', 'Feature_of', 'parsing']]
trues: [['accuracy', 'Evaluate_for', 'model'], ['smoothing', 'Used_for', 'unlexicalized parser']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.31773879142300193, 0.35824175824175825, 0.3367768595041322]
text: The unique properties of tree-adjoining grammars ( TAG ) present a challenge for the application of TAGs beyond the limited confines of syntax , for instance , to the task of semantic interpretation or automatic translation of natural language .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('tree-adjoining grammars ( TAG )')
# Generic('task')
# Method('tree-adjoining grammars ( TAG )')
# Task('semantic interpretation')
# Task('semantic interpretation')
# Generic('task')
# Task('semantic interpretation')
# Task('automatic translation of natural language')
# Task('automatic translation of natural language')
# Generic('task')

extract = Extract([Triple(Method("tree-adjoining grammars ( TAG )"), Rel("Used_for"), Generic("task")), Triple(Method("tree-adjoining grammars ( TAG )"), Rel("Used_for"), Task("semantic interpretation")), Triple(Task("semantic interpretation"), Rel("Hyponym_of"), Generic("task")), Triple(Task("semantic interpretation"), Rel("Conjunction"), Task("automatic translation of natural language")), Triple(Task("automatic translation of natural language"), Rel("Hyponym_of"), Generic("task"))])
pred: [['tree-adjoining grammars ( TAG )', 'Used_for', 'task'], ['tree-adjoining grammars ( TAG )', 'Used_for', 'semantic interpretation'], ['semantic interpretation', 'Hyponym_of', 'task'], ['semantic interpretation', 'Conjunction', 'automatic translation of natural language'], ['automatic translation of natural language', 'Hyponym_of', 'task']]
trues: [['TAGs', 'Used_for', 'semantic interpretation'], ['TAGs', 'Used_for', 'automatic translation of natural language'], ['semantic interpretation', 'Conjunction', 'automatic translation of natural language']]
metrics_sample: [0.2, 0.3333333333333333, 0.25]
metrics_current: [0.3166023166023166, 0.35807860262008734, 0.3360655737704918]
text: We propose a novel step toward the unsupervised seg-mentation of whole objects by combining '' hints '' of partial scene segmentation offered by multiple soft , binary mattes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('unsupervised seg-mentation of whole objects')
# Other_scientific_term('soft, binary mattes')
# Other_scientific_term('hints')
# Method('unsupervised seg-mentation of whole objects')
# Other_scientific_term('hints')
# Other_scientific_term('soft, binary mattes')

extract = Extract([Triple(Method("unsupervised seg-mentation of whole objects"), Rel("Used_for"), Other_scientific_term("soft, binary mattes")), Triple(Other_scientific_term("hints"), Rel("Used_for"), Method("unsupervised seg-mentation of whole objects")), Triple(Other_scientific_term("hints"), Rel("Conjunction"), Other_scientific_term("soft, binary mattes"))])
pred: [['unsupervised seg-mentation of whole objects', 'Used_for', 'soft, binary mattes'], ['hints', 'Used_for', 'unsupervised seg-mentation of whole objects'], ['hints', 'Conjunction', 'soft, binary mattes']]
trues: [['partial scene segmentation', 'Used_for', 'unsupervised seg-mentation of whole objects'], ['soft , binary mattes', 'Used_for', 'partial scene segmentation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31477927063339733, 0.3565217391304348, 0.3343527013251784]
text: The problem of blind separation of underdetermined instantaneous mixtures of independent signals is addressed through a method relying on nonstationarity of the original signals .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('nonstationarity of the original signals')
# Generic('method')
# Other_scientific_term('nonstationarity of the original signals')
# Other_scientific_term('underdetermined instantaneous mixtures of independent signals')

extract = Extract([Triple(Other_scientific_term("nonstationarity of the original signals"), Rel("Used_for"), Generic("method")), Triple(Other_scientific_term("nonstationarity of the original signals"), Rel("Used_for"), Other_scientific_term("underdetermined instantaneous mixtures of independent signals"))])
pred: [['nonstationarity of the original signals', 'Used_for', 'method'], ['nonstationarity of the original signals', 'Used_for', 'underdetermined instantaneous mixtures of independent signals']]
trues: [['method', 'Used_for', 'blind separation of underdetermined instantaneous mixtures of independent signals'], ['nonstationarity', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3135755258126195, 0.354978354978355, 0.332994923857868]
text: Related work applies MINPRAN to complex range and intensity data 23 ] .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('MINPRAN')
# Material('range and intensity data')

extract = Extract([Triple(Method("MINPRAN"), Rel("Used_for"), Material("range and intensity data"))])
pred: [['MINPRAN', 'Used_for', 'range and intensity data']]
trues: [['MINPRAN', 'Used_for', 'complex range'], ['MINPRAN', 'Used_for', 'intensity data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31297709923664124, 0.35344827586206895, 0.3319838056680162]
text: We present a scanning method that recovers dense sub-pixel camera-projector correspondence without requiring any photometric calibration nor preliminary knowledge of their relative geometry .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('scanning method')
# Other_scientific_term('sub-pixel camera-projector correspondence')
# Other_scientific_term('photometric calibration')
# Method('scanning method')
# Other_scientific_term('photometric calibration')
# Other_scientific_term('relative geometry')
# Other_scientific_term('relative geometry')
# Method('scanning method')
# Other_scientific_term('relative geometry')
# Other_scientific_term('relative geometry')

extract = Extract([Triple(Method("scanning method"), Rel("Used_for"), Other_scientific_term("sub-pixel camera-projector correspondence")), Triple(Other_scientific_term("photometric calibration"), Rel("Used_for"), Method("scanning method")), Triple(Other_scientific_term("photometric calibration"), Rel("Used_for"), Other_scientific_term("relative geometry")), Triple(Other_scientific_term("relative geometry"), Rel("Conjunction"), Method("scanning method")), Triple(Other_scientific_term("relative geometry"), Rel("Feature_of"), Other_scientific_term("relative geometry"))])
pred: [['scanning method', 'Used_for', 'sub-pixel camera-projector correspondence'], ['photometric calibration', 'Used_for', 'scanning method'], ['photometric calibration', 'Used_for', 'relative geometry'], ['relative geometry', 'Conjunction', 'scanning method'], ['relative geometry', 'Feature_of', 'relative geometry']]
trues: [['scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31001890359168244, 0.35268817204301073, 0.329979879275654]
text: A language learning experiment showed that assessors can differentiate native from non-native language essays in less than 100 words .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('language learning experiment')
# Task('assessors')
# Metric('words')
# Task('assessors')

extract = Extract([Triple(Task("language learning experiment"), Rel("Evaluate_for"), Task("assessors")), Triple(Metric("words"), Rel("Evaluate_for"), Task("assessors"))])
pred: [['language learning experiment', 'Evaluate_for', 'assessors'], ['words', 'Evaluate_for', 'assessors']]
trues: [['language learning', 'Evaluate_for', 'assessors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3088512241054614, 0.351931330472103, 0.32898696088264795]
text: The automated segmentation of images into semantically meaningful parts requires shape information since low-level feature analysis alone often fails to reach this goal .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('shape information')
# Task('automated segmentation of images')
# Other_scientific_term('shape information')
# Other_scientific_term('semantically meaningful parts')
# Other_scientific_term('low-level feature analysis')
# Task('automated segmentation of images')
# Other_scientific_term('low-level feature analysis')
# Other_scientific_term('semantically meaningful parts')
# Other_scientific_term('low-level feature analysis')
# Other_scientific_term('shape information')

extract = Extract([Triple(Other_scientific_term("shape information"), Rel("Used_for"), Task("automated segmentation of images")), Triple(Other_scientific_term("shape information"), Rel("Used_for"), Other_scientific_term("semantically meaningful parts")), Triple(Other_scientific_term("low-level feature analysis"), Rel("Used_for"), Task("automated segmentation of images")), Triple(Other_scientific_term("low-level feature analysis"), Rel("Used_for"), Other_scientific_term("semantically meaningful parts")), Triple(Other_scientific_term("low-level feature analysis"), Rel("Conjunction"), Other_scientific_term("shape information"))])
pred: [['shape information', 'Used_for', 'automated segmentation of images'], ['shape information', 'Used_for', 'semantically meaningful parts'], ['low-level feature analysis', 'Used_for', 'automated segmentation of images'], ['low-level feature analysis', 'Used_for', 'semantically meaningful parts'], ['low-level feature analysis', 'Conjunction', 'shape information']]
trues: [['images', 'Used_for', 'automated segmentation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30597014925373134, 0.3511777301927195, 0.3270189431704885]
text: A new algorithm is proposed for novel view generation in one-to-one teleconferencing applications .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('algorithm')
# Task('novel view generation')
# Task('one-to-one teleconferencing applications')
# Task('novel view generation')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Task("novel view generation")), Triple(Task("one-to-one teleconferencing applications"), Rel("Feature_of"), Task("novel view generation"))])
pred: [['algorithm', 'Used_for', 'novel view generation'], ['one-to-one teleconferencing applications', 'Feature_of', 'novel view generation']]
trues: [['algorithm', 'Used_for', 'novel view generation'], ['novel view generation', 'Used_for', 'one-to-one teleconferencing applications']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3066914498141264, 0.35181236673773986, 0.32770605759682225]
text: In contrast , object pose estimation using these approaches has received relatively less attention .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approaches')
# Task('object pose estimation')

extract = Extract([Triple(Generic("approaches"), Rel("Used_for"), Task("object pose estimation"))])
pred: [['approaches', 'Used_for', 'object pose estimation']]
trues: [['approaches', 'Used_for', 'object pose estimation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3079777365491651, 0.35319148936170214, 0.32903865213082256]
text: In this paper we present a new UV procedure with two major features : a ) Confidence tests are applied to decoded string hypotheses obtained from using word and garbage models that represent OOV words and noises .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Confidence tests')
# Method('UV procedure')
# Method('word and garbage models')
# Method('UV procedure')

extract = Extract([Triple(Method("Confidence tests"), Rel("Used_for"), Method("UV procedure")), Triple(Method("word and garbage models"), Rel("Used_for"), Method("UV procedure"))])
pred: [['Confidence tests', 'Used_for', 'UV procedure'], ['word and garbage models', 'Used_for', 'UV procedure']]
trues: [['Confidence tests', 'Used_for', 'decoded string hypotheses'], ['noises', 'Conjunction', 'OOV words']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3068391866913124, 0.3516949152542373, 0.32773938795656465]
text: We provide a principled and provable solution for this problem ; it is parameterless and requires no data insights .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('it')
# Generic('problem')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Generic("problem"))])
pred: [['it', 'Used_for', 'problem']]
trues: [['principled and provable solution', 'Used_for', 'problem']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3062730627306273, 0.35095137420718814, 0.32709359605911326]
text: Given an object model and a black-box measure of similarity between the model and candidate targets , we consider visual object tracking as a numerical optimization problem .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('object model')
# Task('visual object tracking')
# Other_scientific_term('black-box measure of similarity')
# Method('numerical optimization problem')

extract = Extract([Triple(Other_scientific_term("object model"), Rel("Used_for"), Task("visual object tracking")), Triple(Other_scientific_term("black-box measure of similarity"), Rel("Used_for"), Method("numerical optimization problem"))])
pred: [['object model', 'Used_for', 'visual object tracking'], ['black-box measure of similarity', 'Used_for', 'numerical optimization problem']]
trues: [['numerical optimization problem', 'Used_for', 'visual object tracking']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30514705882352944, 0.350210970464135, 0.3261296660117879]
text: Thus , in this paper , we study the problem of robust PCA with side information , where both prior structure and features of entities are exploited for recovery .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('prior structure')
# Other_scientific_term('side information')
# Other_scientific_term('prior structure')
# Other_scientific_term('features of entities')
# Other_scientific_term('features of entities')
# Other_scientific_term('side information')
# Generic('features')
# Task('recovery')

extract = Extract([Triple(Other_scientific_term("prior structure"), Rel("Part_of"), Other_scientific_term("side information")), Triple(Other_scientific_term("prior structure"), Rel("Conjunction"), Other_scientific_term("features of entities")), Triple(Other_scientific_term("features of entities"), Rel("Part_of"), Other_scientific_term("side information")), Triple(Generic("features"), Rel("Used_for"), Task("recovery"))])
pred: [['prior structure', 'Part_of', 'side information'], ['prior structure', 'Conjunction', 'features of entities'], ['features of entities', 'Part_of', 'side information'], ['features', 'Used_for', 'recovery']]
trues: [['side information', 'Used_for', 'robust PCA'], ['prior structure', 'Conjunction', 'features of entities'], ['prior structure', 'Used_for', 'recovery'], ['features of entities', 'Used_for', 'recovery']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.30474452554744524, 0.3493723849372385, 0.3255360623781676]
text: Using this approach , we extract parallel data from large Chinese , Arabic , and English non-parallel newspaper corpora .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Other_scientific_term('parallel data')
# Material('Chinese, Arabic, and English non-parallel newspaper corpora')
# Other_scientific_term('parallel data')
# Material('Chinese, Arabic, and English non-parallel newspaper corpora')
# Material('large Chinese, Arabic, and English non-parallel newspaper corpora')
# Material('large Chinese, Arabic, and English non-parallel newspaper corpora')
# Other_scientific_term('parallel data')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Other_scientific_term("parallel data")), Triple(Material("Chinese, Arabic, and English non-parallel newspaper corpora"), Rel("Used_for"), Other_scientific_term("parallel data")), Triple(Material("Chinese, Arabic, and English non-parallel newspaper corpora"), Rel("Conjunction"), Material("large Chinese, Arabic, and English non-parallel newspaper corpora")), Triple(Material("large Chinese, Arabic, and English non-parallel newspaper corpora"), Rel("Used_for"), Other_scientific_term("parallel data"))])
pred: [['approach', 'Used_for', 'parallel data'], ['Chinese, Arabic, and English non-parallel newspaper corpora', 'Used_for', 'parallel data'], ['Chinese, Arabic, and English non-parallel newspaper corpora', 'Conjunction', 'large Chinese, Arabic, and English non-parallel newspaper corpora'], ['large Chinese, Arabic, and English non-parallel newspaper corpora', 'Used_for', 'parallel data']]
trues: [['approach', 'Used_for', 'parallel data'], ['parallel data', 'Part_of', 'Chinese , Arabic , and English non-parallel newspaper corpora']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.30434782608695654, 0.35, 0.3255813953488372]
text: These models simulate the reading time advantage for parallel structures found in human data , and also yield a small increase in overall parsing accuracy .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('models')
# Other_scientific_term('reading time advantage')
# Generic('models')
# Task('parsing')

extract = Extract([Triple(Generic("models"), Rel("Used_for"), Other_scientific_term("reading time advantage")), Triple(Generic("models"), Rel("Used_for"), Task("parsing"))])
pred: [['models', 'Used_for', 'reading time advantage'], ['models', 'Used_for', 'parsing']]
trues: [['parallel structures', 'Part_of', 'human data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30324909747292417, 0.3492723492723493, 0.3246376811594203]
text: We evaluate across two corpora ( conversational telephone speech and broadcast news speech ) on both human transcriptions and speech recognition output .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('corpora ( conversational telephone speech and broadcast news speech )')
# Generic('We')
# Material('human transcriptions')
# Generic('We')
# Material('human transcriptions')
# Material('speech recognition output')
# Material('speech recognition output')
# Generic('We')

extract = Extract([Triple(Material("corpora ( conversational telephone speech and broadcast news speech )"), Rel("Evaluate_for"), Generic("We")), Triple(Material("human transcriptions"), Rel("Evaluate_for"), Generic("We")), Triple(Material("human transcriptions"), Rel("Conjunction"), Material("speech recognition output")), Triple(Material("speech recognition output"), Rel("Evaluate_for"), Generic("We"))])
pred: [['corpora ( conversational telephone speech and broadcast news speech )', 'Evaluate_for', 'We'], ['human transcriptions', 'Evaluate_for', 'We'], ['human transcriptions', 'Conjunction', 'speech recognition output'], ['speech recognition output', 'Evaluate_for', 'We']]
trues: [['corpora', 'Evaluate_for', 'human transcriptions'], ['corpora', 'Evaluate_for', 'speech recognition output'], ['conversational telephone speech', 'Hyponym_of', 'corpora'], ['conversational telephone speech', 'Conjunction', 'broadcast news speech'], ['broadcast news speech', 'Hyponym_of', 'corpora'], ['human transcriptions', 'Conjunction', 'speech recognition output']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.30286738351254483, 0.3470225872689938, 0.32344497607655504]
text: To a large extent , these statistics reflect semantic constraints and thus are used to disambiguate anaphora references and syntactic ambiguities .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('statistics')
# Task('disambiguate anaphora references')
# Generic('statistics')
# Task('syntactic ambiguities')
# Task('disambiguate anaphora references')
# Task('syntactic ambiguities')

extract = Extract([Triple(Generic("statistics"), Rel("Used_for"), Task("disambiguate anaphora references")), Triple(Generic("statistics"), Rel("Used_for"), Task("syntactic ambiguities")), Triple(Task("disambiguate anaphora references"), Rel("Conjunction"), Task("syntactic ambiguities"))])
pred: [['statistics', 'Used_for', 'disambiguate anaphora references'], ['statistics', 'Used_for', 'syntactic ambiguities'], ['disambiguate anaphora references', 'Conjunction', 'syntactic ambiguities']]
trues: [['semantic constraints', 'Used_for', 'anaphora references'], ['semantic constraints', 'Used_for', 'syntactic ambiguities'], ['anaphora references', 'Conjunction', 'syntactic ambiguities']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30124777183600715, 0.3448979591836735, 0.32159847764034255]
text: To evaluate our proposed model , we build a large streaming video dataset with annotations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('streaming video dataset')
# Generic('model')

extract = Extract([Triple(Material("streaming video dataset"), Rel("Used_for"), Generic("model"))])
pred: [['streaming video dataset', 'Used_for', 'model']]
trues: [['streaming video dataset', 'Evaluate_for', 'model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30071174377224197, 0.34419551934826886, 0.32098765432098764]
text: The seven categories of the scheme are based on rhetorical moves of argumentation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('scheme')
# Other_scientific_term('rhetorical moves of argumentation')

extract = Extract([Triple(Generic("scheme"), Rel("Used_for"), Other_scientific_term("rhetorical moves of argumentation"))])
pred: [['scheme', 'Used_for', 'rhetorical moves of argumentation']]
trues: [['rhetorical moves of argumentation', 'Used_for', 'scheme']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30017761989342806, 0.3434959349593496, 0.32037914691943126]
text: Structural or numerical constraints can then be added locally to the reconstruction process through a constrained optimization scheme .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('constrained optimization scheme')
# Task('reconstruction process')

extract = Extract([Triple(Method("constrained optimization scheme"), Rel("Used_for"), Task("reconstruction process"))])
pred: [['constrained optimization scheme', 'Used_for', 'reconstruction process']]
trues: [['Structural or numerical constraints', 'Used_for', 'reconstruction process'], ['constrained optimization scheme', 'Used_for', 'Structural or numerical constraints']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.299645390070922, 0.34210526315789475, 0.31947069943289225]
text: Therefore , the study presented in this paper may be useful in inspiring new designs of deep models for person re-identification .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('study')
# Method('deep models')
# Method('deep models')
# Task('person re-identification')

extract = Extract([Triple(Generic("study"), Rel("Used_for"), Method("deep models")), Triple(Method("deep models"), Rel("Used_for"), Task("person re-identification"))])
pred: [['study', 'Used_for', 'deep models'], ['deep models', 'Used_for', 'person re-identification']]
trues: [['deep models', 'Used_for', 'person re-identification']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3003533568904594, 0.3434343434343434, 0.32045240339302544]
text: We present a novel model-based approach to recover the shapes and the poses of transparent objects from known motion .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model-based approach')
# Task('recover the shapes and the poses of transparent objects')
# Other_scientific_term('known motion')
# Generic('model-based approach')

extract = Extract([Triple(Generic("model-based approach"), Rel("Used_for"), Task("recover the shapes and the poses of transparent objects")), Triple(Other_scientific_term("known motion"), Rel("Used_for"), Generic("model-based approach"))])
pred: [['model-based approach', 'Used_for', 'recover the shapes and the poses of transparent objects'], ['known motion', 'Used_for', 'model-based approach']]
trues: [['model-based approach', 'Used_for', 'shapes and the poses of transparent objects'], ['known motion', 'Used_for', 'shapes and the poses of transparent objects']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2992957746478873, 0.3420523138832998, 0.3192488262910798]
text: To improve topical blog post retrieval we incorporate textual credibility indicators in the retrieval process .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('textual credibility indicators')
# Task('topical blog post retrieval')
# Other_scientific_term('textual credibility indicators')
# Task('retrieval process')

extract = Extract([Triple(Other_scientific_term("textual credibility indicators"), Rel("Used_for"), Task("topical blog post retrieval")), Triple(Other_scientific_term("textual credibility indicators"), Rel("Part_of"), Task("retrieval process"))])
pred: [['textual credibility indicators', 'Used_for', 'topical blog post retrieval'], ['textual credibility indicators', 'Part_of', 'retrieval process']]
trues: [['textual credibility indicators', 'Used_for', 'topical blog post retrieval'], ['textual credibility indicators', 'Part_of', 'retrieval process']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3017543859649123, 0.34468937875751504, 0.32179607109448083]
text: At the core of the externally digital architecture is a high-density , low-power analog array performing binary-binary partial matrix-vector multiplication .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('high-density, low-power analog array')
# Method('externally digital architecture')
# Method('high-density, low-power analog array')
# Other_scientific_term('binary-binary partial matrix-vector multiplication')

extract = Extract([Triple(Method("high-density, low-power analog array"), Rel("Part_of"), Method("externally digital architecture")), Triple(Method("high-density, low-power analog array"), Rel("Used_for"), Other_scientific_term("binary-binary partial matrix-vector multiplication"))])
pred: [['high-density, low-power analog array', 'Part_of', 'externally digital architecture'], ['high-density, low-power analog array', 'Used_for', 'binary-binary partial matrix-vector multiplication']]
trues: [['high-density , low-power analog array', 'Part_of', 'externally digital architecture'], ['binary-binary partial matrix-vector multiplication', 'Used_for', 'high-density , low-power analog array']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3006993006993007, 0.34331337325349304, 0.320596458527493]
text: There are four language pairs currently supported by GLOSSER : English-Bulgarian , English-Estonian , English-Hungarian and French-Dutch .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('language pairs')
# Method('GLOSSER')

extract = Extract([Triple(Material("language pairs"), Rel("Used_for"), Method("GLOSSER"))])
pred: [['language pairs', 'Used_for', 'GLOSSER']]
trues: [['language pairs', 'Used_for', 'GLOSSER'], ['English-Bulgarian', 'Hyponym_of', 'language pairs'], ['English-Bulgarian', 'Conjunction', 'English-Estonian'], ['English-Estonian', 'Hyponym_of', 'language pairs'], ['English-Estonian', 'Conjunction', 'English-Hungarian'], ['English-Hungarian', 'Hyponym_of', 'language pairs'], ['English-Hungarian', 'Conjunction', 'French-Dutch'], ['French-Dutch', 'Hyponym_of', 'language pairs']]
metrics_sample: [1.0, 0.125, 0.2222222222222222]
metrics_current: [0.3019197207678883, 0.33988212180746563, 0.31977818853974116]
text: We have previously introduced a statistical model describing the generating process of speech F0 contours , based on the discrete-time version of the Fujisaki model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('statistical model')
# Other_scientific_term('generating process of speech F0 contours')
# Method('discrete-time version of the Fujisaki model')
# Method('statistical model')

extract = Extract([Triple(Method("statistical model"), Rel("Used_for"), Other_scientific_term("generating process of speech F0 contours")), Triple(Method("discrete-time version of the Fujisaki model"), Rel("Used_for"), Method("statistical model"))])
pred: [['statistical model', 'Used_for', 'generating process of speech F0 contours'], ['discrete-time version of the Fujisaki model', 'Used_for', 'statistical model']]
trues: [['statistical model', 'Used_for', 'speech F0 contours'], ['Fujisaki model', 'Used_for', 'statistical model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3008695652173913, 0.3385518590998043, 0.3186003683241252]
text: Thus the ASR system is designed to deal with what we refer to as Word Spotting and Noise Spotting capabilities .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('ASR system')
# Task('Word Spotting and Noise Spotting capabilities')
# Task('Word Spotting')
# Task('Word Spotting and Noise Spotting capabilities')
# Task('Word Spotting')
# Task('Noise Spotting')
# Task('Noise Spotting')
# Task('Word Spotting and Noise Spotting capabilities')

extract = Extract([Triple(Method("ASR system"), Rel("Used_for"), Task("Word Spotting and Noise Spotting capabilities")), Triple(Task("Word Spotting"), Rel("Hyponym_of"), Task("Word Spotting and Noise Spotting capabilities")), Triple(Task("Word Spotting"), Rel("Conjunction"), Task("Noise Spotting")), Triple(Task("Noise Spotting"), Rel("Hyponym_of"), Task("Word Spotting and Noise Spotting capabilities"))])
pred: [['ASR system', 'Used_for', 'Word Spotting and Noise Spotting capabilities'], ['Word Spotting', 'Hyponym_of', 'Word Spotting and Noise Spotting capabilities'], ['Word Spotting', 'Conjunction', 'Noise Spotting'], ['Noise Spotting', 'Hyponym_of', 'Word Spotting and Noise Spotting capabilities']]
trues: [['ASR system', 'Used_for', 'Word Spotting'], ['ASR system', 'Used_for', 'Noise Spotting capabilities']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2987910189982729, 0.33723196881091616, 0.31684981684981683]
text: This model was shown to be more appropriate for blind separation of natural speech signals .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Task('blind separation of natural speech signals')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Task("blind separation of natural speech signals"))])
pred: [['model', 'Used_for', 'blind separation of natural speech signals']]
trues: [['model', 'Used_for', 'blind separation of natural speech signals .']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2982758620689655, 0.33657587548638135, 0.3162705667276051]
text: We evaluate the quality of the extracted data by showing that it improves the performance of a state-of-the-art statistical machine translation system .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('quality')
# Other_scientific_term('extracted data')
# Method('statistical machine translation system')
# Other_scientific_term('extracted data')

extract = Extract([Triple(Metric("quality"), Rel("Evaluate_for"), Other_scientific_term("extracted data")), Triple(Method("statistical machine translation system"), Rel("Used_for"), Other_scientific_term("extracted data"))])
pred: [['quality', 'Evaluate_for', 'extracted data'], ['statistical machine translation system', 'Used_for', 'extracted data']]
trues: [['it', 'Used_for', 'statistical machine translation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2972508591065292, 0.3359223300970874, 0.31540565177757524]
text: Our main result is a first-order upper bound on the distance between any approximate joint triangularizer of the matrices in M ' and any exact joint triangularizer of the matrices in M .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('exact joint triangularizer')
# Other_scientific_term('matrices')
# Other_scientific_term('approximate joint triangularizer')
# Other_scientific_term('matrices')

extract = Extract([Triple(Other_scientific_term("exact joint triangularizer"), Rel("Used_for"), Other_scientific_term("matrices")), Triple(Other_scientific_term("approximate joint triangularizer"), Rel("Used_for"), Other_scientific_term("matrices"))])
pred: [['exact joint triangularizer', 'Used_for', 'matrices'], ['approximate joint triangularizer', 'Used_for', 'matrices']]
trues: [['approximate joint triangularizer', 'Conjunction', 'exact joint triangularizer']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2962328767123288, 0.33527131782945735, 0.3145454545454546]
text: The result theoretically justifies the effectiveness of features in robust PCA .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('features')
# Method('robust PCA')

extract = Extract([Triple(Other_scientific_term("features"), Rel("Used_for"), Method("robust PCA"))])
pred: [['features', 'Used_for', 'robust PCA']]
trues: [['features', 'Feature_of', 'robust PCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29572649572649573, 0.3346228239845261, 0.3139745916515427]
text: A generative framework is used for learning a model that captures the relative position of parts within each of the discretized viewpoints .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('generative framework')
# Generic('model')
# Material('discretized viewpoints')
# Generic('parts')

extract = Extract([Triple(Method("generative framework"), Rel("Used_for"), Generic("model")), Triple(Material("discretized viewpoints"), Rel("Used_for"), Generic("parts"))])
pred: [['generative framework', 'Used_for', 'model'], ['discretized viewpoints', 'Used_for', 'parts']]
trues: [['generative framework', 'Used_for', 'model']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.29642248722316866, 0.3359073359073359, 0.31493212669683257]
text: Kernel space embedding decouples the training and prediction costs from the data dimension and enables us to plug inarbitrary distance measures which are more natural for the features .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Kernel space embedding')
# Other_scientific_term('distance measures')

extract = Extract([Triple(Method("Kernel space embedding"), Rel("Used_for"), Other_scientific_term("distance measures"))])
pred: [['Kernel space embedding', 'Used_for', 'distance measures']]
trues: [['Kernel space embedding', 'Used_for', 'inarbitrary distance measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29591836734693877, 0.3352601156069364, 0.3143631436314363]
text: In this paper , we present our work on the detection of question-answer pairs in an email conversation for the task of email summarization .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('detection of question-answer pairs')
# Task('email summarization')
# Task('email summarization')
# Task('detection of question-answer pairs')
# Material('email conversation')
# Task('detection of question-answer pairs')

extract = Extract([Triple(Task("detection of question-answer pairs"), Rel("Used_for"), Task("email summarization")), Triple(Task("email summarization"), Rel("Part_of"), Task("detection of question-answer pairs")), Triple(Material("email conversation"), Rel("Used_for"), Task("detection of question-answer pairs"))])
pred: [['detection of question-answer pairs', 'Used_for', 'email summarization'], ['email summarization', 'Part_of', 'detection of question-answer pairs'], ['email conversation', 'Used_for', 'detection of question-answer pairs']]
trues: [['detection of question-answer pairs', 'Used_for', 'email summarization'], ['email conversation', 'Used_for', 'detection of question-answer pairs']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.29780033840947545, 0.3378119001919386, 0.3165467625899281]
text: Our study reveals that the proposed method not only reduces an extensive system development effort but also improves the transliteration accuracy significantly .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('method')
# Task('extensive system development')
# Metric('transliteration accuracy')
# Generic('method')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("extensive system development")), Triple(Metric("transliteration accuracy"), Rel("Evaluate_for"), Generic("method"))])
pred: [['method', 'Used_for', 'extensive system development'], ['transliteration accuracy', 'Evaluate_for', 'method']]
trues: [['transliteration accuracy', 'Evaluate_for', 'method']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2984822934232715, 0.3390804597701149, 0.3174887892376681]
text: OA improved phase locking in the auditory nerve ( AN ) and raised ASR accuracy for features derived from AN fibers ( ANFs ) .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('OA')
# Other_scientific_term('auditory nerve ( AN )')
# Method('OA')
# Other_scientific_term('features')

extract = Extract([Triple(Method("OA"), Rel("Used_for"), Other_scientific_term("auditory nerve ( AN )")), Triple(Method("OA"), Rel("Used_for"), Other_scientific_term("features"))])
pred: [['OA', 'Used_for', 'auditory nerve ( AN )'], ['OA', 'Used_for', 'features']]
trues: [['OA', 'Used_for', 'phase locking in the auditory nerve ( AN )'], ['OA', 'Used_for', 'features'], ['ASR accuracy', 'Evaluate_for', 'features'], ['AN fibers ( ANFs )', 'Used_for', 'features']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.2991596638655462, 0.33840304182509506, 0.3175735950044603]
text: We investigate the problem of learning to predict moves in the board game of Go from game records of expert players .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('game records')
# Task('learning to predict moves')

extract = Extract([Triple(Material("game records"), Rel("Used_for"), Task("learning to predict moves"))])
pred: [['game records', 'Used_for', 'learning to predict moves']]
trues: [['game records of expert players', 'Used_for', 'board game of Go']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2986577181208054, 0.3377609108159393, 0.31700801424755126]
text: Our approach to the Multi-lingual Evaluation Task ( MET ) for Japanese text is to consider the given task as a morphological analysis problem in Japanese .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Multi-lingual Evaluation Task ( MET )')
# Material('Japanese text')
# Task('morphological analysis problem')
# Task('Multi-lingual Evaluation Task ( MET )')

extract = Extract([Triple(Task("Multi-lingual Evaluation Task ( MET )"), Rel("Used_for"), Material("Japanese text")), Triple(Task("morphological analysis problem"), Rel("Used_for"), Task("Multi-lingual Evaluation Task ( MET )"))])
pred: [['Multi-lingual Evaluation Task ( MET )', 'Used_for', 'Japanese text'], ['morphological analysis problem', 'Used_for', 'Multi-lingual Evaluation Task ( MET )']]
trues: [['approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET )'], ['Multi-lingual Evaluation Task ( MET )', 'Used_for', 'Japanese text'], ['morphological analysis problem', 'Used_for', 'task'], ['Japanese', 'Used_for', 'morphological analysis problem']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.2993311036789298, 0.3370998116760829, 0.3170947741364039]
text: Although hidden Markov models ( HMMs ) provide a suitable generative model for field structured text , general unsupervised HMM learning fails to learn useful structure in either of our domains .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('hidden Markov models ( HMMs )')
# Task('generative model')
# Method('generative model')
# Material('field structured text')
# Method('unsupervised HMM learning')
# Task('structure')

extract = Extract([Triple(Method("hidden Markov models ( HMMs )"), Rel("Used_for"), Task("generative model")), Triple(Method("generative model"), Rel("Used_for"), Material("field structured text")), Triple(Method("unsupervised HMM learning"), Rel("Used_for"), Task("structure"))])
pred: [['hidden Markov models ( HMMs )', 'Used_for', 'generative model'], ['generative model', 'Used_for', 'field structured text'], ['unsupervised HMM learning', 'Used_for', 'structure']]
trues: [['hidden Markov models ( HMMs )', 'Used_for', 'generative model'], ['generative model', 'Used_for', 'field structured text']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.3011647254575707, 0.3395872420262664, 0.3192239858906526]
text: Among other experiments , we demonstrate the potential of our approach by boosting the performance of three learned confidence measures on the KITTI2012 dataset by simply training them on a vast amount of automatically generated training data rather than a limited amount of laser ground truth data .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# The candidate entities for this text are:
# Material('KITTI2012 dataset')
# Method('learned confidence measures')
# Material('laser ground truth data')
# Method('learned confidence measures')
# Material('automatically generated training data')
# Method('learned confidence measures')
# Material('automatically generated training data')
# Material('laser ground truth data')
# Material('automatically generated training data')
# Material('laser ground truth data')

extract = Extract([Triple(Material("KITTI2012 dataset"), Rel("Evaluate_for"), Method("learned confidence measures")), Triple(Material("laser ground truth data"), Rel("Evaluate_for"), Method("learned confidence measures")), Triple(Material("automatically generated training data"), Rel("Used_for"), Method("learned confidence measures")), Triple(Material("automatically generated training data"), Rel("Used_for"), Material("laser ground truth data")), Triple(Material("automatically generated training data"), Rel("Compare"), Material("laser ground truth data"))])
pred: [['KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'], ['laser ground truth data', 'Evaluate_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'laser ground truth data'], ['automatically generated training data', 'Compare', 'laser ground truth data']]
trues: [['approach', 'Used_for', 'learned confidence measures'], ['KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'them'], ['laser ground truth data', 'Compare', 'automatically generated training data']]
metrics_sample: [0.2, 0.25, 0.22222222222222224]
metrics_current: [0.30033003300330036, 0.33891992551210426, 0.31846019247594054]
text: This reflects contemporary methods for unsupervised object discovery from groups of images , and it allows us to define intuitive evaluation met-rics for our sets of segmentations based on the accurate and parsimonious delineation of scene objects .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('unsupervised object discovery')
# Material('groups of images')
# Metric('evaluation met-rics')
# Other_scientific_term('segmentations')

extract = Extract([Triple(Method("unsupervised object discovery"), Rel("Used_for"), Material("groups of images")), Triple(Metric("evaluation met-rics"), Rel("Evaluate_for"), Other_scientific_term("segmentations"))])
pred: [['unsupervised object discovery', 'Used_for', 'groups of images'], ['evaluation met-rics', 'Evaluate_for', 'segmentations']]
trues: [['contemporary methods', 'Used_for', 'unsupervised object discovery']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2993421052631579, 0.3382899628252788, 0.31762652705061084]
text: b ) The UV procedure is based on three different confidence tests , two based on acoustic measures and one founded on linguistic information , applied in a hierarchical structure .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('tests')
# Method('UV procedure')
# Other_scientific_term('acoustic measures')
# Generic('tests')
# Other_scientific_term('acoustic measures')
# Other_scientific_term('linguistic information')
# Other_scientific_term('linguistic information')
# Generic('tests')

extract = Extract([Triple(Generic("tests"), Rel("Used_for"), Method("UV procedure")), Triple(Other_scientific_term("acoustic measures"), Rel("Used_for"), Generic("tests")), Triple(Other_scientific_term("acoustic measures"), Rel("Conjunction"), Other_scientific_term("linguistic information")), Triple(Other_scientific_term("linguistic information"), Rel("Used_for"), Generic("tests"))])
pred: [['tests', 'Used_for', 'UV procedure'], ['acoustic measures', 'Used_for', 'tests'], ['acoustic measures', 'Conjunction', 'linguistic information'], ['linguistic information', 'Used_for', 'tests']]
trues: [['confidence tests', 'Used_for', 'UV procedure'], ['confidence tests', 'Used_for', 'hierarchical structure'], ['two', 'Hyponym_of', 'confidence tests'], ['acoustic measures', 'Used_for', 'two'], ['one', 'Hyponym_of', 'confidence tests'], ['linguistic information', 'Used_for', 'one']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2973856209150327, 0.33455882352941174, 0.314878892733564]
text: This distribution has numerous applications in computer Go , including serving as an efficient stand-alone Go player .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('distribution')
# Task('computer Go')
# Generic('distribution')
# Method('stand-alone Go player')

extract = Extract([Triple(Generic("distribution"), Rel("Used_for"), Task("computer Go")), Triple(Generic("distribution"), Rel("Used_for"), Method("stand-alone Go player"))])
pred: [['distribution', 'Used_for', 'computer Go'], ['distribution', 'Used_for', 'stand-alone Go player']]
trues: [['distribution', 'Used_for', 'computer Go']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2980456026058632, 0.3357798165137615, 0.31578947368421056]
text: Our goal is to learn a Mahalanobis distance by minimizing a loss defined on the weighted sum of the precision at different ranks .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Metric('Mahalanobis distance')
# Generic('goal')
# Metric('Mahalanobis distance')
# Other_scientific_term('weighted sum of the precision at different ranks')

extract = Extract([Triple(Metric("Mahalanobis distance"), Rel("Used_for"), Generic("goal")), Triple(Metric("Mahalanobis distance"), Rel("Used_for"), Other_scientific_term("weighted sum of the precision at different ranks"))])
pred: [['Mahalanobis distance', 'Used_for', 'goal'], ['Mahalanobis distance', 'Used_for', 'weighted sum of the precision at different ranks']]
trues: [['loss', 'Used_for', 'Mahalanobis distance'], ['weighted sum', 'Feature_of', 'precision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29707792207792205, 0.33455210237659966, 0.31470335339638866]
text: Moreover , a cost zero solution always exists and can only be excluded by hard budget constraints .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('hard budget constraints')
# Generic('it')

extract = Extract([Triple(Other_scientific_term("hard budget constraints"), Rel("Used_for"), Generic("it"))])
pred: [['hard budget constraints', 'Used_for', 'it']]
trues: [['hard budget constraints', 'Used_for', 'cost zero solution']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2965964343598055, 0.33394160583941607, 0.3141630901287554]
text: Examples are given that demonstrate the robustness of the new algorithm to spatial and temporal artefacts for long stereo video streams .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('algorithm')
# Other_scientific_term('spatial and temporal artefacts')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Other_scientific_term("spatial and temporal artefacts"))])
pred: [['algorithm', 'Used_for', 'spatial and temporal artefacts']]
trues: [['robustness', 'Evaluate_for', 'algorithm'], ['algorithm', 'Used_for', 'spatial and temporal artefacts'], ['spatial and temporal artefacts', 'Used_for', 'long stereo video streams']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.2977346278317152, 0.3339382940108893, 0.31479897348160824]
text: For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('parser')
# Other_scientific_term('non-LR grammars')
# Other_scientific_term('memo-functions')
# Generic('parser')

extract = Extract([Triple(Generic("parser"), Rel("Used_for"), Other_scientific_term("non-LR grammars")), Triple(Other_scientific_term("memo-functions"), Rel("Used_for"), Generic("parser"))])
pred: [['parser', 'Used_for', 'non-LR grammars'], ['memo-functions', 'Used_for', 'parser']]
trues: [['time-complexity', 'Evaluate_for', 'parser'], ['parser', 'Used_for', 'non-LR grammars'], ['memo-functions', 'Used_for', 'parser']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.3, 0.33574007220216606, 0.31686541737649065]
text: A critical step in encoding sound for neuronal processing occurs when the analog pressure wave is coded into discrete nerve-action potentials .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('analog pressure wave')
# Other_scientific_term('nerve-action potentials')

extract = Extract([Triple(Other_scientific_term("analog pressure wave"), Rel("Part_of"), Other_scientific_term("nerve-action potentials"))])
pred: [['analog pressure wave', 'Part_of', 'nerve-action potentials']]
trues: [['encoding sound', 'Used_for', 'neuronal processing'], ['discrete nerve-action potentials', 'Used_for', 'analog pressure wave']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2995169082125604, 0.3345323741007194, 0.31605777400169927]
text: In this paper we propose a logical formalism , which , among other things , is suitable for representing determiners without forcing a particular interpretation when their meaning is still not clear .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('logical formalism')
# Other_scientific_term('determiners')

extract = Extract([Triple(Method("logical formalism"), Rel("Used_for"), Other_scientific_term("determiners"))])
pred: [['logical formalism', 'Used_for', 'determiners']]
trues: [['logical formalism', 'Used_for', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30064308681672025, 0.3357271095152603, 0.31721798134011875]
text: A domain independent model is proposed for the automated interpretation of nominal compounds in English .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('domain independent model')
# Task('automated interpretation of nominal compounds')

extract = Extract([Triple(Method("domain independent model"), Rel("Used_for"), Task("automated interpretation of nominal compounds"))])
pred: [['domain independent model', 'Used_for', 'automated interpretation of nominal compounds']]
trues: [['domain independent model', 'Used_for', 'automated interpretation of nominal compounds'], ['English', 'Feature_of', 'nominal compounds']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3017656500802568, 0.3363148479427549, 0.31810490693739424]
text: However , when the object becomes partially or totally occluded , such local tracking is prone to failure , especially when common prediction techniques like the Kalman filter do not provide a good estimate of object parameters in future frames .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('local tracking')
# Task('object tracking')
# Method('prediction techniques')
# Method('local tracking')
# Method('Kalman filter')
# Method('prediction techniques')

extract = Extract([Triple(Method("local tracking"), Rel("Used_for"), Task("object tracking")), Triple(Method("prediction techniques"), Rel("Used_for"), Method("local tracking")), Triple(Method("Kalman filter"), Rel("Used_for"), Method("prediction techniques"))])
pred: [['local tracking', 'Used_for', 'object tracking'], ['prediction techniques', 'Used_for', 'local tracking'], ['Kalman filter', 'Used_for', 'prediction techniques']]
trues: [['Kalman filter', 'Part_of', 'prediction techniques']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3003194888178914, 0.3357142857142857, 0.3170320404721753]
text: A general procedure for the estimation and quantization of these cycloidal motion parameters for arbitrary handwriting is presented .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('general procedure')
# Other_scientific_term('cycloidal motion parameters')

extract = Extract([Triple(Generic("general procedure"), Rel("Used_for"), Other_scientific_term("cycloidal motion parameters"))])
pred: [['general procedure', 'Used_for', 'cycloidal motion parameters']]
trues: [['cycloidal motion parameters', 'Used_for', 'arbitrary handwriting']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29984051036682613, 0.33511586452762926, 0.31649831649831656]
text: Compared to the exhaustive procedure that thus far is the state-of-the-art for cascade evaluation , the proposed method requires fewer evaluations of the classifier functions , thereby speeding up the search .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Method('exhaustive procedure')
# Generic('method')
# Task('cascade evaluation')
# Generic('method')
# Task('cascade evaluation')

extract = Extract([Triple(Generic("method"), Rel("Compare"), Method("exhaustive procedure")), Triple(Generic("method"), Rel("Used_for"), Task("cascade evaluation")), Triple(Generic("method"), Rel("Used_for"), Task("cascade evaluation"))])
pred: [['method', 'Compare', 'exhaustive procedure'], ['method', 'Used_for', 'cascade evaluation'], ['method', 'Used_for', 'cascade evaluation']]
trues: [['exhaustive procedure', 'Used_for', 'cascade evaluation'], ['exhaustive procedure', 'Compare', 'method'], ['method', 'Used_for', 'search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2988871224165342, 0.3333333333333333, 0.31517183570829843]
text: We present a new method for detecting interest points using histogram information .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('histogram information')
# Task('detecting interest points')

extract = Extract([Triple(Other_scientific_term("histogram information"), Rel("Used_for"), Task("detecting interest points"))])
pred: [['histogram information', 'Used_for', 'detecting interest points']]
trues: [['method', 'Used_for', 'detecting interest points'], ['histogram information', 'Used_for', 'detecting interest points']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3, 0.3339222614840989, 0.31605351170568563]
text: We evaluate several proposals for constraining them , basing our assessment on computational tractability and explanatory adequacy .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('them')
# Generic('proposals')
# Generic('assessment')
# Generic('them')
# Generic('assessment')
# Metric('computational tractability')
# Metric('computational tractability')
# Metric('explanatory adequacy')

extract = Extract([Triple(Generic("them"), Rel("Evaluate_for"), Generic("proposals")), Triple(Generic("assessment"), Rel("Conjunction"), Generic("them")), Triple(Generic("assessment"), Rel("Evaluate_for"), Metric("computational tractability")), Triple(Metric("computational tractability"), Rel("Conjunction"), Metric("explanatory adequacy"))])
pred: [['them', 'Evaluate_for', 'proposals'], ['assessment', 'Conjunction', 'them'], ['assessment', 'Evaluate_for', 'computational tractability'], ['computational tractability', 'Conjunction', 'explanatory adequacy']]
trues: [['computational tractability and explanatory adequacy', 'Evaluate_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2981072555205047, 0.3333333333333333, 0.3147377185678601]
text: This allows us to use our method to act not only as a faster procedure for cascade evaluation , but also as a tool to perform efficient branch-and-bound object detection with nonlinear quality functions , in particular kernel-ized support vector machines .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('method')
# Task('faster procedure for cascade evaluation')
# Generic('method')
# Task('branch-and-bound object detection')
# Generic('tool')
# Other_scientific_term('nonlinear quality functions')
# Method('kernel-ized support vector machines')
# Other_scientific_term('nonlinear quality functions')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("faster procedure for cascade evaluation")), Triple(Generic("method"), Rel("Used_for"), Task("branch-and-bound object detection")), Triple(Generic("tool"), Rel("Used_for"), Other_scientific_term("nonlinear quality functions")), Triple(Method("kernel-ized support vector machines"), Rel("Hyponym_of"), Other_scientific_term("nonlinear quality functions"))])
pred: [['method', 'Used_for', 'faster procedure for cascade evaluation'], ['method', 'Used_for', 'branch-and-bound object detection'], ['tool', 'Used_for', 'nonlinear quality functions'], ['kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions']]
trues: [['method', 'Used_for', 'cascade evaluation'], ['method', 'Used_for', 'branch-and-bound object detection'], ['nonlinear quality functions', 'Used_for', 'branch-and-bound object detection'], ['kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.2993730407523511, 0.3345008756567426, 0.31596360628618697]
text: Towards the modeling of the dynamic characteristics , optical flow is computed and utilized as a feature in a higher dimensional space .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('optical flow')
# Task('modeling of the dynamic characteristics')
# Other_scientific_term('optical flow')
# Other_scientific_term('feature')

extract = Extract([Triple(Other_scientific_term("optical flow"), Rel("Used_for"), Task("modeling of the dynamic characteristics")), Triple(Other_scientific_term("optical flow"), Rel("Used_for"), Other_scientific_term("feature"))])
pred: [['optical flow', 'Used_for', 'modeling of the dynamic characteristics'], ['optical flow', 'Used_for', 'feature']]
trues: [['optical flow', 'Used_for', 'modeling of the dynamic characteristics'], ['optical flow', 'Used_for', 'feature'], ['feature', 'Used_for', 'modeling of the dynamic characteristics'], ['higher dimensional space', 'Feature_of', 'feature']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3015625, 0.3356521739130435, 0.3176954732510288]
text: Indeed , automatic evaluations need high-quality data that allow the comparison of both automatic and human translations .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('high-quality data')
# Metric('automatic evaluations')
# Material('high-quality data')
# Material('automatic and human translations')
# Material('automatic and human translations')
# Metric('automatic evaluations')

extract = Extract([Triple(Material("high-quality data"), Rel("Evaluate_for"), Metric("automatic evaluations")), Triple(Material("high-quality data"), Rel("Used_for"), Material("automatic and human translations")), Triple(Material("automatic and human translations"), Rel("Conjunction"), Metric("automatic evaluations"))])
pred: [['high-quality data', 'Evaluate_for', 'automatic evaluations'], ['high-quality data', 'Used_for', 'automatic and human translations'], ['automatic and human translations', 'Conjunction', 'automatic evaluations']]
trues: [['high-quality data', 'Evaluate_for', 'automatic evaluations']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.30171073094867806, 0.3368055555555556, 0.31829368334700575]
text: In this paper , a novel framework for machine transliteration/backtransliteration that allows us to carry out direct orthographical mapping ( DOM ) between two different languages is presented .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('framework')
# Task('machine transliteration/backtransliteration')
# Generic('framework')
# Other_scientific_term('direct orthographical mapping ( DOM )')
# Other_scientific_term('direct orthographical mapping ( DOM )')
# Material('two different languages')

extract = Extract([Triple(Generic("framework"), Rel("Used_for"), Task("machine transliteration/backtransliteration")), Triple(Generic("framework"), Rel("Used_for"), Other_scientific_term("direct orthographical mapping ( DOM )")), Triple(Other_scientific_term("direct orthographical mapping ( DOM )"), Rel("Feature_of"), Material("two different languages"))])
pred: [['framework', 'Used_for', 'machine transliteration/backtransliteration'], ['framework', 'Used_for', 'direct orthographical mapping ( DOM )'], ['direct orthographical mapping ( DOM )', 'Feature_of', 'two different languages']]
trues: [['framework', 'Used_for', 'machine transliteration/backtransliteration'], ['machine transliteration/backtransliteration', 'Used_for', 'direct orthographical mapping ( DOM )']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3018575851393189, 0.3373702422145329, 0.31862745098039214]
text: Language resource quality is crucial in NLP .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('Language resource quality')
# Task('NLP')

extract = Extract([Triple(Material("Language resource quality"), Rel("Used_for"), Task("NLP"))])
pred: [['Language resource quality', 'Used_for', 'NLP']]
trues: [['Language resource quality', 'Feature_of', 'NLP']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30139103554868624, 0.33678756476683935, 0.31810766721044037]
text: This paper describes FERRET , an interactive question-answering ( Q/A ) system designed to address the challenges of integrating automatic Q/A applications into real-world environments .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Method('FERRET')
# Method('interactive question-answering ( Q/A ) system')
# Method('FERRET')
# Task('automatic Q/A applications')
# Task('automatic Q/A applications')
# Generic('real-world environments')

extract = Extract([Triple(Method("FERRET"), Rel("Hyponym_of"), Method("interactive question-answering ( Q/A ) system")), Triple(Method("FERRET"), Rel("Used_for"), Task("automatic Q/A applications")), Triple(Task("automatic Q/A applications"), Rel("Part_of"), Generic("real-world environments"))])
pred: [['FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'], ['FERRET', 'Used_for', 'automatic Q/A applications'], ['automatic Q/A applications', 'Part_of', 'real-world environments']]
trues: [['FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'], ['FERRET', 'Used_for', 'integrating automatic Q/A applications into real-world environments']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.30153846153846153, 0.3373493975903614, 0.31844029244516653]
text: This motor control representation enables successful word spotting and matching of cursive scripts .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('motor control representation')
# Task('word spotting')

extract = Extract([Triple(Method("motor control representation"), Rel("Used_for"), Task("word spotting"))])
pred: [['motor control representation', 'Used_for', 'word spotting']]
trues: [['motor control representation', 'Used_for', 'word spotting'], ['motor control representation', 'Used_for', 'matching of cursive scripts'], ['word spotting', 'Conjunction', 'matching of cursive scripts']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.30261136712749614, 0.3373287671232877, 0.3190283400809717]
text: We report experiments conducted on a multilingual corpus to estimate the number of analogies among the sentences that it contains .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('multilingual corpus')
# Generic('experiments')
# Material('multilingual corpus')
# Task('analogies')

extract = Extract([Triple(Material("multilingual corpus"), Rel("Used_for"), Generic("experiments")), Triple(Material("multilingual corpus"), Rel("Used_for"), Task("analogies"))])
pred: [['multilingual corpus', 'Used_for', 'experiments'], ['multilingual corpus', 'Used_for', 'analogies']]
trues: [['multilingual corpus', 'Evaluate_for', 'analogies']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3016845329249617, 0.3367521367521368, 0.31825525040387725]
text: In this theory , discourse structure is composed of three separate but interrelated components : the structure of the sequence of utterances ( called the linguistic structure ) , a structure of purposes ( called the intentional structure ) , and the state of focus of attention ( called the attentional state ) .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('linguistic structure')
# Other_scientific_term('discourse structure')
# Other_scientific_term('linguistic structure')
# Other_scientific_term('intentional structure')
# Other_scientific_term('intentional structure')
# Other_scientific_term('discourse structure')
# Other_scientific_term('intentional structure')
# Other_scientific_term('attentional state')
# Other_scientific_term('attentional state')
# Other_scientific_term('discourse structure')

extract = Extract([Triple(Other_scientific_term("linguistic structure"), Rel("Part_of"), Other_scientific_term("discourse structure")), Triple(Other_scientific_term("linguistic structure"), Rel("Conjunction"), Other_scientific_term("intentional structure")), Triple(Other_scientific_term("intentional structure"), Rel("Part_of"), Other_scientific_term("discourse structure")), Triple(Other_scientific_term("intentional structure"), Rel("Conjunction"), Other_scientific_term("attentional state")), Triple(Other_scientific_term("attentional state"), Rel("Part_of"), Other_scientific_term("discourse structure"))])
pred: [['linguistic structure', 'Part_of', 'discourse structure'], ['linguistic structure', 'Conjunction', 'intentional structure'], ['intentional structure', 'Part_of', 'discourse structure'], ['intentional structure', 'Conjunction', 'attentional state'], ['attentional state', 'Part_of', 'discourse structure']]
trues: [['components', 'Part_of', 'discourse structure'], ['linguistic structure', 'Part_of', 'components'], ['linguistic structure', 'Conjunction', 'intentional structure'], ['intentional structure', 'Part_of', 'components'], ['intentional structure', 'Conjunction', 'attentional state'], ['attentional state', 'Part_of', 'components']]
metrics_sample: [0.4, 0.3333333333333333, 0.3636363636363636]
metrics_current: [0.30243161094224924, 0.33671742808798644, 0.31865492393915135]
text: This paper solves a specialized regression problem to obtain sampling probabilities for records in databases .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Task('regression problem')
# Other_scientific_term('sampling probabilities')

extract = Extract([Triple(Task("regression problem"), Rel("Used_for"), Other_scientific_term("sampling probabilities"))])
pred: [['regression problem', 'Used_for', 'sampling probabilities']]
trues: [['specialized regression problem', 'Used_for', 'sampling probabilities'], ['sampling probabilities', 'Used_for', 'records'], ['records', 'Part_of', 'databases']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30197268588770865, 0.335016835016835, 0.31763766959297685]
text: The objects can be complex in that they may be composed of multiple layers with different refractive indices .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('refractive indices')
# Other_scientific_term('layers')

extract = Extract([Triple(Other_scientific_term("refractive indices"), Rel("Used_for"), Other_scientific_term("layers"))])
pred: [['refractive indices', 'Used_for', 'layers']]
trues: [['multiple layers', 'Part_of', 'they'], ['refractive indices', 'Feature_of', 'multiple layers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3015151515151515, 0.3338926174496644, 0.3168789808917198]
text: We present a novel approach for automatically acquiring English topic signatures .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Material('English topic signatures')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Material("English topic signatures"))])
pred: [['approach', 'Used_for', 'English topic signatures']]
trues: [['approach', 'Used_for', 'automatically acquiring English topic signatures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3010590015128593, 0.3333333333333333, 0.3163751987281399]
text: The experimental tests are carried out on the Verbmobil task ( German-English , 8000-word vocabulary ) , which is a limited-domain spoken-language task .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('tests')
# Generic('task')
# Other_scientific_term('German-English')
# Generic('task')
# Material('8000-word vocabulary')
# Generic('task')

extract = Extract([Triple(Generic("tests"), Rel("Used_for"), Generic("task")), Triple(Other_scientific_term("German-English"), Rel("Feature_of"), Generic("task")), Triple(Material("8000-word vocabulary"), Rel("Used_for"), Generic("task"))])
pred: [['tests', 'Used_for', 'task'], ['German-English', 'Feature_of', 'task'], ['8000-word vocabulary', 'Used_for', 'task']]
trues: [['Verbmobil task', 'Hyponym_of', 'limited-domain spoken-language task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2996987951807229, 0.33277591973244147, 0.3153724247226624]
text: This paper proposes a generic mathematical formalism for the combination of various structures : strings , trees , dags , graphs , and products of them .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('mathematical formalism')
# Other_scientific_term('structures')
# Other_scientific_term('strings')
# Other_scientific_term('structures')
# Other_scientific_term('strings')
# Other_scientific_term('trees')
# Other_scientific_term('trees')
# Other_scientific_term('structures')
# Other_scientific_term('trees')
# Other_scientific_term('dags')
# Other_scientific_term('dags')
# Other_scientific_term('structures')
# Other_scientific_term('dags')
# Other_scientific_term('graphs')
# Other_scientific_term('graphs')
# Other_scientific_term('structures')

extract = Extract([Triple(Generic("mathematical formalism"), Rel("Used_for"), Other_scientific_term("structures")), Triple(Other_scientific_term("strings"), Rel("Hyponym_of"), Other_scientific_term("structures")), Triple(Other_scientific_term("strings"), Rel("Conjunction"), Other_scientific_term("trees")), Triple(Other_scientific_term("trees"), Rel("Hyponym_of"), Other_scientific_term("structures")), Triple(Other_scientific_term("trees"), Rel("Conjunction"), Other_scientific_term("dags")), Triple(Other_scientific_term("dags"), Rel("Hyponym_of"), Other_scientific_term("structures")), Triple(Other_scientific_term("dags"), Rel("Conjunction"), Other_scientific_term("graphs")), Triple(Other_scientific_term("graphs"), Rel("Hyponym_of"), Other_scientific_term("structures"))])
pred: [['mathematical formalism', 'Used_for', 'structures'], ['strings', 'Hyponym_of', 'structures'], ['strings', 'Conjunction', 'trees'], ['trees', 'Hyponym_of', 'structures'], ['trees', 'Conjunction', 'dags'], ['dags', 'Hyponym_of', 'structures'], ['dags', 'Conjunction', 'graphs'], ['graphs', 'Hyponym_of', 'structures']]
trues: [['strings', 'Hyponym_of', 'structures'], ['strings', 'Conjunction', 'trees'], ['trees', 'Hyponym_of', 'structures'], ['trees', 'Conjunction', 'dags'], ['dags', 'Hyponym_of', 'structures'], ['dags', 'Conjunction', 'graphs'], ['graphs', 'Hyponym_of', 'structures']]
metrics_sample: [0.875, 1.0, 0.9333333333333333]
metrics_current: [0.30654761904761907, 0.34049586776859503, 0.32263116679718096]
text: We evaluate the demands that task dialogues collected using this technique , place upon a prototype Natural Language system .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('task dialogues')
# Method('Natural Language system')
# Method('Natural Language system')
# Other_scientific_term('task dialogues')

extract = Extract([Triple(Material("task dialogues"), Rel("Evaluate_for"), Method("Natural Language system")), Triple(Method("Natural Language system"), Rel("Used_for"), Other_scientific_term("task dialogues"))])
pred: [['task dialogues', 'Evaluate_for', 'Natural Language system'], ['Natural Language system', 'Used_for', 'task dialogues']]
trues: [['task dialogues', 'Used_for', 'prototype Natural Language system'], ['technique', 'Used_for', 'task dialogues']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3056379821958457, 0.3393739703459638, 0.32162373145979706]
text: It works by calculating eigenvectors of an adjacency graph 's Laplacian to recover a submanifold of data from a high dimensionality space and then performing cluster number estimation on the eigenvectors .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('eigenvectors')
# Task('cluster number estimation')
# Method('eigenvectors')
# Other_scientific_term('submanifold of data')
# Other_scientific_term('eigenvectors')
# Task('cluster number estimation')

extract = Extract([Triple(Method("eigenvectors"), Rel("Used_for"), Task("cluster number estimation")), Triple(Method("eigenvectors"), Rel("Used_for"), Other_scientific_term("submanifold of data")), Triple(Other_scientific_term("eigenvectors"), Rel("Feature_of"), Task("cluster number estimation"))])
pred: [['eigenvectors', 'Used_for', 'cluster number estimation'], ['eigenvectors', 'Used_for', 'submanifold of data'], ['eigenvectors', 'Feature_of', 'cluster number estimation']]
trues: [['It', 'Used_for', 'submanifold'], ['eigenvectors', 'Used_for', 'It'], ["adjacency graph 's Laplacian", 'Feature_of', 'eigenvectors'], ['high dimensionality space', 'Used_for', 'submanifold'], ['cluster number estimation', 'Used_for', 'It'], ['cluster number estimation', 'Used_for', 'eigenvectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30428360413589367, 0.3360522022838499, 0.31937984496124033]
text: Background modeling is an important component of many vision systems .
result: # The candidate relations for this text are:
# Rel('Part_of')
# The candidate entities for this text are:
# Method('Background modeling')
# Method('vision systems')

extract = Extract([Triple(Method("Background modeling"), Rel("Part_of"), Method("vision systems"))])
pred: [['Background modeling', 'Part_of', 'vision systems']]
trues: [['Background modeling', 'Part_of', 'vision systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3053097345132743, 0.33713355048859933, 0.3204334365325077]
text: A random modulation scheme produces near-Bernoulli statistics even for highly correlated inputs .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('random modulation scheme')
# Other_scientific_term('Bernoulli statistics')

extract = Extract([Triple(Method("random modulation scheme"), Rel("Used_for"), Other_scientific_term("Bernoulli statistics"))])
pred: [['random modulation scheme', 'Used_for', 'Bernoulli statistics']]
trues: [['random modulation scheme', 'Used_for', 'near-Bernoulli statistics'], ['highly correlated inputs', 'Used_for', 'random modulation scheme']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30486008836524303, 0.336038961038961, 0.3196911196911197]
text: We also introduce a novel classification method based on PER which leverages part of speech information of the words contributing to the word matches and non-matches in the sentence .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('classification method')
# Method('PER')
# Other_scientific_term('part of speech information')
# Method('classification method')
# Other_scientific_term('part of speech information')
# Other_scientific_term('word matches')
# Other_scientific_term('word matches')
# Other_scientific_term('word matches')

extract = Extract([Triple(Method("classification method"), Rel("Used_for"), Method("PER")), Triple(Other_scientific_term("part of speech information"), Rel("Used_for"), Method("classification method")), Triple(Other_scientific_term("part of speech information"), Rel("Used_for"), Other_scientific_term("word matches")), Triple(Other_scientific_term("word matches"), Rel("Conjunction"), Other_scientific_term("word matches"))])
pred: [['classification method', 'Used_for', 'PER'], ['part of speech information', 'Used_for', 'classification method'], ['part of speech information', 'Used_for', 'word matches'], ['word matches', 'Conjunction', 'word matches']]
trues: [['PER', 'Used_for', 'classification method'], ['PER', 'Used_for', 'part of speech information'], ['part of speech information', 'Used_for', 'word matches and non-matches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30307467057101023, 0.3344103392568659, 0.31797235023041476]
text: The model is evaluated on English and Czech newspaper texts , and is then validated on French broadcast news transcriptions .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('English and Czech newspaper texts')
# Generic('model')
# Material('English and Czech newspaper texts')
# Material('French broadcast news transcriptions')
# Material('French broadcast news transcriptions')
# Generic('model')

extract = Extract([Triple(Material("English and Czech newspaper texts"), Rel("Evaluate_for"), Generic("model")), Triple(Material("English and Czech newspaper texts"), Rel("Conjunction"), Material("French broadcast news transcriptions")), Triple(Material("French broadcast news transcriptions"), Rel("Evaluate_for"), Generic("model"))])
pred: [['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['English and Czech newspaper texts', 'Conjunction', 'French broadcast news transcriptions'], ['French broadcast news transcriptions', 'Evaluate_for', 'model']]
trues: [['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['French broadcast news transcriptions', 'Evaluate_for', 'model']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.30466472303207, 0.3365539452495974, 0.31981637337413926]
text: The combined approach is formulated in the framework of Bayesian statistics to account for the robust-ness requirement in image understanding .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Bayesian statistics')
# Task('image understanding')

extract = Extract([Triple(Method("Bayesian statistics"), Rel("Used_for"), Task("image understanding"))])
pred: [['Bayesian statistics', 'Used_for', 'image understanding']]
trues: [['approach', 'Used_for', 'robust-ness requirement in image understanding'], ['Bayesian statistics', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3042212518195051, 0.33547351524879615, 0.3190839694656488]
text: The experiments show that the system is able to detect scf types with 70 % precision and 66 % recall rate .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('precision')
# Generic('system')
# Metric('recall rate')
# Generic('system')

extract = Extract([Triple(Metric("precision"), Rel("Evaluate_for"), Generic("system")), Triple(Metric("recall rate"), Rel("Evaluate_for"), Generic("system"))])
pred: [['precision', 'Evaluate_for', 'system'], ['recall rate', 'Evaluate_for', 'system']]
trues: [['precision', 'Evaluate_for', 'system'], ['precision', 'Conjunction', 'recall'], ['recall', 'Evaluate_for', 'system']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3047895500725689, 0.3354632587859425, 0.3193916349809886]
text: This paper describes a novel system for acquiring adjectival subcategorization frames ( scfs ) and associated frequency information from English corpus data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('English corpus data')
# Method('system')

extract = Extract([Triple(Material("English corpus data"), Rel("Used_for"), Method("system"))])
pred: [['English corpus data', 'Used_for', 'system']]
trues: [['system', 'Used_for', 'acquiring adjectival subcategorization frames ( scfs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30434782608695654, 0.3349282296650718, 0.31890660592255127]
text: We evaluated the topic signatures on a WSD task , where we trained a second-order vector cooccurrence algorithm on standard WSD datasets , with promising results .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('WSD task')
# Other_scientific_term('topic signatures')
# Method('second-order vector cooccurrence algorithm')
# Material('WSD datasets')
# Material('WSD datasets')
# Method('second-order vector cooccurrence algorithm')

extract = Extract([Triple(Task("WSD task"), Rel("Used_for"), Other_scientific_term("topic signatures")), Triple(Method("second-order vector cooccurrence algorithm"), Rel("Used_for"), Material("WSD datasets")), Triple(Material("WSD datasets"), Rel("Used_for"), Method("second-order vector cooccurrence algorithm"))])
pred: [['WSD task', 'Used_for', 'topic signatures'], ['second-order vector cooccurrence algorithm', 'Used_for', 'WSD datasets'], ['WSD datasets', 'Used_for', 'second-order vector cooccurrence algorithm']]
trues: [['WSD task', 'Evaluate_for', 'topic signatures'], ['WSD datasets', 'Used_for', 'second-order vector cooccurrence algorithm']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.30447330447330445, 0.3354531001589825, 0.3192133131618759]
text: Human action recognition from well-segmented 3D skeleton data has been intensively studied and attracting an increasing attention .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('3D skeleton data')
# Task('Human action recognition')

extract = Extract([Triple(Material("3D skeleton data"), Rel("Used_for"), Task("Human action recognition"))])
pred: [['3D skeleton data', 'Used_for', 'Human action recognition']]
trues: [['well-segmented 3D skeleton data', 'Used_for', 'Human action recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30403458213256485, 0.3349206349206349, 0.31873111782477337]
text: We then turn to a discussion comparing the linguistic expressiveness of the two formalisms .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('linguistic expressiveness')
# Generic('formalisms')

extract = Extract([Triple(Generic("linguistic expressiveness"), Rel("Compare"), Generic("formalisms"))])
pred: [['linguistic expressiveness', 'Compare', 'formalisms']]
trues: [['linguistic expressiveness', 'Feature_of', 'formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3035971223021583, 0.33438985736925514, 0.31825037707390647]
text: Thus , the limitations of the automatic metrics used within MT are also discussed in this regard .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('automatic metrics')
# Task('MT')

extract = Extract([Triple(Method("automatic metrics"), Rel("Used_for"), Task("MT"))])
pred: [['automatic metrics', 'Used_for', 'MT']]
trues: [['automatic metrics', 'Evaluate_for', 'MT']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3031609195402299, 0.3338607594936709, 0.31777108433734946]
text: Second , based on the information resulting from the dictionary lookup stage , a set of rules is applied to the segmented strings in order to identify NE items .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('rules')
# Other_scientific_term('NE items')
# Other_scientific_term('segmented strings')
# Method('rules')

extract = Extract([Triple(Method("rules"), Rel("Used_for"), Other_scientific_term("NE items")), Triple(Other_scientific_term("segmented strings"), Rel("Used_for"), Method("rules"))])
pred: [['rules', 'Used_for', 'NE items'], ['segmented strings', 'Used_for', 'rules']]
trues: [['dictionary lookup stage', 'Used_for', 'rules'], ['rules', 'Used_for', 'NE items']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3037249283667622, 0.334384858044164, 0.3183183183183183]
text: Recent pool models of the inner hair cell synapse do not reproduce the dead time period after an intense stimulus , so we used visual inspection and automatic speech recognition ( ASR ) to investigate an offset adaptation ( OA ) model proposed by Zhang et al. [ 1 ] .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('visual inspection')
# Method('offset adaptation ( OA ) model')
# Method('visual inspection')
# Task('automatic speech recognition ( ASR )')
# Task('automatic speech recognition ( ASR )')
# Method('offset adaptation ( OA ) model')
# Method('automatic speech recognition ( ASR )')
# Method('pool models of the inner hair cell synapse')

extract = Extract([Triple(Method("visual inspection"), Rel("Used_for"), Method("offset adaptation ( OA ) model")), Triple(Method("visual inspection"), Rel("Used_for"), Task("automatic speech recognition ( ASR )")), Triple(Task("automatic speech recognition ( ASR )"), Rel("Used_for"), Method("offset adaptation ( OA ) model")), Triple(Method("automatic speech recognition ( ASR )"), Rel("Used_for"), Method("pool models of the inner hair cell synapse"))])
pred: [['visual inspection', 'Used_for', 'offset adaptation ( OA ) model'], ['visual inspection', 'Used_for', 'automatic speech recognition ( ASR )'], ['automatic speech recognition ( ASR )', 'Used_for', 'offset adaptation ( OA ) model'], ['automatic speech recognition ( ASR )', 'Used_for', 'pool models of the inner hair cell synapse']]
trues: [['pool models', 'Used_for', 'inner hair cell synapse'], ['visual inspection', 'Conjunction', 'automatic speech recognition ( ASR )'], ['visual inspection', 'Used_for', 'offset adaptation ( OA ) model'], ['automatic speech recognition ( ASR )', 'Used_for', 'offset adaptation ( OA ) model']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30484330484330485, 0.335423197492163, 0.31940298507462683]
text: Evaluation on the ACE 2003 corpus shows that the convolution kernel over parse trees can achieve comparable performance with the previous best-reported feature-based methods on the 24 ACE relation subtypes .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('ACE 2003 corpus')
# Method('convolution kernel over parse trees')
# Material('ACE 2003 corpus')
# Method('feature-based methods')
# Method('convolution kernel over parse trees')
# Method('feature-based methods')
# Material('ACE 2003 corpus')
# Other_scientific_term('24 ACE relation subtypes')
# Material('ACE 2003 corpus')
# Method('feature-based methods')
# Method('feature-based methods')
# Other_scientific_term('24 ACE relation subtypes')

extract = Extract([Triple(Material("ACE 2003 corpus"), Rel("Evaluate_for"), Method("convolution kernel over parse trees")), Triple(Material("ACE 2003 corpus"), Rel("Evaluate_for"), Method("feature-based methods")), Triple(Method("convolution kernel over parse trees"), Rel("Compare"), Method("feature-based methods")), Triple(Material("ACE 2003 corpus"), Rel("Evaluate_for"), Other_scientific_term("24 ACE relation subtypes")), Triple(Material("ACE 2003 corpus"), Rel("Evaluate_for"), Method("feature-based methods")), Triple(Method("feature-based methods"), Rel("Used_for"), Other_scientific_term("24 ACE relation subtypes"))])
pred: [['ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'], ['ACE 2003 corpus', 'Evaluate_for', 'feature-based methods'], ['convolution kernel over parse trees', 'Compare', 'feature-based methods'], ['ACE 2003 corpus', 'Evaluate_for', '24 ACE relation subtypes'], ['ACE 2003 corpus', 'Evaluate_for', 'feature-based methods'], ['feature-based methods', 'Used_for', '24 ACE relation subtypes']]
trues: [['ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'], ['feature-based methods', 'Compare', 'convolution kernel over parse trees']]
metrics_sample: [0.2, 0.5, 0.28571428571428575]
metrics_current: [0.3041018387553041, 0.3359375, 0.31922791388270233]
text: This phenomenon causes many image processing techniques to fail as they assume the presence of only one layer at each examined site e.g. motion estimation and object recognition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('they')
# Generic('image processing techniques')
# Generic('image processing techniques')
# Generic('they')
# Generic('image processing techniques')
# Generic('site')
# Generic('site')
# Generic('image processing techniques')
# Task('motion estimation')
# Generic('site')
# Task('object recognition')
# Generic('site')

extract = Extract([Triple(Generic("they"), Rel("Used_for"), Generic("image processing techniques")), Triple(Generic("image processing techniques"), Rel("Used_for"), Generic("they")), Triple(Generic("image processing techniques"), Rel("Used_for"), Generic("site")), Triple(Generic("site"), Rel("Conjunction"), Generic("image processing techniques")), Triple(Task("motion estimation"), Rel("Hyponym_of"), Generic("site")), Triple(Task("object recognition"), Rel("Hyponym_of"), Generic("site"))])
pred: [['they', 'Used_for', 'image processing techniques'], ['image processing techniques', 'Used_for', 'they'], ['image processing techniques', 'Used_for', 'site'], ['site', 'Conjunction', 'image processing techniques'], ['motion estimation', 'Hyponym_of', 'site'], ['object recognition', 'Hyponym_of', 'site']]
trues: [['motion estimation', 'Conjunction', 'object recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3015427769985975, 0.33541341653666146, 0.31757754800590837]
text: Our morphological analyzer has done all the necessary work for the recognition and classification of proper names , numerical and temporal expressions , i.e. Named Entity ( NE ) items in the Japanese text .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Method('morphological analyzer')
# Task('recognition and classification of proper names')
# Method('morphological analyzer')
# Task('Named Entity ( NE ) items in the Japanese text')
# Task('recognition and classification of proper names')
# Task('classification of proper names, numerical and temporal expressions')
# Task('classification of proper names, numerical and temporal expressions')
# Task('classification of proper names')
# Task('classification of proper names, numerical and temporal expressions')
# Task('classification of numerical and temporal expressions')
# Task('classification of numerical and temporal expressions')
# Task('classification of numerical and temporal expressions')

extract = Extract([Triple(Method("morphological analyzer"), Rel("Used_for"), Task("recognition and classification of proper names")), Triple(Method("morphological analyzer"), Rel("Used_for"), Task("Named Entity ( NE ) items in the Japanese text")), Triple(Task("recognition and classification of proper names"), Rel("Hyponym_of"), Task("classification of proper names, numerical and temporal expressions")), Triple(Task("classification of proper names, numerical and temporal expressions"), Rel("Conjunction"), Task("classification of proper names")), Triple(Task("classification of proper names"), Rel("Hyponym_of"), Task("classification of proper names, numerical and temporal expressions")), Triple(Task("classification of proper names, numerical and temporal expressions"), Rel("Conjunction"), Task("classification of numerical and temporal expressions")), Triple(Task("classification of numerical and temporal expressions"), Rel("Hyponym_of"), Task("classification of numerical and temporal expressions"))])
pred: [['morphological analyzer', 'Used_for', 'recognition and classification of proper names'], ['morphological analyzer', 'Used_for', 'Named Entity ( NE ) items in the Japanese text'], ['recognition and classification of proper names', 'Hyponym_of', 'classification of proper names, numerical and temporal expressions'], ['classification of proper names, numerical and temporal expressions', 'Conjunction', 'classification of proper names'], ['classification of proper names', 'Hyponym_of', 'classification of proper names, numerical and temporal expressions'], ['classification of proper names, numerical and temporal expressions', 'Conjunction', 'classification of numerical and temporal expressions'], ['classification of numerical and temporal expressions', 'Hyponym_of', 'classification of numerical and temporal expressions']]
trues: [['morphological analyzer', 'Used_for', 'recognition and classification of proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Hyponym_of', 'proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Part_of', 'Japanese text']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2986111111111111, 0.3338509316770186, 0.3152492668621701]
text: We believe that these evaluation techniques will provide information about both the human language learning process , the translation process and the development of machine translation systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('evaluation techniques')
# Other_scientific_term('human language learning process')
# Generic('evaluation techniques')
# Other_scientific_term('translation process')
# Generic('evaluation techniques')
# Method('machine translation systems')
# Other_scientific_term('human language learning process')
# Other_scientific_term('translation process')

extract = Extract([Triple(Generic("evaluation techniques"), Rel("Used_for"), Other_scientific_term("human language learning process")), Triple(Generic("evaluation techniques"), Rel("Used_for"), Other_scientific_term("translation process")), Triple(Generic("evaluation techniques"), Rel("Used_for"), Method("machine translation systems")), Triple(Other_scientific_term("human language learning process"), Rel("Conjunction"), Other_scientific_term("translation process"))])
pred: [['evaluation techniques', 'Used_for', 'human language learning process'], ['evaluation techniques', 'Used_for', 'translation process'], ['evaluation techniques', 'Used_for', 'machine translation systems'], ['human language learning process', 'Conjunction', 'translation process']]
trues: [['evaluation techniques', 'Used_for', 'human language learning process'], ['evaluation techniques', 'Used_for', 'translation process'], ['evaluation techniques', 'Used_for', 'machine translation systems'], ['human language learning process', 'Conjunction', 'translation process'], ['translation process', 'Conjunction', 'machine translation systems']]
metrics_sample: [1.0, 0.8, 0.888888888888889]
metrics_current: [0.30248618784530384, 0.337442218798151, 0.3190094683175528]
text: Given the video streams acquired by two cameras placed on either side of a computer monitor , the proposed algorithm synthesises images from a virtual camera in arbitrary position ( typically located within the monitor ) to facilitate eye contact .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('video streams')
# Generic('algorithm')
# Other_scientific_term('virtual camera')
# Generic('algorithm')
# Other_scientific_term('virtual camera')
# Other_scientific_term('eye contact')

extract = Extract([Triple(Material("video streams"), Rel("Used_for"), Generic("algorithm")), Triple(Other_scientific_term("virtual camera"), Rel("Feature_of"), Generic("algorithm")), Triple(Other_scientific_term("virtual camera"), Rel("Used_for"), Other_scientific_term("eye contact"))])
pred: [['video streams', 'Used_for', 'algorithm'], ['virtual camera', 'Feature_of', 'algorithm'], ['virtual camera', 'Used_for', 'eye contact']]
trues: [['cameras', 'Used_for', 'video streams'], ['algorithm', 'Used_for', 'eye contact'], ['virtual camera', 'Used_for', 'images'], ['arbitrary position', 'Feature_of', 'virtual camera']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3012379642365887, 0.33537519142419603, 0.3173913043478261]
text: In previous work , we have developed hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers that integrate textual and prosodic knowledge sources for detecting sentence boundaries .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers')
# Other_scientific_term('textual and prosodic knowledge sources')
# Method('hidden Markov model ( HMM )')
# Task('sentence boundaries')
# Method('maximum entropy ( Maxent ) classifiers')
# Task('sentence boundaries')
# Method('maximum entropy ( Maxent ) classifiers')
# Method('hidden Markov model ( HMM )')

extract = Extract([Triple(Method("hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers"), Rel("Used_for"), Other_scientific_term("textual and prosodic knowledge sources")), Triple(Method("hidden Markov model ( HMM )"), Rel("Used_for"), Task("sentence boundaries")), Triple(Method("maximum entropy ( Maxent ) classifiers"), Rel("Used_for"), Task("sentence boundaries")), Triple(Method("maximum entropy ( Maxent ) classifiers"), Rel("Conjunction"), Method("hidden Markov model ( HMM )"))])
pred: [['hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers', 'Used_for', 'textual and prosodic knowledge sources'], ['hidden Markov model ( HMM )', 'Used_for', 'sentence boundaries'], ['maximum entropy ( Maxent ) classifiers', 'Used_for', 'sentence boundaries'], ['maximum entropy ( Maxent ) classifiers', 'Conjunction', 'hidden Markov model ( HMM )']]
trues: [['hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers', 'Used_for', 'detecting sentence boundaries'], ['textual and prosodic knowledge sources', 'Used_for', 'hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29958960328317374, 0.33435114503816793, 0.31601731601731603]
text: Our extensive experimental results significantly improve over both uniform sampling and standard stratified sampling which are de-facto the industry standards .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Compare')
# The candidate entities for this text are:
# Generic('Our')
# Method('uniform sampling')
# Generic('Our')
# Method('stratified sampling')

extract = Extract([Triple(Generic("Our"), Rel("Compare"), Method("uniform sampling")), Triple(Generic("Our"), Rel("Compare"), Method("stratified sampling"))])
pred: [['Our', 'Compare', 'uniform sampling'], ['Our', 'Compare', 'stratified sampling']]
trues: [['uniform sampling', 'Conjunction', 'stratified sampling']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2987721691678035, 0.33384146341463417, 0.31533477321814257]
text: This paper presents necessary and sufficient conditions for the use of demonstrative expressions in English and discusses implications for current discourse processing algorithms .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('demonstrative expressions')
# Material('English')
# Method('discourse processing algorithms')
# Generic('implications')

extract = Extract([Triple(Other_scientific_term("demonstrative expressions"), Rel("Feature_of"), Material("English")), Triple(Method("discourse processing algorithms"), Rel("Used_for"), Generic("implications"))])
pred: [['demonstrative expressions', 'Feature_of', 'English'], ['discourse processing algorithms', 'Used_for', 'implications']]
trues: [['demonstrative expressions', 'Feature_of', 'English'], ['implications', 'Used_for', 'discourse processing algorithms']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.29931972789115646, 0.3343465045592705, 0.31586503948312994]
text: This paper deals with the problem of generating the fundamental frequency ( F0 ) contour of speech from a text input for text-to-speech synthesis .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('text input')
# Other_scientific_term('fundamental frequency ( F0 ) contour')
# Other_scientific_term('fundamental frequency ( F0 ) contour')
# Task('text-to-speech synthesis')
# Material('speech')
# Task('text-to-speech synthesis')

extract = Extract([Triple(Other_scientific_term("text input"), Rel("Used_for"), Other_scientific_term("fundamental frequency ( F0 ) contour")), Triple(Other_scientific_term("fundamental frequency ( F0 ) contour"), Rel("Used_for"), Task("text-to-speech synthesis")), Triple(Material("speech"), Rel("Used_for"), Task("text-to-speech synthesis"))])
pred: [['text input', 'Used_for', 'fundamental frequency ( F0 ) contour'], ['fundamental frequency ( F0 ) contour', 'Used_for', 'text-to-speech synthesis'], ['speech', 'Used_for', 'text-to-speech synthesis']]
trues: [['fundamental frequency ( F0 ) contour of speech', 'Used_for', 'text-to-speech synthesis'], ['text input', 'Used_for', 'fundamental frequency ( F0 ) contour of speech']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2981029810298103, 0.3333333333333333, 0.3147353361945637]
text: MINPRAN 's properties are connrmed experimentally on synthetic data and compare favorably to least median of squares .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('synthetic data')
# Generic('MINPRAN')
# Generic('MINPRAN')
# Method('least median of squares')
# Method('least median of squares')
# Generic('MINPRAN')

extract = Extract([Triple(Material("synthetic data"), Rel("Evaluate_for"), Generic("MINPRAN")), Triple(Generic("MINPRAN"), Rel("Compare"), Method("least median of squares")), Triple(Method("least median of squares"), Rel("Evaluate_for"), Generic("MINPRAN"))])
pred: [['synthetic data', 'Evaluate_for', 'MINPRAN'], ['MINPRAN', 'Compare', 'least median of squares'], ['least median of squares', 'Evaluate_for', 'MINPRAN']]
trues: [['synthetic data', 'Evaluate_for', 'MINPRAN'], ['least median of squares', 'Compare', 'MINPRAN']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.2982456140350877, 0.3338368580060423, 0.3150392017106201]
text: In the second half of the paper , we report a laboratory study using the Wizard of Oz technique to identify NL requirements for carrying out this task .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Wizard of Oz technique')
# Generic('task')
# Method('Wizard of Oz technique')
# Task('NL requirements')

extract = Extract([Triple(Method("Wizard of Oz technique"), Rel("Used_for"), Generic("task")), Triple(Method("Wizard of Oz technique"), Rel("Used_for"), Task("NL requirements"))])
pred: [['Wizard of Oz technique', 'Used_for', 'task'], ['Wizard of Oz technique', 'Used_for', 'NL requirements']]
trues: [['Wizard of Oz technique', 'Used_for', 'NL requirements'], ['Wizard of Oz technique', 'Used_for', 'task']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3001345895020188, 0.3358433734939759, 0.31698649609097374]
text: This paper presents a phrase-based statistical machine translation method , based on non-contiguous phrases , i.e. phrases with gaps .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('phrase-based statistical machine translation method')
# Generic('method')
# Method('non-contiguous phrases')
# Method('phrase-based statistical machine translation method')
# Other_scientific_term('gaps')
# Method('non-contiguous phrases')

extract = Extract([Triple(Method("phrase-based statistical machine translation method"), Rel("Used_for"), Generic("method")), Triple(Method("non-contiguous phrases"), Rel("Used_for"), Method("phrase-based statistical machine translation method")), Triple(Other_scientific_term("gaps"), Rel("Feature_of"), Method("non-contiguous phrases"))])
pred: [['phrase-based statistical machine translation method', 'Used_for', 'method'], ['non-contiguous phrases', 'Used_for', 'phrase-based statistical machine translation method'], ['gaps', 'Feature_of', 'non-contiguous phrases']]
trues: [['non-contiguous phrases', 'Used_for', 'phrase-based statistical machine translation method']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3002680965147453, 0.3368421052631579, 0.3175053153791637]
text: Furthermore , this paper presents a novel algorithm for the temporal maintenance of a background model to enhance the rendering of occlusions and reduce temporal artefacts ( flicker ) ; and a cost aggregation algorithm that acts directly on our three-dimensional matching cost space .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('algorithm')
# Task('temporal maintenance of a background model')
# Generic('algorithm')
# Other_scientific_term('occlusions')
# Generic('algorithm')
# Other_scientific_term('temporal artefacts ( flicker )')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Task("temporal maintenance of a background model")), Triple(Generic("algorithm"), Rel("Used_for"), Other_scientific_term("occlusions")), Triple(Generic("algorithm"), Rel("Used_for"), Other_scientific_term("temporal artefacts ( flicker )"))])
pred: [['algorithm', 'Used_for', 'temporal maintenance of a background model'], ['algorithm', 'Used_for', 'occlusions'], ['algorithm', 'Used_for', 'temporal artefacts ( flicker )']]
trues: [['algorithm', 'Used_for', 'temporal maintenance of a background model'], ['algorithm', 'Used_for', 'rendering of occlusions'], ['algorithm', 'Used_for', 'temporal artefacts ( flicker )'], ['cost aggregation algorithm', 'Conjunction', 'algorithm'], ['cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space']]
metrics_sample: [0.6666666666666666, 0.4, 0.5]
metrics_current: [0.30173564753004006, 0.3373134328358209, 0.31853417899929526]
text: Thus , our method can be applied with great benefit to language pairs for which only scarce resources are available .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('method')
# Material('language pairs')
# Material('scarce resources')
# Generic('method')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Material("language pairs")), Triple(Material("scarce resources"), Rel("Evaluate_for"), Generic("method"))])
pred: [['method', 'Used_for', 'language pairs'], ['scarce resources', 'Evaluate_for', 'method']]
trues: [['scarce resources', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3009320905459387, 0.33681073025335323, 0.3178621659634318]
text: With the rise of deep archi-tectures , the prime focus has been on object category recognition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('deep archi-tectures')
# Task('object category recognition')

extract = Extract([Triple(Method("deep archi-tectures"), Rel("Used_for"), Task("object category recognition"))])
pred: [['deep archi-tectures', 'Used_for', 'object category recognition']]
trues: [['deep archi-tectures', 'Used_for', 'object category recognition']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30186170212765956, 0.33779761904761907, 0.31882022471910115]
text: In this paper , we explore geometric structures of 3D lines in ray space for improving light field triangulation and stereo matching .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('geometric structures of 3D lines')
# Method('light field triangulation')
# Other_scientific_term('geometric structures of 3D lines')
# Method('stereo matching')
# Method('light field triangulation')
# Method('stereo matching')
# Method('light field triangulation')
# Other_scientific_term('geometric structures of 3D lines')
# Method('stereo matching')

extract = Extract([Triple(Other_scientific_term("geometric structures of 3D lines"), Rel("Used_for"), Method("light field triangulation")), Triple(Other_scientific_term("geometric structures of 3D lines"), Rel("Used_for"), Method("stereo matching")), Triple(Method("light field triangulation"), Rel("Conjunction"), Method("stereo matching")), Triple(Method("light field triangulation"), Rel("Used_for"), Other_scientific_term("geometric structures of 3D lines")), Triple(Method("stereo matching"), Rel("Used_for"), Other_scientific_term("geometric structures of 3D lines"))])
pred: [['geometric structures of 3D lines', 'Used_for', 'light field triangulation'], ['geometric structures of 3D lines', 'Used_for', 'stereo matching'], ['light field triangulation', 'Conjunction', 'stereo matching'], ['light field triangulation', 'Used_for', 'geometric structures of 3D lines'], ['stereo matching', 'Used_for', 'geometric structures of 3D lines']]
trues: [['geometric structures of 3D lines', 'Used_for', 'light field triangulation'], ['geometric structures of 3D lines', 'Used_for', 'stereo matching'], ['ray space', 'Feature_of', 'geometric structures of 3D lines'], ['light field triangulation', 'Conjunction', 'stereo matching']]
metrics_sample: [0.6, 0.75, 0.6666666666666665]
metrics_current: [0.3038309114927345, 0.34023668639053256, 0.3210048848569435]
text: Utterance Verification ( UV ) is a critical function of an Automatic Speech Recognition ( ASR ) System working on real applications where spontaneous speech , out-of-vocabulary ( OOV ) words and acoustic noises are present .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# The candidate entities for this text are:
# Task('Utterance Verification ( UV )')
# Task('Automatic Speech Recognition ( ASR ) System')
# Task('Utterance Verification ( UV )')
# Task('real applications')
# Material('spontaneous speech')
# Task('Utterance Verification ( UV )')
# Material('spontaneous speech')
# Material('out-of-vocabulary ( OOV ) words')
# Material('out-of-vocabulary ( OOV ) words')
# Task('Utterance Verification ( UV )')
# Material('out-of-vocabulary ( OOV ) words')
# Material('acoustic noises')
# Material('acoustic noises')
# Task('Utterance Verification ( UV )')

extract = Extract([Triple(Task("Utterance Verification ( UV )"), Rel("Hyponym_of"), Task("Automatic Speech Recognition ( ASR ) System")), Triple(Task("Utterance Verification ( UV )"), Rel("Part_of"), Task("real applications")), Triple(Material("spontaneous speech"), Rel("Conjunction"), Material("out-of-vocabulary ( OOV ) words")), Triple(Material("out-of-vocabulary ( OOV ) words"), Rel("Part_of"), Task("Utterance Verification ( UV )")), Triple(Material("out-of-vocabulary ( OOV ) words"), Rel("Conjunction"), Material("acoustic noises")), Triple(Material("acoustic noises"), Rel("Part_of"), Task("Utterance Verification ( UV )"))])
pred: [['Utterance Verification ( UV )', 'Hyponym_of', 'Automatic Speech Recognition ( ASR ) System'], ['Utterance Verification ( UV )', 'Part_of', 'real applications'], ['spontaneous speech', 'Conjunction', 'out-of-vocabulary ( OOV ) words'], ['out-of-vocabulary ( OOV ) words', 'Part_of', 'Utterance Verification ( UV )'], ['out-of-vocabulary ( OOV ) words', 'Conjunction', 'acoustic noises'], ['acoustic noises', 'Part_of', 'Utterance Verification ( UV )']]
trues: [['Utterance Verification ( UV )', 'Hyponym_of', 'Automatic Speech Recognition ( ASR ) System']]
metrics_sample: [0.16666666666666666, 1.0, 0.2857142857142857]
metrics_current: [0.30275229357798167, 0.3412112259970458, 0.3208333333333333]
text: Recent progress in computer vision has been driven by high-capacity models trained on large datasets .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('high-capacity models')
# Task('computer vision')
# Material('large datasets')
# Method('high-capacity models')

extract = Extract([Triple(Method("high-capacity models"), Rel("Used_for"), Task("computer vision")), Triple(Material("large datasets"), Rel("Used_for"), Method("high-capacity models"))])
pred: [['high-capacity models', 'Used_for', 'computer vision'], ['large datasets', 'Used_for', 'high-capacity models']]
trues: [['high-capacity models', 'Used_for', 'computer vision'], ['large datasets', 'Used_for', 'high-capacity models']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3045751633986928, 0.3431516936671576, 0.32271468144044324]
text: We present an application of ambiguity packing and stochastic disambiguation techniques for Lexical-Functional Grammars ( LFG ) to the domain of sentence condensation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('ambiguity packing and stochastic disambiguation techniques')
# Method('Lexical-Functional Grammars ( LFG )')
# Method('ambiguity packing and stochastic disambiguation techniques')
# Task('sentence condensation')
# Method('Lexical-Functional Grammars ( LFG )')
# Task('sentence condensation')
# Task('sentence condensation')
# Method('ambiguity packing and stochastic disambiguation techniques')

extract = Extract([Triple(Method("ambiguity packing and stochastic disambiguation techniques"), Rel("Used_for"), Method("Lexical-Functional Grammars ( LFG )")), Triple(Method("ambiguity packing and stochastic disambiguation techniques"), Rel("Used_for"), Task("sentence condensation")), Triple(Method("Lexical-Functional Grammars ( LFG )"), Rel("Used_for"), Task("sentence condensation")), Triple(Task("sentence condensation"), Rel("Conjunction"), Method("ambiguity packing and stochastic disambiguation techniques"))])
pred: [['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'], ['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'sentence condensation'], ['Lexical-Functional Grammars ( LFG )', 'Used_for', 'sentence condensation'], ['sentence condensation', 'Conjunction', 'ambiguity packing and stochastic disambiguation techniques']]
trues: [['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'], ['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'sentence condensation']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.305591677503251, 0.34508076358296624, 0.3241379310344828]
text: In this paper , we propose a new method for the modeling and subtraction of such scenes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('method')
# Task('modeling and subtraction of scenes')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Task("modeling and subtraction of scenes"))])
pred: [['method', 'Used_for', 'modeling and subtraction of scenes']]
trues: [['method', 'Used_for', 'modeling and subtraction of such scenes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3051948051948052, 0.34457478005865105, 0.3236914600550964]
text: We present a novel method for discovering parallel sentences in comparable , non-parallel corpora .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('comparable, non-parallel corpora')
# Generic('method')
# Material('parallel sentences')
# Generic('method')

extract = Extract([Triple(Material("comparable, non-parallel corpora"), Rel("Used_for"), Generic("method")), Triple(Material("parallel sentences"), Rel("Used_for"), Generic("method"))])
pred: [['comparable, non-parallel corpora', 'Used_for', 'method'], ['parallel sentences', 'Used_for', 'method']]
trues: [['method', 'Used_for', 'discovering parallel sentences'], ['comparable , non-parallel corpora', 'Used_for', 'discovering parallel sentences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30440414507772023, 0.3435672514619883, 0.3228021978021979]
text: SVMs are known to be robust to overfitting ; however , a few training examples usually do not represent well the structure of the class .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('SVMs')
# Task('overfitting')
# Other_scientific_term('training examples')
# Method('SVMs')

extract = Extract([Triple(Method("SVMs"), Rel("Used_for"), Task("overfitting")), Triple(Other_scientific_term("training examples"), Rel("Used_for"), Method("SVMs"))])
pred: [['SVMs', 'Used_for', 'overfitting'], ['training examples', 'Used_for', 'SVMs']]
trues: [['SVMs', 'Used_for', 'overfitting']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3049095607235142, 0.3445255474452555, 0.32350925291295407]
text: Computing power per area and power consumption is amongst the highest reported for a single chip .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Metric('Computing power per area')
# Generic('single chip')
# Metric('Computing power per area')
# Metric('power consumption')
# Metric('power consumption')
# Generic('single chip')

extract = Extract([Triple(Metric("Computing power per area"), Rel("Evaluate_for"), Generic("single chip")), Triple(Metric("Computing power per area"), Rel("Evaluate_for"), Metric("power consumption")), Triple(Metric("power consumption"), Rel("Evaluate_for"), Generic("single chip"))])
pred: [['Computing power per area', 'Evaluate_for', 'single chip'], ['Computing power per area', 'Evaluate_for', 'power consumption'], ['power consumption', 'Evaluate_for', 'single chip']]
trues: [['Computing power per area', 'Conjunction', 'power consumption']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30373230373230375, 0.34402332361516036, 0.32262474367737526]
text: Metagrammatical formalisms that combine context-free phrase structure rules and metarules ( MPS grammars ) allow concise statement of generalizations about the syntax of natural languages .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('context-free phrase structure rules')
# Method('metarules')
# Method('context-free phrase structure rules')
# Method('Metagrammatical formalisms')
# Method('Metagrammatical formalisms')
# Task('syntax of natural languages')

extract = Extract([Triple(Method("context-free phrase structure rules"), Rel("Conjunction"), Method("metarules")), Triple(Method("context-free phrase structure rules"), Rel("Hyponym_of"), Method("Metagrammatical formalisms")), Triple(Method("Metagrammatical formalisms"), Rel("Used_for"), Task("syntax of natural languages"))])
pred: [['context-free phrase structure rules', 'Conjunction', 'metarules'], ['context-free phrase structure rules', 'Hyponym_of', 'Metagrammatical formalisms'], ['Metagrammatical formalisms', 'Used_for', 'syntax of natural languages']]
trues: [['context-free phrase structure rules', 'Part_of', 'Metagrammatical formalisms'], ['context-free phrase structure rules', 'Conjunction', 'metarules ( MPS grammars )'], ['metarules ( MPS grammars )', 'Part_of', 'Metagrammatical formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30256410256410254, 0.34252539912917274, 0.3213070115724983]
text: Our approach is based on the iterative deformation of a 3 -- D surface mesh to minimize an objective function .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Other_scientific_term('iterative deformation of a 3 -- D surface mesh')
# Other_scientific_term('objective function')
# Generic('approach')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Other_scientific_term("iterative deformation of a 3 -- D surface mesh")), Triple(Other_scientific_term("objective function"), Rel("Used_for"), Generic("approach"))])
pred: [['approach', 'Used_for', 'iterative deformation of a 3 -- D surface mesh'], ['objective function', 'Used_for', 'approach']]
trues: [['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'approach'], ['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'objective function']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30179028132992325, 0.341534008683068, 0.32043448744059744]
text: Our numerical hybrid local and global mode-seeking tracker is validated on challenging airborne videos with heavy occlusion and large camera motions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('Our numerical hybrid local and global mode-seeking tracker')
# Task('airborne videos')
# Other_scientific_term('heavy occlusion and large camera motions')
# Task('airborne videos')

extract = Extract([Triple(Generic("Our numerical hybrid local and global mode-seeking tracker"), Rel("Used_for"), Task("airborne videos")), Triple(Other_scientific_term("heavy occlusion and large camera motions"), Rel("Feature_of"), Task("airborne videos"))])
pred: [['Our numerical hybrid local and global mode-seeking tracker', 'Used_for', 'airborne videos'], ['heavy occlusion and large camera motions', 'Feature_of', 'airborne videos']]
trues: [['airborne videos', 'Evaluate_for', 'numerical hybrid local and global mode-seeking tracker'], ['heavy occlusion', 'Feature_of', 'airborne videos'], ['heavy occlusion', 'Conjunction', 'camera motions'], ['camera motions', 'Feature_of', 'airborne videos']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3010204081632653, 0.339568345323741, 0.31913455037187294]
text: Here we develop an approach for 1 distance that begins with an explicit and exactly distance-preserving embedding of the points into 2 2 .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Other_scientific_term('distance')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Other_scientific_term("distance"))])
pred: [['approach', 'Used_for', 'distance']]
trues: [['approach', 'Used_for', '1 distance']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3006369426751592, 0.3390804597701149, 0.31870357866306553]
text: Learned confidence measures gain increasing importance for outlier removal and quality improvement in stereo vision .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('Learned confidence measures')
# Task('outlier removal')
# Other_scientific_term('Learned confidence measures')
# Task('quality improvement in stereo vision')
# Task('quality improvement in stereo vision')
# Task('outlier removal')

extract = Extract([Triple(Other_scientific_term("Learned confidence measures"), Rel("Used_for"), Task("outlier removal")), Triple(Other_scientific_term("Learned confidence measures"), Rel("Used_for"), Task("quality improvement in stereo vision")), Triple(Task("quality improvement in stereo vision"), Rel("Used_for"), Task("outlier removal"))])
pred: [['Learned confidence measures', 'Used_for', 'outlier removal'], ['Learned confidence measures', 'Used_for', 'quality improvement in stereo vision'], ['quality improvement in stereo vision', 'Used_for', 'outlier removal']]
trues: [['Learned confidence measures', 'Used_for', 'outlier removal'], ['Learned confidence measures', 'Used_for', 'quality improvement'], ['outlier removal', 'Conjunction', 'quality improvement'], ['outlier removal', 'Part_of', 'stereo vision'], ['quality improvement', 'Part_of', 'stereo vision']]
metrics_sample: [0.3333333333333333, 0.2, 0.25]
metrics_current: [0.30076142131979694, 0.33808844507845937, 0.31833445265278715]
text: Amorph recognizes NE items in two stages : dictionary lookup and rule application .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# The candidate entities for this text are:
# Method('dictionary lookup')
# Generic('stages')
# Method('dictionary lookup')
# Method('rule application')
# Method('rule application')
# Generic('stages')

extract = Extract([Triple(Method("dictionary lookup"), Rel("Part_of"), Generic("stages")), Triple(Method("dictionary lookup"), Rel("Conjunction"), Method("rule application")), Triple(Method("rule application"), Rel("Part_of"), Generic("stages"))])
pred: [['dictionary lookup', 'Part_of', 'stages'], ['dictionary lookup', 'Conjunction', 'rule application'], ['rule application', 'Part_of', 'stages']]
trues: [['Amorph', 'Used_for', 'NE items'], ['dictionary lookup', 'Part_of', 'Amorph'], ['dictionary lookup', 'Conjunction', 'rule application'], ['rule application', 'Part_of', 'Amorph']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.3008849557522124, 0.3375886524822695, 0.3181818181818181]
text: The new criterion -- meaning-entailing substitutability -- fits the needs of semantic-oriented NLP applications and can be evaluated directly ( independent of an application ) at a good level of human agreement .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('meaning-entailing substitutability')
# Task('semantic-oriented NLP applications')

extract = Extract([Triple(Other_scientific_term("meaning-entailing substitutability"), Rel("Used_for"), Task("semantic-oriented NLP applications"))])
pred: [['meaning-entailing substitutability', 'Used_for', 'semantic-oriented NLP applications']]
trues: [['meaning-entailing substitutability', 'Used_for', 'semantic-oriented NLP applications'], ['human agreement', 'Evaluate_for', 'meaning-entailing substitutability']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.30176767676767674, 0.33804809052333806, 0.3188792528352235]
text: Our experiments on real data sets show that the resulting detector is more robust to the choice of training examples , and substantially improves both linear and kernel SVM when trained on 10 positive and 10 negative examples .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('detector')
# Method('SVM')
# Generic('detector')
# Material('real data sets')
# Method('linear and kernel SVM')
# Method('SVM')
# Metric('positive and negative examples')
# Method('SVM')

extract = Extract([Triple(Generic("detector"), Rel("Used_for"), Method("SVM")), Triple(Generic("detector"), Rel("Used_for"), Material("real data sets")), Triple(Method("linear and kernel SVM"), Rel("Compare"), Method("SVM")), Triple(Metric("positive and negative examples"), Rel("Evaluate_for"), Method("SVM"))])
pred: [['detector', 'Used_for', 'SVM'], ['detector', 'Used_for', 'real data sets'], ['linear and kernel SVM', 'Compare', 'SVM'], ['positive and negative examples', 'Evaluate_for', 'SVM']]
trues: [['real data sets', 'Evaluate_for', 'detector'], ['detector', 'Compare', 'linear and kernel SVM']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30025125628140703, 0.33709449929478136, 0.3176079734219269]
text: While Plume is well adapted to simple declarative and imperative utterances , it handles passives , relative clauses and interrogatives in an ad hoc manner leading to patchy syntactic coverage .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Feature_of')
# Rel('Feature_of')
# The candidate entities for this text are:
# Generic('it')
# Generic('Plume')
# Other_scientific_term('declarative and imperative utterances')
# Generic('Plume')
# Other_scientific_term('passives')
# Generic('it')
# Other_scientific_term('passives')
# Other_scientific_term('relative clauses')
# Other_scientific_term('relative clauses')
# Generic('it')
# Other_scientific_term('relative clauses')
# Other_scientific_term('interrogatives')
# Other_scientific_term('interrogatives')
# Generic('it')
# Other_scientific_term('interrogatives')
# Other_scientific_term('patchy syntactic coverage')

extract = Extract([Triple(Generic("it"), Rel("Used_for"), Generic("Plume")), Triple(Other_scientific_term("declarative and imperative utterances"), Rel("Used_for"), Generic("Plume")), Triple(Other_scientific_term("passives"), Rel("Conjunction"), Other_scientific_term("relative clauses")), Triple(Other_scientific_term("relative clauses"), Rel("Conjunction"), Other_scientific_term("interrogatives")), Triple(Other_scientific_term("relative clauses"), Rel("Feature_of"), Generic("it")), Triple(Other_scientific_term("interrogatives"), Rel("Feature_of"), Generic("it")), Triple(Other_scientific_term("interrogatives"), Rel("Feature_of"), Other_scientific_term("patchy syntactic coverage"))])
pred: [['it', 'Used_for', 'Plume'], ['declarative and imperative utterances', 'Used_for', 'Plume'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives'], ['relative clauses', 'Feature_of', 'it'], ['interrogatives', 'Feature_of', 'it'], ['interrogatives', 'Feature_of', 'patchy syntactic coverage']]
trues: [['Plume', 'Used_for', 'declarative and imperative utterances'], ['it', 'Used_for', 'passives'], ['it', 'Used_for', 'relative clauses'], ['it', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [0.2857142857142857, 0.3333333333333333, 0.30769230769230765]
metrics_current: [0.3001245330012453, 0.33706293706293705, 0.3175230566534914]
text: Our results show that MT evaluation techniques are able to produce useful features for paraphrase classification and to a lesser extent entailment .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('MT evaluation techniques')
# Task('paraphrase classification')
# Method('MT evaluation techniques')
# Task('entailment')
# Other_scientific_term('features')
# Task('paraphrase classification')
# Other_scientific_term('features')
# Task('entailment')

extract = Extract([Triple(Method("MT evaluation techniques"), Rel("Used_for"), Task("paraphrase classification")), Triple(Method("MT evaluation techniques"), Rel("Used_for"), Task("entailment")), Triple(Other_scientific_term("features"), Rel("Used_for"), Task("paraphrase classification")), Triple(Other_scientific_term("features"), Rel("Conjunction"), Task("entailment"))])
pred: [['MT evaluation techniques', 'Used_for', 'paraphrase classification'], ['MT evaluation techniques', 'Used_for', 'entailment'], ['features', 'Used_for', 'paraphrase classification'], ['features', 'Conjunction', 'entailment']]
trues: [['MT evaluation techniques', 'Used_for', 'features'], ['MT evaluation techniques', 'Used_for', 'paraphrase classification'], ['MT evaluation techniques', 'Used_for', 'entailment'], ['paraphrase classification', 'Conjunction', 'entailment']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30111524163568776, 0.3379694019471488, 0.31847968545216254]
text: In this paper , we introduce an annotation scheme for scientific articles which can be used to build such a resource in a consistent way .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('annotation scheme')
# Material('scientific articles')

extract = Extract([Triple(Other_scientific_term("annotation scheme"), Rel("Used_for"), Material("scientific articles"))])
pred: [['annotation scheme', 'Used_for', 'scientific articles']]
trues: [['annotation scheme', 'Used_for', 'scientific articles'], ['annotation scheme', 'Used_for', 'resource']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.30198019801980197, 0.33841886269070737, 0.31916285153695223]
text: Turkish is an agglutinative language with word structures formed by productive affixations of derivational and inflectional suffixes to root words .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('agglutinative language')
# Generic('language')
# Other_scientific_term('derivational and inflectional suffixes')
# Other_scientific_term('word structures')
# Other_scientific_term('root words')
# Other_scientific_term('word structures')

extract = Extract([Triple(Other_scientific_term("agglutinative language"), Rel("Used_for"), Generic("language")), Triple(Other_scientific_term("derivational and inflectional suffixes"), Rel("Part_of"), Other_scientific_term("word structures")), Triple(Other_scientific_term("root words"), Rel("Part_of"), Other_scientific_term("word structures"))])
pred: [['agglutinative language', 'Used_for', 'language'], ['derivational and inflectional suffixes', 'Part_of', 'word structures'], ['root words', 'Part_of', 'word structures']]
trues: [['Turkish', 'Hyponym_of', 'agglutinative language'], ['word structures', 'Feature_of', 'agglutinative language'], ['productive affixations of derivational and inflectional suffixes', 'Part_of', 'word structures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3008631319358816, 0.3370165745856354, 0.31791530944625407]
text: We propose a novel approach to associate objects across multiple PTZ cameras that can be used to perform camera handoff in wide-area surveillance scenarios .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('camera handoff')
# Material('wide-area surveillance scenarios')
# Task('camera handoff')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("camera handoff")), Triple(Material("wide-area surveillance scenarios"), Rel("Used_for"), Task("camera handoff"))])
pred: [['approach', 'Used_for', 'camera handoff'], ['wide-area surveillance scenarios', 'Used_for', 'camera handoff']]
trues: [['approach', 'Used_for', 'camera handoff in wide-area surveillance scenarios']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3001230012300123, 0.33655172413793105, 0.31729518855656696]
text: Our core motivation is that minimizing a weighted rank loss is a natural criterion for many problems in computer vision such as person re-identification .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('criterion')
# Task('computer vision')
# Task('person re-identification')
# Task('computer vision')

extract = Extract([Triple(Generic("criterion"), Rel("Used_for"), Task("computer vision")), Triple(Task("person re-identification"), Rel("Hyponym_of"), Task("computer vision"))])
pred: [['criterion', 'Used_for', 'computer vision'], ['person re-identification', 'Hyponym_of', 'computer vision']]
trues: [['weighted rank loss', 'Used_for', 'computer vision'], ['weighted rank loss', 'Used_for', 'person re-identification'], ['person re-identification', 'Hyponym_of', 'computer vision']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3006134969325153, 0.33653846153846156, 0.31756318859364874]
text: A bio-inspired model for an analog programmable array processor ( APAP ) , based on studies on the vertebrate retina , has permitted the realization of complex programmable spatio-temporal dynamics in VLSI .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('bio-inspired model')
# Method('analog programmable array processor ( APAP )')
# Other_scientific_term('vertebrate retina')
# Method('bio-inspired model')
# Method('VLSI')
# Other_scientific_term('programmable spatio-temporal dynamics')

extract = Extract([Triple(Method("bio-inspired model"), Rel("Used_for"), Method("analog programmable array processor ( APAP )")), Triple(Other_scientific_term("vertebrate retina"), Rel("Used_for"), Method("bio-inspired model")), Triple(Method("VLSI"), Rel("Used_for"), Other_scientific_term("programmable spatio-temporal dynamics"))])
pred: [['bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'], ['vertebrate retina', 'Used_for', 'bio-inspired model'], ['VLSI', 'Used_for', 'programmable spatio-temporal dynamics']]
trues: [['bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'], ['bio-inspired model', 'Used_for', 'complex programmable spatio-temporal dynamics'], ['vertebrate retina', 'Used_for', 'bio-inspired model'], ['complex programmable spatio-temporal dynamics', 'Feature_of', 'VLSI']]
metrics_sample: [0.6666666666666666, 0.5, 0.5714285714285715]
metrics_current: [0.3019559902200489, 0.337431693989071, 0.3187096774193548]
text: As a Monte Carlo approach , ASA stochastically samples the parameter space , in contrast to local deterministic search .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Method('Monte Carlo approach')
# Method('local deterministic search')

extract = Extract([Triple(Method("Monte Carlo approach"), Rel("Compare"), Method("local deterministic search"))])
pred: [['Monte Carlo approach', 'Compare', 'local deterministic search']]
trues: [['ASA', 'Hyponym_of', 'Monte Carlo approach'], ['ASA', 'Compare', 'local deterministic search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30158730158730157, 0.33651226158038144, 0.31809401159047]
text: One remarkable feature of this model is that it has allowed us to derive an efficient algorithm based on powerful statistical methods for estimating the Fujisaki-model parameters from raw F0 contours .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Generic('it')
# Method('statistical methods')
# Generic('it')
# Other_scientific_term('Fujisaki-model parameters')
# Method('statistical methods')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Generic("it")), Triple(Method("statistical methods"), Rel("Used_for"), Generic("it")), Triple(Other_scientific_term("Fujisaki-model parameters"), Rel("Used_for"), Method("statistical methods"))])
pred: [['model', 'Used_for', 'it'], ['statistical methods', 'Used_for', 'it'], ['Fujisaki-model parameters', 'Used_for', 'statistical methods']]
trues: [['remarkable feature', 'Feature_of', 'model'], ['algorithm', 'Used_for', 'Fujisaki-model parameters'], ['statistical methods', 'Used_for', 'algorithm'], ['raw F0 contours', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3004866180048662, 0.3346883468834688, 0.31666666666666665]
text: By employing a joint classification and regression optimization objective , this network is capable of automatically localizing the start and end points of actions more accurately .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('joint classification and regression optimization objective')
# Generic('network')

extract = Extract([Triple(Method("joint classification and regression optimization objective"), Rel("Used_for"), Generic("network"))])
pred: [['joint classification and regression optimization objective', 'Used_for', 'network']]
trues: [['joint classification and regression optimization objective', 'Used_for', 'network']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30133657351154314, 0.33558863328822736, 0.31754161331626124]
text: This paper investigates the utility of applying standard MT evaluation methods ( BLEU , NIST , WER and PER ) to building classifiers to predict semantic equivalence and entailment .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Metric('MT evaluation methods')
# Method('classifiers')
# Metric('BLEU')
# Metric('MT evaluation methods')
# Metric('BLEU')
# Metric('NIST')
# Metric('NIST')
# Metric('MT evaluation methods')

extract = Extract([Triple(Metric("MT evaluation methods"), Rel("Used_for"), Method("classifiers")), Triple(Metric("BLEU"), Rel("Used_for"), Metric("MT evaluation methods")), Triple(Metric("BLEU"), Rel("Conjunction"), Metric("NIST")), Triple(Metric("NIST"), Rel("Conjunction"), Metric("MT evaluation methods"))])
pred: [['MT evaluation methods', 'Used_for', 'classifiers'], ['BLEU', 'Used_for', 'MT evaluation methods'], ['BLEU', 'Conjunction', 'NIST'], ['NIST', 'Conjunction', 'MT evaluation methods']]
trues: [['MT evaluation methods', 'Used_for', 'classifiers'], ['BLEU', 'Hyponym_of', 'MT evaluation methods'], ['BLEU', 'Conjunction', 'NIST'], ['NIST', 'Hyponym_of', 'MT evaluation methods'], ['NIST', 'Conjunction', 'WER'], ['WER', 'Hyponym_of', 'MT evaluation methods'], ['WER', 'Conjunction', 'PER'], ['PER', 'Hyponym_of', 'MT evaluation methods'], ['classifiers', 'Used_for', 'semantic equivalence'], ['classifiers', 'Used_for', 'entailment'], ['semantic equivalence', 'Conjunction', 'entailment']]
metrics_sample: [0.5, 0.18181818181818182, 0.26666666666666666]
metrics_current: [0.3022974607013301, 0.3333333333333333, 0.3170577045022194]
text: The formalism 's intended usage is to relate expressions of natural languages to their associated semantics represented in a logical form language , or to their translates in another natural language ; in summary , we intend it to allow TAGs to be used beyond their role in syntax proper .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('logical form language')
# Other_scientific_term('semantics')
# Generic('it')
# Method('TAGs')
# Generic('it')
# Task('syntax')
# Generic('it')
# Task('syntax')

extract = Extract([Triple(Method("logical form language"), Rel("Used_for"), Other_scientific_term("semantics")), Triple(Generic("it"), Rel("Used_for"), Method("TAGs")), Triple(Generic("it"), Rel("Used_for"), Task("syntax")), Triple(Generic("it"), Rel("Used_for"), Task("syntax"))])
pred: [['logical form language', 'Used_for', 'semantics'], ['it', 'Used_for', 'TAGs'], ['it', 'Used_for', 'syntax'], ['it', 'Used_for', 'syntax']]
trues: [['logical form language', 'Used_for', 'semantics'], ['TAGs', 'Used_for', 'syntax proper']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3024096385542169, 0.3337765957446808, 0.3173198482932996]
text: Our system incorporates a linguistic parser/generator for LFG , a transfer component for parse reduction operating on packed parse forests , and a maximum-entropy model for stochastic output selection .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Part_of')
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('system')
# Method('linguistic parser/generator')
# Method('linguistic parser/generator')
# Method('LFG')
# Generic('system')
# Method('transfer component')
# Method('transfer component')
# Method('parse reduction')
# Method('transfer component')
# Method('stochastic output selection')
# Method('parse reduction')
# Method('maximum-entropy model')

extract = Extract([Triple(Generic("system"), Rel("Part_of"), Method("linguistic parser/generator")), Triple(Method("linguistic parser/generator"), Rel("Part_of"), Method("LFG")), Triple(Generic("system"), Rel("Part_of"), Method("transfer component")), Triple(Method("transfer component"), Rel("Conjunction"), Method("parse reduction")), Triple(Method("transfer component"), Rel("Used_for"), Method("stochastic output selection")), Triple(Method("parse reduction"), Rel("Used_for"), Method("maximum-entropy model"))])
pred: [['system', 'Part_of', 'linguistic parser/generator'], ['linguistic parser/generator', 'Part_of', 'LFG'], ['system', 'Part_of', 'transfer component'], ['transfer component', 'Conjunction', 'parse reduction'], ['transfer component', 'Used_for', 'stochastic output selection'], ['parse reduction', 'Used_for', 'maximum-entropy model']]
trues: [['linguistic parser/generator', 'Part_of', 'system'], ['linguistic parser/generator', 'Used_for', 'LFG'], ['linguistic parser/generator', 'Conjunction', 'transfer component'], ['transfer component', 'Part_of', 'system'], ['transfer component', 'Used_for', 'parse reduction'], ['transfer component', 'Conjunction', 'maximum-entropy model'], ['packed parse forests', 'Used_for', 'parse reduction'], ['maximum-entropy model', 'Part_of', 'system'], ['maximum-entropy model', 'Used_for', 'stochastic output selection']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30023923444976075, 0.32982917214191854, 0.3143393863494051]
text: The surface realizations of morphological constructions are constrained and modified by a number of phonetic rules such as vowel harmony .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Other_scientific_term('vowel harmony')
# Other_scientific_term('phonetic rules')
# Other_scientific_term('vowel harmony')
# Other_scientific_term('phonetic rules')
# Other_scientific_term('phonetic rules')
# Other_scientific_term('morphological constructions')

extract = Extract([Triple(Other_scientific_term("vowel harmony"), Rel("Used_for"), Other_scientific_term("phonetic rules")), Triple(Other_scientific_term("vowel harmony"), Rel("Hyponym_of"), Other_scientific_term("phonetic rules")), Triple(Other_scientific_term("phonetic rules"), Rel("Used_for"), Other_scientific_term("morphological constructions"))])
pred: [['vowel harmony', 'Used_for', 'phonetic rules'], ['vowel harmony', 'Hyponym_of', 'phonetic rules'], ['phonetic rules', 'Used_for', 'morphological constructions']]
trues: [['phonetic rules', 'Used_for', 'surface realizations of morphological constructions'], ['vowel harmony', 'Hyponym_of', 'phonetic rules']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.300357568533969, 0.3302752293577982, 0.31460674157303375]
text: The integrated learning system has been experimentally validated in simulated construction and ooce domains .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('simulated construction and ooce domains')
# Generic('integrated learning system')
# Material('simulated construction and ooce domains')
# Generic('integrated learning system')

extract = Extract([Triple(Material("simulated construction and ooce domains"), Rel("Evaluate_for"), Generic("integrated learning system")), Triple(Material("simulated construction and ooce domains"), Rel("Evaluate_for"), Generic("integrated learning system"))])
pred: [['simulated construction and ooce domains', 'Evaluate_for', 'integrated learning system'], ['simulated construction and ooce domains', 'Evaluate_for', 'integrated learning system']]
trues: [['simulated construction', 'Evaluate_for', 'integrated learning system'], ['simulated construction', 'Conjunction', 'ooce domains'], ['ooce domains', 'Evaluate_for', 'integrated learning system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3, 0.3289817232375979, 0.3138231631382316]
text: We have built and will demonstrate an application of this approach called LCS-Marine .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('application')
# Method('approach')

extract = Extract([Triple(Generic("application"), Rel("Used_for"), Method("approach"))])
pred: [['application', 'Used_for', 'approach']]
trues: [['approach', 'Used_for', 'LCS-Marine']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29964328180737215, 0.3285528031290743, 0.3134328358208955]
text: We then derive a scalable stochastic gradient descent algorithm for the resulting learning problem .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('stochastic gradient descent algorithm')
# Task('learning problem')

extract = Extract([Triple(Method("stochastic gradient descent algorithm"), Rel("Used_for"), Task("learning problem"))])
pred: [['stochastic gradient descent algorithm', 'Used_for', 'learning problem']]
trues: [['stochastic gradient descent algorithm', 'Used_for', 'learning problem']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3004750593824228, 0.3294270833333333, 0.31428571428571433]
text: Experiment results on ACE corpora show that this spectral clustering based approach outperforms the other clustering methods .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('ACE corpora')
# Generic('approach')
# Generic('approach')
# Method('clustering methods')
# Method('clustering methods')
# Generic('approach')

extract = Extract([Triple(Material("ACE corpora"), Rel("Evaluate_for"), Generic("approach")), Triple(Generic("approach"), Rel("Compare"), Method("clustering methods")), Triple(Method("clustering methods"), Rel("Evaluate_for"), Generic("approach"))])
pred: [['ACE corpora', 'Evaluate_for', 'approach'], ['approach', 'Compare', 'clustering methods'], ['clustering methods', 'Evaluate_for', 'approach']]
trues: [['ACE corpora', 'Evaluate_for', 'spectral clustering based approach'], ['ACE corpora', 'Evaluate_for', 'clustering methods'], ['spectral clustering based approach', 'Compare', 'clustering methods']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29940828402366865, 0.32814526588845655, 0.3131188118811881]
text: The results of the experiment show that in most of the cases the cooccurrence statistics indeed reflect the semantic constraints and thus provide a basis for a useful disambiguation tool .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('cooccurrence statistics')
# Task('disambiguation tool')

extract = Extract([Triple(Other_scientific_term("cooccurrence statistics"), Rel("Used_for"), Task("disambiguation tool"))])
pred: [['cooccurrence statistics', 'Used_for', 'disambiguation tool']]
trues: [['cooccurrence statistics', 'Used_for', 'disambiguation tool']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30023640661938533, 0.3290155440414508, 0.3139678615574784]
text: A method for producing such phrases from a word-aligned corpora is proposed .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Material('word-aligned corpora')
# Generic('phrases')

extract = Extract([Triple(Material("word-aligned corpora"), Rel("Used_for"), Generic("phrases"))])
pred: [['word-aligned corpora', 'Used_for', 'phrases']]
trues: [['method', 'Used_for', 'phrases'], ['word-aligned corpora', 'Evaluate_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29988193624557263, 0.3281653746770026, 0.3133867982726712]
text: In spite of over two decades of intense research , illumination and pose invariance remain prohibitively challenging aspects of face recognition for most practical applications .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Feature_of')
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('illumination and pose')
# Task('face recognition')
# Other_scientific_term('illumination and pose')
# Material('practical applications')
# Material('practical applications')
# Task('face recognition')

extract = Extract([Triple(Other_scientific_term("illumination and pose"), Rel("Part_of"), Task("face recognition")), Triple(Other_scientific_term("illumination and pose"), Rel("Feature_of"), Material("practical applications")), Triple(Material("practical applications"), Rel("Feature_of"), Task("face recognition"))])
pred: [['illumination and pose', 'Part_of', 'face recognition'], ['illumination and pose', 'Feature_of', 'practical applications'], ['practical applications', 'Feature_of', 'face recognition']]
trues: [['illumination', 'Conjunction', 'pose invariance'], ['illumination', 'Part_of', 'face recognition'], ['pose invariance', 'Part_of', 'face recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2988235294117647, 0.3268983268983269, 0.31223110018438843]
text: This paper presents a machine learning approach to bare slice disambiguation in dialogue .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('machine learning approach')
# Task('bare slice disambiguation in dialogue')

extract = Extract([Triple(Method("machine learning approach"), Rel("Used_for"), Task("bare slice disambiguation in dialogue"))])
pred: [['machine learning approach', 'Used_for', 'bare slice disambiguation in dialogue']]
trues: [['machine learning approach', 'Used_for', 'bare slice disambiguation'], ['dialogue', 'Used_for', 'bare slice disambiguation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2984723854289072, 0.32605905006418484, 0.31165644171779144]
text: We extract a set of heuristic principles from a corpus-based sample and formulate them as probabilistic Horn clauses .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('corpus-based sample')
# Other_scientific_term('heuristic principles')
# Method('probabilistic Horn clauses')
# Other_scientific_term('heuristic principles')

extract = Extract([Triple(Other_scientific_term("corpus-based sample"), Rel("Used_for"), Other_scientific_term("heuristic principles")), Triple(Method("probabilistic Horn clauses"), Rel("Used_for"), Other_scientific_term("heuristic principles"))])
pred: [['corpus-based sample', 'Used_for', 'heuristic principles'], ['probabilistic Horn clauses', 'Used_for', 'heuristic principles']]
trues: [['corpus-based sample', 'Used_for', 'heuristic principles'], ['probabilistic Horn clauses', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.2989449003516999, 0.3265044814340589, 0.31211750305997554]
text: We integrate a spoken language understanding system with intelligent mobile agents that mediate between users and information sources .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('spoken language understanding system')
# Method('intelligent mobile agents')

extract = Extract([Triple(Method("spoken language understanding system"), Rel("Conjunction"), Method("intelligent mobile agents"))])
pred: [['spoken language understanding system', 'Conjunction', 'intelligent mobile agents']]
trues: [['intelligent mobile agents', 'Part_of', 'spoken language understanding system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29859484777517564, 0.32608695652173914, 0.3117359413202934]
text: A purely functional implementation of LR-parsers is given , together with a simple correctness proof .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('functional implementation')
# Method('LR-parsers')
# Method('LR-parsers')
# Task('correctness proof')

extract = Extract([Triple(Method("functional implementation"), Rel("Used_for"), Method("LR-parsers")), Triple(Method("LR-parsers"), Rel("Used_for"), Task("correctness proof"))])
pred: [['functional implementation', 'Used_for', 'LR-parsers'], ['LR-parsers', 'Used_for', 'correctness proof']]
trues: [['correctness proof', 'Conjunction', 'LR-parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29789719626168226, 0.32567049808429116, 0.3111653447223917]
text: In the Object Recognition task , there exists a di-chotomy between the categorization of objects and estimating object pose , where the former necessitates a view-invariant representation , while the latter requires a representation capable of capturing pose information over different categories of objects .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('categorization of objects')
# Task('Object Recognition task')
# Task('categorization of objects')
# Task('estimating object pose')
# Other_scientific_term('view-invariant representation')
# Task('categorization of objects')
# Other_scientific_term('pose information')
# Task('estimating object pose')
# Other_scientific_term('pose information')
# Other_scientific_term('different categories of objects')

extract = Extract([Triple(Task("categorization of objects"), Rel("Hyponym_of"), Task("Object Recognition task")), Triple(Task("categorization of objects"), Rel("Conjunction"), Task("estimating object pose")), Triple(Other_scientific_term("view-invariant representation"), Rel("Used_for"), Task("categorization of objects")), Triple(Other_scientific_term("pose information"), Rel("Used_for"), Task("estimating object pose")), Triple(Other_scientific_term("pose information"), Rel("Used_for"), Other_scientific_term("different categories of objects"))])
pred: [['categorization of objects', 'Hyponym_of', 'Object Recognition task'], ['categorization of objects', 'Conjunction', 'estimating object pose'], ['view-invariant representation', 'Used_for', 'categorization of objects'], ['pose information', 'Used_for', 'estimating object pose'], ['pose information', 'Used_for', 'different categories of objects']]
trues: [['categorization of objects', 'Part_of', 'Object Recognition task'], ['categorization of objects', 'Conjunction', 'estimating object pose'], ['estimating object pose', 'Part_of', 'Object Recognition task'], ['view-invariant representation', 'Used_for', 'former'], ['representation', 'Used_for', 'latter'], ['representation', 'Used_for', 'pose information']]
metrics_sample: [0.2, 0.16666666666666666, 0.1818181818181818]
metrics_current: [0.29732868757259, 0.3244613434727503, 0.31030303030303025]
text: Our study reveals that the syntactic structure features embedded in a parse tree are very effective for relation extraction and these features can be well captured by the convolution tree kernel .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('syntactic structure features')
# Task('relation extraction')
# Other_scientific_term('convolution tree kernel')
# Other_scientific_term('syntactic structure features')
# Other_scientific_term('parse tree')
# Other_scientific_term('syntactic structure features')

extract = Extract([Triple(Other_scientific_term("syntactic structure features"), Rel("Used_for"), Task("relation extraction")), Triple(Other_scientific_term("convolution tree kernel"), Rel("Used_for"), Other_scientific_term("syntactic structure features")), Triple(Other_scientific_term("parse tree"), Rel("Feature_of"), Other_scientific_term("syntactic structure features"))])
pred: [['syntactic structure features', 'Used_for', 'relation extraction'], ['convolution tree kernel', 'Used_for', 'syntactic structure features'], ['parse tree', 'Feature_of', 'syntactic structure features']]
trues: [['syntactic structure features', 'Feature_of', 'parse tree'], ['syntactic structure features', 'Used_for', 'relation extraction'], ['convolution tree kernel', 'Used_for', 'features']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.2974537037037037, 0.3244949494949495, 0.3103864734299517]
text: We show how features that are imaged through a transparent object behave differently from those that are rigidly attached to the scene .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Other_scientific_term('features')
# Other_scientific_term('transparent object')

extract = Extract([Triple(Other_scientific_term("features"), Rel("Compare"), Other_scientific_term("transparent object"))])
pred: [['features', 'Compare', 'transparent object']]
trues: [['those', 'Compare', 'features']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2971098265895954, 0.3240857503152585, 0.31001206272617615]
text: The modified graph is then sent to the UNL-L0 deconverter and the result shown .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('graph')
# Method('UNL-L0 deconverter')
# Generic('graph')
# Other_scientific_term('result')
# Other_scientific_term('result')
# Method('UNL-L0 deconverter')

extract = Extract([Triple(Generic("graph"), Rel("Used_for"), Method("UNL-L0 deconverter")), Triple(Generic("graph"), Rel("Used_for"), Other_scientific_term("result")), Triple(Other_scientific_term("result"), Rel("Used_for"), Method("UNL-L0 deconverter"))])
pred: [['graph', 'Used_for', 'UNL-L0 deconverter'], ['graph', 'Used_for', 'result'], ['result', 'Used_for', 'UNL-L0 deconverter']]
trues: [['graph', 'Used_for', 'UNL-L0 deconverter']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.29723502304147464, 0.3249370277078086, 0.3104693140794224]
text: An experimental evaluation of summarization quality shows a close correlation between the automatic parse-based evaluation and a manual evaluation of generated strings .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Task('automatic parse-based evaluation')
# Task('summarization')
# Task('automatic parse-based evaluation')
# Other_scientific_term('generated strings')
# Task('automatic parse-based evaluation')
# Task('manual evaluation')
# Task('manual evaluation')
# Other_scientific_term('generated strings')

extract = Extract([Triple(Task("automatic parse-based evaluation"), Rel("Evaluate_for"), Task("summarization")), Triple(Task("automatic parse-based evaluation"), Rel("Evaluate_for"), Other_scientific_term("generated strings")), Triple(Task("automatic parse-based evaluation"), Rel("Conjunction"), Task("manual evaluation")), Triple(Task("manual evaluation"), Rel("Evaluate_for"), Other_scientific_term("generated strings"))])
pred: [['automatic parse-based evaluation', 'Evaluate_for', 'summarization'], ['automatic parse-based evaluation', 'Evaluate_for', 'generated strings'], ['automatic parse-based evaluation', 'Conjunction', 'manual evaluation'], ['manual evaluation', 'Evaluate_for', 'generated strings']]
trues: [['summarization quality', 'Evaluate_for', 'automatic parse-based evaluation'], ['automatic parse-based evaluation', 'Compare', 'manual evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2958715596330275, 0.3241206030150754, 0.30935251798561153]
text: The proposed approach does not require a separate segmentation stage and is applicable to cluttered scenes .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Generic('segmentation stage')
# Generic('approach')
# Material('cluttered scenes')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Generic("segmentation stage")), Triple(Generic("approach"), Rel("Used_for"), Material("cluttered scenes"))])
pred: [['approach', 'Used_for', 'segmentation stage'], ['approach', 'Used_for', 'cluttered scenes']]
trues: [['approach', 'Used_for', 'cluttered scenes']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2963386727688787, 0.32496863237139273, 0.30999401555954514]
text: We compare our results to state of the art methods such as mi-cro phase shifting and modulated phase shifting .
result: # The candidate relations for this text are:
# Rel('Compare')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('results')
# Generic('methods')
# Method('mi-cro phase shifting')
# Generic('methods')
# Method('mi-cro phase shifting')
# Method('modulated phase shifting')
# Method('modulated phase shifting')
# Generic('methods')

extract = Extract([Triple(Generic("results"), Rel("Compare"), Generic("methods")), Triple(Method("mi-cro phase shifting"), Rel("Hyponym_of"), Generic("methods")), Triple(Method("mi-cro phase shifting"), Rel("Conjunction"), Method("modulated phase shifting")), Triple(Method("modulated phase shifting"), Rel("Hyponym_of"), Generic("methods"))])
pred: [['results', 'Compare', 'methods'], ['mi-cro phase shifting', 'Hyponym_of', 'methods'], ['mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'], ['modulated phase shifting', 'Hyponym_of', 'methods']]
trues: [['mi-cro phase shifting', 'Hyponym_of', 'state of the art methods'], ['mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'], ['modulated phase shifting', 'Hyponym_of', 'state of the art methods']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.296127562642369, 0.325, 0.3098927294398093]
text: The resulting logical expression is then transformed by a planning algorithm into efficient Prolog , cf. query optimisation in a relational database .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('planning algorithm')
# Method('Prolog')
# Task('query optimisation')
# Method('relational database')

extract = Extract([Triple(Method("planning algorithm"), Rel("Used_for"), Method("Prolog")), Triple(Task("query optimisation"), Rel("Used_for"), Method("relational database"))])
pred: [['planning algorithm', 'Used_for', 'Prolog'], ['query optimisation', 'Used_for', 'relational database']]
trues: [['planning algorithm', 'Used_for', 'logical expression'], ['relational database', 'Used_for', 'query optimisation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29545454545454547, 0.32418952618453867, 0.3091557669441142]
text: We propose a corpus-based method ( Biber ,1993 ; Nagao ,1993 ; Smadja ,1993 ) which generates Noun Classifier Associations ( NCA ) to overcome the problems in classifier assignment and semantic construction of noun phrase .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('corpus-based method')
# Other_scientific_term('Noun Classifier Associations ( NCA )')
# Generic('which')
# Task('classifier assignment')
# Generic('which')
# Task('semantic construction of noun phrase')
# Task('classifier assignment')
# Task('semantic construction of noun phrase')
# Other_scientific_term('Noun Classifier Associations ( NCA )')
# Task('semantic construction of noun phrase')

extract = Extract([Triple(Method("corpus-based method"), Rel("Used_for"), Other_scientific_term("Noun Classifier Associations ( NCA )")), Triple(Generic("which"), Rel("Used_for"), Task("classifier assignment")), Triple(Generic("which"), Rel("Used_for"), Task("semantic construction of noun phrase")), Triple(Task("classifier assignment"), Rel("Conjunction"), Task("semantic construction of noun phrase")), Triple(Other_scientific_term("Noun Classifier Associations ( NCA )"), Rel("Feature_of"), Task("semantic construction of noun phrase"))])
pred: [['corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'], ['which', 'Used_for', 'classifier assignment'], ['which', 'Used_for', 'semantic construction of noun phrase'], ['classifier assignment', 'Conjunction', 'semantic construction of noun phrase'], ['Noun Classifier Associations ( NCA )', 'Feature_of', 'semantic construction of noun phrase']]
trues: [['corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'], ['corpus-based method', 'Used_for', 'classifier assignment'], ['corpus-based method', 'Used_for', 'semantic construction of noun phrase'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'classifier assignment'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'semantic construction of noun phrase'], ['classifier assignment', 'Conjunction', 'semantic construction of noun phrase']]
metrics_sample: [0.4, 0.3333333333333333, 0.3636363636363636]
metrics_current: [0.296045197740113, 0.32425742574257427, 0.3095097460129947]
text: In this paper , we propose a novel moderate positive sample mining method to train robust CNN for person re-identification , dealing with the problem of large variation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('moderate positive sample mining method')
# Method('CNN')
# Method('CNN')
# Task('person re-identification')
# Method('CNN')
# Other_scientific_term('problem of large variation')

extract = Extract([Triple(Method("moderate positive sample mining method"), Rel("Used_for"), Method("CNN")), Triple(Method("CNN"), Rel("Used_for"), Task("person re-identification")), Triple(Method("CNN"), Rel("Used_for"), Other_scientific_term("problem of large variation"))])
pred: [['moderate positive sample mining method', 'Used_for', 'CNN'], ['CNN', 'Used_for', 'person re-identification'], ['CNN', 'Used_for', 'problem of large variation']]
trues: [['moderate positive sample mining method', 'Used_for', 'robust CNN'], ['robust CNN', 'Used_for', 'person re-identification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29504504504504503, 0.3234567901234568, 0.30859835100117783]
text: While current approaches are developed by only considering the low rank plus sparse structure , in many applications , side information of row and/or column entities may also be given , and it is still unclear to what extent could such information help robust PCA .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('approaches')
# Other_scientific_term('low rank plus sparse structure')
# Generic('approaches')
# Task('robust PCA')
# Other_scientific_term('side information')
# Generic('approaches')
# Other_scientific_term('side information')
# Other_scientific_term('low rank plus sparse structure')
# Other_scientific_term('row and/or column entities')
# Other_scientific_term('side information')

extract = Extract([Triple(Generic("approaches"), Rel("Used_for"), Other_scientific_term("low rank plus sparse structure")), Triple(Generic("approaches"), Rel("Used_for"), Task("robust PCA")), Triple(Other_scientific_term("side information"), Rel("Used_for"), Generic("approaches")), Triple(Other_scientific_term("side information"), Rel("Used_for"), Other_scientific_term("low rank plus sparse structure")), Triple(Other_scientific_term("row and/or column entities"), Rel("Conjunction"), Other_scientific_term("side information"))])
pred: [['approaches', 'Used_for', 'low rank plus sparse structure'], ['approaches', 'Used_for', 'robust PCA'], ['side information', 'Used_for', 'approaches'], ['side information', 'Used_for', 'low rank plus sparse structure'], ['row and/or column entities', 'Conjunction', 'side information']]
trues: [['low rank plus sparse structure', 'Used_for', 'approaches'], ['information', 'Used_for', 'robust PCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2933930571108623, 0.3226600985221675, 0.3073313782991202]
text: Here , we leverage a logistic stick-breaking representation and recent innovations in Pólya-gamma augmentation to reformu-late the multinomial distribution in terms of latent variables with jointly Gaussian likelihoods , enabling us to take advantage of a host of Bayesian inference techniques for Gaussian models with minimal overhead .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('logistic stick-breaking representation')
# Generic('us')
# Other_scientific_term('Pólya-gamma augmentation')
# Generic('us')
# Other_scientific_term('latent variables')
# Method('logistic stick-breaking representation')
# Other_scientific_term('jointly Gaussian likelihoods')
# Other_scientific_term('latent variables')
# Other_scientific_term('jointly Gaussian likelihoods')
# Method('Bayesian inference techniques')
# Other_scientific_term('jointly Gaussian likelihoods')
# Method('Bayesian inference techniques')
# Method('Gaussian models')

extract = Extract([Triple(Method("logistic stick-breaking representation"), Rel("Used_for"), Generic("us")), Triple(Other_scientific_term("Pólya-gamma augmentation"), Rel("Used_for"), Generic("us")), Triple(Other_scientific_term("latent variables"), Rel("Feature_of"), Method("logistic stick-breaking representation")), Triple(Other_scientific_term("jointly Gaussian likelihoods"), Rel("Used_for"), Other_scientific_term("latent variables")), Triple(Other_scientific_term("jointly Gaussian likelihoods"), Rel("Used_for"), Method("Bayesian inference techniques")), Triple(Method("Bayesian inference techniques"), Rel("Conjunction"), Method("Gaussian models"))])
pred: [['logistic stick-breaking representation', 'Used_for', 'us'], ['Pólya-gamma augmentation', 'Used_for', 'us'], ['latent variables', 'Feature_of', 'logistic stick-breaking representation'], ['jointly Gaussian likelihoods', 'Used_for', 'latent variables'], ['jointly Gaussian likelihoods', 'Used_for', 'Bayesian inference techniques'], ['Bayesian inference techniques', 'Conjunction', 'Gaussian models']]
trues: [['logistic stick-breaking representation', 'Used_for', 'multinomial distribution'], ['Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'], ['latent variables', 'Part_of', 'multinomial distribution'], ['jointly Gaussian likelihoods', 'Feature_of', 'latent variables'], ['Bayesian inference techniques', 'Used_for', 'Gaussian models'], ['minimal overhead', 'Feature_of', 'Gaussian models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2914349276974416, 0.3202933985330073, 0.3051834595224228]
text: Bayesian inference then samples the rules , disambiguating and combining them to create complex tree structures that maximize a discriminative model 's posterior on a target unlabeled corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Bayesian inference')
# Other_scientific_term('rules')
# Other_scientific_term('rules')
# Method('discriminative model')
# Other_scientific_term('rules')
# Other_scientific_term('tree structures')
# Other_scientific_term('tree structures')
# Method('discriminative model')

extract = Extract([Triple(Method("Bayesian inference"), Rel("Used_for"), Other_scientific_term("rules")), Triple(Other_scientific_term("rules"), Rel("Used_for"), Method("discriminative model")), Triple(Other_scientific_term("rules"), Rel("Used_for"), Other_scientific_term("tree structures")), Triple(Other_scientific_term("tree structures"), Rel("Used_for"), Method("discriminative model"))])
pred: [['Bayesian inference', 'Used_for', 'rules'], ['rules', 'Used_for', 'discriminative model'], ['rules', 'Used_for', 'tree structures'], ['tree structures', 'Used_for', 'discriminative model']]
trues: [['Bayesian inference', 'Used_for', 'rules'], ['them', 'Used_for', 'complex tree structures'], ['complex tree structures', 'Used_for', "discriminative model 's posterior"], ['unlabeled corpus', 'Used_for', "discriminative model 's posterior"]]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.2912513842746401, 0.3199513381995134, 0.30492753623188407]
text: The fact that Turkish is an agglutinating free word order language presents a challenge for language theories .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Other_scientific_term('Turkish')
# Other_scientific_term('agglutinating free word order language')
# Other_scientific_term('Turkish')
# Task('language theories')
# Task('language theories')
# Other_scientific_term('agglutinating free word order language')

extract = Extract([Triple(Other_scientific_term("Turkish"), Rel("Hyponym_of"), Other_scientific_term("agglutinating free word order language")), Triple(Other_scientific_term("Turkish"), Rel("Conjunction"), Task("language theories")), Triple(Task("language theories"), Rel("Hyponym_of"), Other_scientific_term("agglutinating free word order language"))])
pred: [['Turkish', 'Hyponym_of', 'agglutinating free word order language'], ['Turkish', 'Conjunction', 'language theories'], ['language theories', 'Hyponym_of', 'agglutinating free word order language']]
trues: [['Turkish', 'Hyponym_of', 'agglutinating free word order language']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.2913907284768212, 0.32077764277035237, 0.3053788316946212]
text: Full digital resolution is maintained even with low-resolution analog-to-digital conversion , owing to random statistics in the analog summation of binary products .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Method('analog-to-digital conversion')
# Other_scientific_term('Full digital resolution')
# Other_scientific_term('random statistics')
# Other_scientific_term('analog summation of binary products')

extract = Extract([Triple(Method("analog-to-digital conversion"), Rel("Used_for"), Other_scientific_term("Full digital resolution")), Triple(Other_scientific_term("random statistics"), Rel("Feature_of"), Other_scientific_term("analog summation of binary products"))])
pred: [['analog-to-digital conversion', 'Used_for', 'Full digital resolution'], ['random statistics', 'Feature_of', 'analog summation of binary products']]
trues: [['random statistics', 'Part_of', 'analog summation of binary products']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2907488986784141, 0.32038834951456313, 0.30484988452655887]
text: This probably occurs because each model has different strengths and weaknesses for modeling the knowledge sources .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('knowledge sources')
# Generic('model')

extract = Extract([Triple(Other_scientific_term("knowledge sources"), Rel("Used_for"), Generic("model"))])
pred: [['knowledge sources', 'Used_for', 'model']]
trues: [['model', 'Used_for', 'knowledge sources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29042904290429045, 0.32, 0.3044982698961938]
text: A central goal of this research is to merge approaches from pivot MT , interactive MT , and multilingual text authoring .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approaches')
# Task('pivot MT')
# Generic('approaches')
# Task('interactive MT')
# Task('pivot MT')
# Generic('approaches')
# Task('interactive MT')
# Task('multilingual text authoring')
# Task('interactive MT')
# Generic('approaches')
# Task('multilingual text authoring')
# Generic('approaches')

extract = Extract([Triple(Generic("approaches"), Rel("Used_for"), Task("pivot MT")), Triple(Generic("approaches"), Rel("Conjunction"), Task("interactive MT")), Triple(Task("pivot MT"), Rel("Used_for"), Generic("approaches")), Triple(Task("interactive MT"), Rel("Conjunction"), Task("multilingual text authoring")), Triple(Task("interactive MT"), Rel("Used_for"), Generic("approaches")), Triple(Task("multilingual text authoring"), Rel("Used_for"), Generic("approaches"))])
pred: [['approaches', 'Used_for', 'pivot MT'], ['approaches', 'Conjunction', 'interactive MT'], ['pivot MT', 'Used_for', 'approaches'], ['interactive MT', 'Conjunction', 'multilingual text authoring'], ['interactive MT', 'Used_for', 'approaches'], ['multilingual text authoring', 'Used_for', 'approaches']]
trues: [['pivot MT', 'Conjunction', 'interactive MT'], ['interactive MT', 'Conjunction', 'multilingual text authoring']]
metrics_sample: [0.16666666666666666, 0.5, 0.25]
metrics_current: [0.2896174863387978, 0.32043530834340994, 0.304247990815155]
text: Experiments on the TREC Blog track test set show that both groups of credibility indicators significantly improve retrieval effectiveness ; the best performance is achieved when combining them .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Material('TREC Blog track test set')
# Generic('groups of credibility indicators')
# Material('TREC Blog track test set')
# Metric('retrieval effectiveness')
# Generic('groups of credibility indicators')
# Generic('them')
# Generic('groups of credibility indicators')
# Metric('retrieval effectiveness')
# Generic('them')
# Metric('retrieval effectiveness')

extract = Extract([Triple(Material("TREC Blog track test set"), Rel("Evaluate_for"), Generic("groups of credibility indicators")), Triple(Material("TREC Blog track test set"), Rel("Evaluate_for"), Metric("retrieval effectiveness")), Triple(Generic("groups of credibility indicators"), Rel("Conjunction"), Generic("them")), Triple(Generic("groups of credibility indicators"), Rel("Used_for"), Metric("retrieval effectiveness")), Triple(Generic("them"), Rel("Used_for"), Metric("retrieval effectiveness"))])
pred: [['TREC Blog track test set', 'Evaluate_for', 'groups of credibility indicators'], ['TREC Blog track test set', 'Evaluate_for', 'retrieval effectiveness'], ['groups of credibility indicators', 'Conjunction', 'them'], ['groups of credibility indicators', 'Used_for', 'retrieval effectiveness'], ['them', 'Used_for', 'retrieval effectiveness']]
trues: [['TREC Blog track test set', 'Evaluate_for', 'credibility indicators'], ['retrieval effectiveness', 'Evaluate_for', 'credibility indicators']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28804347826086957, 0.31966224366706875, 0.30303030303030304]
text: This has the advantages of efficiency on grammatical input , and robustness in the face of ungrammatical input .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('grammatical input')
# Generic('advantages')
# Other_scientific_term('ungrammatical input')
# Generic('robustness')

extract = Extract([Triple(Other_scientific_term("grammatical input"), Rel("Used_for"), Generic("advantages")), Triple(Other_scientific_term("ungrammatical input"), Rel("Used_for"), Generic("robustness"))])
pred: [['grammatical input', 'Used_for', 'advantages'], ['ungrammatical input', 'Used_for', 'robustness']]
trues: [['ungrammatical input', 'Feature_of', 'robustness']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2874186550976139, 0.3192771084337349, 0.3025114155251142]
text: In comparison with previous works , in this paper it is assumed that the signals are not i.i.d. in each epoch , but obey a first-order autoregressive model .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('first-order autoregressive model')
# Other_scientific_term('signals')

extract = Extract([Triple(Other_scientific_term("first-order autoregressive model"), Rel("Used_for"), Other_scientific_term("signals"))])
pred: [['first-order autoregressive model', 'Used_for', 'signals']]
trues: [['first-order autoregressive model', 'Used_for', 'signals']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.28819068255687974, 0.3200962695547533, 0.3033067274800456]
text: For LR ( 0 ) grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz [ 1 ] and Roberts [ 2 ] .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('algorithm')
# Method('recursive ascent parsers')
# Method('LR ( 0 ) grammars')
# Method('recursive ascent parsers')
# Method('recursive ascent parsers')
# Method('Kruse-man Aretz')
# Method('Kruse-man Aretz')
# Method('Roberts')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Method("recursive ascent parsers")), Triple(Method("LR ( 0 ) grammars"), Rel("Hyponym_of"), Method("recursive ascent parsers")), Triple(Method("recursive ascent parsers"), Rel("Conjunction"), Method("Kruse-man Aretz")), Triple(Method("Kruse-man Aretz"), Rel("Hyponym_of"), Method("Roberts"))])
pred: [['algorithm', 'Used_for', 'recursive ascent parsers'], ['LR ( 0 ) grammars', 'Hyponym_of', 'recursive ascent parsers'], ['recursive ascent parsers', 'Conjunction', 'Kruse-man Aretz'], ['Kruse-man Aretz', 'Hyponym_of', 'Roberts']]
trues: [['algorithm', 'Used_for', 'LR ( 0 ) grammars'], ['algorithm', 'Conjunction', 'recursive ascent parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28694714131607335, 0.31932773109243695, 0.30227272727272725]
text: We also found that OA is crucial for auditory processing by onset neurons ( ONs ) in the next neuronal stage , the auditory brainstem .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Part_of')
# The candidate entities for this text are:
# Other_scientific_term('OA')
# Task('auditory processing')
# Other_scientific_term('OA')
# Other_scientific_term('onset neurons ( ONs )')
# Other_scientific_term('auditory brainstem')
# Other_scientific_term('neuronal stage')

extract = Extract([Triple(Other_scientific_term("OA"), Rel("Used_for"), Task("auditory processing")), Triple(Other_scientific_term("OA"), Rel("Used_for"), Other_scientific_term("onset neurons ( ONs )")), Triple(Other_scientific_term("auditory brainstem"), Rel("Part_of"), Other_scientific_term("neuronal stage"))])
pred: [['OA', 'Used_for', 'auditory processing'], ['OA', 'Used_for', 'onset neurons ( ONs )'], ['auditory brainstem', 'Part_of', 'neuronal stage']]
trues: [['OA', 'Used_for', 'auditory processing'], ['onset neurons ( ONs )', 'Used_for', 'OA']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.2870967741935484, 0.3197604790419162, 0.30254957507082153]
text: Our method takes advantage of the different way in which word senses are lexicalised in English and Chinese , and also exploits the large amount of Chinese text available in corpora and on the Web .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Generic('method')
# Other_scientific_term('word senses')
# Material('English')
# Other_scientific_term('word senses')
# Material('Chinese')
# Other_scientific_term('word senses')
# Material('Chinese text')
# Generic('method')
# Material('corpora')
# Material('Chinese text')
# Material('corpora')
# Material('Web')

extract = Extract([Triple(Generic("method"), Rel("Used_for"), Other_scientific_term("word senses")), Triple(Material("English"), Rel("Used_for"), Other_scientific_term("word senses")), Triple(Material("Chinese"), Rel("Used_for"), Other_scientific_term("word senses")), Triple(Material("Chinese text"), Rel("Used_for"), Generic("method")), Triple(Material("corpora"), Rel("Conjunction"), Material("Chinese text")), Triple(Material("corpora"), Rel("Conjunction"), Material("Web"))])
pred: [['method', 'Used_for', 'word senses'], ['English', 'Used_for', 'word senses'], ['Chinese', 'Used_for', 'word senses'], ['Chinese text', 'Used_for', 'method'], ['corpora', 'Conjunction', 'Chinese text'], ['corpora', 'Conjunction', 'Web']]
trues: [['Chinese text', 'Part_of', 'corpora'], ['Chinese text', 'Part_of', 'Web'], ['corpora', 'Conjunction', 'Web']]
metrics_sample: [0.16666666666666666, 0.3333333333333333, 0.2222222222222222]
metrics_current: [0.2863247863247863, 0.3198090692124105, 0.30214205186020293]
text: Coedition of a natural language text and its representation in some interlingual form seems the best and simplest way to share text revision across languages .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('interlingual form')
# Task('text revision')

extract = Extract([Triple(Other_scientific_term("interlingual form"), Rel("Used_for"), Task("text revision"))])
pred: [['interlingual form', 'Used_for', 'text revision']]
trues: [['Coedition', 'Used_for', 'text revision'], ['natural language text', 'Used_for', 'Coedition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28601921024546423, 0.319047619047619, 0.3016319639842431]
text: We then use the predicates of such clauses to create a set of domain independent features to annotate an input dataset , and run two different machine learning algorithms : SLIPPER , a rule-based learning algorithm , and TiMBL , a memory-based system .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Other_scientific_term('predicates')
# Other_scientific_term('clauses')
# Other_scientific_term('domain independent features')
# Other_scientific_term('predicates')
# Method('SLIPPER')
# Method('machine learning algorithms')
# Method('SLIPPER')
# Method('rule-based learning algorithm')
# Method('TiMBL')
# Method('machine learning algorithms')
# Method('TiMBL')
# Method('memory-based system')

extract = Extract([Triple(Other_scientific_term("predicates"), Rel("Used_for"), Other_scientific_term("clauses")), Triple(Other_scientific_term("domain independent features"), Rel("Used_for"), Other_scientific_term("predicates")), Triple(Method("SLIPPER"), Rel("Hyponym_of"), Method("machine learning algorithms")), Triple(Method("SLIPPER"), Rel("Conjunction"), Method("rule-based learning algorithm")), Triple(Method("TiMBL"), Rel("Hyponym_of"), Method("machine learning algorithms")), Triple(Method("TiMBL"), Rel("Hyponym_of"), Method("memory-based system"))])
pred: [['predicates', 'Used_for', 'clauses'], ['domain independent features', 'Used_for', 'predicates'], ['SLIPPER', 'Hyponym_of', 'machine learning algorithms'], ['SLIPPER', 'Conjunction', 'rule-based learning algorithm'], ['TiMBL', 'Hyponym_of', 'machine learning algorithms'], ['TiMBL', 'Hyponym_of', 'memory-based system']]
trues: [['SLIPPER', 'Hyponym_of', 'rule-based learning algorithm'], ['rule-based learning algorithm', 'Part_of', 'machine learning algorithms'], ['rule-based learning algorithm', 'Compare', 'memory-based system'], ['TiMBL', 'Hyponym_of', 'memory-based system'], ['memory-based system', 'Part_of', 'machine learning algorithms']]
metrics_sample: [0.16666666666666666, 0.2, 0.1818181818181818]
metrics_current: [0.28525980911983034, 0.3183431952662722, 0.3008948545861298]
text: It is particularly valuable to empirical MT research .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('It')
# Task('empirical MT research')

extract = Extract([Triple(Generic("It"), Rel("Used_for"), Task("empirical MT research"))])
pred: [['It', 'Used_for', 'empirical MT research']]
trues: [['It', 'Used_for', 'empirical MT research']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.2860169491525424, 0.3191489361702128, 0.3016759776536313]
text: Our approach is among the first to propose a generative proba-bilistic framework for 3D object categorization .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('3D object categorization')
# Method('generative proba-bilistic framework')
# Task('3D object categorization')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("3D object categorization")), Triple(Method("generative proba-bilistic framework"), Rel("Used_for"), Task("3D object categorization"))])
pred: [['approach', 'Used_for', '3D object categorization'], ['generative proba-bilistic framework', 'Used_for', '3D object categorization']]
trues: [['generative proba-bilistic framework', 'Used_for', '3D object categorization']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2864693446088795, 0.31995277449822906, 0.3022866703848299]
text: However , they provide no guarantee of being more efficient than exhaustive search .
result: # The candidate relations for this text are:
# Rel('Compare')
# The candidate entities for this text are:
# Generic('they')
# Method('exhaustive search')

extract = Extract([Triple(Generic("they"), Rel("Compare"), Method("exhaustive search"))])
pred: [['they', 'Compare', 'exhaustive search']]
trues: [['they', 'Compare', 'exhaustive search']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.28722280887011614, 0.32075471698113206, 0.30306406685236764]
text: We also address a more general problem of matrix rank degeneration & non-isolated minima in the low-rank matrix optimization by using new type of regularizer which approximately enforces the or-thonormality of the learned matrix very efficiently .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('regularizer')
# Task('matrix rank degeneration & non-isolated minima in the low-rank matrix optimization')
# Other_scientific_term('orthonormality')
# Method('regularizer')
# Other_scientific_term('orthonormality')
# Generic('which')

extract = Extract([Triple(Method("regularizer"), Rel("Used_for"), Task("matrix rank degeneration & non-isolated minima in the low-rank matrix optimization")), Triple(Other_scientific_term("orthonormality"), Rel("Feature_of"), Method("regularizer")), Triple(Other_scientific_term("orthonormality"), Rel("Used_for"), Generic("which"))])
pred: [['regularizer', 'Used_for', 'matrix rank degeneration & non-isolated minima in the low-rank matrix optimization'], ['orthonormality', 'Feature_of', 'regularizer'], ['orthonormality', 'Used_for', 'which']]
trues: [['matrix rank degeneration', 'Conjunction', 'non-isolated minima'], ['matrix rank degeneration', 'Feature_of', 'low-rank matrix optimization'], ['non-isolated minima', 'Feature_of', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'or-thonormality'], ['or-thonormality', 'Feature_of', 'learned matrix']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2863157894736842, 0.3185011709601874, 0.3015521064301552]
text: We describe a hierarchy of loss functions that incorporate different levels of linguistic information from word strings , word-to-word alignments from an MT system , and syntactic structure from parse-trees of source and target language sentences .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('hierarchy of loss functions')
# Other_scientific_term('linguistic information')
# Material('word strings')
# Other_scientific_term('linguistic information')
# Material('word strings')
# Other_scientific_term('word-to-word alignments')
# Other_scientific_term('word-to-word alignments')
# Other_scientific_term('linguistic information')
# Other_scientific_term('word-to-word alignments')
# Other_scientific_term('syntactic structure')
# Other_scientific_term('syntactic structure')
# Other_scientific_term('linguistic information')

extract = Extract([Triple(Other_scientific_term("hierarchy of loss functions"), Rel("Used_for"), Other_scientific_term("linguistic information")), Triple(Material("word strings"), Rel("Used_for"), Other_scientific_term("linguistic information")), Triple(Material("word strings"), Rel("Conjunction"), Other_scientific_term("word-to-word alignments")), Triple(Other_scientific_term("word-to-word alignments"), Rel("Used_for"), Other_scientific_term("linguistic information")), Triple(Other_scientific_term("word-to-word alignments"), Rel("Conjunction"), Other_scientific_term("syntactic structure")), Triple(Other_scientific_term("syntactic structure"), Rel("Used_for"), Other_scientific_term("linguistic information"))])
pred: [['hierarchy of loss functions', 'Used_for', 'linguistic information'], ['word strings', 'Used_for', 'linguistic information'], ['word strings', 'Conjunction', 'word-to-word alignments'], ['word-to-word alignments', 'Used_for', 'linguistic information'], ['word-to-word alignments', 'Conjunction', 'syntactic structure'], ['syntactic structure', 'Used_for', 'linguistic information']]
trues: [['linguistic information', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Part_of', 'MT system'], ['syntactic structure', 'Used_for', 'loss functions'], ['parse-trees', 'Part_of', 'syntactic structure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28451882845188287, 0.31664726426076834, 0.29972451790633614]
text: Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Memo-functions')
# Other_scientific_term('parse forest')
# Other_scientific_term('compact representation')
# Other_scientific_term('parse forest')

extract = Extract([Triple(Method("Memo-functions"), Rel("Used_for"), Other_scientific_term("parse forest")), Triple(Other_scientific_term("compact representation"), Rel("Used_for"), Other_scientific_term("parse forest"))])
pred: [['Memo-functions', 'Used_for', 'parse forest'], ['compact representation', 'Used_for', 'parse forest']]
trues: [['Memo-functions', 'Used_for', 'parse forest']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2849686847599165, 0.3174418604651163, 0.30033003300330036]
text: Contrary to most of the existing mixture of viewpoints models , our model establishes explicit correspondences of parts across different viewpoints of the object class .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('model')
# Other_scientific_term('explicit correspondences of parts')
# Generic('model')
# Generic('mixture of viewpoints models')
# Other_scientific_term('explicit correspondences of parts')
# Material('object class')

extract = Extract([Triple(Generic("model"), Rel("Used_for"), Other_scientific_term("explicit correspondences of parts")), Triple(Generic("model"), Rel("Compare"), Generic("mixture of viewpoints models")), Triple(Other_scientific_term("explicit correspondences of parts"), Rel("Used_for"), Material("object class"))])
pred: [['model', 'Used_for', 'explicit correspondences of parts'], ['model', 'Compare', 'mixture of viewpoints models'], ['explicit correspondences of parts', 'Used_for', 'object class']]
trues: [['model', 'Compare', 'mixture of viewpoints models']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.2851196670135276, 0.31823461091753774, 0.300768386388584]
text: The key idea of our approach is to use different view points for reasoning about contradictions and consistencies between multiple depth maps generated with the same stereo algorithm .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Other_scientific_term('contradictions and consistencies')
# Other_scientific_term('multiple depth maps')
# Method('stereo algorithm')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Other_scientific_term("contradictions and consistencies")), Triple(Other_scientific_term("multiple depth maps"), Rel("Used_for"), Method("stereo algorithm"))])
pred: [['approach', 'Used_for', 'contradictions and consistencies'], ['multiple depth maps', 'Used_for', 'stereo algorithm']]
trues: [['view points', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.284527518172378, 0.31786542923433875, 0.30027397260273975]
text: Starting from a DP-based solution to the traveling salesman problem , we present a novel technique to restrict the possible word reordering between source and target language in order to achieve an efficient search algorithm .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('DP-based solution')
# Task('traveling salesman problem')
# Method('DP-based solution')
# Method('search algorithm')

extract = Extract([Triple(Method("DP-based solution"), Rel("Used_for"), Task("traveling salesman problem")), Triple(Method("DP-based solution"), Rel("Used_for"), Method("search algorithm"))])
pred: [['DP-based solution', 'Used_for', 'traveling salesman problem'], ['DP-based solution', 'Used_for', 'search algorithm']]
trues: [['technique', 'Used_for', 'search algorithm']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2839378238341969, 0.3174971031286211, 0.299781181619256]
text: In this work , we study how Convolutional Neural Networks ( CNN ) architectures can be adapted to the task of simultaneous object recognition and pose estimation .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('Convolutional Neural Networks ( CNN ) architectures')
# Task('simultaneous object recognition')
# Method('Convolutional Neural Networks ( CNN ) architectures')
# Task('pose estimation')
# Task('simultaneous object recognition')
# Task('pose estimation')

extract = Extract([Triple(Method("Convolutional Neural Networks ( CNN ) architectures"), Rel("Used_for"), Task("simultaneous object recognition")), Triple(Method("Convolutional Neural Networks ( CNN ) architectures"), Rel("Used_for"), Task("pose estimation")), Triple(Task("simultaneous object recognition"), Rel("Conjunction"), Task("pose estimation"))])
pred: [['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'simultaneous object recognition'], ['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'pose estimation'], ['simultaneous object recognition', 'Conjunction', 'pose estimation']]
trues: [['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'object recognition'], ['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'pose estimation'], ['object recognition', 'Conjunction', 'pose estimation']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.2840909090909091, 0.31755196304849886, 0.29989094874591055]
text: The objective of this work is to recognize faces using video sequences both for training and recognition input , in a realistic , unconstrained setup in which lighting , pose and user motion pattern have a wide variability and face images are of low resolution .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Feature_of')
# Rel('Conjunction')
# Rel('Feature_of')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('video sequences')
# Task('training and recognition input')
# Material('video sequences')
# Other_scientific_term('realistic, unconstrained setup')
# Material('low resolution')
# Task('training and recognition input')
# Other_scientific_term('lighting')
# Other_scientific_term('realistic, unconstrained setup')
# Other_scientific_term('lighting')
# Other_scientific_term('pose')
# Other_scientific_term('pose')
# Other_scientific_term('realistic, unconstrained setup')
# Other_scientific_term('pose')
# Other_scientific_term('user motion pattern')
# Other_scientific_term('user motion pattern')
# Other_scientific_term('realistic, unconstrained setup')

extract = Extract([Triple(Material("video sequences"), Rel("Used_for"), Task("training and recognition input")), Triple(Material("video sequences"), Rel("Used_for"), Other_scientific_term("realistic, unconstrained setup")), Triple(Material("low resolution"), Rel("Used_for"), Task("training and recognition input")), Triple(Other_scientific_term("lighting"), Rel("Feature_of"), Other_scientific_term("realistic, unconstrained setup")), Triple(Other_scientific_term("lighting"), Rel("Feature_of"), Other_scientific_term("pose")), Triple(Other_scientific_term("pose"), Rel("Conjunction"), Other_scientific_term("realistic, unconstrained setup")), Triple(Other_scientific_term("pose"), Rel("Feature_of"), Other_scientific_term("user motion pattern")), Triple(Other_scientific_term("user motion pattern"), Rel("Conjunction"), Other_scientific_term("realistic, unconstrained setup"))])
pred: [['video sequences', 'Used_for', 'training and recognition input'], ['video sequences', 'Used_for', 'realistic, unconstrained setup'], ['low resolution', 'Used_for', 'training and recognition input'], ['lighting', 'Feature_of', 'realistic, unconstrained setup'], ['lighting', 'Feature_of', 'pose'], ['pose', 'Conjunction', 'realistic, unconstrained setup'], ['pose', 'Feature_of', 'user motion pattern'], ['user motion pattern', 'Conjunction', 'realistic, unconstrained setup']]
trues: [['lighting', 'Conjunction', 'pose'], ['pose', 'Conjunction', 'user motion pattern'], ['resolution', 'Feature_of', 'face images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2817622950819672, 0.31645569620253167, 0.2981029810298103]
text: Experiments on synthetic and real data show that both our triangulation and LAGC algorithms outperform state-of-the-art solutions in accuracy and visual quality .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('synthetic and real data')
# Generic('triangulation and LAGC algorithms')
# Generic('triangulation and LAGC algorithms')
# Generic('state-of-the-art solutions')
# Metric('accuracy')
# Generic('triangulation and LAGC algorithms')
# Metric('accuracy')
# Generic('state-of-the-art solutions')
# Metric('visual quality')
# Generic('triangulation and LAGC algorithms')
# Metric('visual quality')
# Generic('state-of-the-art solutions')

extract = Extract([Triple(Generic("synthetic and real data"), Rel("Evaluate_for"), Generic("triangulation and LAGC algorithms")), Triple(Generic("triangulation and LAGC algorithms"), Rel("Compare"), Generic("state-of-the-art solutions")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("triangulation and LAGC algorithms")), Triple(Metric("accuracy"), Rel("Evaluate_for"), Generic("state-of-the-art solutions")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("triangulation and LAGC algorithms")), Triple(Metric("visual quality"), Rel("Evaluate_for"), Generic("state-of-the-art solutions"))])
pred: [['synthetic and real data', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['triangulation and LAGC algorithms', 'Compare', 'state-of-the-art solutions'], ['accuracy', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['accuracy', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions']]
trues: [['synthetic and real data', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['synthetic and real data', 'Evaluate_for', 'state-of-the-art solutions'], ['triangulation and LAGC algorithms', 'Compare', 'state-of-the-art solutions'], ['accuracy', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['accuracy', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions']]
metrics_sample: [1.0, 0.8571428571428571, 0.923076923076923]
metrics_current: [0.2861507128309572, 0.3207762557077626, 0.302475780409042]
text: Inherent ambiguities in the computation of features are addressed by using a data-dependent bandwidth for density estimation using kernels .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('data-dependent bandwidth')
# Method('density estimation')

extract = Extract([Triple(Other_scientific_term("data-dependent bandwidth"), Rel("Used_for"), Method("density estimation"))])
pred: [['data-dependent bandwidth', 'Used_for', 'density estimation']]
trues: [['ambiguities', 'Feature_of', 'computation of features'], ['data-dependent bandwidth', 'Used_for', 'ambiguities'], ['data-dependent bandwidth', 'Used_for', 'density estimation'], ['kernels', 'Used_for', 'density estimation']]
metrics_sample: [1.0, 0.25, 0.4]
metrics_current: [0.28687690742624616, 0.32045454545454544, 0.3027375201288245]
text: Experiments using the SemCor and Senseval-3 data sets demonstrate that our ensembles yield significantly better results when compared with state-of-the-art .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('SemCor and Senseval-3 data sets')
# Generic('ensembles')
# Material('SemCor and Senseval-3 data sets')
# Generic('state-of-the-art')
# Generic('ensembles')
# Generic('state-of-the-art')
# Generic('state-of-the-art')
# Generic('ensembles')

extract = Extract([Triple(Material("SemCor and Senseval-3 data sets"), Rel("Evaluate_for"), Generic("ensembles")), Triple(Material("SemCor and Senseval-3 data sets"), Rel("Evaluate_for"), Generic("state-of-the-art")), Triple(Generic("ensembles"), Rel("Compare"), Generic("state-of-the-art")), Triple(Generic("state-of-the-art"), Rel("Evaluate_for"), Generic("ensembles"))])
pred: [['SemCor and Senseval-3 data sets', 'Evaluate_for', 'ensembles'], ['SemCor and Senseval-3 data sets', 'Evaluate_for', 'state-of-the-art'], ['ensembles', 'Compare', 'state-of-the-art'], ['state-of-the-art', 'Evaluate_for', 'ensembles']]
trues: [['SemCor and Senseval-3 data sets', 'Evaluate_for', 'ensembles'], ['SemCor and Senseval-3 data sets', 'Evaluate_for', 'state-of-the-art']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2877406281661601, 0.3219954648526077, 0.3039058319957196]
text: This research is part of a larger study of anaphoric expressions , the results of which will be incorporated into a natural language generation system .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('research')
# Other_scientific_term('anaphoric expressions')
# Generic('results')
# Method('natural language generation system')

extract = Extract([Triple(Generic("research"), Rel("Part_of"), Other_scientific_term("anaphoric expressions")), Triple(Generic("results"), Rel("Used_for"), Method("natural language generation system"))])
pred: [['research', 'Part_of', 'anaphoric expressions'], ['results', 'Used_for', 'natural language generation system']]
trues: [['anaphoric expressions', 'Used_for', 'natural language generation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2871587462082912, 0.32163080407701017, 0.3034188034188034]
text: We use gray-level band-pass white noise patterns that increase robustness to indirect lighting and scene discontinuities .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Material('gray-level band-pass white noise patterns')
# Other_scientific_term('indirect lighting')
# Material('gray-level band-pass white noise patterns')
# Other_scientific_term('scene discontinuities')
# Other_scientific_term('indirect lighting')
# Other_scientific_term('scene discontinuities')

extract = Extract([Triple(Material("gray-level band-pass white noise patterns"), Rel("Used_for"), Other_scientific_term("indirect lighting")), Triple(Material("gray-level band-pass white noise patterns"), Rel("Used_for"), Other_scientific_term("scene discontinuities")), Triple(Other_scientific_term("indirect lighting"), Rel("Conjunction"), Other_scientific_term("scene discontinuities"))])
pred: [['gray-level band-pass white noise patterns', 'Used_for', 'indirect lighting'], ['gray-level band-pass white noise patterns', 'Used_for', 'scene discontinuities'], ['indirect lighting', 'Conjunction', 'scene discontinuities']]
trues: [['robustness', 'Evaluate_for', 'gray-level band-pass white noise patterns'], ['indirect lighting', 'Feature_of', 'robustness'], ['indirect lighting', 'Conjunction', 'scene discontinuities'], ['scene discontinuities', 'Feature_of', 'robustness']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.2872983870967742, 0.32130777903043967, 0.30335284725918044]
text: We conclude that previous approaches have neglected to evaluate systems in the context of their use , e.g. solving a task requiring data retrieval .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approaches')
# Task('task')

extract = Extract([Triple(Generic("approaches"), Rel("Used_for"), Task("task"))])
pred: [['approaches', 'Used_for', 'task']]
trues: [['approaches', 'Evaluate_for', 'systems'], ['systems', 'Used_for', 'task'], ['data retrieval', 'Part_of', 'task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28700906344410876, 0.3202247191011236, 0.3027084439723845]
text: It models reflection as regions containing two different layers moving over each other .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('layers')
# Other_scientific_term('reflection')

extract = Extract([Triple(Other_scientific_term("layers"), Rel("Used_for"), Other_scientific_term("reflection"))])
pred: [['layers', 'Used_for', 'reflection']]
trues: [['It', 'Used_for', 'reflection']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28672032193158953, 0.31986531986531985, 0.3023872679045093]
text: Sentence boundary detection in speech is important for enriching speech recognition output , making it easier for humans to read and downstream modules to process .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Task('Sentence boundary detection')
# Task('speech recognition')
# Task('speech recognition')
# Material('humans')

extract = Extract([Triple(Task("Sentence boundary detection"), Rel("Used_for"), Task("speech recognition")), Triple(Task("speech recognition"), Rel("Used_for"), Material("humans"))])
pred: [['Sentence boundary detection', 'Used_for', 'speech recognition'], ['speech recognition', 'Used_for', 'humans']]
trues: [['Sentence boundary detection', 'Used_for', 'speech recognition output'], ['speech', 'Used_for', 'Sentence boundary detection']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.286144578313253, 0.3191489361702128, 0.30174695606140817]
text: We test our algorithm on the detection task and the viewpoint classification task by using '' car '' category from both the Savarese et al. 2007 and PASCAL VOC 2006 datasets .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Generic('algorithm')
# Task('detection task')
# Generic('algorithm')
# Task('viewpoint classification task')
# Task('detection task')
# Task('viewpoint classification task')
# Material(''' car '' category')
# Generic('algorithm')
# Material('Savarese et al. 2007')
# Material(''' car '' category')
# Material('Savarese et al. 2007')
# Material('PASCAL VOC 2006 datasets')
# Material('PASCAL VOC 2006 datasets')
# Material(''' car '' category')

extract = Extract([Triple(Generic("algorithm"), Rel("Used_for"), Task("detection task")), Triple(Generic("algorithm"), Rel("Used_for"), Task("viewpoint classification task")), Triple(Task("detection task"), Rel("Conjunction"), Task("viewpoint classification task")), Triple(Material("'' car '' category"), Rel("Hyponym_of"), Generic("algorithm")), Triple(Material("Savarese et al. 2007"), Rel("Conjunction"), Material("PASCAL VOC 2006 datasets")), Triple(Material("PASCAL VOC 2006 datasets"), Rel("Hyponym_of"), Material("'' car '' category"))])
pred: [['algorithm', 'Used_for', 'detection task'], ['algorithm', 'Used_for', 'viewpoint classification task'], ['detection task', 'Conjunction', 'viewpoint classification task'], ["'' car '' category", 'Hyponym_of', 'algorithm'], ['Savarese et al. 2007', 'Conjunction', 'PASCAL VOC 2006 datasets'], ['PASCAL VOC 2006 datasets', 'Hyponym_of', "'' car '' category"]]
trues: [['algorithm', 'Used_for', 'detection task'], ['algorithm', 'Used_for', 'viewpoint classification task'], ['detection task', 'Conjunction', 'viewpoint classification task'], ['PASCAL VOC 2006 datasets', 'Evaluate_for', 'algorithm']]
metrics_sample: [0.5, 0.75, 0.6]
metrics_current: [0.2874251497005988, 0.3210702341137124, 0.30331753554502366]
text: In this paper , we evaluate the use of a conditional random field ( CRF ) for this task and relate results with this model to our prior work .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('conditional random field ( CRF )')
# Generic('task')

extract = Extract([Triple(Method("conditional random field ( CRF )"), Rel("Used_for"), Generic("task"))])
pred: [['conditional random field ( CRF )', 'Used_for', 'task']]
trues: [['conditional random field ( CRF )', 'Used_for', 'task']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.288135593220339, 0.321826280623608, 0.30405049973698056]
text: For example , nucleotides in a DNA sequence , children 's names in a given state and year , and text documents are all commonly modeled with multinomial distributions .
result: # The candidate relations for this text are:
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Conjunction')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Other_scientific_term('nucleotides')
# Material('DNA sequence')
# Other_scientific_term('nucleotides')
# Other_scientific_term('children's names')
# Other_scientific_term('children's names')
# Material('DNA sequence')
# Other_scientific_term('children's names')
# Other_scientific_term('text documents')
# Other_scientific_term('text documents')
# Material('DNA sequence')

extract = Extract([Triple(Other_scientific_term("nucleotides"), Rel("Hyponym_of"), Material("DNA sequence")), Triple(Other_scientific_term("nucleotides"), Rel("Conjunction"), Other_scientific_term("children's names")), Triple(Other_scientific_term("children's names"), Rel("Hyponym_of"), Material("DNA sequence")), Triple(Other_scientific_term("children's names"), Rel("Conjunction"), Other_scientific_term("text documents")), Triple(Other_scientific_term("text documents"), Rel("Hyponym_of"), Material("DNA sequence"))])
pred: [['nucleotides', 'Hyponym_of', 'DNA sequence'], ['nucleotides', 'Conjunction', "children's names"], ["children's names", 'Hyponym_of', 'DNA sequence'], ["children's names", 'Conjunction', 'text documents'], ['text documents', 'Hyponym_of', 'DNA sequence']]
trues: [['multinomial distributions', 'Used_for', 'nucleotides in a DNA sequence'], ['multinomial distributions', 'Used_for', 'text documents']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2867063492063492, 0.3211111111111111, 0.3029350104821803]
text: Our technique gives a substantial improvement in paraphrase classification accuracy over all of the other models used in the experiments .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('Our technique')
# Task('paraphrase classification')
# Generic('Our technique')
# Generic('models')
# Task('paraphrase classification')
# Generic('models')
# Task('paraphrase classification')
# Metric('accuracy')

extract = Extract([Triple(Generic("Our technique"), Rel("Used_for"), Task("paraphrase classification")), Triple(Generic("Our technique"), Rel("Compare"), Generic("models")), Triple(Task("paraphrase classification"), Rel("Evaluate_for"), Generic("models")), Triple(Task("paraphrase classification"), Rel("Evaluate_for"), Metric("accuracy"))])
pred: [['Our technique', 'Used_for', 'paraphrase classification'], ['Our technique', 'Compare', 'models'], ['paraphrase classification', 'Evaluate_for', 'models'], ['paraphrase classification', 'Evaluate_for', 'accuracy']]
trues: [['technique', 'Compare', 'models'], ['paraphrase classification accuracy', 'Evaluate_for', 'technique'], ['paraphrase classification accuracy', 'Evaluate_for', 'models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2855731225296443, 0.32004429678848284, 0.30182767624020884]
text: From this point of view , selecting suitable positive ( i.e. intra-class ) training samples within a local range is critical for training the CNN embedding , especially when the data has large intra-class variations .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# The candidate entities for this text are:
# Material('positive ( i.e. intra-class ) training samples')
# Method('CNN embedding')
# Other_scientific_term('intra-class variations')
# Material('data')

extract = Extract([Triple(Material("positive ( i.e. intra-class ) training samples"), Rel("Used_for"), Method("CNN embedding")), Triple(Other_scientific_term("intra-class variations"), Rel("Feature_of"), Material("data"))])
pred: [['positive ( i.e. intra-class ) training samples', 'Used_for', 'CNN embedding'], ['intra-class variations', 'Feature_of', 'data']]
trues: [['intra-class variations', 'Feature_of', 'data']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.2859960552268245, 0.32079646017699115, 0.3023983315954119]
text: We show that combining anisotropic meshing with a non-quadratic approach to regularization enables us to obtain satisfactory reconstruction results using triangulations with few vertices .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('anisotropic meshing')
# Generic('approach')
# Method('non-quadratic approach to regularization')
# Task('reconstruction')
# Method('non-quadratic approach to regularization')
# Method('anisotropic meshing')

extract = Extract([Triple(Method("anisotropic meshing"), Rel("Used_for"), Generic("approach")), Triple(Method("non-quadratic approach to regularization"), Rel("Used_for"), Task("reconstruction")), Triple(Method("non-quadratic approach to regularization"), Rel("Used_for"), Method("anisotropic meshing"))])
pred: [['anisotropic meshing', 'Used_for', 'approach'], ['non-quadratic approach to regularization', 'Used_for', 'reconstruction'], ['non-quadratic approach to regularization', 'Used_for', 'anisotropic meshing']]
trues: [['anisotropic meshing', 'Conjunction', 'non-quadratic approach'], ['anisotropic meshing', 'Used_for', 'reconstruction'], ['non-quadratic approach', 'Used_for', 'regularization'], ['non-quadratic approach', 'Used_for', 'reconstruction'], ['triangulations', 'Used_for', 'reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28515240904621436, 0.31903190319031904, 0.30114226375908626]
text: The two main contributions of this paper are : i ) a new type of three-plane graph for dense-stereo dynamic-programming , that encourages correct occlusion labeling ; ii ) a compact geometric derivation for novel-view synthesis by direct projection of the minimum-cost surface .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('three-plane graph')
# Method('dense-stereo dynamic-programming')
# Method('three-plane graph')
# Other_scientific_term('occlusion labeling')
# Method('direct projection of the minimum-cost surface')
# Task('novel-view synthesis')

extract = Extract([Triple(Method("three-plane graph"), Rel("Used_for"), Method("dense-stereo dynamic-programming")), Triple(Method("three-plane graph"), Rel("Used_for"), Other_scientific_term("occlusion labeling")), Triple(Method("direct projection of the minimum-cost surface"), Rel("Used_for"), Task("novel-view synthesis"))])
pred: [['three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'], ['three-plane graph', 'Used_for', 'occlusion labeling'], ['direct projection of the minimum-cost surface', 'Used_for', 'novel-view synthesis']]
trues: [['three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'], ['dense-stereo dynamic-programming', 'Used_for', 'occlusion labeling'], ['compact geometric derivation', 'Used_for', 'novel-view synthesis'], ['direct projection of the minimum-cost surface', 'Used_for', 'compact geometric derivation']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.2852941176470588, 0.3187294633077766, 0.30108639420589756]
text: Labeled data is replaced by a few hand-crafted rules that encode basic syntactic knowledge .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('hand-crafted rules')
# Material('Labeled data')

extract = Extract([Triple(Method("hand-crafted rules"), Rel("Used_for"), Material("Labeled data"))])
pred: [['hand-crafted rules', 'Used_for', 'Labeled data']]
trues: [['hand-crafted rules', 'Used_for', 'syntactic knowledge']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2850146914789422, 0.31838074398249455, 0.3007751937984496]
text: Another problem with determiners is their inherent ambiguity .
result: # The candidate relations for this text are:
# Rel('Feature_of')
# The candidate entities for this text are:
# Other_scientific_term('ambiguity')
# Other_scientific_term('determiners')

extract = Extract([Triple(Other_scientific_term("ambiguity"), Rel("Feature_of"), Other_scientific_term("determiners"))])
pred: [['ambiguity', 'Feature_of', 'determiners']]
trues: [['ambiguity', 'Feature_of', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.2857142857142857, 0.3191256830601093, 0.3014971605575632]
text: An important area of learning in autonomous agents is the ability to learn domain-speciic models of actions to be used by planning systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('planning systems')
# Method('domain-speciic models of actions')

extract = Extract([Triple(Method("planning systems"), Rel("Used_for"), Method("domain-speciic models of actions"))])
pred: [['planning systems', 'Used_for', 'domain-speciic models of actions']]
trues: [['learning in autonomous agents', 'Used_for', 'domain-speciic models of actions'], ['planning systems', 'Used_for', 'domain-speciic models of actions']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.28641251221896386, 0.31952017448200654, 0.3020618556701031]
text: Finally , we show how the estimation of the tensors from point correspondences is achieved through factorization , and discuss the estimation from line correspondences .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Other_scientific_term('tensors')
# Other_scientific_term('point correspondences')
# Method('factorization')
# Other_scientific_term('point correspondences')
# Method('factorization')
# Other_scientific_term('line correspondences')

extract = Extract([Triple(Other_scientific_term("tensors"), Rel("Used_for"), Other_scientific_term("point correspondences")), Triple(Method("factorization"), Rel("Used_for"), Other_scientific_term("point correspondences")), Triple(Method("factorization"), Rel("Used_for"), Other_scientific_term("line correspondences"))])
pred: [['tensors', 'Used_for', 'point correspondences'], ['factorization', 'Used_for', 'point correspondences'], ['factorization', 'Used_for', 'line correspondences']]
trues: [['point correspondences', 'Used_for', 'estimation of the tensors'], ['factorization', 'Used_for', 'tensors'], ['line correspondences', 'Used_for', 'estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2855750487329435, 0.3184782608695652, 0.3011305241521069]
text: Such a triangulation provides a piecewise-linear interpolant useful for light field super-resolution .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('interpolant')
# Task('light field super-resolution')

extract = Extract([Triple(Generic("interpolant"), Rel("Used_for"), Task("light field super-resolution"))])
pred: [['interpolant', 'Used_for', 'light field super-resolution']]
trues: [['triangulation', 'Used_for', 'piecewise-linear interpolant'], ['piecewise-linear interpolant', 'Used_for', 'light field super-resolution']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28529698149951316, 0.31778741865509763, 0.3006670087224218]
text: In addition , we improve the learning by a metric weight constraint , so that the learned metric has a better generalization ability .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('metric weight constraint')
# Method('learning')
# Method('metric weight constraint')
# Other_scientific_term('generalization ability')

extract = Extract([Triple(Method("metric weight constraint"), Rel("Used_for"), Method("learning")), Triple(Method("metric weight constraint"), Rel("Used_for"), Other_scientific_term("generalization ability"))])
pred: [['metric weight constraint', 'Used_for', 'learning'], ['metric weight constraint', 'Used_for', 'generalization ability']]
trues: [['metric weight constraint', 'Used_for', 'learning'], ['generalization ability', 'Feature_of', 'learned metric']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.2857142857142857, 0.3181818181818182, 0.30107526881720426]
text: The applicability of many current information extraction techniques is severely limited by the need for supervised training data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('information extraction techniques')
# Other_scientific_term('supervised training data')

extract = Extract([Triple(Method("information extraction techniques"), Rel("Used_for"), Other_scientific_term("supervised training data"))])
pred: [['information extraction techniques', 'Used_for', 'supervised training data']]
trues: [['supervised training data', 'Used_for', 'information extraction techniques']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2854368932038835, 0.3178378378378378, 0.30076726342711]
text: We report the performance of the MBR decoders on a Chinese-to-English translation task .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('MBR decoders')
# Task('Chinese-to-English translation task')

extract = Extract([Triple(Method("MBR decoders"), Rel("Evaluate_for"), Task("Chinese-to-English translation task"))])
pred: [['MBR decoders', 'Evaluate_for', 'Chinese-to-English translation task']]
trues: [['MBR decoders', 'Used_for', 'Chinese-to-English translation task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2851600387972842, 0.3174946004319654, 0.30045988758303527]
text: The intentional structure captures the discourse-relevant purposes , expressed in each of the linguistic segments as well as relationships among them .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Feature_of')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('intentional structure')
# Other_scientific_term('discourse-relevant purposes')
# Other_scientific_term('discourse-relevant purposes')
# Other_scientific_term('linguistic segments')
# Other_scientific_term('linguistic segments')
# Other_scientific_term('relationships')

extract = Extract([Triple(Method("intentional structure"), Rel("Used_for"), Other_scientific_term("discourse-relevant purposes")), Triple(Other_scientific_term("discourse-relevant purposes"), Rel("Feature_of"), Other_scientific_term("linguistic segments")), Triple(Other_scientific_term("linguistic segments"), Rel("Conjunction"), Other_scientific_term("relationships"))])
pred: [['intentional structure', 'Used_for', 'discourse-relevant purposes'], ['discourse-relevant purposes', 'Feature_of', 'linguistic segments'], ['linguistic segments', 'Conjunction', 'relationships']]
trues: [['intentional structure', 'Used_for', 'discourse-relevant purposes']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.2852998065764023, 0.3182308522114347, 0.3008669046404895]
text: Branch and bound strategies have previously attempted to curb this complexity whilst maintaining global optimality .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Branch and bound strategies')
# Task('global optimality')

extract = Extract([Triple(Method("Branch and bound strategies"), Rel("Used_for"), Task("global optimality"))])
pred: [['Branch and bound strategies', 'Used_for', 'global optimality']]
trues: [['Branch and bound strategies', 'Used_for', 'complexity'], ['global optimality', 'Feature_of', 'Branch and bound strategies']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28502415458937197, 0.317545748116254, 0.30040733197556013]
text: In this paper , we present an unlexicalized parser for German which employs smoothing and suffix analysis to achieve a labelled bracket F-score of 76.2 , higher than previously reported results on the NEGRA corpus .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('unlexicalized parser')
# Material('German')
# Method('smoothing')
# Method('unlexicalized parser')
# Method('smoothing')
# Method('suffix analysis')
# Method('suffix analysis')
# Method('unlexicalized parser')
# Metric('labelled bracket F-score')
# Method('unlexicalized parser')
# Material('NEGRA corpus')
# Method('unlexicalized parser')

extract = Extract([Triple(Method("unlexicalized parser"), Rel("Used_for"), Material("German")), Triple(Method("smoothing"), Rel("Used_for"), Method("unlexicalized parser")), Triple(Method("smoothing"), Rel("Evaluate_for"), Method("suffix analysis")), Triple(Method("suffix analysis"), Rel("Evaluate_for"), Method("unlexicalized parser")), Triple(Metric("labelled bracket F-score"), Rel("Evaluate_for"), Method("unlexicalized parser")), Triple(Material("NEGRA corpus"), Rel("Evaluate_for"), Method("unlexicalized parser"))])
pred: [['unlexicalized parser', 'Used_for', 'German'], ['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Evaluate_for', 'suffix analysis'], ['suffix analysis', 'Evaluate_for', 'unlexicalized parser'], ['labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'], ['NEGRA corpus', 'Evaluate_for', 'unlexicalized parser']]
trues: [['unlexicalized parser', 'Used_for', 'German'], ['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Conjunction', 'suffix analysis'], ['suffix analysis', 'Used_for', 'unlexicalized parser'], ['labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'], ['NEGRA corpus', 'Evaluate_for', 'unlexicalized parser']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.287223823246878, 0.31978609625668447, 0.30263157894736836]
text: Our method has two major components : a ) a pattern extraction scheme for efficiently harvesting patterns of given size and shape from expert game records and b ) a Bayesian learning algorithm ( in two variants ) that learns a distribution over the values of a move given a board position based on the local pattern context .
result: # The candidate relations for this text are:
# Rel('Part_of')
# Rel('Conjunction')
# Rel('Part_of')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('components')
# Generic('method')
# Generic('components')
# Method('pattern extraction scheme')
# Method('pattern extraction scheme')
# Generic('method')
# Method('Bayesian learning algorithm')
# Generic('method')

extract = Extract([Triple(Generic("components"), Rel("Part_of"), Generic("method")), Triple(Generic("components"), Rel("Conjunction"), Method("pattern extraction scheme")), Triple(Method("pattern extraction scheme"), Rel("Part_of"), Generic("method")), Triple(Method("Bayesian learning algorithm"), Rel("Used_for"), Generic("method"))])
pred: [['components', 'Part_of', 'method'], ['components', 'Conjunction', 'pattern extraction scheme'], ['pattern extraction scheme', 'Part_of', 'method'], ['Bayesian learning algorithm', 'Used_for', 'method']]
trues: [['pattern extraction scheme', 'Part_of', 'method'], ['pattern extraction scheme', 'Conjunction', 'Bayesian learning algorithm'], ['Bayesian learning algorithm', 'Part_of', 'method']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.28708133971291866, 0.31982942430703626, 0.30257186081694404]
text: We propose a convex problem to incorporate side information in robust PCA and show that the low rank matrix can be exactly recovered via the proposed method under certain conditions .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Method('convex problem')
# Other_scientific_term('side information')
# Method('convex problem')
# Method('robust PCA')

extract = Extract([Triple(Method("convex problem"), Rel("Used_for"), Other_scientific_term("side information")), Triple(Method("convex problem"), Rel("Used_for"), Method("robust PCA"))])
pred: [['convex problem', 'Used_for', 'side information'], ['convex problem', 'Used_for', 'robust PCA']]
trues: [['convex problem', 'Used_for', 'side information'], ['side information', 'Part_of', 'robust PCA'], ['method', 'Used_for', 'low rank matrix']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.2874880611270296, 0.3198724760892667, 0.3028169014084507]
text: The system is implemented entirely in Prolog , a programming language based on logic .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('Prolog')
# Generic('system')

extract = Extract([Triple(Method("Prolog"), Rel("Used_for"), Generic("system"))])
pred: [['Prolog', 'Used_for', 'system']]
trues: [['Prolog', 'Used_for', 'system'], ['Prolog', 'Hyponym_of', 'programming language'], ['logic', 'Used_for', 'programming language']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.2881679389312977, 0.3199152542372881, 0.3032128514056225]
text: The task of machine translation ( MT ) evaluation is closely related to the task of sentence-level semantic equivalence classification .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Hyponym_of')
# Rel('Hyponym_of')
# The candidate entities for this text are:
# Task('machine translation ( MT ) evaluation')
# Task('sentence-level semantic equivalence classification')
# Task('machine translation ( MT ) evaluation')
# Generic('task')
# Task('sentence-level semantic equivalence classification')
# Generic('task')

extract = Extract([Triple(Task("machine translation ( MT ) evaluation"), Rel("Conjunction"), Task("sentence-level semantic equivalence classification")), Triple(Task("machine translation ( MT ) evaluation"), Rel("Hyponym_of"), Generic("task")), Triple(Task("sentence-level semantic equivalence classification"), Rel("Hyponym_of"), Generic("task"))])
pred: [['machine translation ( MT ) evaluation', 'Conjunction', 'sentence-level semantic equivalence classification'], ['machine translation ( MT ) evaluation', 'Hyponym_of', 'task'], ['sentence-level semantic equivalence classification', 'Hyponym_of', 'task']]
trues: [['machine translation ( MT ) evaluation', 'Conjunction', 'sentence-level semantic equivalence classification']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.2882968601332065, 0.32063492063492066, 0.30360721442885774]
text: Furthermore , we propose the use of standard parser evaluation methods for automatically evaluating the summarization quality of sentence condensation systems .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('parser evaluation methods')
# Method('summarization quality')
# Method('parser evaluation methods')
# Method('sentence condensation systems')

extract = Extract([Triple(Method("parser evaluation methods"), Rel("Used_for"), Method("summarization quality")), Triple(Method("parser evaluation methods"), Rel("Evaluate_for"), Method("sentence condensation systems"))])
pred: [['parser evaluation methods', 'Used_for', 'summarization quality'], ['parser evaluation methods', 'Evaluate_for', 'sentence condensation systems']]
trues: [['parser evaluation methods', 'Evaluate_for', 'summarization quality'], ['summarization quality', 'Evaluate_for', 'sentence condensation systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28774928774928776, 0.3199577613516367, 0.30300000000000005]
text: In this paper , we present an approach to rapidly creating pixel-accurate semantic label maps for images extracted from modern computer games .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('approach')
# Task('creating pixel-accurate semantic label maps')
# Material('images')
# Generic('approach')

extract = Extract([Triple(Generic("approach"), Rel("Used_for"), Task("creating pixel-accurate semantic label maps")), Triple(Material("images"), Rel("Used_for"), Generic("approach"))])
pred: [['approach', 'Used_for', 'creating pixel-accurate semantic label maps'], ['images', 'Used_for', 'approach']]
trues: [['approach', 'Used_for', 'pixel-accurate semantic label maps'], ['pixel-accurate semantic label maps', 'Used_for', 'images'], ['images', 'Part_of', 'modern computer games']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28720379146919434, 0.31894736842105265, 0.30224438902743145]
text: To our knowledge , this is the first a posteriori bound for joint matrix decomposition .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('bound')
# Task('joint matrix decomposition')

extract = Extract([Triple(Generic("bound"), Rel("Used_for"), Task("joint matrix decomposition"))])
pred: [['bound', 'Used_for', 'joint matrix decomposition']]
trues: [['posteriori bound', 'Used_for', 'joint matrix decomposition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2869318181818182, 0.3186119873817035, 0.30194319880418535]
text: Hitherto , smooth motion has been encouraged using a trajectory basis , yielding a hard combinatorial problem with time complexity growing exponentially in the number of frames .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('trajectory basis')
# Other_scientific_term('smooth motion')

extract = Extract([Triple(Method("trajectory basis"), Rel("Used_for"), Other_scientific_term("smooth motion"))])
pred: [['trajectory basis', 'Used_for', 'smooth motion']]
trues: [['trajectory basis', 'Used_for', 'smooth motion'], ['time complexity', 'Evaluate_for', 'hard combinatorial problem']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.2876064333017975, 0.31899265477439664, 0.30248756218905465]
text: Experiments show that these two strategies are effective in learning robust deep metrics for person re-identification , and accordingly our deep model significantly outperforms the state-of-the-art methods on several benchmarks of person re-identification .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Compare')
# Rel('Evaluate_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('strategies')
# Task('learning robust deep metrics')
# Task('learning robust deep metrics')
# Task('person re-identification')
# Generic('deep model')
# Generic('methods')
# Generic('deep model')
# Generic('benchmarks')
# Generic('methods')
# Generic('benchmarks')

extract = Extract([Triple(Generic("strategies"), Rel("Used_for"), Task("learning robust deep metrics")), Triple(Task("learning robust deep metrics"), Rel("Used_for"), Task("person re-identification")), Triple(Generic("deep model"), Rel("Compare"), Generic("methods")), Triple(Generic("deep model"), Rel("Evaluate_for"), Generic("benchmarks")), Triple(Generic("methods"), Rel("Evaluate_for"), Generic("benchmarks"))])
pred: [['strategies', 'Used_for', 'learning robust deep metrics'], ['learning robust deep metrics', 'Used_for', 'person re-identification'], ['deep model', 'Compare', 'methods'], ['deep model', 'Evaluate_for', 'benchmarks'], ['methods', 'Evaluate_for', 'benchmarks']]
trues: [['robust deep metrics', 'Used_for', 'person re-identification'], ['deep model', 'Compare', 'state-of-the-art methods'], ['deep model', 'Used_for', 'person re-identification'], ['state-of-the-art methods', 'Used_for', 'person re-identification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2862523540489642, 0.3176593521421108, 0.3011391778107974]
text: This paper presents a critical discussion of the various approaches that have been used in the evaluation of Natural Language systems .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Method('evaluation of Natural Language systems')
# Method('Natural Language systems')

extract = Extract([Triple(Method("evaluation of Natural Language systems"), Rel("Evaluate_for"), Method("Natural Language systems"))])
pred: [['evaluation of Natural Language systems', 'Evaluate_for', 'Natural Language systems']]
trues: [['approaches', 'Used_for', 'evaluation of Natural Language systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28598306679209784, 0.3173277661795407, 0.3008411677387432]
text: Experiments on the PASCAL VOC 2006 dataset show an acceleration of more than 50 % by our method compared to standard cascade evaluation .
result: # The candidate relations for this text are:
# Rel('Evaluate_for')
# Rel('Compare')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Material('PASCAL VOC 2006 dataset')
# Generic('method')
# Generic('method')
# Generic('method')
# Method('cascade evaluation')
# Generic('method')

extract = Extract([Triple(Material("PASCAL VOC 2006 dataset"), Rel("Evaluate_for"), Generic("method")), Triple(Generic("method"), Rel("Compare"), Generic("method")), Triple(Method("cascade evaluation"), Rel("Evaluate_for"), Generic("method"))])
pred: [['PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'], ['method', 'Compare', 'method'], ['cascade evaluation', 'Evaluate_for', 'method']]
trues: [['PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'], ['PASCAL VOC 2006 dataset', 'Evaluate_for', 'cascade evaluation'], ['cascade evaluation', 'Compare', 'method']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.2861163227016886, 0.3173777315296566, 0.30093734583127774]
text: Both classifiers perform the best when conversational context and utterance features are combined with speaker 's gaze information .
result: # The candidate relations for this text are:
# Rel('Conjunction')
# Rel('Conjunction')
# The candidate entities for this text are:
# Other_scientific_term('conversational context')
# Other_scientific_term('utterance features')
# Other_scientific_term('speaker's gaze information')
# Other_scientific_term('conversational context')

extract = Extract([Triple(Other_scientific_term("conversational context"), Rel("Conjunction"), Other_scientific_term("utterance features")), Triple(Other_scientific_term("speaker's gaze information"), Rel("Conjunction"), Other_scientific_term("conversational context"))])
pred: [['conversational context', 'Conjunction', 'utterance features'], ["speaker's gaze information", 'Conjunction', 'conversational context']]
trues: [['conversational context', 'Used_for', 'classifiers'], ['conversational context', 'Conjunction', 'utterance features'], ['utterance features', 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Conjunction', 'utterance features']]
metrics_sample: [0.5, 0.2, 0.28571428571428575]
metrics_current: [0.28651685393258425, 0.3167701863354037, 0.30088495575221236]
text: This poster paper describes a full scale two-level morphological description ( Karttunen , 1983 ; Koskenniemi , 1983 ) of Turkish word structures .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Method('two-level morphological description')
# Other_scientific_term('Turkish word structures')

extract = Extract([Triple(Method("two-level morphological description"), Rel("Used_for"), Other_scientific_term("Turkish word structures"))])
pred: [['two-level morphological description', 'Used_for', 'Turkish word structures']]
trues: [['full scale two-level morphological description', 'Used_for', 'Turkish word structures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2862488306828812, 0.3164426059979317, 0.3005893909626719]
text: These methods diier from previous work in the area in two ways : the use of an action model formalism which is better suited to the needs of a re-active agent , and successful implementation of noise-handling mechanisms .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Used_for')
# Rel('Conjunction')
# The candidate entities for this text are:
# Method('action model formalism')
# Generic('methods')
# Method('action model formalism')
# Method('re-active agent')
# Method('noise-handling mechanisms')
# Generic('methods')
# Method('noise-handling mechanisms')
# Method('re-active agent')

extract = Extract([Triple(Method("action model formalism"), Rel("Used_for"), Generic("methods")), Triple(Method("action model formalism"), Rel("Used_for"), Method("re-active agent")), Triple(Method("noise-handling mechanisms"), Rel("Used_for"), Generic("methods")), Triple(Method("noise-handling mechanisms"), Rel("Used_for"), Method("re-active agent")), Triple(Method("noise-handling mechanisms"), Rel("Conjunction"), Method("re-active agent"))])
pred: [['action model formalism', 'Used_for', 'methods'], ['action model formalism', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Used_for', 'methods'], ['noise-handling mechanisms', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Conjunction', 're-active agent']]
trues: [['action model formalism', 'Used_for', 'methods'], ['action model formalism', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Used_for', 'methods']]
metrics_sample: [0.6, 1.0, 0.7499999999999999]
metrics_current: [0.2877094972067039, 0.3185567010309278, 0.3023483365949119]
text: Unlike other techniques that handle large outlier percentages , MINPRAN does not rely on a known error bound for the good data .
result: # The candidate relations for this text are:
# Rel('Used_for')
# The candidate entities for this text are:
# Generic('MINPRAN')
# Other_scientific_term('outlier percentages')

extract = Extract([Triple(Generic("MINPRAN"), Rel("Used_for"), Other_scientific_term("outlier percentages"))])
pred: [['MINPRAN', 'Used_for', 'outlier percentages']]
trues: [['techniques', 'Used_for', 'large outlier percentages'], ['techniques', 'Compare', 'MINPRAN']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2874418604651163, 0.31790123456790126, 0.3019052271617001]
text: In the experiments , we used a variety of methods for preparing a segmented corpus and compared the language models by their speech recognition accuracies .
result: # The candidate relations for this text are:
# Rel('Used_for')
# Rel('Used_for')
# Rel('Evaluate_for')
# The candidate entities for this text are:
# Generic('methods')
# Material('segmented corpus')
# Generic('methods')
# Method('language models')
# Metric('speech recognition accuracies')
# Method('language models')

extract = Extract([Triple(Generic("methods"), Rel("Used_for"), Material("segmented corpus")), Triple(Generic("methods"), Rel("Used_for"), Method("language models")), Triple(Metric("speech recognition accuracies"), Rel("Evaluate_for"), Method("language models"))])
pred: [['methods', 'Used_for', 'segmented corpus'], ['methods', 'Used_for', 'language models'], ['speech recognition accuracies', 'Evaluate_for', 'language models']]
trues: [['methods', 'Used_for', 'preparing a segmented corpus'], ['speech recognition accuracies', 'Evaluate_for', 'language models']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.287569573283859, 0.3182751540041068, 0.30214424951267055]