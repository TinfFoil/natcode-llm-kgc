text: Related work applies MINPRAN to complex range and intensity data 23 ] .
result: triple_list: [["MINPRAN", "Used_for", "complex range and intensity data"]]

pred: [('MINPRAN', 'Used_for', 'complex range and intensity data')]
trues: [['MINPRAN', 'Used_for', 'complex range'], ['MINPRAN', 'Used_for', 'intensity data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.0, 0.0, 0]
text: We present a scanning method that recovers dense sub-pixel camera-projector correspondence without requiring any photometric calibration nor preliminary knowledge of their relative geometry .
result: triple_list: [["scanning method", "Used_for", "dense sub-pixel camera-projector correspondence"]]

pred: [('scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence')]
trues: [['scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.5, 0.3333333333333333, 0.4]
text: Thus , in this paper , we study the problem of robust PCA with side information , where both prior structure and features of entities are exploited for recovery .
result: triple_list: [["prior structure", "Conjunction", "features of entities"]]

pred: [('prior structure', 'Conjunction', 'features of entities')]
trues: [['side information', 'Used_for', 'robust PCA'], ['prior structure', 'Conjunction', 'features of entities'], ['prior structure', 'Used_for', 'recovery'], ['features of entities', 'Used_for', 'recovery']]
metrics_sample: [1.0, 0.25, 0.4]
metrics_current: [0.6666666666666666, 0.2857142857142857, 0.4]
text: Another problem with determiners is their inherent ambiguity .
result: triple_list: [["ambiguity", "Feature_of", "determiners"]]

pred: [('ambiguity', 'Feature_of', 'determiners')]
trues: [['ambiguity', 'Feature_of', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.75, 0.375, 0.5]
text: We report the performance of the MBR decoders on a Chinese-to-English translation task .
result: triple_list: [["Chinese-to-English translation task", "Evaluate_for", "MBR decoders"]]

pred: [('Chinese-to-English translation task', 'Evaluate_for', 'MBR decoders')]
trues: [['MBR decoders', 'Used_for', 'Chinese-to-English translation task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.6, 0.3333333333333333, 0.42857142857142855]
text: Many practical modeling problems involve discrete data that are best represented as draws from multinomial or categorical distributions .
result: triple_list: [["multinomial or categorical distributions", "Used_for", "modeling problems"]]

pred: [('multinomial or categorical distributions', 'Used_for', 'modeling problems')]
trues: [['discrete data', 'Used_for', 'modeling problems'], ['multinomial or categorical distributions', 'Used_for', 'modeling problems']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.6666666666666666, 0.36363636363636365, 0.4705882352941177]
text: We also found that OA is crucial for auditory processing by onset neurons ( ONs ) in the next neuronal stage , the auditory brainstem .
result: triple_list: [["OA", "Used_for", "auditory processing by onset neurons ( ONs )"], ["auditory brainstem", "Feature_of", "ONs"]]

pred: [('OA', 'Used_for', 'auditory processing by onset neurons ( ONs )'), ('auditory brainstem', 'Feature_of', 'ONs')]
trues: [['OA', 'Used_for', 'auditory processing'], ['onset neurons ( ONs )', 'Used_for', 'OA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.5, 0.3076923076923077, 0.380952380952381]
text: We have applied it to real scenes that include transparent objects and recovered the shapes of the objects with high accuracy .
result: triple_list: [["it", "Used_for", "transparent objects"], ["it", "Used_for", "shapes of the objects"]]

pred: [('it', 'Used_for', 'transparent objects'), ('it', 'Used_for', 'shapes of the objects')]
trues: [['it', 'Used_for', 'real scenes'], ['it', 'Used_for', 'shapes of the objects'], ['transparent objects', 'Part_of', 'real scenes'], ['accuracy', 'Evaluate_for', 'shapes of the objects']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.5, 0.29411764705882354, 0.37037037037037035]
text: Joint matrix triangularization is often used for estimating the joint eigenstructure of a set M of matrices , with applications in signal processing and machine learning .
result: triple_list: [["Joint matrix triangularization", "Used_for", "joint eigenstructure of a set M of matrices"], ["signal processing", "Used_for", "joint eigenstructure of a set M of matrices"], ["signal processing", "Conjunction", "machine learning"], ["machine learning", "Used_for", "joint eigenstructure of a set M of matrices"]]

pred: [('Joint matrix triangularization', 'Used_for', 'joint eigenstructure of a set M of matrices'), ('signal processing', 'Used_for', 'joint eigenstructure of a set M of matrices'), ('signal processing', 'Conjunction', 'machine learning'), ('machine learning', 'Used_for', 'joint eigenstructure of a set M of matrices')]
trues: [['Joint matrix triangularization', 'Used_for', 'joint eigenstructure'], ['joint eigenstructure', 'Used_for', 'signal processing'], ['joint eigenstructure', 'Used_for', 'machine learning'], ['signal processing', 'Conjunction', 'machine learning']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.42857142857142855, 0.2857142857142857, 0.34285714285714286]
text: These mattes are implied by a set of hypothesized object boundary fragments in the scene .
result: triple_list: [["object boundary fragments", "Used_for", "mattes"]]

pred: [('object boundary fragments', 'Used_for', 'mattes')]
trues: [['hypothesized object boundary fragments', 'Used_for', 'mattes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4, 0.2727272727272727, 0.3243243243243243]
text: First , it uses several kinds of dictionaries to segment and tag Japanese character strings .
result: triple_list: [["dictionaries", "Used_for", "Japanese character strings"]]

pred: [('dictionaries', 'Used_for', 'Japanese character strings')]
trues: [['dictionaries', 'Used_for', 'it'], ['dictionaries', 'Used_for', 'Japanese character strings']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.4375, 0.2916666666666667, 0.35000000000000003]
text: Therefore , the study presented in this paper may be useful in inspiring new designs of deep models for person re-identification .
result: triple_list: [["deep models", "Used_for", "person re-identification"]]

pred: [('deep models', 'Used_for', 'person re-identification')]
trues: [['deep models', 'Used_for', 'person re-identification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.47058823529411764, 0.32, 0.38095238095238104]
text: We apply cluster analysis on the sampled parameter space to redetect the object and renew the local tracker .
result: triple_list: [["cluster analysis", "Used_for", "object"], ["sampled parameter space", "Used_for", "cluster analysis"]]

pred: [('cluster analysis', 'Used_for', 'object'), ('sampled parameter space', 'Used_for', 'cluster analysis')]
trues: [['cluster analysis', 'Used_for', 'sampled parameter space'], ['cluster analysis', 'Used_for', 'local tracker']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.42105263157894735, 0.2962962962962963, 0.34782608695652173]
text: As a Monte Carlo approach , ASA stochastically samples the parameter space , in contrast to local deterministic search .
result: triple_list: [["Monte Carlo approach", "Compare", "local deterministic search"]]

pred: [('Monte Carlo approach', 'Compare', 'local deterministic search')]
trues: [['ASA', 'Hyponym_of', 'Monte Carlo approach'], ['ASA', 'Compare', 'local deterministic search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4, 0.27586206896551724, 0.32653061224489793]
text: A purely functional implementation of LR-parsers is given , together with a simple correctness proof .
result: triple_list: [["functional implementation of LR-parsers", "Used_for", "correctness proof"]]

pred: [('functional implementation of LR-parsers', 'Used_for', 'correctness proof')]
trues: [['correctness proof', 'Conjunction', 'LR-parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38095238095238093, 0.26666666666666666, 0.3137254901960784]
text: It is presented as a generalization of the recursive descent parser .
result: triple_list: [["It", "Hyponym_of", "generalization"], ["It", "Used_for", "recursive descent parser"], ["generalization", "Used_for", "It"], ["recursive descent parser", "Used_for", "It"]]

pred: [('It', 'Hyponym_of', 'generalization'), ('It', 'Used_for', 'recursive descent parser'), ('generalization', 'Used_for', 'It'), ('recursive descent parser', 'Used_for', 'It')]
trues: [['recursive descent parser', 'Used_for', 'It']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.36, 0.2903225806451613, 0.3214285714285714]
text: We investigate several voting - and arbiter-based combination strategies over a diverse pool of unsupervised WSD systems .
result: triple_list: [["voting - and arbiter-based combination strategies", "Used_for", "unsupervised WSD systems"]]

pred: [('voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems')]
trues: [['voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.38461538461538464, 0.3125, 0.3448275862068966]
text: From this point of view , selecting suitable positive ( i.e. intra-class ) training samples within a local range is critical for training the CNN embedding , especially when the data has large intra-class variations .
result: triple_list: [["positive ( i.e. intra-class ) training samples", "Used_for", "CNN embedding"]]

pred: [('positive ( i.e. intra-class ) training samples', 'Used_for', 'CNN embedding')]
trues: [['intra-class variations', 'Feature_of', 'data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.37037037037037035, 0.30303030303030304, 0.3333333333333333]
text: The objects can be complex in that they may be composed of multiple layers with different refractive indices .
result: triple_list: [["layers", "Part_of", "objects"], ["refractive indices", "Feature_of", "layers"]]

pred: [('layers', 'Part_of', 'objects'), ('refractive indices', 'Feature_of', 'layers')]
trues: [['multiple layers', 'Part_of', 'they'], ['refractive indices', 'Feature_of', 'multiple layers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3448275862068966, 0.2857142857142857, 0.3125]
text: It is demonstrated qualitatively and quantitatively on a dataset of scenes and is suitable for current work in unsupervised object discovery without top-down knowledge .
result: triple_list: [["dataset of scenes", "Evaluate_for", "unsupervised object discovery"], ["top-down knowledge", "Feature_of", "unsupervised object discovery"]]

pred: [('dataset of scenes', 'Evaluate_for', 'unsupervised object discovery'), ('top-down knowledge', 'Feature_of', 'unsupervised object discovery')]
trues: [['It', 'Used_for', 'unsupervised object discovery'], ['dataset of scenes', 'Evaluate_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3225806451612903, 0.2702702702702703, 0.2941176470588235]
text: We evaluate the proposed methods through several transliteration/backtransliteration experiments for English/Chinese and English/Japanese language pairs .
result: triple_list: [["transliteration/backtransliteration experiments", "Evaluate_for", "methods"], ["English/Chinese and English/Japanese language pairs", "Evaluate_for", "methods"]]

pred: [('transliteration/backtransliteration experiments', 'Evaluate_for', 'methods'), ('English/Chinese and English/Japanese language pairs', 'Evaluate_for', 'methods')]
trues: [['transliteration/backtransliteration', 'Evaluate_for', 'methods'], ['transliteration/backtransliteration', 'Used_for', 'English/Chinese and English/Japanese language pairs']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30303030303030304, 0.2564102564102564, 0.2777777777777778]
text: A domain independent model is proposed for the automated interpretation of nominal compounds in English .
result: triple_list: [["domain independent model", "Used_for", "automated interpretation of nominal compounds"], ["English", "Feature_of", "automated interpretation of nominal compounds"]]

pred: [('domain independent model', 'Used_for', 'automated interpretation of nominal compounds'), ('English', 'Feature_of', 'automated interpretation of nominal compounds')]
trues: [['domain independent model', 'Used_for', 'automated interpretation of nominal compounds'], ['English', 'Feature_of', 'nominal compounds']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3142857142857143, 0.2682926829268293, 0.2894736842105263]
text: This paper gives an overall account of a prototype natural language question answering system , called Chat-80 .
result: triple_list: [["natural language question answering system", "Used_for", "Chat-80"]]

pred: [('natural language question answering system', 'Used_for', 'Chat-80')]
trues: [['Chat-80', 'Hyponym_of', 'natural language question answering system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3055555555555556, 0.2619047619047619, 0.2820512820512821]
text: We then derive a scalable stochastic gradient descent algorithm for the resulting learning problem .
result: triple_list: [["stochastic gradient descent algorithm", "Used_for", "learning problem"]]

pred: [('stochastic gradient descent algorithm', 'Used_for', 'learning problem')]
trues: [['stochastic gradient descent algorithm', 'Used_for', 'learning problem']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32432432432432434, 0.27906976744186046, 0.3]
text: There are four language pairs currently supported by GLOSSER : English-Bulgarian , English-Estonian , English-Hungarian and French-Dutch .
result: triple_list: [["English-Bulgarian", "Hyponym_of", "language pairs"], ["English-Bulgarian", "Conjunction", "English-Estonian"], ["English-Estonian", "Hyponym_of", "language pairs"], ["English-Estonian", "Conjunction", "English-Hungarian"], ["English-Hungarian", "Hyponym_of", "language pairs"], ["English-Hungarian", "Conjunction", "French-Dutch"], ["French-Dutch", "Hyponym_of", "language pairs"]]

pred: [('English-Bulgarian', 'Hyponym_of', 'language pairs'), ('English-Bulgarian', 'Conjunction', 'English-Estonian'), ('English-Estonian', 'Hyponym_of', 'language pairs'), ('English-Estonian', 'Conjunction', 'English-Hungarian'), ('English-Hungarian', 'Hyponym_of', 'language pairs'), ('English-Hungarian', 'Conjunction', 'French-Dutch'), ('French-Dutch', 'Hyponym_of', 'language pairs')]
trues: [['language pairs', 'Used_for', 'GLOSSER'], ['English-Bulgarian', 'Hyponym_of', 'language pairs'], ['English-Bulgarian', 'Conjunction', 'English-Estonian'], ['English-Estonian', 'Hyponym_of', 'language pairs'], ['English-Estonian', 'Conjunction', 'English-Hungarian'], ['English-Hungarian', 'Hyponym_of', 'language pairs'], ['English-Hungarian', 'Conjunction', 'French-Dutch'], ['French-Dutch', 'Hyponym_of', 'language pairs']]
metrics_sample: [1.0, 0.875, 0.9333333333333333]
metrics_current: [0.4318181818181818, 0.37254901960784315, 0.4]
text: The approach is validated with real image data , and with experimental results from a CID/DRAM analog array prototype in 0.5 cents m CMOS .
result: triple_list: [["real image data", "Evaluate_for", "approach"], ["real image data", "Conjunction", "CID/DRAM analog array prototype"], ["CID/DRAM analog array prototype", "Evaluate_for", "approach"], ["0.5 cents m CMOS", "Feature_of", "CID/DRAM analog array prototype"]]

pred: [('real image data', 'Evaluate_for', 'approach'), ('real image data', 'Conjunction', 'CID/DRAM analog array prototype'), ('CID/DRAM analog array prototype', 'Evaluate_for', 'approach'), ('0.5 cents m CMOS', 'Feature_of', 'CID/DRAM analog array prototype')]
trues: [['real image data', 'Evaluate_for', 'approach']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.4166666666666667, 0.38461538461538464, 0.4]
text: This allows us to use our method to act not only as a faster procedure for cascade evaluation , but also as a tool to perform efficient branch-and-bound object detection with nonlinear quality functions , in particular kernel-ized support vector machines .
result: triple_list: [["method", "Used_for", "procedure"], ["method", "Used_for", "cascade evaluation"], ["method", "Used_for", "branch-and-bound object detection"], ["nonlinear quality functions", "Feature_of", "branch-and-bound object detection"], ["kernel-ized support vector machines", "Hyponym_of", "nonlinear quality functions"]]

pred: [('method', 'Used_for', 'procedure'), ('method', 'Used_for', 'cascade evaluation'), ('method', 'Used_for', 'branch-and-bound object detection'), ('nonlinear quality functions', 'Feature_of', 'branch-and-bound object detection'), ('kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions')]
trues: [['method', 'Used_for', 'cascade evaluation'], ['method', 'Used_for', 'branch-and-bound object detection'], ['nonlinear quality functions', 'Used_for', 'branch-and-bound object detection'], ['kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions']]
metrics_sample: [0.6, 0.75, 0.6666666666666665]
metrics_current: [0.4339622641509434, 0.4107142857142857, 0.42201834862385323]
text: We then use the predicates of such clauses to create a set of domain independent features to annotate an input dataset , and run two different machine learning algorithms : SLIPPER , a rule-based learning algorithm , and TiMBL , a memory-based system .
result: triple_list: [["predicates", "Used_for", "domain independent features"], ["domain independent features", "Used_for", "input dataset"], ["machine learning algorithms", "Used_for", "input dataset"], ["SLIPPER", "Hyponym_of", "machine learning algorithms"], ["SLIPPER", "Conjunction", "TiMBL"], ["TiMBL", "Hyponym_of", "machine learning algorithms"]]

pred: [('predicates', 'Used_for', 'domain independent features'), ('domain independent features', 'Used_for', 'input dataset'), ('machine learning algorithms', 'Used_for', 'input dataset'), ('SLIPPER', 'Hyponym_of', 'machine learning algorithms'), ('SLIPPER', 'Conjunction', 'TiMBL'), ('TiMBL', 'Hyponym_of', 'machine learning algorithms')]
trues: [['SLIPPER', 'Hyponym_of', 'rule-based learning algorithm'], ['rule-based learning algorithm', 'Part_of', 'machine learning algorithms'], ['rule-based learning algorithm', 'Compare', 'memory-based system'], ['TiMBL', 'Hyponym_of', 'memory-based system'], ['memory-based system', 'Part_of', 'machine learning algorithms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3898305084745763, 0.3770491803278688, 0.3833333333333333]
text: Building on previous work at Carnegie-Mellon University e.g. [ 4 , 5 , 8 ] , Plume 's approach to parsing is based on semantic caseframe instantiation .
result: triple_list: [["semantic caseframe instantiation", "Used_for", "parsing"]]

pred: [('semantic caseframe instantiation', 'Used_for', 'parsing')]
trues: [["Plume 's approach", 'Used_for', 'parsing'], ['semantic caseframe instantiation', 'Used_for', "Plume 's approach"]]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38333333333333336, 0.36507936507936506, 0.3739837398373984]
text: Training instances are generated from experience and observation , and a variant of GOLEM is used to learn action models from these instances .
result: triple_list: [["Training instances", "Used_for", "action models"], ["GOLEM", "Used_for", "action models"]]

pred: [('Training instances', 'Used_for', 'action models'), ('GOLEM', 'Used_for', 'action models')]
trues: [['GOLEM', 'Used_for', 'action models']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3870967741935484, 0.375, 0.38095238095238093]
text: We present a new method for detecting interest points using histogram information .
result: triple_list: [["histogram information", "Used_for", "method"]]

pred: [('histogram information', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'detecting interest points'], ['histogram information', 'Used_for', 'detecting interest points']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38095238095238093, 0.36363636363636365, 0.37209302325581395]
text: In addition , we improve the learning by a metric weight constraint , so that the learned metric has a better generalization ability .
result: triple_list: [["metric weight constraint", "Used_for", "learning"]]

pred: [('metric weight constraint', 'Used_for', 'learning')]
trues: [['metric weight constraint', 'Used_for', 'learning'], ['generalization ability', 'Feature_of', 'learned metric']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.390625, 0.36764705882352944, 0.3787878787878788]
text: Amorph recognizes NE items in two stages : dictionary lookup and rule application .
result: triple_list: [["dictionary lookup", "Conjunction", "rule application"]]

pred: [('dictionary lookup', 'Conjunction', 'rule application')]
trues: [['Amorph', 'Used_for', 'NE items'], ['dictionary lookup', 'Part_of', 'Amorph'], ['dictionary lookup', 'Conjunction', 'rule application'], ['rule application', 'Part_of', 'Amorph']]
metrics_sample: [1.0, 0.25, 0.4]
metrics_current: [0.4, 0.3611111111111111, 0.3795620437956205]
text: Furthermore , we propose the use of standard parser evaluation methods for automatically evaluating the summarization quality of sentence condensation systems .
result: triple_list: [["parser evaluation methods", "Used_for", "summarization quality"], ["parser evaluation methods", "Evaluate_for", "sentence condensation systems"]]

pred: [('parser evaluation methods', 'Used_for', 'summarization quality'), ('parser evaluation methods', 'Evaluate_for', 'sentence condensation systems')]
trues: [['parser evaluation methods', 'Evaluate_for', 'summarization quality'], ['summarization quality', 'Evaluate_for', 'sentence condensation systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3880597014925373, 0.35135135135135137, 0.36879432624113484]
text: Using the IEMOCAP database , discrete ( categorical ) and continuous ( attribute ) emotional assessments evaluated by the actors and na ¨ ıve listeners are compared .
result: triple_list: [["IEMOCAP database", "Evaluate_for", "discrete ( categorical ) and continuous ( attribute ) emotional assessments"]]

pred: [('IEMOCAP database', 'Evaluate_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments')]
trues: [['IEMOCAP database', 'Used_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.38235294117647056, 0.3466666666666667, 0.3636363636363636]
text: In order to build robust automatic abstracting systems , there is a need for better training resources than are currently available .
result: triple_list: [["training resources", "Compare", "automatic abstracting systems"]]

pred: [('training resources', 'Compare', 'automatic abstracting systems')]
trues: [['training resources', 'Used_for', 'automatic abstracting systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.37681159420289856, 0.34210526315789475, 0.3586206896551724]
text: Our method has two major components : a ) a pattern extraction scheme for efficiently harvesting patterns of given size and shape from expert game records and b ) a Bayesian learning algorithm ( in two variants ) that learns a distribution over the values of a move given a board position based on the local pattern context .
result: triple_list: [["pattern extraction scheme", "Part_of", "method"], ["pattern extraction scheme", "Used_for", "patterns"], ["pattern extraction scheme", "Conjunction", "Bayesian learning algorithm"], ["expert game records", "Used_for", "pattern extraction scheme"], ["Bayesian learning algorithm", "Part_of", "method"], ["Bayesian learning algorithm", "Used_for", "distribution over the values of a move"]]

pred: [('pattern extraction scheme', 'Part_of', 'method'), ('pattern extraction scheme', 'Used_for', 'patterns'), ('pattern extraction scheme', 'Conjunction', 'Bayesian learning algorithm'), ('expert game records', 'Used_for', 'pattern extraction scheme'), ('Bayesian learning algorithm', 'Part_of', 'method'), ('Bayesian learning algorithm', 'Used_for', 'distribution over the values of a move')]
trues: [['pattern extraction scheme', 'Part_of', 'method'], ['pattern extraction scheme', 'Conjunction', 'Bayesian learning algorithm'], ['Bayesian learning algorithm', 'Part_of', 'method']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.38666666666666666, 0.3670886075949367, 0.37662337662337664]
text: In this paper , we explore geometric structures of 3D lines in ray space for improving light field triangulation and stereo matching .
result: triple_list: [["geometric structures", "Used_for", "light field triangulation"], ["geometric structures", "Used_for", "stereo matching"], ["3D lines", "Part_of", "geometric structures"], ["ray space", "Feature_of", "3D lines"]]

pred: [('geometric structures', 'Used_for', 'light field triangulation'), ('geometric structures', 'Used_for', 'stereo matching'), ('3D lines', 'Part_of', 'geometric structures'), ('ray space', 'Feature_of', '3D lines')]
trues: [['geometric structures of 3D lines', 'Used_for', 'light field triangulation'], ['geometric structures of 3D lines', 'Used_for', 'stereo matching'], ['ray space', 'Feature_of', 'geometric structures of 3D lines'], ['light field triangulation', 'Conjunction', 'stereo matching']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3670886075949367, 0.3493975903614458, 0.35802469135802467]
text: Structural or numerical constraints can then be added locally to the reconstruction process through a constrained optimization scheme .
result: triple_list: [["Structural or numerical constraints", "Used_for", "reconstruction process"], ["constrained optimization scheme", "Used_for", "Structural or numerical constraints"]]

pred: [('Structural or numerical constraints', 'Used_for', 'reconstruction process'), ('constrained optimization scheme', 'Used_for', 'Structural or numerical constraints')]
trues: [['Structural or numerical constraints', 'Used_for', 'reconstruction process'], ['constrained optimization scheme', 'Used_for', 'Structural or numerical constraints']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.38271604938271603, 0.36470588235294116, 0.37349397590361444]
text: We also address a more general problem of matrix rank degeneration & non-isolated minima in the low-rank matrix optimization by using new type of regularizer which approximately enforces the or-thonormality of the learned matrix very efficiently .
result: triple_list: [["low-rank matrix optimization", "Used_for", "matrix rank degeneration"], ["low-rank matrix optimization", "Used_for", "non-isolated minima"], ["regularizer", "Used_for", "low-rank matrix optimization"], ["or-thonormality", "Feature_of", "regularizer"]]

pred: [('low-rank matrix optimization', 'Used_for', 'matrix rank degeneration'), ('low-rank matrix optimization', 'Used_for', 'non-isolated minima'), ('regularizer', 'Used_for', 'low-rank matrix optimization'), ('or-thonormality', 'Feature_of', 'regularizer')]
trues: [['matrix rank degeneration', 'Conjunction', 'non-isolated minima'], ['matrix rank degeneration', 'Feature_of', 'low-rank matrix optimization'], ['non-isolated minima', 'Feature_of', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'or-thonormality'], ['or-thonormality', 'Feature_of', 'learned matrix']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.3764705882352941, 0.3516483516483517, 0.3636363636363636]
text: We consider the problem of computing the Kullback-Leibler distance , also called the relative entropy , between a probabilistic context-free grammar and a probabilistic finite automaton .
result: triple_list: [["Kullback-Leibler distance", "Hyponym_of", "relative entropy"], ["probabilistic context-free grammar", "Conjunction", "probabilistic finite automaton"]]

pred: [('Kullback-Leibler distance', 'Hyponym_of', 'relative entropy'), ('probabilistic context-free grammar', 'Conjunction', 'probabilistic finite automaton')]
trues: [['probabilistic context-free grammar', 'Compare', 'probabilistic finite automaton']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.367816091954023, 0.34782608695652173, 0.3575418994413408]
text: Specifically , we show how to incorporate a simple prior on the distribution of natural images into support vector machines .
result: triple_list: [["natural images", "Feature_of", "prior"], ["prior", "Part_of", "support vector machines"]]

pred: [('natural images', 'Feature_of', 'prior'), ('prior', 'Part_of', 'support vector machines')]
trues: [['prior on the distribution of natural images', 'Used_for', 'support vector machines']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3595505617977528, 0.34408602150537637, 0.3516483516483517]
text: In particular , we make extensive use of Pustejovsky 's principles concerning the predicative information associated with nominals .
result: triple_list: [["Pustejovsky 's principles", "Used_for", "predicative information associated with nominals"]]

pred: [("Pustejovsky 's principles", 'Used_for', 'predicative information associated with nominals')]
trues: [['nominals', 'Feature_of', 'predicative information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.35555555555555557, 0.3404255319148936, 0.3478260869565218]
text: This paper highlights a particular class of miscommunication -- reference problems -- by describing a case study and techniques for avoiding failures of reference .
result: triple_list: [["case study", "Used_for", "reference problems"], ["techniques", "Used_for", "reference"]]

pred: [('case study', 'Used_for', 'reference problems'), ('techniques', 'Used_for', 'reference')]
trues: [['reference problems', 'Hyponym_of', 'miscommunication'], ['techniques', 'Used_for', 'failures of reference']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34782608695652173, 0.3333333333333333, 0.3404255319148936]
text: Our core motivation is that minimizing a weighted rank loss is a natural criterion for many problems in computer vision such as person re-identification .
result: triple_list: [["weighted rank loss", "Used_for", "problems in computer vision"], ["person re-identification", "Hyponym_of", "problems in computer vision"]]

pred: [('weighted rank loss', 'Used_for', 'problems in computer vision'), ('person re-identification', 'Hyponym_of', 'problems in computer vision')]
trues: [['weighted rank loss', 'Used_for', 'computer vision'], ['weighted rank loss', 'Used_for', 'person re-identification'], ['person re-identification', 'Hyponym_of', 'computer vision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3404255319148936, 0.32323232323232326, 0.3316062176165803]
text: Labeled data is replaced by a few hand-crafted rules that encode basic syntactic knowledge .
result: triple_list: [["Labeled data", "Used_for", "syntactic knowledge"], ["hand-crafted rules", "Used_for", "syntactic knowledge"]]

pred: [('Labeled data', 'Used_for', 'syntactic knowledge'), ('hand-crafted rules', 'Used_for', 'syntactic knowledge')]
trues: [['hand-crafted rules', 'Used_for', 'syntactic knowledge']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.34375, 0.33, 0.336734693877551]
text: Multi-view constraints associated with groups of patches are combined with a normalized representation of their appearance to guide matching and reconstruction , allowing the acquisition of true three-dimensional affine and Euclidean models from multiple images and their recognition in a single photograph taken from an arbitrary viewpoint .
result: triple_list: [["Multi-view constraints", "Used_for", "matching and reconstruction"], ["Multi-view constraints", "Conjunction", "normalized representation of their appearance"], ["normalized representation of their appearance", "Used_for", "matching and reconstruction"], ["matching and reconstruction", "Used_for", "true three-dimensional affine and Euclidean models"], ["multiple images", "Used_for", "true three-dimensional affine and Euclidean models"], ["multiple images", "Conjunction", "their recognition"], ["their recognition", "Used_for", "true three-dimensional affine and Euclidean models"], ["their recognition", "Used_for", "single photograph"]]

pred: [('Multi-view constraints', 'Used_for', 'matching and reconstruction'), ('Multi-view constraints', 'Conjunction', 'normalized representation of their appearance'), ('normalized representation of their appearance', 'Used_for', 'matching and reconstruction'), ('matching and reconstruction', 'Used_for', 'true three-dimensional affine and Euclidean models'), ('multiple images', 'Used_for', 'true three-dimensional affine and Euclidean models'), ('multiple images', 'Conjunction', 'their recognition'), ('their recognition', 'Used_for', 'true three-dimensional affine and Euclidean models'), ('their recognition', 'Used_for', 'single photograph')]
trues: [['Multi-view constraints', 'Conjunction', 'normalized representation'], ['Multi-view constraints', 'Used_for', 'matching'], ['Multi-view constraints', 'Used_for', 'reconstruction'], ['normalized representation', 'Used_for', 'matching'], ['normalized representation', 'Used_for', 'reconstruction'], ['matching', 'Conjunction', 'reconstruction'], ['images', 'Used_for', 'acquisition of true three-dimensional affine and Euclidean models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3173076923076923, 0.308411214953271, 0.3127962085308057]
text: Kernel space embedding decouples the training and prediction costs from the data dimension and enables us to plug inarbitrary distance measures which are more natural for the features .
result: triple_list: [["Kernel space embedding", "Used_for", "training and prediction costs"], ["arbitrary distance measures", "Used_for", "features"]]

pred: [('Kernel space embedding', 'Used_for', 'training and prediction costs'), ('arbitrary distance measures', 'Used_for', 'features')]
trues: [['Kernel space embedding', 'Used_for', 'inarbitrary distance measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3113207547169811, 0.3055555555555556, 0.308411214953271]
text: We then turn to a discussion comparing the linguistic expressiveness of the two formalisms .
result: triple_list: [["linguistic expressiveness", "Evaluate_for", "formalisms"]]

pred: [('linguistic expressiveness', 'Evaluate_for', 'formalisms')]
trues: [['linguistic expressiveness', 'Feature_of', 'formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.308411214953271, 0.30275229357798167, 0.3055555555555555]
text: Extension to affine projection enables reconstruction without estimating cameras .
result: triple_list: [["Extension", "Used_for", "affine projection"], ["Extension", "Used_for", "reconstruction"], ["affine projection", "Used_for", "reconstruction"], ["estimating cameras", "Used_for", "reconstruction"]]

pred: [('Extension', 'Used_for', 'affine projection'), ('Extension', 'Used_for', 'reconstruction'), ('affine projection', 'Used_for', 'reconstruction'), ('estimating cameras', 'Used_for', 'reconstruction')]
trues: [['affine projection', 'Used_for', 'reconstruction']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.3063063063063063, 0.3090909090909091, 0.30769230769230765]
text: The NCA is created statistically from a large corpus and recomposed under concept hierarchy constraints and frequency of occurrences .
result: triple_list: [["corpus", "Used_for", "NCA"]]

pred: [('corpus', 'Used_for', 'NCA')]
trues: [['concept hierarchy constraints', 'Used_for', 'NCA'], ['frequency of occurrences', 'Used_for', 'NCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30357142857142855, 0.30357142857142855, 0.30357142857142855]
text: In this paper , we present an unlexicalized parser for German which employs smoothing and suffix analysis to achieve a labelled bracket F-score of 76.2 , higher than previously reported results on the NEGRA corpus .
result: triple_list: [["unlexicalized parser", "Used_for", "German"], ["smoothing", "Used_for", "unlexicalized parser"], ["smoothing", "Conjunction", "suffix analysis"], ["suffix analysis", "Used_for", "unlexicalized parser"], ["labelled bracket F-score", "Evaluate_for", "unlexicalized parser"], ["labelled bracket F-score", "Evaluate_for", "NEGRA corpus"]]

pred: [('unlexicalized parser', 'Used_for', 'German'), ('smoothing', 'Used_for', 'unlexicalized parser'), ('smoothing', 'Conjunction', 'suffix analysis'), ('suffix analysis', 'Used_for', 'unlexicalized parser'), ('labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'), ('labelled bracket F-score', 'Evaluate_for', 'NEGRA corpus')]
trues: [['unlexicalized parser', 'Used_for', 'German'], ['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Conjunction', 'suffix analysis'], ['suffix analysis', 'Used_for', 'unlexicalized parser'], ['labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'], ['NEGRA corpus', 'Evaluate_for', 'unlexicalized parser']]
metrics_sample: [0.8333333333333334, 0.8333333333333334, 0.8333333333333334]
metrics_current: [0.3305084745762712, 0.3305084745762712, 0.3305084745762712]
text: This paper presents a critical discussion of the various approaches that have been used in the evaluation of Natural Language systems .
result: triple_list: [["approaches", "Used_for", "Natural Language systems"]]

pred: [('approaches', 'Used_for', 'Natural Language systems')]
trues: [['approaches', 'Used_for', 'evaluation of Natural Language systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3277310924369748, 0.3277310924369748, 0.3277310924369748]
text: Turkish is an agglutinative language with word structures formed by productive affixations of derivational and inflectional suffixes to root words .
result: triple_list: [["Turkish", "Hyponym_of", "agglutinative language"]]

pred: [('Turkish', 'Hyponym_of', 'agglutinative language')]
trues: [['Turkish', 'Hyponym_of', 'agglutinative language'], ['word structures', 'Feature_of', 'agglutinative language'], ['productive affixations of derivational and inflectional suffixes', 'Part_of', 'word structures']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.3333333333333333, 0.32786885245901637, 0.33057851239669417]
text: It models reflection as regions containing two different layers moving over each other .
result: triple_list: [["It", "Used_for", "reflection"]]

pred: [('It', 'Used_for', 'reflection')]
trues: [['It', 'Used_for', 'reflection']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33884297520661155, 0.3333333333333333, 0.33606557377049184]
text: The result theoretically justifies the effectiveness of features in robust PCA .
result: triple_list: [["features", "Part_of", "robust PCA"]]

pred: [('features', 'Part_of', 'robust PCA')]
trues: [['features', 'Feature_of', 'robust PCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3360655737704918, 0.33064516129032256, 0.3333333333333333]
text: Our approach is among the first to propose a generative proba-bilistic framework for 3D object categorization .
result: triple_list: [["generative proba-bilistic framework", "Used_for", "3D object categorization"]]

pred: [('generative proba-bilistic framework', 'Used_for', '3D object categorization')]
trues: [['generative proba-bilistic framework', 'Used_for', '3D object categorization']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34146341463414637, 0.336, 0.33870967741935487]
text: We have implemented a restricted domain parser called Plume .
result: triple_list: [["restricted domain parser", "Hyponym_of", "Plume"]]

pred: [('restricted domain parser', 'Hyponym_of', 'Plume')]
trues: [['Plume', 'Hyponym_of', 'restricted domain parser']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3387096774193548, 0.3333333333333333, 0.33599999999999997]
text: We propose a novel approach to associate objects across multiple PTZ cameras that can be used to perform camera handoff in wide-area surveillance scenarios .
result: triple_list: [["approach", "Used_for", "objects"], ["PTZ cameras", "Used_for", "objects"], ["PTZ cameras", "Used_for", "approach"], ["camera handoff", "Used_for", "approach"], ["wide-area surveillance scenarios", "Feature_of", "camera handoff"]]

pred: [('approach', 'Used_for', 'objects'), ('PTZ cameras', 'Used_for', 'objects'), ('PTZ cameras', 'Used_for', 'approach'), ('camera handoff', 'Used_for', 'approach'), ('wide-area surveillance scenarios', 'Feature_of', 'camera handoff')]
trues: [['approach', 'Used_for', 'camera handoff in wide-area surveillance scenarios']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32558139534883723, 0.33070866141732286, 0.32812500000000006]
text: The new criterion -- meaning-entailing substitutability -- fits the needs of semantic-oriented NLP applications and can be evaluated directly ( independent of an application ) at a good level of human agreement .
result: triple_list: [["meaning-entailing substitutability", "Feature_of", "semantic-oriented NLP applications"]]

pred: [('meaning-entailing substitutability', 'Feature_of', 'semantic-oriented NLP applications')]
trues: [['meaning-entailing substitutability', 'Used_for', 'semantic-oriented NLP applications'], ['human agreement', 'Evaluate_for', 'meaning-entailing substitutability']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3230769230769231, 0.32558139534883723, 0.32432432432432434]
text: This paper examines the benefits of system combination for unsupervised WSD .
result: triple_list: [["system combination", "Used_for", "unsupervised WSD"]]

pred: [('system combination', 'Used_for', 'unsupervised WSD')]
trues: [['system combination', 'Used_for', 'unsupervised WSD']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3282442748091603, 0.33076923076923076, 0.32950191570881227]
text: We also show that a good-quality MT system can be built from scratch by starting with a very small parallel corpus ( 100,000 words ) and exploiting a large non-parallel corpus .
result: triple_list: [["parallel corpus", "Used_for", "MT system"], ["non-parallel corpus", "Used_for", "MT system"]]

pred: [('parallel corpus', 'Used_for', 'MT system'), ('non-parallel corpus', 'Used_for', 'MT system')]
trues: [['parallel corpus', 'Used_for', 'MT system'], ['parallel corpus', 'Conjunction', 'non-parallel corpus'], ['non-parallel corpus', 'Used_for', 'MT system']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.3383458646616541, 0.3383458646616541, 0.3383458646616541]
text: GLOSSER is designed to support reading and learning to read in a foreign language .
result: triple_list: [["GLOSSER", "Used_for", "reading and learning to read in a foreign language"]]

pred: [('GLOSSER', 'Used_for', 'reading and learning to read in a foreign language')]
trues: [['GLOSSER', 'Used_for', 'reading and learning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3358208955223881, 0.3358208955223881, 0.3358208955223881]
text: Metagrammatical formalisms that combine context-free phrase structure rules and metarules ( MPS grammars ) allow concise statement of generalizations about the syntax of natural languages .
result: triple_list: [["context-free phrase structure rules", "Part_of", "Metagrammatical formalisms"], ["context-free phrase structure rules", "Conjunction", "metarules"], ["metarules", "Part_of", "Metagrammatical formalisms"], ["MPS grammars", "Hyponym_of", "metarules"], ["syntax of natural languages", "Feature_of", "generalizations"]]

pred: [('context-free phrase structure rules', 'Part_of', 'Metagrammatical formalisms'), ('context-free phrase structure rules', 'Conjunction', 'metarules'), ('metarules', 'Part_of', 'Metagrammatical formalisms'), ('MPS grammars', 'Hyponym_of', 'metarules'), ('syntax of natural languages', 'Feature_of', 'generalizations')]
trues: [['context-free phrase structure rules', 'Part_of', 'Metagrammatical formalisms'], ['context-free phrase structure rules', 'Conjunction', 'metarules ( MPS grammars )'], ['metarules ( MPS grammars )', 'Part_of', 'Metagrammatical formalisms']]
metrics_sample: [0.2, 0.3333333333333333, 0.25]
metrics_current: [0.33093525179856115, 0.3357664233576642, 0.3333333333333333]
text: This paper investigates the utility of applying standard MT evaluation methods ( BLEU , NIST , WER and PER ) to building classifiers to predict semantic equivalence and entailment .
result: triple_list: [["BLEU", "Conjunction", "NIST"], ["BLEU", "Evaluate_for", "MT evaluation methods"], ["NIST", "Conjunction", "WER"], ["NIST", "Evaluate_for", "MT evaluation methods"], ["NIST", "Conjunction", "PER"], ["WER", "Conjunction", "PER"], ["PER", "Evaluate_for", "MT evaluation methods"]]

pred: [('BLEU', 'Conjunction', 'NIST'), ('BLEU', 'Evaluate_for', 'MT evaluation methods'), ('NIST', 'Conjunction', 'WER'), ('NIST', 'Evaluate_for', 'MT evaluation methods'), ('NIST', 'Conjunction', 'PER'), ('WER', 'Conjunction', 'PER'), ('PER', 'Evaluate_for', 'MT evaluation methods')]
trues: [['MT evaluation methods', 'Used_for', 'classifiers'], ['BLEU', 'Hyponym_of', 'MT evaluation methods'], ['BLEU', 'Conjunction', 'NIST'], ['NIST', 'Hyponym_of', 'MT evaluation methods'], ['NIST', 'Conjunction', 'WER'], ['WER', 'Hyponym_of', 'MT evaluation methods'], ['WER', 'Conjunction', 'PER'], ['PER', 'Hyponym_of', 'MT evaluation methods'], ['classifiers', 'Used_for', 'semantic equivalence'], ['classifiers', 'Used_for', 'entailment'], ['semantic equivalence', 'Conjunction', 'entailment']]
metrics_sample: [0.42857142857142855, 0.2727272727272727, 0.33333333333333326]
metrics_current: [0.3356164383561644, 0.3310810810810811, 0.3333333333333333]
text: The integrated learning system has been experimentally validated in simulated construction and ooce domains .
result: triple_list: [["integrated learning system", "Used_for", "simulated construction and ooce domains"]]

pred: [('integrated learning system', 'Used_for', 'simulated construction and ooce domains')]
trues: [['simulated construction', 'Evaluate_for', 'integrated learning system'], ['simulated construction', 'Conjunction', 'ooce domains'], ['ooce domains', 'Evaluate_for', 'integrated learning system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.32450331125827814, 0.32885906040268453]
text: Using this approach , we extract parallel data from large Chinese , Arabic , and English non-parallel newspaper corpora .
result: triple_list: [["Chinese , Arabic , and English non-parallel newspaper corpora", "Used_for", "approach"]]

pred: [('Chinese , Arabic , and English non-parallel newspaper corpora', 'Used_for', 'approach')]
trues: [['approach', 'Used_for', 'parallel data'], ['parallel data', 'Part_of', 'Chinese , Arabic , and English non-parallel newspaper corpora']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3310810810810811, 0.3202614379084967, 0.3255813953488372]
text: We propose a novel step toward the unsupervised seg-mentation of whole objects by combining '' hints '' of partial scene segmentation offered by multiple soft , binary mattes .
result: triple_list: [["unsupervised seg-mentation of whole objects", "Used_for", "partial scene segmentation"]]

pred: [('unsupervised seg-mentation of whole objects', 'Used_for', 'partial scene segmentation')]
trues: [['partial scene segmentation', 'Used_for', 'unsupervised seg-mentation of whole objects'], ['soft , binary mattes', 'Used_for', 'partial scene segmentation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3288590604026846, 0.3161290322580645, 0.3223684210526316]
text: Our numerical hybrid local and global mode-seeking tracker is validated on challenging airborne videos with heavy occlusion and large camera motions .
result: triple_list: [["numerical hybrid local and global mode-seeking tracker", "Used_for", "airborne videos"], ["airborne videos", "Used_for", "heavy occlusion"], ["airborne videos", "Used_for", "large camera motions"]]

pred: [('numerical hybrid local and global mode-seeking tracker', 'Used_for', 'airborne videos'), ('airborne videos', 'Used_for', 'heavy occlusion'), ('airborne videos', 'Used_for', 'large camera motions')]
trues: [['airborne videos', 'Evaluate_for', 'numerical hybrid local and global mode-seeking tracker'], ['heavy occlusion', 'Feature_of', 'airborne videos'], ['heavy occlusion', 'Conjunction', 'camera motions'], ['camera motions', 'Feature_of', 'airborne videos']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3223684210526316, 0.3081761006289308, 0.31511254019292606]
text: We provide a unified account of sentence-level and text-level anaphora within the framework of a dependency-based grammar model .
result: triple_list: [["sentence-level and text-level anaphora", "Part_of", "dependency-based grammar model"]]

pred: [('sentence-level and text-level anaphora', 'Part_of', 'dependency-based grammar model')]
trues: [['dependency-based grammar model', 'Used_for', 'sentence-level and text-level anaphora']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3202614379084967, 0.30625, 0.31309904153354634]
text: In the experiments , we used a variety of methods for preparing a segmented corpus and compared the language models by their speech recognition accuracies .
result: triple_list: [["methods", "Used_for", "segmented corpus"], ["speech recognition accuracies", "Evaluate_for", "language models"]]

pred: [('methods', 'Used_for', 'segmented corpus'), ('speech recognition accuracies', 'Evaluate_for', 'language models')]
trues: [['methods', 'Used_for', 'preparing a segmented corpus'], ['speech recognition accuracies', 'Evaluate_for', 'language models']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3225806451612903, 0.30864197530864196, 0.31545741324921134]
text: These methods diier from previous work in the area in two ways : the use of an action model formalism which is better suited to the needs of a re-active agent , and successful implementation of noise-handling mechanisms .
result: triple_list: [["action model formalism", "Used_for", "re-active agent"], ["noise-handling mechanisms", "Part_of", "methods"]]

pred: [('action model formalism', 'Used_for', 're-active agent'), ('noise-handling mechanisms', 'Part_of', 'methods')]
trues: [['action model formalism', 'Used_for', 'methods'], ['action model formalism', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Used_for', 'methods']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3248407643312102, 0.3090909090909091, 0.31677018633540377]
text: OA improved phase locking in the auditory nerve ( AN ) and raised ASR accuracy for features derived from AN fibers ( ANFs ) .
result: triple_list: [["OA", "Used_for", "phase locking"], ["OA", "Used_for", "ASR accuracy"], ["AN", "Feature_of", "phase locking"], ["AN", "Conjunction", "ANFs"], ["ANFs", "Feature_of", "ASR accuracy"]]

pred: [('OA', 'Used_for', 'phase locking'), ('OA', 'Used_for', 'ASR accuracy'), ('AN', 'Feature_of', 'phase locking'), ('AN', 'Conjunction', 'ANFs'), ('ANFs', 'Feature_of', 'ASR accuracy')]
trues: [['OA', 'Used_for', 'phase locking in the auditory nerve ( AN )'], ['OA', 'Used_for', 'features'], ['ASR accuracy', 'Evaluate_for', 'features'], ['AN fibers ( ANFs )', 'Used_for', 'features']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3148148148148148, 0.30177514792899407, 0.3081570996978852]
text: While current approaches are developed by only considering the low rank plus sparse structure , in many applications , side information of row and/or column entities may also be given , and it is still unclear to what extent could such information help robust PCA .
result: triple_list: [["low rank plus sparse structure", "Used_for", "approaches"], ["row and/or column entities", "Used_for", "robust PCA"]]

pred: [('low rank plus sparse structure', 'Used_for', 'approaches'), ('row and/or column entities', 'Used_for', 'robust PCA')]
trues: [['low rank plus sparse structure', 'Used_for', 'approaches'], ['information', 'Used_for', 'robust PCA']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3170731707317073, 0.30409356725146197, 0.31044776119402984]
text: In this situation , the general method is to segment the raw corpus automatically using a word list , correct the output sentences by hand , and build a model from the segmented corpus .
result: triple_list: [["method", "Used_for", "segmented corpus"], ["word list", "Used_for", "segment raw corpus"]]

pred: [('method', 'Used_for', 'segmented corpus'), ('word list', 'Used_for', 'segment raw corpus')]
trues: [['method', 'Used_for', 'raw corpus'], ['word list', 'Used_for', 'method'], ['segmented corpus', 'Used_for', 'model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3132530120481928, 0.2988505747126437, 0.3058823529411765]
text: This paper describes a novel system for acquiring adjectival subcategorization frames ( scfs ) and associated frequency information from English corpus data .
result: triple_list: [["system", "Used_for", "adjectival subcategorization frames ( scfs )"], ["system", "Used_for", "frequency information"], ["English corpus data", "Used_for", "system"], ["adjectival subcategorization frames ( scfs )", "Conjunction", "frequency information"]]

pred: [('system', 'Used_for', 'adjectival subcategorization frames ( scfs )'), ('system', 'Used_for', 'frequency information'), ('English corpus data', 'Used_for', 'system'), ('adjectival subcategorization frames ( scfs )', 'Conjunction', 'frequency information')]
trues: [['system', 'Used_for', 'acquiring adjectival subcategorization frames ( scfs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3058823529411765, 0.29714285714285715, 0.30144927536231886]
text: Computing power per area and power consumption is amongst the highest reported for a single chip .
result: triple_list: [["Computing power per area", "Conjunction", "power consumption"]]

pred: [('Computing power per area', 'Conjunction', 'power consumption')]
trues: [['Computing power per area', 'Conjunction', 'power consumption']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30994152046783624, 0.30113636363636365, 0.30547550432276654]
text: The description has been implemented using the PC-KIMMO environment ( Antworth , 1990 ) and is based on a root word lexicon of about 23,000 roots words .
result: triple_list: [["PC-KIMMO environment", "Used_for", "description"], ["PC-KIMMO environment", "Used_for", "root word lexicon"], ["Antworth", "Used_for", "PC-KIMMO environment"]]

pred: [('PC-KIMMO environment', 'Used_for', 'description'), ('PC-KIMMO environment', 'Used_for', 'root word lexicon'), ('Antworth', 'Used_for', 'PC-KIMMO environment')]
trues: [['PC-KIMMO environment', 'Used_for', 'description'], ['root word lexicon', 'Used_for', 'description']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3103448275862069, 0.30337078651685395, 0.3068181818181818]
text: An experimental evaluation of summarization quality shows a close correlation between the automatic parse-based evaluation and a manual evaluation of generated strings .
result: triple_list: [["automatic parse-based evaluation", "Evaluate_for", "summarization quality"], ["manual evaluation", "Evaluate_for", "summarization quality"]]

pred: [('automatic parse-based evaluation', 'Evaluate_for', 'summarization quality'), ('manual evaluation', 'Evaluate_for', 'summarization quality')]
trues: [['summarization quality', 'Evaluate_for', 'automatic parse-based evaluation'], ['automatic parse-based evaluation', 'Compare', 'manual evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3068181818181818, 0.3, 0.3033707865168539]
text: This paper presents a phrase-based statistical machine translation method , based on non-contiguous phrases , i.e. phrases with gaps .
result: triple_list: [["phrase-based statistical machine translation method", "Used_for", "non-contiguous phrases"]]

pred: [('phrase-based statistical machine translation method', 'Used_for', 'non-contiguous phrases')]
trues: [['non-contiguous phrases', 'Used_for', 'phrase-based statistical machine translation method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3050847457627119, 0.2983425414364641, 0.3016759776536313]
text: Our goal is to learn a Mahalanobis distance by minimizing a loss defined on the weighted sum of the precision at different ranks .
result: triple_list: [["weighted sum of the precision at different ranks", "Used_for", "Mahalanobis distance"]]

pred: [('weighted sum of the precision at different ranks', 'Used_for', 'Mahalanobis distance')]
trues: [['loss', 'Used_for', 'Mahalanobis distance'], ['weighted sum', 'Feature_of', 'precision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30337078651685395, 0.29508196721311475, 0.2991689750692521]
text: Listen-Communicate-Show ( LCS ) is a new paradigm for human interaction with data sources .
result: triple_list: [["Listen-Communicate-Show ( LCS )", "Hyponym_of", "paradigm"], ["human interaction", "Used_for", "Listen-Communicate-Show ( LCS )"], ["data sources", "Feature_of", "Listen-Communicate-Show ( LCS )"]]

pred: [('Listen-Communicate-Show ( LCS )', 'Hyponym_of', 'paradigm'), ('human interaction', 'Used_for', 'Listen-Communicate-Show ( LCS )'), ('data sources', 'Feature_of', 'Listen-Communicate-Show ( LCS )')]
trues: [['Listen-Communicate-Show ( LCS )', 'Used_for', 'human interaction with data sources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2983425414364641, 0.29347826086956524, 0.29589041095890406]
text: With the aid of a logic-based grammar formalism called extraposition grammars , Chat-80 translates English questions into the Prolog subset of logic .
result: triple_list: [["extraposition grammars", "Used_for", "Chat-80"], ["Prolog subset of logic", "Used_for", "Chat-80"]]

pred: [('extraposition grammars', 'Used_for', 'Chat-80'), ('Prolog subset of logic', 'Used_for', 'Chat-80')]
trues: [['extraposition grammars', 'Hyponym_of', 'logic-based grammar formalism'], ['extraposition grammars', 'Used_for', 'Chat-80']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3005464480874317, 0.2956989247311828, 0.29810298102981025]
text: In addition , we conduct synthetic experiments as well as a real application on noisy image classification to show that our method also improves the performance in practice by exploiting side information .
result: triple_list: [["synthetic experiments", "Conjunction", "real application"], ["synthetic experiments", "Evaluate_for", "method"], ["real application", "Evaluate_for", "method"], ["noisy image classification", "Evaluate_for", "method"], ["side information", "Used_for", "method"]]

pred: [('synthetic experiments', 'Conjunction', 'real application'), ('synthetic experiments', 'Evaluate_for', 'method'), ('real application', 'Evaluate_for', 'method'), ('noisy image classification', 'Evaluate_for', 'method'), ('side information', 'Used_for', 'method')]
trues: [['noisy image classification', 'Evaluate_for', 'method'], ['side information', 'Used_for', 'method']]
metrics_sample: [0.4, 1.0, 0.5714285714285715]
metrics_current: [0.30319148936170215, 0.30319148936170215, 0.30319148936170215]
text: A separation method is proposed that is nearly statistically efficient ( approaching the corresponding Cramér-Rao lower bound ) , if the separated signals obey the assumed model .
result: triple_list: [["Cramér-Rao lower bound", "Feature_of", "separation method"]]

pred: [('Cramér-Rao lower bound', 'Feature_of', 'separation method')]
trues: [['Cramér-Rao lower bound )', 'Feature_of', 'separation method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30158730158730157, 0.30158730158730157, 0.30158730158730157]
text: Indeed , automatic evaluations need high-quality data that allow the comparison of both automatic and human translations .
result: triple_list: [["high-quality data", "Used_for", "automatic evaluations"]]

pred: [('high-quality data', 'Used_for', 'automatic evaluations')]
trues: [['high-quality data', 'Evaluate_for', 'automatic evaluations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3, 0.3, 0.3]
text: Furthermore , we show how the recently developed efficient subwindow search ( ESS ) procedure [ 11 ] can be integrated into the last stage of our method .
result: triple_list: [["efficient subwindow search ( ESS ) procedure", "Part_of", "method"]]

pred: [('efficient subwindow search ( ESS ) procedure', 'Part_of', 'method')]
trues: [['subwindow search ( ESS ) procedure', 'Part_of', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29842931937172773, 0.29842931937172773, 0.29842931937172773]
text: When the scene exhibits a persistent dynamic behavior in time , such an assumption is violated and detection performance deteriorates .
result: triple_list: [["scene", "Used_for", "detection"], ["persistent dynamic behavior in time", "Feature_of", "scene"]]

pred: [('scene', 'Used_for', 'detection'), ('persistent dynamic behavior in time', 'Feature_of', 'scene')]
trues: [['persistent dynamic behavior', 'Feature_of', 'scene']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29533678756476683, 0.296875, 0.2961038961038961]
text: Our extensive experimental results significantly improve over both uniform sampling and standard stratified sampling which are de-facto the industry standards .
result: triple_list: [["uniform sampling", "Conjunction", "standard stratified sampling"], ["uniform sampling", "Compare", "standard stratified sampling"]]

pred: [('uniform sampling', 'Conjunction', 'standard stratified sampling'), ('uniform sampling', 'Compare', 'standard stratified sampling')]
trues: [['uniform sampling', 'Conjunction', 'stratified sampling']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2923076923076923, 0.29533678756476683, 0.29381443298969073]
text: In comparison with previous works , in this paper it is assumed that the signals are not i.i.d. in each epoch , but obey a first-order autoregressive model .
result: triple_list: [["it", "Compare", "works"], ["signals", "Used_for", "it"], ["it", "Compare", "autoregressive model"]]

pred: [('it', 'Compare', 'works'), ('signals', 'Used_for', 'it'), ('it', 'Compare', 'autoregressive model')]
trues: [['first-order autoregressive model', 'Used_for', 'signals']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2878787878787879, 0.29381443298969073, 0.29081632653061223]
text: It works by calculating eigenvectors of an adjacency graph 's Laplacian to recover a submanifold of data from a high dimensionality space and then performing cluster number estimation on the eigenvectors .
result: triple_list: [["eigenvectors", "Used_for", "submanifold of data"], ["eigenvectors", "Used_for", "cluster number estimation"], ["submanifold of data", "Part_of", "high dimensionality space"], ["cluster number estimation", "Part_of", "eigenvectors"]]

pred: [('eigenvectors', 'Used_for', 'submanifold of data'), ('eigenvectors', 'Used_for', 'cluster number estimation'), ('submanifold of data', 'Part_of', 'high dimensionality space'), ('cluster number estimation', 'Part_of', 'eigenvectors')]
trues: [['It', 'Used_for', 'submanifold'], ['eigenvectors', 'Used_for', 'It'], ["adjacency graph 's Laplacian", 'Feature_of', 'eigenvectors'], ['high dimensionality space', 'Used_for', 'submanifold'], ['cluster number estimation', 'Used_for', 'It'], ['cluster number estimation', 'Used_for', 'eigenvectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28217821782178215, 0.285, 0.2835820895522388]
text: The goal of this work is the enrichment of human-machine interactions in a natural language environment .
result: triple_list: [["natural language environment", "Feature_of", "human-machine interactions"]]

pred: [('natural language environment', 'Feature_of', 'human-machine interactions')]
trues: [['natural language environment', 'Feature_of', 'human-machine interactions']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.2857142857142857, 0.2885572139303483, 0.28712871287128716]
text: Inherent ambiguities in the computation of features are addressed by using a data-dependent bandwidth for density estimation using kernels .
result: triple_list: [["data-dependent bandwidth", "Used_for", "density estimation"], ["kernels", "Used_for", "density estimation"]]

pred: [('data-dependent bandwidth', 'Used_for', 'density estimation'), ('kernels', 'Used_for', 'density estimation')]
trues: [['ambiguities', 'Feature_of', 'computation of features'], ['data-dependent bandwidth', 'Used_for', 'ambiguities'], ['data-dependent bandwidth', 'Used_for', 'density estimation'], ['kernels', 'Used_for', 'density estimation']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.2926829268292683, 0.2926829268292683, 0.2926829268292683]
text: We also derive an efficient non-linear extension of WARCA by using the kernel trick .
result: triple_list: [["kernel trick", "Used_for", "non-linear extension of WARCA"]]

pred: [('kernel trick', 'Used_for', 'non-linear extension of WARCA')]
trues: [['kernel trick', 'Used_for', 'non-linear extension of WARCA']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.2961165048543689, 0.2961165048543689, 0.2961165048543689]
text: This paper presents a machine learning approach to bare slice disambiguation in dialogue .
result: triple_list: [["machine learning approach", "Used_for", "bare slice disambiguation"], ["bare slice disambiguation", "Part_of", "dialogue"]]

pred: [('machine learning approach', 'Used_for', 'bare slice disambiguation'), ('bare slice disambiguation', 'Part_of', 'dialogue')]
trues: [['machine learning approach', 'Used_for', 'bare slice disambiguation'], ['dialogue', 'Used_for', 'bare slice disambiguation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.2980769230769231, 0.2980769230769231, 0.2980769230769231]
text: Examples are given that demonstrate the robustness of the new algorithm to spatial and temporal artefacts for long stereo video streams .
result: triple_list: [["spatial and temporal artefacts", "Feature_of", "algorithm"], ["spatial and temporal artefacts", "Feature_of", "long stereo video streams"]]

pred: [('spatial and temporal artefacts', 'Feature_of', 'algorithm'), ('spatial and temporal artefacts', 'Feature_of', 'long stereo video streams')]
trues: [['robustness', 'Evaluate_for', 'algorithm'], ['algorithm', 'Used_for', 'spatial and temporal artefacts'], ['spatial and temporal artefacts', 'Used_for', 'long stereo video streams']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29523809523809524, 0.2938388625592417, 0.29453681710213775]
text: In order to perform an exhaustive comparison , we also evaluate a hand-crafted template-based generation component , two rule-based sentence planners , and two baseline sentence planners .
result: triple_list: [["hand-crafted template-based generation component", "Hyponym_of", "exhaustive comparison"], ["hand-crafted template-based generation component", "Conjunction", "rule-based sentence planners"], ["rule-based sentence planners", "Hyponym_of", "exhaustive comparison"], ["rule-based sentence planners", "Conjunction", "baseline sentence planners"], ["baseline sentence planners", "Hyponym_of", "exhaustive comparison"]]

pred: [('hand-crafted template-based generation component', 'Hyponym_of', 'exhaustive comparison'), ('hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'), ('rule-based sentence planners', 'Hyponym_of', 'exhaustive comparison'), ('rule-based sentence planners', 'Conjunction', 'baseline sentence planners'), ('baseline sentence planners', 'Hyponym_of', 'exhaustive comparison')]
trues: [['hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'], ['rule-based sentence planners', 'Conjunction', 'baseline sentence planners']]
metrics_sample: [0.4, 1.0, 0.5714285714285715]
metrics_current: [0.29767441860465116, 0.3004694835680751, 0.2990654205607477]
text: Experimental results from a real telephone application on a natural number recognition task show an 50 % reduction in recognition errors with a moderate 12 % rejection rate of correct utterances and a low 1.5 % rate of false acceptance .
result: triple_list: [["recognition errors", "Evaluate_for", "telephone application"], ["natural number recognition task", "Used_for", "telephone application"]]

pred: [('recognition errors', 'Evaluate_for', 'telephone application'), ('natural number recognition task', 'Used_for', 'telephone application')]
trues: [['natural number recognition task', 'Feature_of', 'telephone application'], ['recognition errors', 'Evaluate_for', 'natural number recognition task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29493087557603687, 0.29767441860465116, 0.2962962962962963]
text: In this paper , we present our work on the detection of question-answer pairs in an email conversation for the task of email summarization .
result: triple_list: [["detection of question-answer pairs", "Used_for", "email summarization"]]

pred: [('detection of question-answer pairs', 'Used_for', 'email summarization')]
trues: [['detection of question-answer pairs', 'Used_for', 'email summarization'], ['email conversation', 'Used_for', 'detection of question-answer pairs']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.2981651376146789, 0.2995391705069124, 0.29885057471264365]
text: Towards deep analysis of compositional classes of paraphrases , we have examined a class-oriented framework for collecting paraphrase examples , in which sentential paraphrases are collected for each paraphrase class separately by means of automatic candidate generation and manual judgement .
result: triple_list: [["class-oriented framework", "Used_for", "paraphrase examples"], ["automatic candidate generation", "Used_for", "class-oriented framework"], ["automatic candidate generation", "Conjunction", "manual judgement"], ["manual judgement", "Used_for", "class-oriented framework"]]

pred: [('class-oriented framework', 'Used_for', 'paraphrase examples'), ('automatic candidate generation', 'Used_for', 'class-oriented framework'), ('automatic candidate generation', 'Conjunction', 'manual judgement'), ('manual judgement', 'Used_for', 'class-oriented framework')]
trues: [['class-oriented framework', 'Used_for', 'compositional classes of paraphrases'], ['class-oriented framework', 'Used_for', 'paraphrase examples'], ['automatic candidate generation', 'Used_for', 'sentential paraphrases'], ['automatic candidate generation', 'Conjunction', 'manual judgement'], ['manual judgement', 'Used_for', 'sentential paraphrases']]
metrics_sample: [0.5, 0.4, 0.4444444444444445]
metrics_current: [0.30180180180180183, 0.30180180180180183, 0.30180180180180183]
text: Our experiments on real data sets show that the resulting detector is more robust to the choice of training examples , and substantially improves both linear and kernel SVM when trained on 10 positive and 10 negative examples .
result: triple_list: [["detector", "Used_for", "linear and kernel SVM"]]

pred: [('detector', 'Used_for', 'linear and kernel SVM')]
trues: [['real data sets', 'Evaluate_for', 'detector'], ['detector', 'Compare', 'linear and kernel SVM']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3004484304932735, 0.29910714285714285, 0.2997762863534676]
text: The combined approach is formulated in the framework of Bayesian statistics to account for the robust-ness requirement in image understanding .
result: triple_list: [["Bayesian statistics", "Used_for", "robust-ness requirement"], ["Bayesian statistics", "Used_for", "image understanding"]]

pred: [('Bayesian statistics', 'Used_for', 'robust-ness requirement'), ('Bayesian statistics', 'Used_for', 'image understanding')]
trues: [['approach', 'Used_for', 'robust-ness requirement in image understanding'], ['Bayesian statistics', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29777777777777775, 0.29646017699115046, 0.2971175166297117]
text: We further propose a parameter training algorithm for the present model based on a decision tree-based context clustering .
result: triple_list: [["decision tree-based context clustering", "Used_for", "parameter training algorithm"]]

pred: [('decision tree-based context clustering', 'Used_for', 'parameter training algorithm')]
trues: [['parameter training algorithm', 'Used_for', 'model'], ['decision tree-based context clustering', 'Used_for', 'parameter training algorithm']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3008849557522124, 0.2982456140350877, 0.29955947136563876]
text: Topical blog post retrieval is the task of ranking blog posts with respect to their relevance for a given topic .
result: triple_list: [["blog posts", "Used_for", "Topical blog post retrieval"], ["blog posts", "Used_for", "topic"]]

pred: [('blog posts', 'Used_for', 'Topical blog post retrieval'), ('blog posts', 'Used_for', 'topic')]
trues: [['Topical blog post retrieval', 'Hyponym_of', 'ranking blog posts'], ['relevance', 'Feature_of', 'blog posts']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2982456140350877, 0.2956521739130435, 0.29694323144104806]
text: Starting from a DP-based solution to the traveling salesman problem , we present a novel technique to restrict the possible word reordering between source and target language in order to achieve an efficient search algorithm .
result: triple_list: [["DP-based solution", "Used_for", "traveling salesman problem"]]

pred: [('DP-based solution', 'Used_for', 'traveling salesman problem')]
trues: [['technique', 'Used_for', 'search algorithm']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29694323144104806, 0.2943722943722944, 0.2956521739130435]
text: Such a triangulation provides a piecewise-linear interpolant useful for light field super-resolution .
result: triple_list: [["triangulation", "Used_for", "light field super-resolution"]]

pred: [('triangulation', 'Used_for', 'light field super-resolution')]
trues: [['triangulation', 'Used_for', 'piecewise-linear interpolant'], ['piecewise-linear interpolant', 'Used_for', 'light field super-resolution']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2956521739130435, 0.2918454935622318, 0.29373650107991367]
text: During normal tracking conditions when the object is visible from frame to frame , local optimization is used to track the local mode of the similarity measure in a parameter space of translation , rotation and scale .
result: triple_list: [["local optimization", "Used_for", "local mode of the similarity measure"], ["translation", "Conjunction", "rotation"], ["translation", "Conjunction", "scale"], ["rotation", "Conjunction", "scale"]]

pred: [('local optimization', 'Used_for', 'local mode of the similarity measure'), ('translation', 'Conjunction', 'rotation'), ('translation', 'Conjunction', 'scale'), ('rotation', 'Conjunction', 'scale')]
trues: [['local optimization', 'Used_for', 'local mode of the similarity measure'], ['parameter space of translation , rotation and scale', 'Used_for', 'local mode of the similarity measure']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.2948717948717949, 0.2936170212765957, 0.2942430703624734]
text: In the Object Recognition task , there exists a di-chotomy between the categorization of objects and estimating object pose , where the former necessitates a view-invariant representation , while the latter requires a representation capable of capturing pose information over different categories of objects .
result: triple_list: [["categorization of objects", "Conjunction", "estimating object pose"], ["view-invariant representation", "Used_for", "categorization of objects"], ["view-invariant representation", "Compare", "representation"], ["representation", "Used_for", "estimating object pose"], ["pose information", "Feature_of", "representation"], ["pose information", "Used_for", "estimating object pose"], ["categories of objects", "Feature_of", "estimating object pose"]]

pred: [('categorization of objects', 'Conjunction', 'estimating object pose'), ('view-invariant representation', 'Used_for', 'categorization of objects'), ('view-invariant representation', 'Compare', 'representation'), ('representation', 'Used_for', 'estimating object pose'), ('pose information', 'Feature_of', 'representation'), ('pose information', 'Used_for', 'estimating object pose'), ('categories of objects', 'Feature_of', 'estimating object pose')]
trues: [['categorization of objects', 'Part_of', 'Object Recognition task'], ['categorization of objects', 'Conjunction', 'estimating object pose'], ['estimating object pose', 'Part_of', 'Object Recognition task'], ['view-invariant representation', 'Used_for', 'former'], ['representation', 'Used_for', 'latter'], ['representation', 'Used_for', 'pose information']]
metrics_sample: [0.14285714285714285, 0.16666666666666666, 0.15384615384615383]
metrics_current: [0.29045643153526973, 0.29045643153526973, 0.29045643153526973]
text: In practice , the current deep embedding methods use the Euclidean distance for the training and test .
result: triple_list: [["Euclidean distance", "Used_for", "deep embedding methods"]]

pred: [('Euclidean distance', 'Used_for', 'deep embedding methods')]
trues: [['Euclidean distance', 'Used_for', 'deep embedding methods']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.29338842975206614, 0.29338842975206614, 0.29338842975206614]
text: We compare our results to state of the art methods such as mi-cro phase shifting and modulated phase shifting .
result: triple_list: [["mi-cro phase shifting", "Conjunction", "modulated phase shifting"]]

pred: [('mi-cro phase shifting', 'Conjunction', 'modulated phase shifting')]
trues: [['mi-cro phase shifting', 'Hyponym_of', 'state of the art methods'], ['mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'], ['modulated phase shifting', 'Hyponym_of', 'state of the art methods']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.2962962962962963, 0.2938775510204082, 0.2950819672131148]
text: Our approach is based on the iterative deformation of a 3 -- D surface mesh to minimize an objective function .
result: triple_list: [["iterative deformation", "Used_for", "approach"], ["iterative deformation", "Used_for", "3 -- D surface mesh"], ["3 -- D surface mesh", "Used_for", "objective function"]]

pred: [('iterative deformation', 'Used_for', 'approach'), ('iterative deformation', 'Used_for', '3 -- D surface mesh'), ('3 -- D surface mesh', 'Used_for', 'objective function')]
trues: [['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'approach'], ['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'objective function']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2926829268292683, 0.291497975708502, 0.2920892494929006]
text: We evaluate across two corpora ( conversational telephone speech and broadcast news speech ) on both human transcriptions and speech recognition output .
result: triple_list: [["corpora", "Evaluate_for", "human transcriptions"], ["corpora", "Evaluate_for", "speech recognition output"], ["conversational telephone speech", "Hyponym_of", "corpora"], ["conversational telephone speech", "Conjunction", "broadcast news speech"], ["broadcast news speech", "Hyponym_of", "corpora"], ["human transcriptions", "Conjunction", "speech recognition output"]]

pred: [('corpora', 'Evaluate_for', 'human transcriptions'), ('corpora', 'Evaluate_for', 'speech recognition output'), ('conversational telephone speech', 'Hyponym_of', 'corpora'), ('conversational telephone speech', 'Conjunction', 'broadcast news speech'), ('broadcast news speech', 'Hyponym_of', 'corpora'), ('human transcriptions', 'Conjunction', 'speech recognition output')]
trues: [['corpora', 'Evaluate_for', 'human transcriptions'], ['corpora', 'Evaluate_for', 'speech recognition output'], ['conversational telephone speech', 'Hyponym_of', 'corpora'], ['conversational telephone speech', 'Conjunction', 'broadcast news speech'], ['broadcast news speech', 'Hyponym_of', 'corpora'], ['human transcriptions', 'Conjunction', 'speech recognition output']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30952380952380953, 0.308300395256917, 0.3089108910891089]
text: Our method takes advantage of the different way in which word senses are lexicalised in English and Chinese , and also exploits the large amount of Chinese text available in corpora and on the Web .
result: triple_list: [["method", "Used_for", "word senses"], ["English", "Feature_of", "word senses"], ["English", "Conjunction", "Chinese"], ["Chinese", "Feature_of", "word senses"], ["Chinese text", "Used_for", "method"], ["Chinese text", "Conjunction", "Web"]]

pred: [('method', 'Used_for', 'word senses'), ('English', 'Feature_of', 'word senses'), ('English', 'Conjunction', 'Chinese'), ('Chinese', 'Feature_of', 'word senses'), ('Chinese text', 'Used_for', 'method'), ('Chinese text', 'Conjunction', 'Web')]
trues: [['Chinese text', 'Part_of', 'corpora'], ['Chinese text', 'Part_of', 'Web'], ['corpora', 'Conjunction', 'Web']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3023255813953488, 0.3046875, 0.3035019455252918]
text: This distribution has numerous applications in computer Go , including serving as an efficient stand-alone Go player .
result: triple_list: [["distribution", "Used_for", "computer Go"], ["distribution", "Used_for", "stand-alone Go player"], ["stand-alone Go player", "Hyponym_of", "computer Go"]]

pred: [('distribution', 'Used_for', 'computer Go'), ('distribution', 'Used_for', 'stand-alone Go player'), ('stand-alone Go player', 'Hyponym_of', 'computer Go')]
trues: [['distribution', 'Used_for', 'computer Go']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.30268199233716475, 0.30739299610894943, 0.305019305019305]
text: Full digital resolution is maintained even with low-resolution analog-to-digital conversion , owing to random statistics in the analog summation of binary products .
result: triple_list: [["Full digital resolution", "Feature_of", "analog-to-digital conversion"], ["analog summation of binary products", "Used_for", "Full digital resolution"]]

pred: [('Full digital resolution', 'Feature_of', 'analog-to-digital conversion'), ('analog summation of binary products', 'Used_for', 'Full digital resolution')]
trues: [['random statistics', 'Part_of', 'analog summation of binary products']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30038022813688214, 0.3062015503875969, 0.30326295585412666]
text: This poster paper describes a full scale two-level morphological description ( Karttunen , 1983 ; Koskenniemi , 1983 ) of Turkish word structures .
result: triple_list: [["full scale two-level morphological description", "Used_for", "Turkish word structures"]]

pred: [('full scale two-level morphological description', 'Used_for', 'Turkish word structures')]
trues: [['full scale two-level morphological description', 'Used_for', 'Turkish word structures']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.30303030303030304, 0.3088803088803089, 0.30592734225621415]
text: Thus , the limitations of the automatic metrics used within MT are also discussed in this regard .
result: triple_list: [["automatic metrics", "Used_for", "MT"]]

pred: [('automatic metrics', 'Used_for', 'MT')]
trues: [['automatic metrics', 'Evaluate_for', 'MT']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3018867924528302, 0.3076923076923077, 0.3047619047619048]
text: This reflects contemporary methods for unsupervised object discovery from groups of images , and it allows us to define intuitive evaluation met-rics for our sets of segmentations based on the accurate and parsimonious delineation of scene objects .
result: triple_list: [["unsupervised object discovery", "Used_for", "groups of images"]]

pred: [('unsupervised object discovery', 'Used_for', 'groups of images')]
trues: [['contemporary methods', 'Used_for', 'unsupervised object discovery']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3007518796992481, 0.3065134099616858, 0.3036053130929791]
text: For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations .
result: triple_list: [["cubic", "Feature_of", "time-complexity"], ["cubic", "Feature_of", "parser"], ["memo-functions", "Used_for", "functions"]]

pred: [('cubic', 'Feature_of', 'time-complexity'), ('cubic', 'Feature_of', 'parser'), ('memo-functions', 'Used_for', 'functions')]
trues: [['time-complexity', 'Evaluate_for', 'parser'], ['parser', 'Used_for', 'non-LR grammars'], ['memo-functions', 'Used_for', 'parser']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29739776951672864, 0.30303030303030304, 0.300187617260788]
text: This model mimics the way in which images are processed in the visual pathway , rendering a feasible alternative for the implementation of early vision applications in standard technologies .
result: triple_list: [["model", "Used_for", "early vision applications"], ["standard technologies", "Used_for", "early vision applications"]]

pred: [('model', 'Used_for', 'early vision applications'), ('standard technologies', 'Used_for', 'early vision applications')]
trues: [['visual pathway', 'Used_for', 'images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2952029520295203, 0.3018867924528302, 0.2985074626865672]
text: In this model , on-line handwriting is considered as a modulation of a simple cycloidal pen motion , described by two coupled oscillations with a constant linear drift along the line of the writing .
result: triple_list: [["on-line handwriting", "Used_for", "model"], ["on-line handwriting", "Used_for", "modulation"], ["modulation", "Used_for", "on-line handwriting"], ["cycloidal pen motion", "Used_for", "on-line handwriting"], ["two coupled oscillations", "Used_for", "cycloidal pen motion"], ["two coupled oscillations", "Conjunction", "constant linear drift"], ["constant linear drift", "Used_for", "on-line handwriting"]]

pred: [('on-line handwriting', 'Used_for', 'model'), ('on-line handwriting', 'Used_for', 'modulation'), ('modulation', 'Used_for', 'on-line handwriting'), ('cycloidal pen motion', 'Used_for', 'on-line handwriting'), ('two coupled oscillations', 'Used_for', 'cycloidal pen motion'), ('two coupled oscillations', 'Conjunction', 'constant linear drift'), ('constant linear drift', 'Used_for', 'on-line handwriting')]
trues: [['model', 'Used_for', 'on-line handwriting'], ['on-line handwriting', 'Part_of', 'cycloidal pen motion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.28776978417266186, 0.299625468164794, 0.2935779816513761]
text: The result is a discrete motor control representation of the continuous pen motion , via the quantized levels of the model parameters .
result: triple_list: [["quantized levels of the model parameters", "Used_for", "discrete motor control representation of the continuous pen motion"]]

pred: [('quantized levels of the model parameters', 'Used_for', 'discrete motor control representation of the continuous pen motion')]
trues: [['discrete motor control representation', 'Used_for', 'continuous pen motion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.2867383512544803, 0.29850746268656714, 0.2925045703839122]
text: We present Minimum Bayes-Risk ( MBR ) decoding for statistical machine translation .
result: triple_list: [["Minimum Bayes-Risk ( MBR ) decoding", "Used_for", "statistical machine translation"]]

pred: [('Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation')]
trues: [['Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.2892857142857143, 0.30111524163568776, 0.2950819672131148]
text: Experiment results on ACE corpora show that this spectral clustering based approach outperforms the other clustering methods .
result: triple_list: [["spectral clustering based approach", "Compare", "clustering methods"], ["ACE corpora", "Evaluate_for", "spectral clustering based approach"], ["ACE corpora", "Evaluate_for", "clustering methods"]]

pred: [('spectral clustering based approach', 'Compare', 'clustering methods'), ('ACE corpora', 'Evaluate_for', 'spectral clustering based approach'), ('ACE corpora', 'Evaluate_for', 'clustering methods')]
trues: [['ACE corpora', 'Evaluate_for', 'spectral clustering based approach'], ['ACE corpora', 'Evaluate_for', 'clustering methods'], ['spectral clustering based approach', 'Compare', 'clustering methods']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.2968197879858657, 0.3088235294117647, 0.3027027027027027]
text: The purpose of this research is to test the efficacy of applying automated evaluation techniques , originally devised for the evaluation of human language learners , to the output of machine translation ( MT ) systems .
result: triple_list: [["automated evaluation techniques", "Used_for", "machine translation ( MT ) systems"]]

pred: [('automated evaluation techniques', 'Used_for', 'machine translation ( MT ) systems')]
trues: [['automated evaluation techniques', 'Used_for', 'evaluation of human language learners']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29577464788732394, 0.3076923076923077, 0.30161579892280066]
text: Branch and bound strategies have previously attempted to curb this complexity whilst maintaining global optimality .
result: triple_list: [["Branch and bound strategies", "Used_for", "complexity"]]

pred: [('Branch and bound strategies', 'Used_for', 'complexity')]
trues: [['Branch and bound strategies', 'Used_for', 'complexity'], ['global optimality', 'Feature_of', 'Branch and bound strategies']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.2982456140350877, 0.3090909090909091, 0.3035714285714285]
text: On the other hand , the manifold learning methods suggest to use the Euclidean distance in the local range , combining with the graphical relationship between samples , for approximating the geodesic distance .
result: triple_list: [["Euclidean distance", "Used_for", "manifold learning methods"], ["Euclidean distance", "Used_for", "approximating the geodesic distance"], ["local range", "Feature_of", "Euclidean distance"], ["graphical relationship between samples", "Used_for", "approximating the geodesic distance"]]

pred: [('Euclidean distance', 'Used_for', 'manifold learning methods'), ('Euclidean distance', 'Used_for', 'approximating the geodesic distance'), ('local range', 'Feature_of', 'Euclidean distance'), ('graphical relationship between samples', 'Used_for', 'approximating the geodesic distance')]
trues: [['Euclidean distance', 'Used_for', 'manifold learning methods'], ['Euclidean distance', 'Conjunction', 'graphical relationship'], ['Euclidean distance', 'Used_for', 'geodesic distance'], ['local range', 'Feature_of', 'Euclidean distance'], ['graphical relationship', 'Used_for', 'geodesic distance']]
metrics_sample: [0.5, 0.4, 0.4444444444444445]
metrics_current: [0.30103806228373703, 0.3107142857142857, 0.30579964850615116]
text: We show that there is a closed-form ( analytical ) solution for one part of the Kullback-Leibler distance , viz the cross-entropy .
result: triple_list: [["analytical solution", "Feature_of", "Kullback-Leibler distance"], ["cross-entropy", "Hyponym_of", "Kullback-Leibler distance"]]

pred: [('analytical solution', 'Feature_of', 'Kullback-Leibler distance'), ('cross-entropy', 'Hyponym_of', 'Kullback-Leibler distance')]
trues: [['closed-form ( analytical ) solution', 'Used_for', 'Kullback-Leibler distance'], ['closed-form ( analytical ) solution', 'Used_for', 'cross-entropy'], ['cross-entropy', 'Part_of', 'Kullback-Leibler distance']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.29896907216494845, 0.30742049469964666, 0.30313588850174217]
text: A generative framework is used for learning a model that captures the relative position of parts within each of the discretized viewpoints .
result: triple_list: [["generative framework", "Used_for", "model"], ["relative position of parts", "Feature_of", "model"], ["relative position of parts", "Feature_of", "discretized viewpoints"]]

pred: [('generative framework', 'Used_for', 'model'), ('relative position of parts', 'Feature_of', 'model'), ('relative position of parts', 'Feature_of', 'discretized viewpoints')]
trues: [['generative framework', 'Used_for', 'model']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.29931972789115646, 0.30985915492957744, 0.3044982698961938]
text: Background modeling is an important component of many vision systems .
result: triple_list: [["Background modeling", "Part_of", "vision systems"]]

pred: [('Background modeling', 'Part_of', 'vision systems')]
trues: [['Background modeling', 'Part_of', 'vision systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3016949152542373, 0.312280701754386, 0.306896551724138]
text: Unlike other techniques that handle large outlier percentages , MINPRAN does not rely on a known error bound for the good data .
result: triple_list: [["techniques", "Compare", "MINPRAN"], ["large outlier percentages", "Feature_of", "techniques"]]

pred: [('techniques', 'Compare', 'MINPRAN'), ('large outlier percentages', 'Feature_of', 'techniques')]
trues: [['techniques', 'Used_for', 'large outlier percentages'], ['techniques', 'Compare', 'MINPRAN']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30303030303030304, 0.313588850174216, 0.30821917808219174]
text: Compared to the exhaustive procedure that thus far is the state-of-the-art for cascade evaluation , the proposed method requires fewer evaluations of the classifier functions , thereby speeding up the search .
result: triple_list: [["exhaustive procedure", "Compare", "method"], ["evaluations of the classifier functions", "Used_for", "method"]]

pred: [('exhaustive procedure', 'Compare', 'method'), ('evaluations of the classifier functions', 'Used_for', 'method')]
trues: [['exhaustive procedure', 'Used_for', 'cascade evaluation'], ['exhaustive procedure', 'Compare', 'method'], ['method', 'Used_for', 'search']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.30434782608695654, 0.3137931034482759, 0.3089983022071307]
text: To evaluate our proposed model , we build a large streaming video dataset with annotations .
result: triple_list: [["streaming video dataset", "Evaluate_for", "model"], ["annotations", "Used_for", "streaming video dataset"]]

pred: [('streaming video dataset', 'Evaluate_for', 'model'), ('annotations', 'Used_for', 'streaming video dataset')]
trues: [['streaming video dataset', 'Evaluate_for', 'model']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.30564784053156147, 0.3161512027491409, 0.3108108108108108]
text: Human action recognition from well-segmented 3D skeleton data has been intensively studied and attracting an increasing attention .
result: triple_list: [["Human action recognition", "Used_for", "3D skeleton data"]]

pred: [('Human action recognition', 'Used_for', '3D skeleton data')]
trues: [['well-segmented 3D skeleton data', 'Used_for', 'Human action recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.304635761589404, 0.3150684931506849, 0.3097643097643098]
text: The unique properties of tree-adjoining grammars ( TAG ) present a challenge for the application of TAGs beyond the limited confines of syntax , for instance , to the task of semantic interpretation or automatic translation of natural language .
result: triple_list: [["tree-adjoining grammars ( TAG )", "Used_for", "semantic interpretation"], ["tree-adjoining grammars ( TAG )", "Used_for", "automatic translation of natural language"], ["semantic interpretation", "Conjunction", "automatic translation of natural language"]]

pred: [('tree-adjoining grammars ( TAG )', 'Used_for', 'semantic interpretation'), ('tree-adjoining grammars ( TAG )', 'Used_for', 'automatic translation of natural language'), ('semantic interpretation', 'Conjunction', 'automatic translation of natural language')]
trues: [['TAGs', 'Used_for', 'semantic interpretation'], ['TAGs', 'Used_for', 'automatic translation of natural language'], ['semantic interpretation', 'Conjunction', 'automatic translation of natural language']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.30491803278688523, 0.3152542372881356, 0.31]
text: Based on these results , we present an ECA that uses verbal and nonverbal grounding acts to update dialogue state .
result: triple_list: [["ECA", "Used_for", "dialogue state"], ["verbal and nonverbal grounding acts", "Used_for", "ECA"]]

pred: [('ECA', 'Used_for', 'dialogue state'), ('verbal and nonverbal grounding acts', 'Used_for', 'ECA')]
trues: [['verbal and nonverbal grounding acts', 'Used_for', 'ECA'], ['verbal and nonverbal grounding acts', 'Used_for', 'dialogue state']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.30618892508143325, 0.3164983164983165, 0.3112582781456954]
text: In previous work , we have developed hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers that integrate textual and prosodic knowledge sources for detecting sentence boundaries .
result: triple_list: [["hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers", "Used_for", "detecting sentence boundaries"], ["textual and prosodic knowledge sources", "Used_for", "hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers"]]

pred: [('hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers', 'Used_for', 'detecting sentence boundaries'), ('textual and prosodic knowledge sources', 'Used_for', 'hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers')]
trues: [['hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers', 'Used_for', 'detecting sentence boundaries'], ['textual and prosodic knowledge sources', 'Used_for', 'hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3106796116504854, 0.3210702341137124, 0.3157894736842105]
text: Both classifiers perform the best when conversational context and utterance features are combined with speaker 's gaze information .
result: triple_list: [["conversational context", "Conjunction", "utterance features"], ["conversational context", "Conjunction", "speaker 's gaze information"], ["utterance features", "Conjunction", "speaker 's gaze information"]]

pred: [('conversational context', 'Conjunction', 'utterance features'), ('conversational context', 'Conjunction', "speaker 's gaze information"), ('utterance features', 'Conjunction', "speaker 's gaze information")]
trues: [['conversational context', 'Used_for', 'classifiers'], ['conversational context', 'Conjunction', 'utterance features'], ['utterance features', 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Conjunction', 'utterance features']]
metrics_sample: [0.3333333333333333, 0.2, 0.25]
metrics_current: [0.3108974358974359, 0.3190789473684211, 0.31493506493506496]
text: This paper solves a specialized regression problem to obtain sampling probabilities for records in databases .
result: triple_list: [["sampling probabilities", "Feature_of", "records"], ["records", "Part_of", "databases"]]

pred: [('sampling probabilities', 'Feature_of', 'records'), ('records', 'Part_of', 'databases')]
trues: [['specialized regression problem', 'Used_for', 'sampling probabilities'], ['sampling probabilities', 'Used_for', 'records'], ['records', 'Part_of', 'databases']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.31210191082802546, 0.31921824104234525, 0.3156199677938808]
text: A bio-inspired model for an analog programmable array processor ( APAP ) , based on studies on the vertebrate retina , has permitted the realization of complex programmable spatio-temporal dynamics in VLSI .
result: triple_list: [["bio-inspired model", "Used_for", "analog programmable array processor ( APAP )"], ["vertebrate retina", "Used_for", "bio-inspired model"], ["complex programmable spatio-temporal dynamics", "Feature_of", "analog programmable array processor ( APAP )"], ["VLSI", "Feature_of", "complex programmable spatio-temporal dynamics"]]

pred: [('bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'), ('vertebrate retina', 'Used_for', 'bio-inspired model'), ('complex programmable spatio-temporal dynamics', 'Feature_of', 'analog programmable array processor ( APAP )'), ('VLSI', 'Feature_of', 'complex programmable spatio-temporal dynamics')]
trues: [['bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'], ['bio-inspired model', 'Used_for', 'complex programmable spatio-temporal dynamics'], ['vertebrate retina', 'Used_for', 'bio-inspired model'], ['complex programmable spatio-temporal dynamics', 'Feature_of', 'VLSI']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.31446540880503143, 0.3215434083601286, 0.31796502384737674]
text: Language resource quality is crucial in NLP .
result: triple_list: [["Language resource quality", "Feature_of", "NLP"]]

pred: [('Language resource quality', 'Feature_of', 'NLP')]
trues: [['Language resource quality', 'Feature_of', 'NLP']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3166144200626959, 0.32371794871794873, 0.3201267828843106]
text: In this work , we study how Convolutional Neural Networks ( CNN ) architectures can be adapted to the task of simultaneous object recognition and pose estimation .
result: triple_list: [["Convolutional Neural Networks ( CNN ) architectures", "Used_for", "simultaneous object recognition and pose estimation"]]

pred: [('Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'simultaneous object recognition and pose estimation')]
trues: [['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'object recognition'], ['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'pose estimation'], ['object recognition', 'Conjunction', 'pose estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.315625, 0.32063492063492066, 0.31811023622047246]
text: Although hidden Markov models ( HMMs ) provide a suitable generative model for field structured text , general unsupervised HMM learning fails to learn useful structure in either of our domains .
result: triple_list: [["hidden Markov models ( HMMs )", "Used_for", "generative model"], ["unsupervised HMM learning", "Used_for", "domains"]]

pred: [('hidden Markov models ( HMMs )', 'Used_for', 'generative model'), ('unsupervised HMM learning', 'Used_for', 'domains')]
trues: [['hidden Markov models ( HMMs )', 'Used_for', 'generative model'], ['generative model', 'Used_for', 'field structured text']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3167701863354037, 0.3217665615141956, 0.3192488262910798]
text: Second , based on the information resulting from the dictionary lookup stage , a set of rules is applied to the segmented strings in order to identify NE items .
result: triple_list: [["dictionary lookup stage", "Used_for", "rules"], ["segmented strings", "Used_for", "rules"], ["rules", "Used_for", "NE items"]]

pred: [('dictionary lookup stage', 'Used_for', 'rules'), ('segmented strings', 'Used_for', 'rules'), ('rules', 'Used_for', 'NE items')]
trues: [['dictionary lookup stage', 'Used_for', 'rules'], ['rules', 'Used_for', 'NE items']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.32, 0.32601880877742945, 0.32298136645962733]
text: Our proposed approach builds on recent advances in spectral clustering , image matting , and boundary detection .
result: triple_list: [["spectral clustering", "Used_for", "approach"], ["spectral clustering", "Conjunction", "image matting"], ["image matting", "Used_for", "approach"], ["image matting", "Conjunction", "boundary detection"], ["boundary detection", "Used_for", "approach"]]

pred: [('spectral clustering', 'Used_for', 'approach'), ('spectral clustering', 'Conjunction', 'image matting'), ('image matting', 'Used_for', 'approach'), ('image matting', 'Conjunction', 'boundary detection'), ('boundary detection', 'Used_for', 'approach')]
trues: [['spectral clustering', 'Used_for', 'approach'], ['spectral clustering', 'Conjunction', 'image matting'], ['image matting', 'Used_for', 'approach'], ['image matting', 'Conjunction', 'boundary detection'], ['boundary detection', 'Used_for', 'approach']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3303030303030303, 0.33641975308641975, 0.33333333333333337]
text: In this paper , we propose a new method for the modeling and subtraction of such scenes .
result: triple_list: [["method", "Used_for", "modeling and subtraction of such scenes"]]

pred: [('method', 'Used_for', 'modeling and subtraction of such scenes')]
trues: [['method', 'Used_for', 'modeling and subtraction of such scenes']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3323262839879154, 0.3384615384615385, 0.3353658536585366]
text: The problem of blind separation of underdetermined instantaneous mixtures of independent signals is addressed through a method relying on nonstationarity of the original signals .
result: triple_list: [["method", "Used_for", "blind separation of underdetermined instantaneous mixtures of independent signals"], ["nonstationarity of the original signals", "Used_for", "method"]]

pred: [('method', 'Used_for', 'blind separation of underdetermined instantaneous mixtures of independent signals'), ('nonstationarity of the original signals', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'blind separation of underdetermined instantaneous mixtures of independent signals'], ['nonstationarity', 'Used_for', 'method']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3333333333333333, 0.3394495412844037, 0.33636363636363636]
text: However , acquiring the necessary training data is typically a tedious and time consuming task that involves manual interaction , active sensing devices and/or synthetic scenes .
result: triple_list: [["manual interaction", "Conjunction", "active sensing devices"], ["manual interaction", "Conjunction", "synthetic scenes"], ["active sensing devices", "Conjunction", "synthetic scenes"]]

pred: [('manual interaction', 'Conjunction', 'active sensing devices'), ('manual interaction', 'Conjunction', 'synthetic scenes'), ('active sensing devices', 'Conjunction', 'synthetic scenes')]
trues: [['manual interaction', 'Used_for', 'task'], ['manual interaction', 'Conjunction', 'active sensing devices'], ['active sensing devices', 'Used_for', 'task'], ['active sensing devices', 'Conjunction', 'synthetic scenes'], ['synthetic scenes', 'Used_for', 'task']]
metrics_sample: [0.6666666666666666, 0.4, 0.5]
metrics_current: [0.33630952380952384, 0.34036144578313254, 0.33832335329341323]
text: A random modulation scheme produces near-Bernoulli statistics even for highly correlated inputs .
result: triple_list: [["random modulation scheme", "Used_for", "Bernoulli statistics"], ["highly correlated inputs", "Used_for", "random modulation scheme"]]

pred: [('random modulation scheme', 'Used_for', 'Bernoulli statistics'), ('highly correlated inputs', 'Used_for', 'random modulation scheme')]
trues: [['random modulation scheme', 'Used_for', 'near-Bernoulli statistics'], ['highly correlated inputs', 'Used_for', 'random modulation scheme']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33727810650887574, 0.3413173652694611, 0.3392857142857143]
text: We evaluate the demands that task dialogues collected using this technique , place upon a prototype Natural Language system .
result: triple_list: [["task dialogues", "Used_for", "Natural Language system"]]

pred: [('task dialogues', 'Used_for', 'Natural Language system')]
trues: [['task dialogues', 'Used_for', 'prototype Natural Language system'], ['technique', 'Used_for', 'task dialogues']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.336283185840708, 0.3392857142857143, 0.33777777777777784]
text: First , we investigate how well the addressee of a dialogue act can be predicted based on gaze , utterance and conversational context features .
result: triple_list: [["gaze", "Conjunction", "utterance and conversational context features"]]

pred: [('gaze', 'Conjunction', 'utterance and conversational context features')]
trues: [['gaze', 'Used_for', 'addressee of a dialogue act'], ['gaze', 'Conjunction', 'utterance'], ['utterance', 'Used_for', 'addressee of a dialogue act'], ['utterance', 'Conjunction', 'conversational context features'], ['conversational context features', 'Used_for', 'addressee of a dialogue act']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3352941176470588, 0.3343108504398827, 0.33480176211453744]
text: A general procedure for the estimation and quantization of these cycloidal motion parameters for arbitrary handwriting is presented .
result: triple_list: [["procedure", "Used_for", "estimation and quantization of these cycloidal motion parameters"], ["handwriting", "Used_for", "estimation and quantization of these cycloidal motion parameters"]]

pred: [('procedure', 'Used_for', 'estimation and quantization of these cycloidal motion parameters'), ('handwriting', 'Used_for', 'estimation and quantization of these cycloidal motion parameters')]
trues: [['cycloidal motion parameters', 'Used_for', 'arbitrary handwriting']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
text: We evaluated the topic signatures on a WSD task , where we trained a second-order vector cooccurrence algorithm on standard WSD datasets , with promising results .
result: triple_list: [["WSD task", "Evaluate_for", "topic signatures"], ["second-order vector cooccurrence algorithm", "Used_for", "WSD datasets"]]

pred: [('WSD task', 'Evaluate_for', 'topic signatures'), ('second-order vector cooccurrence algorithm', 'Used_for', 'WSD datasets')]
trues: [['WSD task', 'Evaluate_for', 'topic signatures'], ['WSD datasets', 'Used_for', 'second-order vector cooccurrence algorithm']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33430232558139533, 0.33430232558139533, 0.33430232558139533]
text: We present a novel method for discovering parallel sentences in comparable , non-parallel corpora .
result: triple_list: [["method", "Used_for", "parallel sentences"], ["comparable , non-parallel corpora", "Used_for", "method"]]

pred: [('method', 'Used_for', 'parallel sentences'), ('comparable , non-parallel corpora', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'discovering parallel sentences'], ['comparable , non-parallel corpora', 'Used_for', 'discovering parallel sentences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33236994219653176, 0.33236994219653176, 0.33236994219653176]
text: In this paper , we present our approach for using information extraction annotations to augment document retrieval for distillation .
result: triple_list: [["approach", "Used_for", "document retrieval for distillation"], ["information extraction annotations", "Used_for", "approach"]]

pred: [('approach', 'Used_for', 'document retrieval for distillation'), ('information extraction annotations', 'Used_for', 'approach')]
trues: [['information extraction annotations', 'Used_for', 'document retrieval for distillation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33045977011494254, 0.3314121037463977, 0.33093525179856115]
text: In this paper we propose a logical formalism , which , among other things , is suitable for representing determiners without forcing a particular interpretation when their meaning is still not clear .
result: triple_list: [["logical formalism", "Used_for", "determiners"]]

pred: [('logical formalism', 'Used_for', 'determiners')]
trues: [['logical formalism', 'Used_for', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.332378223495702, 0.3333333333333333, 0.33285509325681495]
text: We present a novel approach for automatically acquiring English topic signatures .
result: triple_list: [["approach", "Used_for", "English topic signatures"]]

pred: [('approach', 'Used_for', 'English topic signatures')]
trues: [['approach', 'Used_for', 'automatically acquiring English topic signatures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3314285714285714, 0.332378223495702, 0.3319027181688126]
text: Among other experiments , we demonstrate the potential of our approach by boosting the performance of three learned confidence measures on the KITTI2012 dataset by simply training them on a vast amount of automatically generated training data rather than a limited amount of laser ground truth data .
result: triple_list: [["KITTI2012 dataset", "Evaluate_for", "approach"], ["KITTI2012 dataset", "Evaluate_for", "learned confidence measures"], ["laser ground truth data", "Used_for", "them"]]

pred: [('KITTI2012 dataset', 'Evaluate_for', 'approach'), ('KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'), ('laser ground truth data', 'Used_for', 'them')]
trues: [['approach', 'Used_for', 'learned confidence measures'], ['KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'them'], ['laser ground truth data', 'Compare', 'automatically generated training data']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.3314447592067989, 0.3314447592067989, 0.3314447592067989]
text: Our results show that MT evaluation techniques are able to produce useful features for paraphrase classification and to a lesser extent entailment .
result: triple_list: [["MT evaluation techniques", "Used_for", "paraphrase classification"], ["MT evaluation techniques", "Used_for", "entailment"], ["features", "Used_for", "paraphrase classification"], ["features", "Used_for", "entailment"]]

pred: [('MT evaluation techniques', 'Used_for', 'paraphrase classification'), ('MT evaluation techniques', 'Used_for', 'entailment'), ('features', 'Used_for', 'paraphrase classification'), ('features', 'Used_for', 'entailment')]
trues: [['MT evaluation techniques', 'Used_for', 'features'], ['MT evaluation techniques', 'Used_for', 'paraphrase classification'], ['MT evaluation techniques', 'Used_for', 'entailment'], ['paraphrase classification', 'Conjunction', 'entailment']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
text: In this paper , we introduce an annotation scheme for scientific articles which can be used to build such a resource in a consistent way .
result: triple_list: [["annotation scheme", "Used_for", "resource"], ["annotation scheme", "Used_for", "scientific articles"], ["resource", "Used_for", "building"]]

pred: [('annotation scheme', 'Used_for', 'resource'), ('annotation scheme', 'Used_for', 'scientific articles'), ('resource', 'Used_for', 'building')]
trues: [['annotation scheme', 'Used_for', 'scientific articles'], ['annotation scheme', 'Used_for', 'resource']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.33611111111111114, 0.3370473537604457, 0.33657858136300417]
text: In this paper , we evaluate the use of a conditional random field ( CRF ) for this task and relate results with this model to our prior work .
result: triple_list: [["conditional random field ( CRF )", "Used_for", "task"]]

pred: [('conditional random field ( CRF )', 'Used_for', 'task')]
trues: [['conditional random field ( CRF )', 'Used_for', 'task']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3379501385041551, 0.3388888888888889, 0.33841886269070737]
text: A model-based approach to on-line cursive handwriting analysis and recognition is presented and evaluated .
result: triple_list: [["model-based approach", "Used_for", "on-line cursive handwriting analysis and recognition"]]

pred: [('model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition')]
trues: [['model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3397790055248619, 0.3407202216066482, 0.34024896265560167]
text: The intentional structure captures the discourse-relevant purposes , expressed in each of the linguistic segments as well as relationships among them .
result: triple_list: [["discourse-relevant purposes", "Feature_of", "linguistic segments"]]

pred: [('discourse-relevant purposes', 'Feature_of', 'linguistic segments')]
trues: [['intentional structure', 'Used_for', 'discourse-relevant purposes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33884297520661155, 0.3397790055248619, 0.33931034482758615]
text: In general , our CRF model yields a lower error rate than the HMM and Max-ent models on the NIST sentence boundary detection task in speech , although it is interesting to note that the best results are achieved by three-way voting among the classifiers .
result: triple_list: [["CRF model", "Compare", "HMM and Max-ent models"], ["HMM and Max-ent models", "Used_for", "NIST sentence boundary detection task in speech"]]

pred: [('CRF model', 'Compare', 'HMM and Max-ent models'), ('HMM and Max-ent models', 'Used_for', 'NIST sentence boundary detection task in speech')]
trues: [['CRF model', 'Compare', 'HMM and Max-ent models'], ['error rate', 'Evaluate_for', 'CRF model'], ['error rate', 'Evaluate_for', 'HMM and Max-ent models'], ['NIST sentence boundary detection task', 'Evaluate_for', 'CRF model'], ['NIST sentence boundary detection task', 'Evaluate_for', 'HMM and Max-ent models'], ['speech', 'Feature_of', 'NIST sentence boundary detection task'], ['classifiers', 'Used_for', 'three-way voting']]
metrics_sample: [0.5, 0.14285714285714285, 0.22222222222222224]
metrics_current: [0.33972602739726027, 0.33604336043360433, 0.33787465940054495]
text: To associate a sequence of the Fujisaki-model parameters with a text input based on statistical learning , this paper proposes extending this model to a context-dependent one .
result: triple_list: [["statistical learning", "Used_for", "Fujisaki-model parameters"]]

pred: [('statistical learning', 'Used_for', 'Fujisaki-model parameters')]
trues: [['text input', 'Used_for', 'Fujisaki-model parameters'], ['statistical learning', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.34153005464480873, 0.33692722371967654, 0.3392130257801899]
text: The robust principal component analysis ( robust PCA ) problem has been considered in many machine learning applications , where the goal is to decompose the data matrix to a low rank part plus a sparse residual .
result: triple_list: [["low rank part", "Part_of", "data matrix"], ["low rank part", "Conjunction", "sparse residual"], ["sparse residual", "Part_of", "data matrix"]]

pred: [('low rank part', 'Part_of', 'data matrix'), ('low rank part', 'Conjunction', 'sparse residual'), ('sparse residual', 'Part_of', 'data matrix')]
trues: [['robust principal component analysis ( robust PCA ) problem', 'Used_for', 'machine learning applications'], ['low rank part', 'Part_of', 'data matrix'], ['low rank part', 'Conjunction', 'sparse residual'], ['sparse residual', 'Part_of', 'data matrix']]
metrics_sample: [1.0, 0.75, 0.8571428571428571]
metrics_current: [0.34688346883468835, 0.3413333333333333, 0.3440860215053763]
text: Experiments on the TREC Blog track test set show that both groups of credibility indicators significantly improve retrieval effectiveness ; the best performance is achieved when combining them .
result: triple_list: [["TREC Blog track test set", "Evaluate_for", "credibility indicators"], ["retrieval effectiveness", "Evaluate_for", "credibility indicators"]]

pred: [('TREC Blog track test set', 'Evaluate_for', 'credibility indicators'), ('retrieval effectiveness', 'Evaluate_for', 'credibility indicators')]
trues: [['TREC Blog track test set', 'Evaluate_for', 'credibility indicators'], ['retrieval effectiveness', 'Evaluate_for', 'credibility indicators']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3504043126684636, 0.3448275862068966, 0.34759358288770054]
text: MINPRAN , a new robust operator , nds good ts in data sets where more than 50 % of the points are outliers .
result: triple_list: [["MINPRAN", "Hyponym_of", "robust operator"]]

pred: [('MINPRAN', 'Hyponym_of', 'robust operator')]
trues: [['MINPRAN', 'Hyponym_of', 'robust operator']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3521505376344086, 0.34656084656084657, 0.34933333333333333]
text: Our combination methods rely on predominant senses which are derived automatically from raw text .
result: triple_list: [["raw text", "Used_for", "combination methods"]]

pred: [('raw text', 'Used_for', 'combination methods')]
trues: [['predominant senses', 'Used_for', 'combination methods'], ['raw text', 'Used_for', 'predominant senses']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3512064343163539, 0.3447368421052632, 0.347941567065073]
text: We show how features that are imaged through a transparent object behave differently from those that are rigidly attached to the scene .
result: triple_list: [["features", "Part_of", "transparent object"]]

pred: [('features', 'Part_of', 'transparent object')]
trues: [['those', 'Compare', 'features']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3502673796791444, 0.3438320209973753, 0.34701986754966885]
text: We provide a principled and provable solution for this problem ; it is parameterless and requires no data insights .
result: triple_list: [["it", "Used_for", "problem"], ["it", "Compare", "data insights"]]

pred: [('it', 'Used_for', 'problem'), ('it', 'Compare', 'data insights')]
trues: [['principled and provable solution', 'Used_for', 'problem']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3484042553191489, 0.34293193717277487, 0.34564643799472294]
text: Given the video streams acquired by two cameras placed on either side of a computer monitor , the proposed algorithm synthesises images from a virtual camera in arbitrary position ( typically located within the monitor ) to facilitate eye contact .
result: triple_list: [["cameras", "Used_for", "algorithm"], ["video streams", "Used_for", "algorithm"], ["virtual camera", "Used_for", "algorithm"]]

pred: [('cameras', 'Used_for', 'algorithm'), ('video streams', 'Used_for', 'algorithm'), ('virtual camera', 'Used_for', 'algorithm')]
trues: [['cameras', 'Used_for', 'video streams'], ['algorithm', 'Used_for', 'eye contact'], ['virtual camera', 'Used_for', 'images'], ['arbitrary position', 'Feature_of', 'virtual camera']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34564643799472294, 0.3393782383419689, 0.34248366013071896]
text: This posterior encodes sparse se-lectional preferences between a head word and its dependents .
result: triple_list: [["posterior", "Used_for", "sparse se-lectional preferences"], ["head word", "Feature_of", "sparse se-lectional preferences"], ["head word", "Conjunction", "dependents"], ["dependents", "Feature_of", "sparse se-lectional preferences"]]

pred: [('posterior', 'Used_for', 'sparse se-lectional preferences'), ('head word', 'Feature_of', 'sparse se-lectional preferences'), ('head word', 'Conjunction', 'dependents'), ('dependents', 'Feature_of', 'sparse se-lectional preferences')]
trues: [['posterior', 'Used_for', 'sparse se-lectional preferences']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.34464751958224543, 0.34108527131782945, 0.34285714285714286]
text: Utterance Verification ( UV ) is a critical function of an Automatic Speech Recognition ( ASR ) System working on real applications where spontaneous speech , out-of-vocabulary ( OOV ) words and acoustic noises are present .
result: triple_list: [["Utterance Verification ( UV )", "Part_of", "Automatic Speech Recognition ( ASR ) System"], ["spontaneous speech", "Conjunction", "out-of-vocabulary ( OOV ) words"], ["spontaneous speech", "Feature_of", "Automatic Speech Recognition ( ASR ) System"], ["out-of-vocabulary ( OOV ) words", "Conjunction", "acoustic noises"], ["out-of-vocabulary ( OOV ) words", "Feature_of", "Automatic Speech Recognition ( ASR ) System"], ["acoustic noises", "Feature_of", "Automatic Speech Recognition ( ASR ) System"]]

pred: [('Utterance Verification ( UV )', 'Part_of', 'Automatic Speech Recognition ( ASR ) System'), ('spontaneous speech', 'Conjunction', 'out-of-vocabulary ( OOV ) words'), ('spontaneous speech', 'Feature_of', 'Automatic Speech Recognition ( ASR ) System'), ('out-of-vocabulary ( OOV ) words', 'Conjunction', 'acoustic noises'), ('out-of-vocabulary ( OOV ) words', 'Feature_of', 'Automatic Speech Recognition ( ASR ) System'), ('acoustic noises', 'Feature_of', 'Automatic Speech Recognition ( ASR ) System')]
trues: [['Utterance Verification ( UV )', 'Hyponym_of', 'Automatic Speech Recognition ( ASR ) System']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3393316195372751, 0.3402061855670103, 0.3397683397683398]
text: The key idea of our approach is to use different view points for reasoning about contradictions and consistencies between multiple depth maps generated with the same stereo algorithm .
result: triple_list: [["view points", "Used_for", "approach"], ["view points", "Used_for", "contradictions and consistencies"], ["depth maps", "Used_for", "multiple depth maps"], ["stereo algorithm", "Used_for", "multiple depth maps"]]

pred: [('view points', 'Used_for', 'approach'), ('view points', 'Used_for', 'contradictions and consistencies'), ('depth maps', 'Used_for', 'multiple depth maps'), ('stereo algorithm', 'Used_for', 'multiple depth maps')]
trues: [['view points', 'Used_for', 'approach']]
metrics_sample: [0.25, 1.0, 0.4]
metrics_current: [0.3384223918575064, 0.34190231362467866, 0.340153452685422]
text: We describe how to estimate these indicators and how to integrate them into a retrieval approach based on language models .
result: triple_list: [["indicators", "Part_of", "retrieval approach"], ["language models", "Used_for", "retrieval approach"]]

pred: [('indicators', 'Part_of', 'retrieval approach'), ('language models', 'Used_for', 'retrieval approach')]
trues: [['them', 'Part_of', 'retrieval approach'], ['language models', 'Used_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3367088607594937, 0.340153452685422, 0.33842239185750644]
text: The system is trained on 181,000 expert games and shows excellent prediction performance as indicated by its ability to perfectly predict the moves made by professional Go players in 34 % of test positions .
result: triple_list: [["system", "Used_for", "prediction"], ["expert games", "Used_for", "system"], ["prediction", "Evaluate_for", "system"], ["prediction", "Evaluate_for", "moves"], ["moves", "Part_of", "test positions"], ["professional Go players", "Used_for", "moves"]]

pred: [('system', 'Used_for', 'prediction'), ('expert games', 'Used_for', 'system'), ('prediction', 'Evaluate_for', 'system'), ('prediction', 'Evaluate_for', 'moves'), ('moves', 'Part_of', 'test positions'), ('professional Go players', 'Used_for', 'moves')]
trues: [['expert games', 'Used_for', 'system']]
metrics_sample: [0.16666666666666666, 1.0, 0.2857142857142857]
metrics_current: [0.3341645885286783, 0.34183673469387754, 0.33795712484237067]
text: A mixed-signal paradigm is presented for high-resolution parallel inner-product computation in very high dimensions , suitable for efficient implementation of kernels in image processing .
result: triple_list: [["high-resolution parallel inner-product computation", "Used_for", "kernels"], ["image processing", "Used_for", "kernels"]]

pred: [('high-resolution parallel inner-product computation', 'Used_for', 'kernels'), ('image processing', 'Used_for', 'kernels')]
trues: [['mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'], ['mixed-signal paradigm', 'Used_for', 'kernels'], ['kernels', 'Used_for', 'image processing']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3325062034739454, 0.3392405063291139, 0.3358395989974937]
text: Topic signatures can be useful in a number of Natural Language Processing ( NLP ) applications , such as Word Sense Disambiguation ( WSD ) and Text Summarisation .
result: triple_list: [["Topic signatures", "Used_for", "Natural Language Processing ( NLP ) applications"], ["Natural Language Processing ( NLP ) applications", "Used_for", "Word Sense Disambiguation ( WSD )"], ["Natural Language Processing ( NLP ) applications", "Used_for", "Text Summarisation"], ["Word Sense Disambiguation ( WSD )", "Conjunction", "Text Summarisation"]]

pred: [('Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'), ('Natural Language Processing ( NLP ) applications', 'Used_for', 'Word Sense Disambiguation ( WSD )'), ('Natural Language Processing ( NLP ) applications', 'Used_for', 'Text Summarisation'), ('Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation')]
trues: [['Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'], ['Topic signatures', 'Used_for', 'Word Sense Disambiguation ( WSD )'], ['Topic signatures', 'Used_for', 'Text Summarisation'], ['Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'], ['Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.33415233415233414, 0.33915211970074816, 0.3366336633663366]
text: We conclude that previous approaches have neglected to evaluate systems in the context of their use , e.g. solving a task requiring data retrieval .
result: triple_list: [["approaches", "Used_for", "systems"], ["systems", "Evaluate_for", "task"], ["task", "Used_for", "data retrieval"]]

pred: [('approaches', 'Used_for', 'systems'), ('systems', 'Evaluate_for', 'task'), ('task', 'Used_for', 'data retrieval')]
trues: [['approaches', 'Evaluate_for', 'systems'], ['systems', 'Used_for', 'task'], ['data retrieval', 'Part_of', 'task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33170731707317075, 0.33663366336633666, 0.3341523341523342]
text: It is particularly valuable to empirical MT research .
result: triple_list: [["It", "Used_for", "empirical MT research"]]

pred: [('It', 'Used_for', 'empirical MT research')]
trues: [['It', 'Used_for', 'empirical MT research']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3333333333333333, 0.33827160493827163, 0.3357843137254902]
text: However , when the object becomes partially or totally occluded , such local tracking is prone to failure , especially when common prediction techniques like the Kalman filter do not provide a good estimate of object parameters in future frames .
result: triple_list: [["object", "Used_for", "local tracking"], ["Kalman filter", "Used_for", "object parameters"]]

pred: [('object', 'Used_for', 'local tracking'), ('Kalman filter', 'Used_for', 'object parameters')]
trues: [['Kalman filter', 'Part_of', 'prediction techniques']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33171912832929784, 0.3374384236453202, 0.3345543345543346]
text: Motivated by this semantic criterion we analyze the empirical quality of distributional word feature vectors and its impact on word similarity results , proposing an objective measure for evaluating feature vector quality .
result: triple_list: [["distributional word feature vectors", "Evaluate_for", "word similarity results"]]

pred: [('distributional word feature vectors', 'Evaluate_for', 'word similarity results')]
trues: [['semantic criterion', 'Evaluate_for', 'distributional word feature vectors'], ['distributional word feature vectors', 'Used_for', 'word similarity'], ['measure', 'Evaluate_for', 'feature vector quality']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3309178743961353, 0.33496332518337407, 0.3329283110571082]
text: In this paper , a novel framework for machine transliteration/backtransliteration that allows us to carry out direct orthographical mapping ( DOM ) between two different languages is presented .
result: triple_list: [["framework", "Used_for", "machine transliteration/backtransliteration"], ["orthographical mapping ( DOM )", "Used_for", "machine transliteration/backtransliteration"]]

pred: [('framework', 'Used_for', 'machine transliteration/backtransliteration'), ('orthographical mapping ( DOM )', 'Used_for', 'machine transliteration/backtransliteration')]
trues: [['framework', 'Used_for', 'machine transliteration/backtransliteration'], ['machine transliteration/backtransliteration', 'Used_for', 'direct orthographical mapping ( DOM )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3317307692307692, 0.3357664233576642, 0.3337363966142684]
text: The task of machine translation ( MT ) evaluation is closely related to the task of sentence-level semantic equivalence classification .
result: triple_list: [["task of machine translation ( MT ) evaluation", "Conjunction", "task of sentence-level semantic equivalence classification"]]

pred: [('task of machine translation ( MT ) evaluation', 'Conjunction', 'task of sentence-level semantic equivalence classification')]
trues: [['machine translation ( MT ) evaluation', 'Conjunction', 'sentence-level semantic equivalence classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33093525179856115, 0.33495145631067963, 0.33293124246079614]
text: Thus the ASR system is designed to deal with what we refer to as Word Spotting and Noise Spotting capabilities .
result: triple_list: [["ASR system", "Used_for", "Word Spotting and Noise Spotting capabilities"]]

pred: [('ASR system', 'Used_for', 'Word Spotting and Noise Spotting capabilities')]
trues: [['ASR system', 'Used_for', 'Word Spotting'], ['ASR system', 'Used_for', 'Noise Spotting capabilities']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33014354066985646, 0.3333333333333333, 0.3317307692307692]
text: In particular , our guarantee suggests that a substantial amount of low rank matrices , which can not be recovered by standard robust PCA , become re-coverable by our proposed method .
result: triple_list: [["low rank matrices", "Used_for", "robust PCA"], ["low rank matrices", "Used_for", "method"]]

pred: [('low rank matrices', 'Used_for', 'robust PCA'), ('low rank matrices', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'low rank matrices']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32857142857142857, 0.3325301204819277, 0.33053892215568864]
text: This paper presents an unsupervised learning approach to disambiguate various relations between named entities by use of various lexical and syntactic features from the contexts .
result: triple_list: [["unsupervised learning approach", "Used_for", "relations"], ["lexical and syntactic features", "Used_for", "unsupervised learning approach"]]

pred: [('unsupervised learning approach', 'Used_for', 'relations'), ('lexical and syntactic features', 'Used_for', 'unsupervised learning approach')]
trues: [['unsupervised learning approach', 'Used_for', 'relations between named entities'], ['lexical and syntactic features', 'Used_for', 'unsupervised learning approach']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3293838862559242, 0.3333333333333333, 0.33134684147794996]
text: Our approach outperforms state-of-the-art trackers on the VIVID benchmark datasets .
result: triple_list: [["approach", "Compare", "trackers"], ["VIVID benchmark datasets", "Evaluate_for", "approach"], ["VIVID benchmark datasets", "Evaluate_for", "trackers"]]

pred: [('approach', 'Compare', 'trackers'), ('VIVID benchmark datasets', 'Evaluate_for', 'approach'), ('VIVID benchmark datasets', 'Evaluate_for', 'trackers')]
trues: [['state-of-the-art trackers', 'Compare', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'state-of-the-art trackers']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.32941176470588235, 0.3333333333333333, 0.33136094674556216]
text: Here we develop an approach for 1 distance that begins with an explicit and exactly distance-preserving embedding of the points into 2 2 .
result: triple_list: [["approach", "Used_for", "distance"]]

pred: [('approach', 'Used_for', 'distance')]
trues: [['approach', 'Used_for', '1 distance']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3286384976525822, 0.332541567695962, 0.3305785123966942]
text: Bayesian inference then samples the rules , disambiguating and combining them to create complex tree structures that maximize a discriminative model 's posterior on a target unlabeled corpus .
result: triple_list: [["Bayesian inference", "Used_for", "rules"], ["rules", "Used_for", "tree structures"], ["discriminative model 's posterior", "Evaluate_for", "unlabeled corpus"]]

pred: [('Bayesian inference', 'Used_for', 'rules'), ('rules', 'Used_for', 'tree structures'), ("discriminative model 's posterior", 'Evaluate_for', 'unlabeled corpus')]
trues: [['Bayesian inference', 'Used_for', 'rules'], ['them', 'Used_for', 'complex tree structures'], ['complex tree structures', 'Used_for', "discriminative model 's posterior"], ['unlabeled corpus', 'Used_for', "discriminative model 's posterior"]]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.32867132867132864, 0.33176470588235296, 0.33021077283372363]
text: In this theory , discourse structure is composed of three separate but interrelated components : the structure of the sequence of utterances ( called the linguistic structure ) , a structure of purposes ( called the intentional structure ) , and the state of focus of attention ( called the attentional state ) .
result: triple_list: [["structure of the sequence of utterances", "Hyponym_of", "discourse structure"], ["structure of the sequence of utterances", "Conjunction", "structure of purposes"], ["structure of purposes", "Hyponym_of", "discourse structure"], ["structure of purposes", "Conjunction", "attentional state"], ["attentional state", "Hyponym_of", "discourse structure"]]

pred: [('structure of the sequence of utterances', 'Hyponym_of', 'discourse structure'), ('structure of the sequence of utterances', 'Conjunction', 'structure of purposes'), ('structure of purposes', 'Hyponym_of', 'discourse structure'), ('structure of purposes', 'Conjunction', 'attentional state'), ('attentional state', 'Hyponym_of', 'discourse structure')]
trues: [['components', 'Part_of', 'discourse structure'], ['linguistic structure', 'Part_of', 'components'], ['linguistic structure', 'Conjunction', 'intentional structure'], ['intentional structure', 'Part_of', 'components'], ['intentional structure', 'Conjunction', 'attentional state'], ['attentional state', 'Part_of', 'components']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3248847926267281, 0.3271461716937355, 0.3260115606936416]
text: By employing a joint classification and regression optimization objective , this network is capable of automatically localizing the start and end points of actions more accurately .
result: triple_list: [["joint classification and regression optimization objective", "Used_for", "network"], ["network", "Used_for", "start and end points of actions"]]

pred: [('joint classification and regression optimization objective', 'Used_for', 'network'), ('network', 'Used_for', 'start and end points of actions')]
trues: [['joint classification and regression optimization objective', 'Used_for', 'network']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3256880733944954, 0.3287037037037037, 0.3271889400921659]
text: The proposed approach does not require a separate segmentation stage and is applicable to cluttered scenes .
result: triple_list: [["approach", "Used_for", "cluttered scenes"]]

pred: [('approach', 'Used_for', 'cluttered scenes')]
trues: [['approach', 'Used_for', 'cluttered scenes']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32723112128146453, 0.3302540415704388, 0.32873563218390806]
text: Online action detection goes one step further and is more challenging , which identifies the action type and localizes the action positions on the fly from the untrimmed stream .
result: triple_list: [["Online action detection", "Used_for", "action type"], ["action type", "Conjunction", "action positions"]]

pred: [('Online action detection', 'Used_for', 'action type'), ('action type', 'Conjunction', 'action positions')]
trues: [['Online action detection', 'Used_for', 'action type'], ['Online action detection', 'Used_for', 'action positions'], ['action type', 'Conjunction', 'action positions'], ['untrimmed stream', 'Used_for', 'Online action detection']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.33029612756264237, 0.3318077803203661, 0.33105022831050235]
text: We report experiments conducted on a multilingual corpus to estimate the number of analogies among the sentences that it contains .
result: triple_list: [["multilingual corpus", "Used_for", "analogies"]]

pred: [('multilingual corpus', 'Used_for', 'analogies')]
trues: [['multilingual corpus', 'Evaluate_for', 'analogies']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32954545454545453, 0.3310502283105023, 0.33029612756264237]
text: A critical step in encoding sound for neuronal processing occurs when the analog pressure wave is coded into discrete nerve-action potentials .
result: triple_list: [["analog pressure wave", "Used_for", "discrete nerve-action potentials"]]

pred: [('analog pressure wave', 'Used_for', 'discrete nerve-action potentials')]
trues: [['encoding sound', 'Used_for', 'neuronal processing'], ['discrete nerve-action potentials', 'Used_for', 'analog pressure wave']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3287981859410431, 0.32954545454545453, 0.32917139614074914]
text: We have previously introduced a statistical model describing the generating process of speech F0 contours , based on the discrete-time version of the Fujisaki model .
result: triple_list: [["statistical model", "Used_for", "generating process of speech F0 contours"], ["Fujisaki model", "Used_for", "statistical model"]]

pred: [('statistical model', 'Used_for', 'generating process of speech F0 contours'), ('Fujisaki model', 'Used_for', 'statistical model')]
trues: [['statistical model', 'Used_for', 'speech F0 contours'], ['Fujisaki model', 'Used_for', 'statistical model']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3295711060948081, 0.33031674208144796, 0.32994350282485874]
text: Subpixel accuracy is achieved by considering several zero-crossings defined by the difference between pairs of unstructured patterns .
result: triple_list: [["zero-crossings", "Used_for", "Subpixel accuracy"]]

pred: [('zero-crossings', 'Used_for', 'Subpixel accuracy')]
trues: [['zero-crossings', 'Used_for', 'Subpixel accuracy']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3310810810810811, 0.33182844243792325, 0.3314543404735062]
text: We argue that it is necessary to draw a line between generalizable semantic principles and domain-specific semantic information .
result: triple_list: [["generalizable semantic principles", "Conjunction", "domain-specific semantic information"]]

pred: [('generalizable semantic principles', 'Conjunction', 'domain-specific semantic information')]
trues: [['generalizable semantic principles', 'Compare', 'domain-specific semantic information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3303370786516854, 0.3310810810810811, 0.33070866141732286]
text: The results show that the features in terms of which we formulate our heuristic principles have significant predictive power , and that rules that closely resemble our Horn clauses can be learnt automatically from these features .
result: triple_list: [["features", "Used_for", "heuristic principles"], ["features", "Used_for", "rules"], ["features", "Used_for", "Horn clauses"], ["Horn clauses", "Used_for", "rules"]]

pred: [('features', 'Used_for', 'heuristic principles'), ('features', 'Used_for', 'rules'), ('features', 'Used_for', 'Horn clauses'), ('Horn clauses', 'Used_for', 'rules')]
trues: [['features', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3273942093541203, 0.3303370786516854, 0.32885906040268453]
text: In this paper we present a new UV procedure with two major features : a ) Confidence tests are applied to decoded string hypotheses obtained from using word and garbage models that represent OOV words and noises .
result: triple_list: [["word and garbage models", "Used_for", "decoded string hypotheses"], ["word and garbage models", "Used_for", "OOV words"], ["word and garbage models", "Used_for", "noises"], ["OOV words", "Conjunction", "noises"]]

pred: [('word and garbage models', 'Used_for', 'decoded string hypotheses'), ('word and garbage models', 'Used_for', 'OOV words'), ('word and garbage models', 'Used_for', 'noises'), ('OOV words', 'Conjunction', 'noises')]
trues: [['Confidence tests', 'Used_for', 'decoded string hypotheses'], ['noises', 'Conjunction', 'OOV words']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32450331125827814, 0.3288590604026846, 0.3266666666666667]
text: An important area of learning in autonomous agents is the ability to learn domain-speciic models of actions to be used by planning systems .
result: triple_list: [["learning", "Used_for", "autonomous agents"], ["domain-speciic models of actions", "Used_for", "planning systems"]]

pred: [('learning', 'Used_for', 'autonomous agents'), ('domain-speciic models of actions', 'Used_for', 'planning systems')]
trues: [['learning in autonomous agents', 'Used_for', 'domain-speciic models of actions'], ['planning systems', 'Used_for', 'domain-speciic models of actions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3230769230769231, 0.3273942093541203, 0.3252212389380531]
text: This work presents an automated technique for detecting reflections in image sequences by analyzing motion trajectories of feature points .
result: triple_list: [["feature points", "Used_for", "reflections"]]

pred: [('feature points', 'Used_for', 'reflections')]
trues: [['technique', 'Used_for', 'detecting reflections in image sequences'], ['motion trajectories', 'Used_for', 'technique'], ['feature points', 'Feature_of', 'motion trajectories']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3223684210526316, 0.3252212389380531, 0.32378854625550657]
text: Fast algorithms for nearest neighbor ( NN ) search have in large part focused on 2 distance .
result: triple_list: [["Fast algorithms", "Used_for", "nearest neighbor ( NN ) search"], ["2 distance", "Used_for", "Fast algorithms"]]

pred: [('Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search'), ('2 distance', 'Used_for', 'Fast algorithms')]
trues: [['Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3231441048034934, 0.32671081677704195, 0.32491767288693746]
text: The modified graph is then sent to the UNL-L0 deconverter and the result shown .
result: triple_list: [["graph", "Used_for", "UNL-L0 deconverter"]]

pred: [('graph', 'Used_for', 'UNL-L0 deconverter')]
trues: [['graph', 'Used_for', 'UNL-L0 deconverter']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32461873638344224, 0.32819383259911894, 0.32639649507119384]
text: Hitherto , smooth motion has been encouraged using a trajectory basis , yielding a hard combinatorial problem with time complexity growing exponentially in the number of frames .
result: triple_list: [["trajectory basis", "Used_for", "smooth motion"]]

pred: [('trajectory basis', 'Used_for', 'smooth motion')]
trues: [['trajectory basis', 'Used_for', 'smooth motion'], ['time complexity', 'Evaluate_for', 'hard combinatorial problem']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32608695652173914, 0.32894736842105265, 0.3275109170305677]
text: Recent progress in computer vision has been driven by high-capacity models trained on large datasets .
result: triple_list: [["high-capacity models", "Used_for", "computer vision"], ["high-capacity models", "Conjunction", "datasets"], ["datasets", "Used_for", "computer vision"]]

pred: [('high-capacity models', 'Used_for', 'computer vision'), ('high-capacity models', 'Conjunction', 'datasets'), ('datasets', 'Used_for', 'computer vision')]
trues: [['high-capacity models', 'Used_for', 'computer vision'], ['large datasets', 'Used_for', 'high-capacity models']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.326133909287257, 0.3296943231441048, 0.3279044516829533]
text: The fact that Turkish is an agglutinating free word order language presents a challenge for language theories .
result: triple_list: [["Turkish", "Hyponym_of", "agglutinating free word order language"]]

pred: [('Turkish', 'Hyponym_of', 'agglutinating free word order language')]
trues: [['Turkish', 'Hyponym_of', 'agglutinating free word order language']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3275862068965517, 0.3311546840958606, 0.3293607800650054]
text: Learned confidence measures gain increasing importance for outlier removal and quality improvement in stereo vision .
result: triple_list: [["Learned confidence measures", "Used_for", "outlier removal"], ["Learned confidence measures", "Used_for", "quality improvement"], ["outlier removal", "Conjunction", "quality improvement"], ["stereo vision", "Feature_of", "outlier removal"], ["stereo vision", "Feature_of", "quality improvement"]]

pred: [('Learned confidence measures', 'Used_for', 'outlier removal'), ('Learned confidence measures', 'Used_for', 'quality improvement'), ('outlier removal', 'Conjunction', 'quality improvement'), ('stereo vision', 'Feature_of', 'outlier removal'), ('stereo vision', 'Feature_of', 'quality improvement')]
trues: [['Learned confidence measures', 'Used_for', 'outlier removal'], ['Learned confidence measures', 'Used_for', 'quality improvement'], ['outlier removal', 'Conjunction', 'quality improvement'], ['outlier removal', 'Part_of', 'stereo vision'], ['quality improvement', 'Part_of', 'stereo vision']]
metrics_sample: [0.6, 0.6, 0.6]
metrics_current: [0.3304904051172708, 0.33405172413793105, 0.33226152197213293]
text: Finally , we show how the estimation of the tensors from point correspondences is achieved through factorization , and discuss the estimation from line correspondences .
result: triple_list: [["estimation of the tensors", "Used_for", "point correspondences"], ["estimation of the tensors", "Used_for", "line correspondences"], ["factorization", "Used_for", "estimation of the tensors"]]

pred: [('estimation of the tensors', 'Used_for', 'point correspondences'), ('estimation of the tensors', 'Used_for', 'line correspondences'), ('factorization', 'Used_for', 'estimation of the tensors')]
trues: [['point correspondences', 'Used_for', 'estimation of the tensors'], ['factorization', 'Used_for', 'tensors'], ['line correspondences', 'Used_for', 'estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3283898305084746, 0.33190578158458245, 0.33013844515441965]
text: Recognition of proper nouns in Japanese text has been studied as a part of the more general problem of morphological analysis in Japanese text processing ( [ 1 ] [ 2 ] ) .
result: triple_list: [["Recognition of proper nouns", "Part_of", "morphological analysis"], ["morphological analysis", "Part_of", "Japanese text processing"]]

pred: [('Recognition of proper nouns', 'Part_of', 'morphological analysis'), ('morphological analysis', 'Part_of', 'Japanese text processing')]
trues: [['Recognition of proper nouns', 'Part_of', 'morphological analysis'], ['proper nouns', 'Part_of', 'Japanese text'], ['morphological analysis', 'Used_for', 'Japanese text processing']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3291139240506329, 0.33191489361702126, 0.33050847457627114]
text: This paper presents a novel representation for three-dimensional objects in terms of affine-invariant image patches and their spatial relationships .
result: triple_list: [["affine-invariant image patches", "Used_for", "three-dimensional objects"], ["spatial relationships", "Feature_of", "affine-invariant image patches"]]

pred: [('affine-invariant image patches', 'Used_for', 'three-dimensional objects'), ('spatial relationships', 'Feature_of', 'affine-invariant image patches')]
trues: [['representation', 'Used_for', 'three-dimensional objects'], ['affine-invariant image patches', 'Feature_of', 'three-dimensional objects'], ['spatial relationships', 'Feature_of', 'affine-invariant image patches']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.32983193277310924, 0.33192389006342493, 0.3308746048472076]
text: To a large extent , these statistics reflect semantic constraints and thus are used to disambiguate anaphora references and syntactic ambiguities .
result: triple_list: [["statistics", "Used_for", "anaphora references"], ["statistics", "Used_for", "syntactic ambiguities"], ["semantic constraints", "Used_for", "anaphora references"], ["semantic constraints", "Used_for", "syntactic ambiguities"]]

pred: [('statistics', 'Used_for', 'anaphora references'), ('statistics', 'Used_for', 'syntactic ambiguities'), ('semantic constraints', 'Used_for', 'anaphora references'), ('semantic constraints', 'Used_for', 'syntactic ambiguities')]
trues: [['semantic constraints', 'Used_for', 'anaphora references'], ['semantic constraints', 'Used_for', 'syntactic ambiguities'], ['anaphora references', 'Conjunction', 'syntactic ambiguities']]
metrics_sample: [0.5, 0.6666666666666666, 0.5714285714285715]
metrics_current: [0.33125, 0.33403361344537813, 0.33263598326359833]
text: We demonstrate our approach with multiple PTZ camera sequences in typical outdoor surveillance settings and show a comparison with state-of-the-art approaches .
result: triple_list: [["approach", "Compare", "state-of-the-art approaches"], ["PTZ camera sequences", "Used_for", "approach"], ["PTZ camera sequences", "Used_for", "state-of-the-art approaches"], ["outdoor surveillance settings", "Feature_of", "PTZ camera sequences"]]

pred: [('approach', 'Compare', 'state-of-the-art approaches'), ('PTZ camera sequences', 'Used_for', 'approach'), ('PTZ camera sequences', 'Used_for', 'state-of-the-art approaches'), ('outdoor surveillance settings', 'Feature_of', 'PTZ camera sequences')]
trues: [['approach', 'Used_for', 'outdoor surveillance settings'], ['approach', 'Compare', 'state-of-the-art approaches'], ['multiple PTZ camera sequences', 'Used_for', 'approach']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.3305785123966942, 0.33402922755741127, 0.3322949117341641]
text: Given an object model and a black-box measure of similarity between the model and candidate targets , we consider visual object tracking as a numerical optimization problem .
result: triple_list: [["object model", "Used_for", "visual object tracking"], ["black-box measure of similarity", "Used_for", "visual object tracking"], ["numerical optimization problem", "Used_for", "visual object tracking"]]

pred: [('object model', 'Used_for', 'visual object tracking'), ('black-box measure of similarity', 'Used_for', 'visual object tracking'), ('numerical optimization problem', 'Used_for', 'visual object tracking')]
trues: [['numerical optimization problem', 'Used_for', 'visual object tracking']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.33059548254620125, 0.33541666666666664, 0.3329886246122027]
text: This model was shown to be more appropriate for blind separation of natural speech signals .
result: triple_list: [["model", "Used_for", "blind separation of natural speech signals"]]

pred: [('model', 'Used_for', 'blind separation of natural speech signals')]
trues: [['model', 'Used_for', 'blind separation of natural speech signals .']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32991803278688525, 0.33471933471933474, 0.3323013415892673]
text: This statistical approach aims to minimize expected loss of translation errors under loss functions that measure translation performance .
result: triple_list: [["statistical approach", "Used_for", "translation errors"], ["loss functions", "Used_for", "statistical approach"], ["translation performance", "Evaluate_for", "loss functions"]]

pred: [('statistical approach', 'Used_for', 'translation errors'), ('loss functions', 'Used_for', 'statistical approach'), ('translation performance', 'Evaluate_for', 'loss functions')]
trues: [['loss functions', 'Evaluate_for', 'translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32790224032586557, 0.33402489626556015, 0.33093525179856115]
text: Experimental results on our dataset and the public G3D dataset both demonstrate very promising performance of our scheme .
result: triple_list: [["dataset", "Evaluate_for", "scheme"], ["G3D dataset", "Evaluate_for", "scheme"]]

pred: [('dataset', 'Evaluate_for', 'scheme'), ('G3D dataset', 'Evaluate_for', 'scheme')]
trues: [['dataset', 'Conjunction', 'G3D dataset']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3265720081135903, 0.3333333333333333, 0.32991803278688525]
text: We show how this can efficiently be combined with random-projection based methods for 2 NN search , such as locality-sensitive hashing ( LSH ) or random projection trees .
result: triple_list: [["random-projection based methods", "Used_for", "2 NN search"], ["locality-sensitive hashing ( LSH )", "Hyponym_of", "random-projection based methods"], ["locality-sensitive hashing ( LSH )", "Conjunction", "random projection trees"], ["random projection trees", "Hyponym_of", "random-projection based methods"]]

pred: [('random-projection based methods', 'Used_for', '2 NN search'), ('locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'), ('locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'), ('random projection trees', 'Hyponym_of', 'random-projection based methods')]
trues: [['this', 'Conjunction', 'random-projection based methods'], ['random-projection based methods', 'Used_for', 'NN search'], ['locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'], ['locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'], ['random projection trees', 'Hyponym_of', 'random-projection based methods']]
metrics_sample: [0.75, 0.6, 0.6666666666666665]
metrics_current: [0.3299798792756539, 0.3360655737704918, 0.33299492385786805]
text: The resulting logical expression is then transformed by a planning algorithm into efficient Prolog , cf. query optimisation in a relational database .
result: triple_list: [["logical expression", "Used_for", "planning algorithm"], ["Prolog", "Used_for", "planning algorithm"], ["query optimisation", "Used_for", "relational database"]]

pred: [('logical expression', 'Used_for', 'planning algorithm'), ('Prolog', 'Used_for', 'planning algorithm'), ('query optimisation', 'Used_for', 'relational database')]
trues: [['planning algorithm', 'Used_for', 'logical expression'], ['relational database', 'Used_for', 'query optimisation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.328, 0.3346938775510204, 0.3313131313131313]
text: This research is part of a larger study of anaphoric expressions , the results of which will be incorporated into a natural language generation system .
result: triple_list: [["natural language generation system", "Used_for", "anaphoric expressions"]]

pred: [('natural language generation system', 'Used_for', 'anaphoric expressions')]
trues: [['anaphoric expressions', 'Used_for', 'natural language generation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3273453093812375, 0.3340122199592668, 0.33064516129032256]
text: The surface realizations of morphological constructions are constrained and modified by a number of phonetic rules such as vowel harmony .
result: triple_list: [["phonetic rules", "Used_for", "surface realizations of morphological constructions"], ["vowel harmony", "Hyponym_of", "phonetic rules"]]

pred: [('phonetic rules', 'Used_for', 'surface realizations of morphological constructions'), ('vowel harmony', 'Hyponym_of', 'phonetic rules')]
trues: [['phonetic rules', 'Used_for', 'surface realizations of morphological constructions'], ['vowel harmony', 'Hyponym_of', 'phonetic rules']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33001988071570576, 0.3367139959432049, 0.33333333333333337]
text: We propose a corpus-based method ( Biber ,1993 ; Nagao ,1993 ; Smadja ,1993 ) which generates Noun Classifier Associations ( NCA ) to overcome the problems in classifier assignment and semantic construction of noun phrase .
result: triple_list: [["corpus-based method", "Used_for", "Noun Classifier Associations ( NCA )"], ["Biber ,1993", "Used_for", "corpus-based method"], ["Biber ,1993", "Conjunction", "Nagao ,1993"], ["Nagao ,1993", "Used_for", "corpus-based method"], ["Nagao ,1993", "Conjunction", "Smadja ,1993"], ["Smadja ,1993", "Used_for", "corpus-based method"], ["classifier assignment", "Conjunction", "semantic construction of noun phrase"]]

pred: [('corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'), ('Biber ,1993', 'Used_for', 'corpus-based method'), ('Biber ,1993', 'Conjunction', 'Nagao ,1993'), ('Nagao ,1993', 'Used_for', 'corpus-based method'), ('Nagao ,1993', 'Conjunction', 'Smadja ,1993'), ('Smadja ,1993', 'Used_for', 'corpus-based method'), ('classifier assignment', 'Conjunction', 'semantic construction of noun phrase')]
trues: [['corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'], ['corpus-based method', 'Used_for', 'classifier assignment'], ['corpus-based method', 'Used_for', 'semantic construction of noun phrase'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'classifier assignment'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'semantic construction of noun phrase'], ['classifier assignment', 'Conjunction', 'semantic construction of noun phrase']]
metrics_sample: [0.2857142857142857, 0.3333333333333333, 0.30769230769230765]
metrics_current: [0.32941176470588235, 0.3366733466933868, 0.3330029732408325]
text: Finally , a novel feature weighting and selection function is presented , which yields superior feature vectors and better word similarity performance .
result: triple_list: [["feature weighting and selection function", "Used_for", "feature vectors"], ["feature vectors", "Used_for", "word similarity performance"]]

pred: [('feature weighting and selection function', 'Used_for', 'feature vectors'), ('feature vectors', 'Used_for', 'word similarity performance')]
trues: [['feature weighting and selection function', 'Used_for', 'feature vectors'], ['feature weighting and selection function', 'Used_for', 'word similarity'], ['feature vectors', 'Conjunction', 'word similarity']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.330078125, 0.33665338645418325, 0.3333333333333333]
text: To our knowledge , this is the first a posteriori bound for joint matrix decomposition .
result: triple_list: [["a posteriori bound", "Feature_of", "joint matrix decomposition"]]

pred: [('a posteriori bound', 'Feature_of', 'joint matrix decomposition')]
trues: [['posteriori bound', 'Used_for', 'joint matrix decomposition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32943469785575047, 0.3359840954274354, 0.33267716535433073]
text: At the core of the externally digital architecture is a high-density , low-power analog array performing binary-binary partial matrix-vector multiplication .
result: triple_list: [["high-density , low-power analog array", "Used_for", "binary-binary partial matrix-vector multiplication"]]

pred: [('high-density , low-power analog array', 'Used_for', 'binary-binary partial matrix-vector multiplication')]
trues: [['high-density , low-power analog array', 'Part_of', 'externally digital architecture'], ['binary-binary partial matrix-vector multiplication', 'Used_for', 'high-density , low-power analog array']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32879377431906615, 0.3346534653465347, 0.33169774288518156]
text: Here , we leverage a logistic stick-breaking representation and recent innovations in Pólya-gamma augmentation to reformu-late the multinomial distribution in terms of latent variables with jointly Gaussian likelihoods , enabling us to take advantage of a host of Bayesian inference techniques for Gaussian models with minimal overhead .
result: triple_list: [["logistic stick-breaking representation", "Used_for", "multinomial distribution"], ["logistic stick-breaking representation", "Conjunction", "Pólya-gamma augmentation"], ["Pólya-gamma augmentation", "Used_for", "multinomial distribution"], ["Pólya-gamma augmentation", "Used_for", "Bayesian inference techniques"], ["Pólya-gamma augmentation", "Used_for", "Gaussian models"], ["Bayesian inference techniques", "Used_for", "Gaussian models"]]

pred: [('logistic stick-breaking representation', 'Used_for', 'multinomial distribution'), ('logistic stick-breaking representation', 'Conjunction', 'Pólya-gamma augmentation'), ('Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'), ('Pólya-gamma augmentation', 'Used_for', 'Bayesian inference techniques'), ('Pólya-gamma augmentation', 'Used_for', 'Gaussian models'), ('Bayesian inference techniques', 'Used_for', 'Gaussian models')]
trues: [['logistic stick-breaking representation', 'Used_for', 'multinomial distribution'], ['Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'], ['latent variables', 'Part_of', 'multinomial distribution'], ['jointly Gaussian likelihoods', 'Feature_of', 'latent variables'], ['Bayesian inference techniques', 'Used_for', 'Gaussian models'], ['minimal overhead', 'Feature_of', 'Gaussian models']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33076923076923076, 0.33659491193737767, 0.33365664403491757]
text: The system incorporates a decision-tree classifier for 30 scf types which tests for the presence of grammatical relations ( grs ) in the output of a robust statistical parser .
result: triple_list: [["decision-tree classifier", "Used_for", "scf types"], ["decision-tree classifier", "Part_of", "system"], ["robust statistical parser", "Used_for", "decision-tree classifier"]]

pred: [('decision-tree classifier', 'Used_for', 'scf types'), ('decision-tree classifier', 'Part_of', 'system'), ('robust statistical parser', 'Used_for', 'decision-tree classifier')]
trues: [['decision-tree classifier', 'Part_of', 'system'], ['decision-tree classifier', 'Used_for', 'grammatical relations ( grs )']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.33078393881453155, 0.33723196881091616, 0.333976833976834]
text: We have built and will demonstrate an application of this approach called LCS-Marine .
result: triple_list: [["approach", "Used_for", "application"], ["LCS-Marine", "Hyponym_of", "application"]]

pred: [('approach', 'Used_for', 'application'), ('LCS-Marine', 'Hyponym_of', 'application')]
trues: [['approach', 'Used_for', 'LCS-Marine']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3295238095238095, 0.33657587548638135, 0.3330125120307989]
text: In this paper , we propose a novel moderate positive sample mining method to train robust CNN for person re-identification , dealing with the problem of large variation .
result: triple_list: [["moderate positive sample mining method", "Used_for", "robust CNN"], ["robust CNN", "Used_for", "person re-identification"], ["large variation", "Feature_of", "person re-identification"]]

pred: [('moderate positive sample mining method', 'Used_for', 'robust CNN'), ('robust CNN', 'Used_for', 'person re-identification'), ('large variation', 'Feature_of', 'person re-identification')]
trues: [['moderate positive sample mining method', 'Used_for', 'robust CNN'], ['robust CNN', 'Used_for', 'person re-identification']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.3314393939393939, 0.3391472868217054, 0.3352490421455938]
text: To recover from these inevitable tracking failures , we consider object detection as a global optimization problem and solve it via Adaptive Simulated Annealing ( ASA ) , a method that avoids becoming trapped at local modes and is much faster than exhaustive search .
result: triple_list: [["object detection", "Used_for", "tracking failures"], ["Adaptive Simulated Annealing ( ASA )", "Used_for", "global optimization problem"]]

pred: [('object detection', 'Used_for', 'tracking failures'), ('Adaptive Simulated Annealing ( ASA )', 'Used_for', 'global optimization problem')]
trues: [['global optimization problem', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Used_for', 'it'], ['method', 'Compare', 'exhaustive search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.330188679245283, 0.3371868978805395, 0.3336510962821735]
text: Owing to these variations , the pedestrian data is distributed as highly-curved manifolds in the feature space , despite the current convolutional neural networks ( CNN ) 's capability of feature extraction .
result: triple_list: [["feature extraction", "Feature_of", "convolutional neural networks ( CNN )"]]

pred: [('feature extraction', 'Feature_of', 'convolutional neural networks ( CNN )')]
trues: [['highly-curved manifolds', 'Used_for', 'pedestrian data'], ['feature space', 'Feature_of', 'highly-curved manifolds'], ['convolutional neural networks ( CNN )', 'Used_for', 'feature extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3295668549905838, 0.33524904214559387, 0.332383665716999]
text: Relaxations of these properties expose some of the interesting ( and unavoidable ) trade-offs at work in well-studied clustering techniques such as single-linkage , sum-of-pairs , k-means , and k-median .
result: triple_list: [["properties", "Used_for", "clustering techniques"], ["single-linkage", "Hyponym_of", "clustering techniques"], ["single-linkage", "Conjunction", "sum-of-pairs"], ["sum-of-pairs", "Hyponym_of", "clustering techniques"], ["sum-of-pairs", "Conjunction", "k-means"], ["k-means", "Hyponym_of", "clustering techniques"], ["k-means", "Conjunction", "k-median"], ["k-median", "Hyponym_of", "clustering techniques"]]

pred: [('properties', 'Used_for', 'clustering techniques'), ('single-linkage', 'Hyponym_of', 'clustering techniques'), ('single-linkage', 'Conjunction', 'sum-of-pairs'), ('sum-of-pairs', 'Hyponym_of', 'clustering techniques'), ('sum-of-pairs', 'Conjunction', 'k-means'), ('k-means', 'Hyponym_of', 'clustering techniques'), ('k-means', 'Conjunction', 'k-median'), ('k-median', 'Hyponym_of', 'clustering techniques')]
trues: [['single-linkage', 'Hyponym_of', 'well-studied clustering techniques'], ['single-linkage', 'Conjunction', 'sum-of-pairs'], ['sum-of-pairs', 'Hyponym_of', 'well-studied clustering techniques'], ['sum-of-pairs', 'Conjunction', 'k-means'], ['k-means', 'Hyponym_of', 'well-studied clustering techniques'], ['k-means', 'Conjunction', 'k-median'], ['k-median', 'Hyponym_of', 'well-studied clustering techniques']]
metrics_sample: [0.375, 0.42857142857142855, 0.39999999999999997]
metrics_current: [0.3302411873840445, 0.33648393194706994, 0.3333333333333333]
text: Furthermore , this paper presents a novel algorithm for the temporal maintenance of a background model to enhance the rendering of occlusions and reduce temporal artefacts ( flicker ) ; and a cost aggregation algorithm that acts directly on our three-dimensional matching cost space .
result: triple_list: [["algorithm", "Used_for", "temporal maintenance of a background model"], ["temporal maintenance of a background model", "Used_for", "occlusions"], ["temporal maintenance of a background model", "Used_for", "temporal artefacts ( flicker )"], ["cost aggregation algorithm", "Used_for", "three-dimensional matching cost space"]]

pred: [('algorithm', 'Used_for', 'temporal maintenance of a background model'), ('temporal maintenance of a background model', 'Used_for', 'occlusions'), ('temporal maintenance of a background model', 'Used_for', 'temporal artefacts ( flicker )'), ('cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space')]
trues: [['algorithm', 'Used_for', 'temporal maintenance of a background model'], ['algorithm', 'Used_for', 'rendering of occlusions'], ['algorithm', 'Used_for', 'temporal artefacts ( flicker )'], ['cost aggregation algorithm', 'Conjunction', 'algorithm'], ['cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space']]
metrics_sample: [0.5, 0.4, 0.4444444444444445]
metrics_current: [0.3314917127071823, 0.33707865168539325, 0.3342618384401114]
text: Our technique is based on an improved , dynamic-programming , stereo algorithm for efficient novel-view generation .
result: triple_list: [["dynamic-programming , stereo algorithm", "Used_for", "technique"], ["dynamic-programming , stereo algorithm", "Used_for", "novel-view generation"]]

pred: [('dynamic-programming , stereo algorithm', 'Used_for', 'technique'), ('dynamic-programming , stereo algorithm', 'Used_for', 'novel-view generation')]
trues: [['technique', 'Used_for', 'novel-view generation'], ['dynamic-programming , stereo algorithm', 'Used_for', 'technique']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3321100917431193, 0.3376865671641791, 0.33487511563367256]
text: In particular there are three areas of novelty : ( i ) we show how a photometric model of image formation can be combined with a statistical model of generic face appearance variation , learnt offline , to generalize in the presence of extreme illumination changes ; ( ii ) we use the smoothness of geodesically local appearance manifold structure and a robust same-identity likelihood to achieve invariance to unseen head poses ; and ( iii ) we introduce an accurate video sequence '' reillumination '' algorithm to achieve robustness to face motion patterns in video .
result: triple_list: [["photometric model of image formation", "Conjunction", "statistical model of generic face appearance variation"], ["photometric model of image formation", "Used_for", "generalization"], ["statistical model of generic face appearance variation", "Used_for", "generalization"], ["smoothness", "Feature_of", "geodesically local appearance manifold structure"], ["smoothness", "Conjunction", "robust same-identity likelihood"], ["geodesically local appearance manifold structure", "Used_for", "invariance"], ["robust same-identity likelihood", "Used_for", "invariance"], ["video sequence '' reillumination '' algorithm", "Used_for", "robustness"]]

pred: [('photometric model of image formation', 'Conjunction', 'statistical model of generic face appearance variation'), ('photometric model of image formation', 'Used_for', 'generalization'), ('statistical model of generic face appearance variation', 'Used_for', 'generalization'), ('smoothness', 'Feature_of', 'geodesically local appearance manifold structure'), ('smoothness', 'Conjunction', 'robust same-identity likelihood'), ('geodesically local appearance manifold structure', 'Used_for', 'invariance'), ('robust same-identity likelihood', 'Used_for', 'invariance'), ("video sequence '' reillumination '' algorithm", 'Used_for', 'robustness')]
trues: [['photometric model', 'Used_for', 'image formation'], ['photometric model', 'Conjunction', 'statistical model'], ['statistical model', 'Used_for', 'generic face appearance variation'], ['statistical model', 'Used_for', 'extreme illumination changes'], ['smoothness', 'Feature_of', 'geodesically local appearance manifold structure'], ['geodesically local appearance manifold structure', 'Conjunction', 'robust same-identity likelihood'], ['robustness', 'Evaluate_for', "video sequence '' reillumination '' algorithm"], ['face motion patterns', 'Feature_of', 'robustness'], ['face motion patterns', 'Part_of', 'video']]
metrics_sample: [0.125, 0.1111111111111111, 0.11764705882352941]
metrics_current: [0.3291139240506329, 0.3339449541284404, 0.331511839708561]
text: This paper outlines Plume as it currently exists and describes our detailed design for extending Plume to handle passives , relative clauses , and interrogatives in a general manner .
result: triple_list: [["Plume", "Used_for", "passives"], ["Plume", "Used_for", "relative clauses"], ["Plume", "Used_for", "interrogatives"], ["passives", "Conjunction", "relative clauses"], ["relative clauses", "Conjunction", "interrogatives"]]

pred: [('Plume', 'Used_for', 'passives'), ('Plume', 'Used_for', 'relative clauses'), ('Plume', 'Used_for', 'interrogatives'), ('passives', 'Conjunction', 'relative clauses'), ('relative clauses', 'Conjunction', 'interrogatives')]
trues: [['Plume', 'Used_for', 'passives'], ['Plume', 'Used_for', 'relative clauses'], ['Plume', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33512544802867383, 0.34, 0.3375451263537906]
text: Towards this goal , we also propose a novel Multiple Instance Learning ( MIL ) formulation for the problem based on the logistic softmax function of covariance-based region features within a MAP estimation framework .
result: triple_list: [["logistic softmax function", "Used_for", "Multiple Instance Learning ( MIL ) formulation"], ["logistic softmax function", "Used_for", "covariance-based region features"], ["covariance-based region features", "Used_for", "Multiple Instance Learning ( MIL ) formulation"], ["MAP estimation framework", "Used_for", "Multiple Instance Learning ( MIL ) formulation"]]

pred: [('logistic softmax function', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'), ('logistic softmax function', 'Used_for', 'covariance-based region features'), ('covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'), ('MAP estimation framework', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation')]
trues: [['logistic softmax function of covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'], ['MAP estimation framework', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.33451957295373663, 0.34057971014492755, 0.33752244165170553]
text: This paper proposes to use a convolution kernel over parse trees to model syntactic structure information for relation extraction .
result: triple_list: [["convolution kernel", "Used_for", "syntactic structure information"], ["convolution kernel", "Used_for", "relation extraction"], ["parse trees", "Used_for", "convolution kernel"]]

pred: [('convolution kernel', 'Used_for', 'syntactic structure information'), ('convolution kernel', 'Used_for', 'relation extraction'), ('parse trees', 'Used_for', 'convolution kernel')]
trues: [['convolution kernel over parse trees', 'Used_for', 'syntactic structure information'], ['syntactic structure information', 'Used_for', 'relation extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3327433628318584, 0.33935018050541516, 0.33601429848078646]
text: The proposed detectors are able to capture large-scale structures and distinctive textured patterns , and exhibit strong invariance to rotation , illumination variation , and blur .
result: triple_list: [["detectors", "Used_for", "large-scale structures"], ["detectors", "Used_for", "textured patterns"], ["large-scale structures", "Conjunction", "textured patterns"], ["invariance", "Feature_of", "detectors"], ["rotation", "Hyponym_of", "invariance"], ["rotation", "Conjunction", "illumination variation"], ["illumination variation", "Hyponym_of", "invariance"], ["illumination variation", "Conjunction", "blur"], ["blur", "Hyponym_of", "invariance"]]

pred: [('detectors', 'Used_for', 'large-scale structures'), ('detectors', 'Used_for', 'textured patterns'), ('large-scale structures', 'Conjunction', 'textured patterns'), ('invariance', 'Feature_of', 'detectors'), ('rotation', 'Hyponym_of', 'invariance'), ('rotation', 'Conjunction', 'illumination variation'), ('illumination variation', 'Hyponym_of', 'invariance'), ('illumination variation', 'Conjunction', 'blur'), ('blur', 'Hyponym_of', 'invariance')]
trues: [['detectors', 'Used_for', 'large-scale structures'], ['detectors', 'Used_for', 'distinctive textured patterns'], ['detectors', 'Used_for', 'rotation'], ['detectors', 'Used_for', 'illumination variation'], ['detectors', 'Used_for', 'blur'], ['large-scale structures', 'Conjunction', 'distinctive textured patterns'], ['rotation', 'Conjunction', 'illumination variation'], ['illumination variation', 'Conjunction', 'blur']]
metrics_sample: [0.3333333333333333, 0.375, 0.35294117647058826]
metrics_current: [0.3327526132404181, 0.3398576512455516, 0.3362676056338028]
text: In contrast , object pose estimation using these approaches has received relatively less attention .
result: triple_list: [["approaches", "Used_for", "object pose estimation"]]

pred: [('approaches', 'Used_for', 'object pose estimation')]
trues: [['approaches', 'Used_for', 'object pose estimation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3339130434782609, 0.3410301953818828, 0.3374340949033392]
text: Unfortunately , creating large datasets with pixel-level labels has been extremely costly due to the amount of human effort required .
result: triple_list: [["human effort", "Used_for", "large datasets with pixel-level labels"]]

pred: [('human effort', 'Used_for', 'large datasets with pixel-level labels')]
trues: [['pixel-level labels', 'Feature_of', 'large datasets']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3404255319148936, 0.3368421052631579]
text: This paper presents necessary and sufficient conditions for the use of demonstrative expressions in English and discusses implications for current discourse processing algorithms .
result: triple_list: [["English", "Used_for", "demonstrative expressions"], ["discourse processing algorithms", "Used_for", "demonstrative expressions"]]

pred: [('English', 'Used_for', 'demonstrative expressions'), ('discourse processing algorithms', 'Used_for', 'demonstrative expressions')]
trues: [['demonstrative expressions', 'Feature_of', 'English'], ['implications', 'Used_for', 'discourse processing algorithms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33217993079584773, 0.3392226148409894, 0.3356643356643357]
text: Our results show that MBR decoding can be used to tune statistical MT performance for specific loss functions .
result: triple_list: [["MBR decoding", "Used_for", "statistical MT"], ["statistical MT", "Used_for", "specific loss functions"]]

pred: [('MBR decoding', 'Used_for', 'statistical MT'), ('statistical MT', 'Used_for', 'specific loss functions')]
trues: [['MBR decoding', 'Used_for', 'statistical MT'], ['MBR decoding', 'Used_for', 'loss functions']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33275862068965517, 0.3397887323943662, 0.3362369337979094]
text: Multi-layer perceptrons ( MLPs ) performed much better than standard Gaussian mixture models ( GMMs ) for both our ANF-based and ON-based auditory features .
result: triple_list: [["Multi-layer perceptrons ( MLPs )", "Compare", "Gaussian mixture models ( GMMs )"], ["ANF-based and ON-based auditory features", "Evaluate_for", "Multi-layer perceptrons ( MLPs )"], ["ANF-based and ON-based auditory features", "Evaluate_for", "Gaussian mixture models ( GMMs )"]]

pred: [('Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'), ('ANF-based and ON-based auditory features', 'Evaluate_for', 'Multi-layer perceptrons ( MLPs )'), ('ANF-based and ON-based auditory features', 'Evaluate_for', 'Gaussian mixture models ( GMMs )')]
trues: [['Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'], ['Multi-layer perceptrons ( MLPs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ANF-based and ON-based auditory features']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.33276157804459694, 0.3397548161120841, 0.33622183708838826]
text: We explored possible ways to obtain a compact lexicon , consistent with CCG principles , from a treebank which is an order of magnitude smaller than Penn WSJ .
result: triple_list: [["treebank", "Compare", "Penn WSJ"]]

pred: [('treebank', 'Compare', 'Penn WSJ')]
trues: [['compact lexicon', 'Part_of', 'treebank'], ['treebank', 'Compare', 'Penn WSJ']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3339041095890411, 0.3403141361256545, 0.33707865168539325]
text: We propose to incorporate a priori geometric constraints in a 3 -- D stereo reconstruction scheme to cope with the many cases where image information alone is not sufficient to accurately recover 3 -- D shape .
result: triple_list: [["a priori geometric constraints", "Part_of", "3 -- D stereo reconstruction scheme"]]

pred: [('a priori geometric constraints', 'Part_of', '3 -- D stereo reconstruction scheme')]
trues: [['priori geometric constraints', 'Part_of', '3 -- D stereo reconstruction scheme'], ['image information', 'Used_for', '3 -- D shape']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3391304347826087, 0.3362068965517241]
text: The automated segmentation of images into semantically meaningful parts requires shape information since low-level feature analysis alone often fails to reach this goal .
result: triple_list: [["shape information", "Used_for", "segmentation of images into semantically meaningful parts"], ["low-level feature analysis", "Used_for", "segmentation of images into semantically meaningful parts"]]

pred: [('shape information', 'Used_for', 'segmentation of images into semantically meaningful parts'), ('low-level feature analysis', 'Used_for', 'segmentation of images into semantically meaningful parts')]
trues: [['images', 'Used_for', 'automated segmentation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3321976149914821, 0.3385416666666667, 0.3353396388650043]
text: We examine the relationship between the two grammatical formalisms : Tree Adjoining Grammars and Head Grammars .
result: triple_list: [["Tree Adjoining Grammars", "Conjunction", "Head Grammars"]]

pred: [('Tree Adjoining Grammars', 'Conjunction', 'Head Grammars')]
trues: [['Tree Adjoining Grammars', 'Hyponym_of', 'grammatical formalisms'], ['Tree Adjoining Grammars', 'Compare', 'Head Grammars'], ['Head Grammars', 'Hyponym_of', 'grammatical formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33163265306122447, 0.33678756476683935, 0.33419023136246784]
text: FERRET utilizes a novel approach to Q/A known as predictive questioning which attempts to identify the questions ( and answers ) that users need by analyzing how a user interacts with a system while gathering information related to a particular scenario .
result: triple_list: [["predictive questioning", "Hyponym_of", "Q/A"]]

pred: [('predictive questioning', 'Hyponym_of', 'Q/A')]
trues: [['approach', 'Used_for', 'FERRET'], ['approach', 'Used_for', 'Q/A']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3310696095076401, 0.33562822719449226, 0.3333333333333333]
text: Moreover , a cost zero solution always exists and can only be excluded by hard budget constraints .
result: triple_list: [["hard budget constraints", "Used_for", "cost zero solution"]]

pred: [('hard budget constraints', 'Used_for', 'cost zero solution')]
trues: [['hard budget constraints', 'Used_for', 'cost zero solution']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33220338983050846, 0.33676975945017185, 0.33447098976109213]
text: A central goal of this research is to merge approaches from pivot MT , interactive MT , and multilingual text authoring .
result: triple_list: [["approaches", "Used_for", "pivot MT"], ["approaches", "Used_for", "interactive MT"], ["approaches", "Used_for", "multilingual text authoring"], ["pivot MT", "Conjunction", "interactive MT"], ["interactive MT", "Conjunction", "multilingual text authoring"]]

pred: [('approaches', 'Used_for', 'pivot MT'), ('approaches', 'Used_for', 'interactive MT'), ('approaches', 'Used_for', 'multilingual text authoring'), ('pivot MT', 'Conjunction', 'interactive MT'), ('interactive MT', 'Conjunction', 'multilingual text authoring')]
trues: [['pivot MT', 'Conjunction', 'interactive MT'], ['interactive MT', 'Conjunction', 'multilingual text authoring']]
metrics_sample: [0.4, 1.0, 0.5714285714285715]
metrics_current: [0.33277310924369746, 0.339041095890411, 0.3358778625954198]
text: Extended CF grammars ( grammars with regular expressions at the right hand side ) can be parsed with a simple modification of the LR-parser for normal CF grammars .
result: triple_list: [["Extended CF grammars", "Used_for", "LR-parser"], ["regular expressions", "Part_of", "Extended CF grammars"]]

pred: [('Extended CF grammars', 'Used_for', 'LR-parser'), ('regular expressions', 'Part_of', 'Extended CF grammars')]
trues: [['regular expressions', 'Feature_of', 'grammars'], ['LR-parser', 'Used_for', 'Extended CF grammars'], ['LR-parser', 'Used_for', 'CF grammars']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3316582914572864, 0.3373083475298126, 0.3344594594594595]
text: They improve the reconstruction results and enforce their consistency with a priori knowledge about object shape .
result: triple_list: [["They", "Used_for", "reconstruction results"], ["They", "Conjunction", "a priori knowledge about object shape"], ["a priori knowledge about object shape", "Feature_of", "They"]]

pred: [('They', 'Used_for', 'reconstruction results'), ('They', 'Conjunction', 'a priori knowledge about object shape'), ('a priori knowledge about object shape', 'Feature_of', 'They')]
trues: [['They', 'Used_for', 'reconstruction'], ['object shape', 'Feature_of', 'priori knowledge']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33, 0.3361629881154499, 0.3330529857022708]
text: In both domains , we found that unsupervised methods can attain accuracies with 400 unlabeled examples comparable to those attained by supervised methods on 50 labeled examples , and that semi-supervised methods can make good use of small amounts of labeled data .
result: triple_list: [["unsupervised methods", "Compare", "supervised methods"], ["unsupervised methods", "Conjunction", "semi-supervised methods"], ["semi-supervised methods", "Used_for", "small amounts of labeled data"]]

pred: [('unsupervised methods', 'Compare', 'supervised methods'), ('unsupervised methods', 'Conjunction', 'semi-supervised methods'), ('semi-supervised methods', 'Used_for', 'small amounts of labeled data')]
trues: [['unsupervised methods', 'Compare', 'supervised methods'], ['accuracies', 'Evaluate_for', 'unsupervised methods'], ['accuracies', 'Evaluate_for', 'supervised methods'], ['unlabeled examples', 'Used_for', 'unsupervised methods'], ['labeled examples', 'Used_for', 'supervised methods'], ['labeled data', 'Used_for', 'semi-supervised methods']]
metrics_sample: [0.3333333333333333, 0.16666666666666666, 0.2222222222222222]
metrics_current: [0.33001658374792703, 0.334453781512605, 0.332220367278798]
text: We rigorously establish the correctness of the methodology and show by experimentation using LSH that it is competitive in practice with available alternatives .
result: triple_list: [["LSH", "Compare", "alternatives"]]

pred: [('LSH', 'Compare', 'alternatives')]
trues: [['it', 'Compare', 'alternatives']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3294701986754967, 0.3338926174496644, 0.33166666666666667]
text: On this challenging data set our system consistently demonstrated a nearly perfect recognition rate ( over 99.7 % on all three databases ) , significantly out-performing state-of-the-art commercial software and methods from the literature .
result: triple_list: [["recognition rate", "Evaluate_for", "system"], ["recognition rate", "Evaluate_for", "commercial software"], ["recognition rate", "Evaluate_for", "methods from the literature"], ["system", "Compare", "commercial software"], ["system", "Compare", "methods from the literature"], ["commercial software", "Conjunction", "methods from the literature"]]

pred: [('recognition rate', 'Evaluate_for', 'system'), ('recognition rate', 'Evaluate_for', 'commercial software'), ('recognition rate', 'Evaluate_for', 'methods from the literature'), ('system', 'Compare', 'commercial software'), ('system', 'Compare', 'methods from the literature'), ('commercial software', 'Conjunction', 'methods from the literature')]
trues: [['data set', 'Evaluate_for', 'system'], ['system', 'Compare', 'commercial software'], ['system', 'Compare', 'methods'], ['recognition rate', 'Evaluate_for', 'system'], ['commercial software', 'Conjunction', 'methods']]
metrics_sample: [0.3333333333333333, 0.4, 0.3636363636363636]
metrics_current: [0.3295081967213115, 0.33444259567387685, 0.33195706028075966]
text: This paper describes the impact of using different-quality references on evaluation .
result: triple_list: [["different-quality references", "Evaluate_for", "evaluation"]]

pred: [('different-quality references', 'Evaluate_for', 'evaluation')]
trues: [['different-quality references', 'Used_for', 'evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32896890343698854, 0.3338870431893688, 0.3314097279472383]
text: The model is evaluated on English and Czech newspaper texts , and is then validated on French broadcast news transcriptions .
result: triple_list: [["English and Czech newspaper texts", "Evaluate_for", "model"], ["English and Czech newspaper texts", "Conjunction", "French broadcast news transcriptions"], ["French broadcast news transcriptions", "Evaluate_for", "model"]]

pred: [('English and Czech newspaper texts', 'Evaluate_for', 'model'), ('English and Czech newspaper texts', 'Conjunction', 'French broadcast news transcriptions'), ('French broadcast news transcriptions', 'Evaluate_for', 'model')]
trues: [['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['French broadcast news transcriptions', 'Evaluate_for', 'model']]
metrics_sample: [0.6666666666666666, 1.0, 0.8]
metrics_current: [0.3306188925081433, 0.3360927152317881, 0.33333333333333337]
text: The experiments show that the system is able to detect scf types with 70 % precision and 66 % recall rate .
result: triple_list: [["system", "Used_for", "scf types"]]

pred: [('system', 'Used_for', 'scf types')]
trues: [['precision', 'Evaluate_for', 'system'], ['precision', 'Conjunction', 'recall'], ['recall', 'Evaluate_for', 'system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3300813008130081, 0.3344316309719934, 0.3322422258592471]
text: In the case of natural speech signals , the method is shown to have separation accuracy better than the state-of-the-art methods .
result: triple_list: [["method", "Compare", "state-of-the-art methods"], ["separation accuracy", "Evaluate_for", "method"], ["separation accuracy", "Evaluate_for", "state-of-the-art methods"]]

pred: [('method', 'Compare', 'state-of-the-art methods'), ('separation accuracy', 'Evaluate_for', 'method'), ('separation accuracy', 'Evaluate_for', 'state-of-the-art methods')]
trues: [['method', 'Used_for', 'natural speech signals'], ['method', 'Compare', 'methods'], ['separation accuracy', 'Evaluate_for', 'method'], ['separation accuracy', 'Evaluate_for', 'methods'], ['methods', 'Used_for', 'natural speech signals']]
metrics_sample: [0.3333333333333333, 0.2, 0.25]
metrics_current: [0.3300970873786408, 0.3333333333333333, 0.33170731707317075]
text: Our morphological analyzer has done all the necessary work for the recognition and classification of proper names , numerical and temporal expressions , i.e. Named Entity ( NE ) items in the Japanese text .
result: triple_list: [["morphological analyzer", "Used_for", "recognition and classification of proper names"], ["morphological analyzer", "Used_for", "Named Entity ( NE ) items"], ["recognition and classification of proper names", "Conjunction", "Named Entity ( NE ) items"], ["proper names", "Hyponym_of", "Named Entity ( NE ) items"], ["numerical and temporal expressions", "Hyponym_of", "Named Entity ( NE ) items"]]

pred: [('morphological analyzer', 'Used_for', 'recognition and classification of proper names'), ('morphological analyzer', 'Used_for', 'Named Entity ( NE ) items'), ('recognition and classification of proper names', 'Conjunction', 'Named Entity ( NE ) items'), ('proper names', 'Hyponym_of', 'Named Entity ( NE ) items'), ('numerical and temporal expressions', 'Hyponym_of', 'Named Entity ( NE ) items')]
trues: [['morphological analyzer', 'Used_for', 'recognition and classification of proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Hyponym_of', 'proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Part_of', 'Japanese text']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3274478330658106, 0.33170731707317075, 0.3295638126009693]
text: In spite of over two decades of intense research , illumination and pose invariance remain prohibitively challenging aspects of face recognition for most practical applications .
result: triple_list: [["illumination", "Conjunction", "pose invariance"], ["illumination", "Feature_of", "face recognition"], ["pose invariance", "Feature_of", "face recognition"]]

pred: [('illumination', 'Conjunction', 'pose invariance'), ('illumination', 'Feature_of', 'face recognition'), ('pose invariance', 'Feature_of', 'face recognition')]
trues: [['illumination', 'Conjunction', 'pose invariance'], ['illumination', 'Part_of', 'face recognition'], ['pose invariance', 'Part_of', 'face recognition']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3274760383386581, 0.33171521035598706, 0.3295819935691318]
text: This probably occurs because each model has different strengths and weaknesses for modeling the knowledge sources .
result: triple_list: [["model", "Used_for", "knowledge sources"]]

pred: [('model', 'Used_for', 'knowledge sources')]
trues: [['model', 'Used_for', 'knowledge sources']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32854864433811803, 0.33279483037156704, 0.3306581059390048]
text: We show that combining anisotropic meshing with a non-quadratic approach to regularization enables us to obtain satisfactory reconstruction results using triangulations with few vertices .
result: triple_list: [["anisotropic meshing", "Conjunction", "non-quadratic approach to regularization"]]

pred: [('anisotropic meshing', 'Conjunction', 'non-quadratic approach to regularization')]
trues: [['anisotropic meshing', 'Conjunction', 'non-quadratic approach'], ['anisotropic meshing', 'Used_for', 'reconstruction'], ['non-quadratic approach', 'Used_for', 'regularization'], ['non-quadratic approach', 'Used_for', 'reconstruction'], ['triangulations', 'Used_for', 'reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32802547770700635, 0.3301282051282051, 0.329073482428115]
text: We analyzed eye gaze , head nods and attentional focus in the context of a direction-giving task .
result: triple_list: [["eye gaze", "Conjunction", "head nods"], ["eye gaze", "Conjunction", "attentional focus"], ["head nods", "Conjunction", "attentional focus"], ["eye gaze", "Feature_of", "direction-giving task"], ["head nods", "Feature_of", "direction-giving task"], ["attentional focus", "Feature_of", "direction-giving task"]]

pred: [('eye gaze', 'Conjunction', 'head nods'), ('eye gaze', 'Conjunction', 'attentional focus'), ('head nods', 'Conjunction', 'attentional focus'), ('eye gaze', 'Feature_of', 'direction-giving task'), ('head nods', 'Feature_of', 'direction-giving task'), ('attentional focus', 'Feature_of', 'direction-giving task')]
trues: [['eye gaze', 'Conjunction', 'head nods'], ['eye gaze', 'Part_of', 'direction-giving task'], ['head nods', 'Conjunction', 'attentional focus'], ['head nods', 'Part_of', 'direction-giving task'], ['attentional focus', 'Part_of', 'direction-giving task']]
metrics_sample: [0.3333333333333333, 0.4, 0.3636363636363636]
metrics_current: [0.3280757097791798, 0.33068362480127184, 0.32937450514647665]
text: In this paper , we describe a search procedure for statistical machine translation ( MT ) based on dynamic programming ( DP ) .
result: triple_list: [["search procedure", "Used_for", "statistical machine translation ( MT )"], ["dynamic programming ( DP )", "Used_for", "search procedure"]]

pred: [('search procedure', 'Used_for', 'statistical machine translation ( MT )'), ('dynamic programming ( DP )', 'Used_for', 'search procedure')]
trues: [['search procedure', 'Used_for', 'statistical machine translation ( MT )'], ['dynamic programming ( DP )', 'Used_for', 'statistical machine translation ( MT )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32861635220125784, 0.3312202852614897, 0.32991318074191006]
text: We propose a novel probabilistic framework for learning visual models of 3D object categories by combining appearance information and geometric constraints .
result: triple_list: [["framework", "Used_for", "visual models of 3D object categories"], ["appearance information", "Used_for", "framework"], ["appearance information", "Conjunction", "geometric constraints"], ["geometric constraints", "Used_for", "framework"]]

pred: [('framework', 'Used_for', 'visual models of 3D object categories'), ('appearance information', 'Used_for', 'framework'), ('appearance information', 'Conjunction', 'geometric constraints'), ('geometric constraints', 'Used_for', 'framework')]
trues: [['probabilistic framework', 'Used_for', 'visual models of 3D object categories'], ['appearance information', 'Used_for', 'probabilistic framework'], ['appearance information', 'Conjunction', 'geometric constraints'], ['geometric constraints', 'Used_for', 'probabilistic framework']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.328125, 0.33070866141732286, 0.3294117647058823]
text: Establishing a `` best '' correspondence between the '' UNL-tree + L0 '' and the '' MS-L0 structure '' , a lattice , may be done using the dictionary and trying to align the tree and the selected trajectory with as few crossing liaisons as possible .
result: triple_list: [["dictionary", "Used_for", "lattice"], ["dictionary", "Used_for", "tree"], ["dictionary", "Used_for", "trajectory"], ["tree", "Conjunction", "trajectory"]]

pred: [('dictionary', 'Used_for', 'lattice'), ('dictionary', 'Used_for', 'tree'), ('dictionary', 'Used_for', 'trajectory'), ('tree', 'Conjunction', 'trajectory')]
trues: [['UNL-tree + L0', 'Conjunction', 'MS-L0 structure'], ['dictionary', 'Used_for', 'lattice']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.327639751552795, 0.33124018838304553, 0.32943013270882127]
text: We discuss several applications of the result to the problem of distributional approximation of probabilistic context-free grammars by means of probabilistic finite automata .
result: triple_list: [["distributional approximation of probabilistic context-free grammars", "Used_for", "probabilistic finite automata"]]

pred: [('distributional approximation of probabilistic context-free grammars', 'Used_for', 'probabilistic finite automata')]
trues: [['distributional approximation', 'Feature_of', 'probabilistic context-free grammars'], ['probabilistic finite automata', 'Used_for', 'distributional approximation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3271317829457364, 0.3302034428794992, 0.32866043613707163]
text: We also introduce a novel classification method based on PER which leverages part of speech information of the words contributing to the word matches and non-matches in the sentence .
result: triple_list: [["classification method", "Used_for", "word matches and non-matches"], ["part of speech information", "Used_for", "classification method"]]

pred: [('classification method', 'Used_for', 'word matches and non-matches'), ('part of speech information', 'Used_for', 'classification method')]
trues: [['PER', 'Used_for', 'classification method'], ['PER', 'Used_for', 'part of speech information'], ['part of speech information', 'Used_for', 'word matches and non-matches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3261205564142195, 0.32866043613707163, 0.32738557020946474]
text: While Plume is well adapted to simple declarative and imperative utterances , it handles passives , relative clauses and interrogatives in an ad hoc manner leading to patchy syntactic coverage .
result: triple_list: [["Plume", "Used_for", "imperative utterances"], ["imperative utterances", "Compare", "passives"], ["passives", "Conjunction", "relative clauses"], ["relative clauses", "Conjunction", "interrogatives"], ["interrogatives", "Used_for", "syntactic coverage"]]

pred: [('Plume', 'Used_for', 'imperative utterances'), ('imperative utterances', 'Compare', 'passives'), ('passives', 'Conjunction', 'relative clauses'), ('relative clauses', 'Conjunction', 'interrogatives'), ('interrogatives', 'Used_for', 'syntactic coverage')]
trues: [['Plume', 'Used_for', 'declarative and imperative utterances'], ['it', 'Used_for', 'passives'], ['it', 'Used_for', 'relative clauses'], ['it', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [0.4, 0.3333333333333333, 0.3636363636363636]
metrics_current: [0.3266871165644172, 0.3287037037037037, 0.3276923076923077]
text: Some of the extracts were expert human translations , others were machine translation outputs .
result: triple_list: [["expert human translations", "Conjunction", "machine translation outputs"]]

pred: [('expert human translations', 'Conjunction', 'machine translation outputs')]
trues: [['machine translation outputs', 'Conjunction', 'expert human translations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32618683001531396, 0.32819722650231126, 0.3271889400921659]
text: We show that various features based on the structure of email-threads can be used to improve upon lexical similarity of discourse segments for question-answer pairing .
result: triple_list: [["features", "Used_for", "question-answer pairing"], ["structure of email-threads", "Used_for", "features"]]

pred: [('features', 'Used_for', 'question-answer pairing'), ('structure of email-threads', 'Used_for', 'features')]
trues: [['features', 'Used_for', 'lexical similarity'], ['features', 'Used_for', 'question-answer pairing'], ['structure of email-threads', 'Used_for', 'features'], ['lexical similarity', 'Feature_of', 'discourse segments']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3282442748091603, 0.32924961715160794, 0.3287461773700306]
text: The applicability of many current information extraction techniques is severely limited by the need for supervised training data .
result: triple_list: [["supervised training data", "Used_for", "information extraction techniques"]]

pred: [('supervised training data', 'Used_for', 'information extraction techniques')]
trues: [['supervised training data', 'Used_for', 'information extraction techniques']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32926829268292684, 0.3302752293577982, 0.3297709923664122]
text: Our technique gives a substantial improvement in paraphrase classification accuracy over all of the other models used in the experiments .
result: triple_list: [["technique", "Compare", "models"], ["paraphrase classification accuracy", "Evaluate_for", "technique"], ["technique", "Compare", "models"]]

pred: [('technique', 'Compare', 'models'), ('paraphrase classification accuracy', 'Evaluate_for', 'technique'), ('technique', 'Compare', 'models')]
trues: [['technique', 'Compare', 'models'], ['paraphrase classification accuracy', 'Evaluate_for', 'technique'], ['paraphrase classification accuracy', 'Evaluate_for', 'models']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.331306990881459, 0.3318112633181126, 0.3315589353612167]
text: Translations are produced by means of a beam-search decoder .
result: triple_list: [["beam-search decoder", "Used_for", "Translations"]]

pred: [('beam-search decoder', 'Used_for', 'Translations')]
trues: [['beam-search decoder', 'Used_for', 'Translations']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3323216995447648, 0.33282674772036475, 0.3325740318906606]
text: This model is meant to account for productive rules of interpretation which are inferred from the morpho-syntactic and semantic characteristics of the nominal constituents .
result: triple_list: [["morpho-syntactic and semantic characteristics of the nominal constituents", "Used_for", "productive rules of interpretation"]]

pred: [('morpho-syntactic and semantic characteristics of the nominal constituents', 'Used_for', 'productive rules of interpretation')]
trues: [['model', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Feature_of', 'nominal constituents']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33181818181818185, 0.3313161875945537, 0.3315669947009841]
text: We describe a fully automatic recognition system based on the proposed method and an extensive evaluation on 171 individuals and over 1300 video sequences with extreme illumination , pose and head motion variation .
result: triple_list: [["fully automatic recognition system", "Used_for", "method"], ["extensive evaluation", "Evaluate_for", "fully automatic recognition system"], ["individuals", "Evaluate_for", "extensive evaluation"], ["individuals", "Conjunction", "video sequences"], ["pose and head motion variation", "Feature_of", "video sequences"]]

pred: [('fully automatic recognition system', 'Used_for', 'method'), ('extensive evaluation', 'Evaluate_for', 'fully automatic recognition system'), ('individuals', 'Evaluate_for', 'extensive evaluation'), ('individuals', 'Conjunction', 'video sequences'), ('pose and head motion variation', 'Feature_of', 'video sequences')]
trues: [['method', 'Used_for', 'fully automatic recognition system'], ['video sequences', 'Evaluate_for', 'fully automatic recognition system'], ['illumination', 'Feature_of', 'video sequences'], ['illumination', 'Conjunction', 'pose'], ['pose', 'Feature_of', 'video sequences'], ['pose', 'Conjunction', 'head motion variation'], ['head motion variation', 'Feature_of', 'video sequences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3293233082706767, 0.3278443113772455, 0.3285821455363841]
text: For LR ( 0 ) grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz [ 1 ] and Roberts [ 2 ] .
result: triple_list: [["algorithm", "Compare", "recursive ascent parsers"], ["recursive ascent parsers", "Compare", "LR ( 0 ) grammars"], ["Kruse-man Aretz", "Used_for", "recursive ascent parsers"], ["Kruse-man Aretz", "Conjunction", "Roberts"], ["Roberts", "Used_for", "recursive ascent parsers"]]

pred: [('algorithm', 'Compare', 'recursive ascent parsers'), ('recursive ascent parsers', 'Compare', 'LR ( 0 ) grammars'), ('Kruse-man Aretz', 'Used_for', 'recursive ascent parsers'), ('Kruse-man Aretz', 'Conjunction', 'Roberts'), ('Roberts', 'Used_for', 'recursive ascent parsers')]
trues: [['algorithm', 'Used_for', 'LR ( 0 ) grammars'], ['algorithm', 'Conjunction', 'recursive ascent parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32686567164179103, 0.32686567164179103, 0.32686567164179103]
text: Although the study of clustering is centered around an intuitively compelling goal , it has been very difficult to develop a unified framework for reasoning about it at a technical level , and profoundly diverse approaches to clustering abound in the research community .
result: triple_list: [["it", "Used_for", "clustering"], ["unified framework", "Used_for", "clustering"]]

pred: [('it', 'Used_for', 'clustering'), ('unified framework', 'Used_for', 'clustering')]
trues: [['unified framework', 'Used_for', 'reasoning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32589285714285715, 0.3263785394932936, 0.32613551749813846]
text: Experiments on the PASCAL VOC 2006 dataset show an acceleration of more than 50 % by our method compared to standard cascade evaluation .
result: triple_list: [["PASCAL VOC 2006 dataset", "Evaluate_for", "method"], ["method", "Compare", "cascade evaluation"]]

pred: [('PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'), ('method', 'Compare', 'cascade evaluation')]
trues: [['PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'], ['PASCAL VOC 2006 dataset', 'Evaluate_for', 'cascade evaluation'], ['cascade evaluation', 'Compare', 'method']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3264094955489614, 0.3264094955489614, 0.3264094955489614]
text: We present results on addressee identification in four-participants face-to-face meetings using Bayesian Network and Naive Bayes classifiers .
result: triple_list: [["Bayesian Network", "Conjunction", "Naive Bayes classifiers"], ["Bayesian Network", "Used_for", "addressee identification"], ["Naive Bayes classifiers", "Used_for", "addressee identification"]]

pred: [('Bayesian Network', 'Conjunction', 'Naive Bayes classifiers'), ('Bayesian Network', 'Used_for', 'addressee identification'), ('Naive Bayes classifiers', 'Used_for', 'addressee identification')]
trues: [['Bayesian Network', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Conjunction', 'Bayesian Network']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3249630723781389, 0.3249630723781389, 0.3249630723781389]
text: We use novel priors , generate sparse and dense detection maps and our results show high detection rate with rejection to pathological motion and occlusion .
result: triple_list: [["priors", "Used_for", "detection maps"]]

pred: [('priors', 'Used_for', 'detection maps')]
trues: [['priors', 'Used_for', 'sparse and dense detection maps'], ['pathological motion', 'Conjunction', 'occlusion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32448377581120946, 0.3240058910162003, 0.32424465733235075]
text: While sentence extraction as an approach to summarization has been shown to work in documents of certain genres , because of the conversational nature of email communication where utterances are made in relation to one made previously , sentence extraction may not capture the necessary segments of dialogue that would make a summary coherent .
result: triple_list: [["sentence extraction", "Used_for", "summarization"], ["documents of certain genres", "Feature_of", "sentence extraction"], ["email communication", "Feature_of", "utterances"]]

pred: [('sentence extraction', 'Used_for', 'summarization'), ('documents of certain genres', 'Feature_of', 'sentence extraction'), ('email communication', 'Feature_of', 'utterances')]
trues: [['sentence extraction', 'Used_for', 'summarization']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3245227606461087, 0.325, 0.32476120499632627]
text: We show that the trainable sentence planner performs better than the rule-based systems and the baselines , and as well as the hand-crafted system .
result: triple_list: [["trainable sentence planner", "Compare", "rule-based systems"], ["trainable sentence planner", "Compare", "baselines"], ["rule-based systems", "Conjunction", "baselines"], ["hand-crafted system", "Compare", "rule-based systems"], ["hand-crafted system", "Compare", "baselines"]]

pred: [('trainable sentence planner', 'Compare', 'rule-based systems'), ('trainable sentence planner', 'Compare', 'baselines'), ('rule-based systems', 'Conjunction', 'baselines'), ('hand-crafted system', 'Compare', 'rule-based systems'), ('hand-crafted system', 'Compare', 'baselines')]
trues: [['trainable sentence planner', 'Compare', 'rule-based systems'], ['trainable sentence planner', 'Compare', 'baselines'], ['trainable sentence planner', 'Compare', 'hand-crafted system'], ['rule-based systems', 'Conjunction', 'baselines'], ['baselines', 'Conjunction', 'hand-crafted system']]
metrics_sample: [0.6, 0.6, 0.6]
metrics_current: [0.32653061224489793, 0.327007299270073, 0.3267687819110139]
text: In the second half of the paper , we report a laboratory study using the Wizard of Oz technique to identify NL requirements for carrying out this task .
result: triple_list: [["Wizard of Oz technique", "Used_for", "NL requirements"]]

pred: [('Wizard of Oz technique', 'Used_for', 'NL requirements')]
trues: [['Wizard of Oz technique', 'Used_for', 'NL requirements'], ['Wizard of Oz technique', 'Used_for', 'task']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32751091703056767, 0.32751091703056767, 0.32751091703056767]
text: We validate this new method on nine standard person re-identification datasets including two large scale Market-1501 and CUHK03 datasets and show that we improve upon the current state-of-the-art methods on all of them .
result: triple_list: [["method", "Compare", "methods"], ["Market-1501 and CUHK03 datasets", "Evaluate_for", "method"], ["Market-1501 and CUHK03 datasets", "Evaluate_for", "methods"]]

pred: [('method', 'Compare', 'methods'), ('Market-1501 and CUHK03 datasets', 'Evaluate_for', 'method'), ('Market-1501 and CUHK03 datasets', 'Evaluate_for', 'methods')]
trues: [['person re-identification datasets', 'Evaluate_for', 'method'], ['scale Market-1501', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Conjunction', 'scale Market-1501']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32608695652173914, 0.3256150506512301, 0.32585083272990584]
text: We integrate a spoken language understanding system with intelligent mobile agents that mediate between users and information sources .
result: triple_list: [["spoken language understanding system", "Part_of", "mobile agents"]]

pred: [('spoken language understanding system', 'Part_of', 'mobile agents')]
trues: [['intelligent mobile agents', 'Part_of', 'spoken language understanding system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3256150506512301, 0.32514450867052025, 0.32537960954446854]
text: With relevant approach , we identify important contents by PageRank algorithm on the event map constructed from documents .
result: triple_list: [["PageRank algorithm", "Used_for", "event map"]]

pred: [('PageRank algorithm', 'Used_for', 'event map')]
trues: [['PageRank algorithm', 'Used_for', 'relevant approach'], ['event map', 'Used_for', 'PageRank algorithm'], ['documents', 'Used_for', 'event map']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32514450867052025, 0.3237410071942446, 0.32444124008651765]
text: We propose a convex problem to incorporate side information in robust PCA and show that the low rank matrix can be exactly recovered via the proposed method under certain conditions .
result: triple_list: [["convex problem", "Used_for", "side information"], ["convex problem", "Used_for", "robust PCA"], ["low rank matrix", "Used_for", "method"]]

pred: [('convex problem', 'Used_for', 'side information'), ('convex problem', 'Used_for', 'robust PCA'), ('low rank matrix', 'Used_for', 'method')]
trues: [['convex problem', 'Used_for', 'side information'], ['side information', 'Part_of', 'robust PCA'], ['method', 'Used_for', 'low rank matrix']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3251798561151079, 0.3237822349570201, 0.3244795405599426]
text: The experimental tests are carried out on the Verbmobil task ( German-English , 8000-word vocabulary ) , which is a limited-domain spoken-language task .
result: triple_list: [["Verbmobil task ( German-English , 8000-word vocabulary )", "Hyponym_of", "limited-domain spoken-language task"]]

pred: [('Verbmobil task ( German-English , 8000-word vocabulary )', 'Hyponym_of', 'limited-domain spoken-language task')]
trues: [['Verbmobil task', 'Hyponym_of', 'limited-domain spoken-language task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32471264367816094, 0.32331902718168815, 0.32401433691756276]
text: We evaluate the quality of the extracted data by showing that it improves the performance of a state-of-the-art statistical machine translation system .
result: triple_list: [["it", "Used_for", "statistical machine translation system"]]

pred: [('it', 'Used_for', 'statistical machine translation system')]
trues: [['it', 'Used_for', 'statistical machine translation system']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32568149210903874, 0.3242857142857143, 0.3249821045096636]
text: Given a new image , detection and classification are achieved by determining the position and viewpoint of the model that maximize recognition scores of the candidate objects .
result: triple_list: [["recognition scores", "Evaluate_for", "candidate objects"]]

pred: [('recognition scores', 'Evaluate_for', 'candidate objects')]
trues: [['image', 'Used_for', 'detection'], ['image', 'Used_for', 'classification'], ['detection', 'Conjunction', 'classification'], ['position', 'Used_for', 'detection'], ['position', 'Used_for', 'classification'], ['position', 'Conjunction', 'viewpoint'], ['viewpoint', 'Used_for', 'detection'], ['viewpoint', 'Used_for', 'classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32521489971346706, 0.3206214689265537, 0.32290184921763865]
text: We present a new part-of-speech tagger that demonstrates the following ideas : ( i ) explicit use of both preceding and following tag contexts via a dependency network representation , ( ii ) broad use of lexical features , including jointly conditioning on multiple consecutive words , ( iii ) effective use of priors in conditional loglinear models , and ( iv ) fine-grained modeling of unknown word features .
result: triple_list: [["ideas", "Used_for", "part-of-speech tagger"], ["preceding and following tag contexts", "Used_for", "part-of-speech tagger"], ["dependency network representation", "Used_for", "preceding and following tag contexts"], ["lexical features", "Used_for", "part-of-speech tagger"], ["jointly conditioning on multiple consecutive words", "Feature_of", "lexical features"], ["priors", "Used_for", "conditional loglinear models"], ["priors", "Part_of", "conditional loglinear models"], ["fine-grained modeling of unknown word features", "Used_for", "part-of-speech tagger"]]

pred: [('ideas', 'Used_for', 'part-of-speech tagger'), ('preceding and following tag contexts', 'Used_for', 'part-of-speech tagger'), ('dependency network representation', 'Used_for', 'preceding and following tag contexts'), ('lexical features', 'Used_for', 'part-of-speech tagger'), ('jointly conditioning on multiple consecutive words', 'Feature_of', 'lexical features'), ('priors', 'Used_for', 'conditional loglinear models'), ('priors', 'Part_of', 'conditional loglinear models'), ('fine-grained modeling of unknown word features', 'Used_for', 'part-of-speech tagger')]
trues: [['tag contexts', 'Used_for', 'part-of-speech tagger'], ['dependency network representation', 'Used_for', 'tag contexts'], ['lexical features', 'Used_for', 'part-of-speech tagger'], ['priors in conditional loglinear models', 'Used_for', 'part-of-speech tagger'], ['fine-grained modeling of unknown word features', 'Used_for', 'part-of-speech tagger']]
metrics_sample: [0.25, 0.4, 0.3076923076923077]
metrics_current: [0.3243626062322946, 0.3211781206171108, 0.32276250880902047]
text: This paper deals with the problem of generating the fundamental frequency ( F0 ) contour of speech from a text input for text-to-speech synthesis .
result: triple_list: [["text", "Used_for", "fundamental frequency ( F0 ) contour"], ["text", "Used_for", "text-to-speech synthesis"], ["text-to-speech synthesis", "Used_for", "fundamental frequency ( F0 ) contour"]]

pred: [('text', 'Used_for', 'fundamental frequency ( F0 ) contour'), ('text', 'Used_for', 'text-to-speech synthesis'), ('text-to-speech synthesis', 'Used_for', 'fundamental frequency ( F0 ) contour')]
trues: [['fundamental frequency ( F0 ) contour of speech', 'Used_for', 'text-to-speech synthesis'], ['text input', 'Used_for', 'fundamental frequency ( F0 ) contour of speech']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3229901269393512, 0.3202797202797203, 0.3216292134831461]
text: Our approach to the Multi-lingual Evaluation Task ( MET ) for Japanese text is to consider the given task as a morphological analysis problem in Japanese .
result: triple_list: [["approach", "Used_for", "Multi-lingual Evaluation Task ( MET )"], ["morphological analysis problem", "Used_for", "approach"], ["Japanese", "Feature_of", "morphological analysis problem"]]

pred: [('approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET )'), ('morphological analysis problem', 'Used_for', 'approach'), ('Japanese', 'Feature_of', 'morphological analysis problem')]
trues: [['approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET )'], ['Multi-lingual Evaluation Task ( MET )', 'Used_for', 'Japanese text'], ['morphological analysis problem', 'Used_for', 'task'], ['Japanese', 'Used_for', 'morphological analysis problem']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.32303370786516855, 0.3198887343532684, 0.3214535290006988]
text: The distinction among these components is essential to provide an adequate explanation of such discourse phenomena as cue phrases , referring expressions , and interruptions .
result: triple_list: [["components", "Used_for", "discourse phenomena"], ["cue phrases", "Hyponym_of", "discourse phenomena"], ["cue phrases", "Conjunction", "referring expressions"], ["referring expressions", "Hyponym_of", "discourse phenomena"], ["referring expressions", "Conjunction", "interruptions"], ["interruptions", "Hyponym_of", "discourse phenomena"]]

pred: [('components', 'Used_for', 'discourse phenomena'), ('cue phrases', 'Hyponym_of', 'discourse phenomena'), ('cue phrases', 'Conjunction', 'referring expressions'), ('referring expressions', 'Hyponym_of', 'discourse phenomena'), ('referring expressions', 'Conjunction', 'interruptions'), ('interruptions', 'Hyponym_of', 'discourse phenomena')]
trues: [['cue phrases', 'Hyponym_of', 'discourse phenomena'], ['cue phrases', 'Conjunction', 'referring expressions'], ['referring expressions', 'Hyponym_of', 'discourse phenomena'], ['referring expressions', 'Conjunction', 'interruptions'], ['interruptions', 'Hyponym_of', 'discourse phenomena']]
metrics_sample: [0.8333333333333334, 1.0, 0.9090909090909091]
metrics_current: [0.32729805013927576, 0.324585635359116, 0.32593619972260746]
text: It has also been studied in the framework of Japanese information extraction ( [ 3 ] ) in recent years .
result: triple_list: [["It", "Used_for", "Japanese information extraction ( [ 3 ] )"]]

pred: [('It', 'Used_for', 'Japanese information extraction ( [ 3 ] )')]
trues: [['Japanese information extraction', 'Used_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32684283727399166, 0.32413793103448274, 0.3254847645429363]
text: The seven categories of the scheme are based on rhetorical moves of argumentation .
result: triple_list: [["rhetorical moves of argumentation", "Used_for", "categories"]]

pred: [('rhetorical moves of argumentation', 'Used_for', 'categories')]
trues: [['rhetorical moves of argumentation', 'Used_for', 'scheme']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3263888888888889, 0.3236914600550964, 0.32503457814661135]
text: Evaluation on the ACE 2003 corpus shows that the convolution kernel over parse trees can achieve comparable performance with the previous best-reported feature-based methods on the 24 ACE relation subtypes .
result: triple_list: [["ACE 2003 corpus", "Evaluate_for", "convolution kernel"], ["convolution kernel", "Compare", "feature-based methods"], ["ACE relation subtypes", "Evaluate_for", "convolution kernel"], ["ACE relation subtypes", "Evaluate_for", "feature-based methods"]]

pred: [('ACE 2003 corpus', 'Evaluate_for', 'convolution kernel'), ('convolution kernel', 'Compare', 'feature-based methods'), ('ACE relation subtypes', 'Evaluate_for', 'convolution kernel'), ('ACE relation subtypes', 'Evaluate_for', 'feature-based methods')]
trues: [['ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'], ['feature-based methods', 'Compare', 'convolution kernel over parse trees']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.324585635359116, 0.3228021978021978, 0.32369146005509636]
text: For example , nucleotides in a DNA sequence , children 's names in a given state and year , and text documents are all commonly modeled with multinomial distributions .
result: triple_list: [["nucleotides", "Hyponym_of", "multinomial distributions"], ["nucleotides", "Conjunction", "children 's names"], ["children 's names", "Hyponym_of", "multinomial distributions"], ["children 's names", "Conjunction", "text documents"], ["text documents", "Hyponym_of", "multinomial distributions"]]

pred: [('nucleotides', 'Hyponym_of', 'multinomial distributions'), ('nucleotides', 'Conjunction', "children 's names"), ("children 's names", 'Hyponym_of', 'multinomial distributions'), ("children 's names", 'Conjunction', 'text documents'), ('text documents', 'Hyponym_of', 'multinomial distributions')]
trues: [['multinomial distributions', 'Used_for', 'nucleotides in a DNA sequence'], ['multinomial distributions', 'Used_for', 'text documents']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3223593964334705, 0.3219178082191781, 0.3221384509938314]
text: Contrary to most of the existing mixture of viewpoints models , our model establishes explicit correspondences of parts across different viewpoints of the object class .
result: triple_list: [["model", "Compare", "mixture of viewpoints models"], ["model", "Used_for", "object class"]]

pred: [('model', 'Compare', 'mixture of viewpoints models'), ('model', 'Used_for', 'object class')]
trues: [['model', 'Compare', 'mixture of viewpoints models']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3228454172366621, 0.3228454172366621, 0.3228454172366621]
text: We explain this distinction and we show how this model may be applied to the interpretation of compounds in real texts , provided that complementary semantic information are retrieved .
result: triple_list: [["model", "Used_for", "interpretation of compounds"], ["complementary semantic information", "Used_for", "model"]]

pred: [('model', 'Used_for', 'interpretation of compounds'), ('complementary semantic information', 'Used_for', 'model')]
trues: [['model', 'Used_for', 'interpretation of compounds']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.32332878581173263, 0.3237704918032787, 0.32354948805460754]
text: A new tool for linguistic annotation of scfs in corpus data is also introduced which can considerably alleviate the process of obtaining training and test data for subcategorization acquisition .
result: triple_list: [["tool", "Used_for", "linguistic annotation of scfs in corpus data"], ["tool", "Used_for", "subcategorization acquisition"]]

pred: [('tool', 'Used_for', 'linguistic annotation of scfs in corpus data'), ('tool', 'Used_for', 'subcategorization acquisition')]
trues: [['tool', 'Used_for', 'linguistic annotation of scfs'], ['training and test data', 'Used_for', 'subcategorization acquisition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3224489795918367, 0.3228882833787466, 0.32266848196051734]
text: SVMs are known to be robust to overfitting ; however , a few training examples usually do not represent well the structure of the class .
result: triple_list: [["training examples", "Used_for", "class"]]

pred: [('training examples', 'Used_for', 'class')]
trues: [['SVMs', 'Used_for', 'overfitting']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3220108695652174, 0.3224489795918367, 0.3222297756628144]
text: The perception of transparent objects from images is known to be a very hard problem in vision .
result: triple_list: [["images", "Used_for", "perception of transparent objects"]]

pred: [('images', 'Used_for', 'perception of transparent objects')]
trues: [['images', 'Used_for', 'perception of transparent objects']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3229308005427408, 0.3233695652173913, 0.3231500339443313]
text: This paper presents the results of automatically inducing a Combinatory Categorial Grammar ( CCG ) lexicon from a Turkish dependency treebank .
result: triple_list: [["Combinatory Categorial Grammar ( CCG ) lexicon", "Used_for", "Turkish dependency treebank"]]

pred: [('Combinatory Categorial Grammar ( CCG ) lexicon', 'Used_for', 'Turkish dependency treebank')]
trues: [['Combinatory Categorial Grammar ( CCG ) lexicon', 'Part_of', 'Turkish dependency treebank']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3224932249322493, 0.3229308005427408, 0.3227118644067796]
text: Our study reveals that the syntactic structure features embedded in a parse tree are very effective for relation extraction and these features can be well captured by the convolution tree kernel .
result: triple_list: [["syntactic structure features", "Part_of", "parse tree"], ["syntactic structure features", "Used_for", "relation extraction"], ["convolution tree kernel", "Used_for", "syntactic structure features"]]

pred: [('syntactic structure features', 'Part_of', 'parse tree'), ('syntactic structure features', 'Used_for', 'relation extraction'), ('convolution tree kernel', 'Used_for', 'syntactic structure features')]
trues: [['syntactic structure features', 'Feature_of', 'parse tree'], ['syntactic structure features', 'Used_for', 'relation extraction'], ['convolution tree kernel', 'Used_for', 'features']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3225371120107962, 0.32297297297297295, 0.3227548953409858]
text: Based on this , MINPRAN uses random sampling to search for the t and the number of inliers to the t that are least likely to have occurred randomly .
result: triple_list: [["random sampling", "Used_for", "MINPRAN"]]

pred: [('random sampling', 'Used_for', 'MINPRAN')]
trues: [['random sampling', 'Used_for', 'MINPRAN']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32345013477088946, 0.32388663967611336, 0.3236682400539447]
text: The subjects were given three minutes per extract to determine whether they believed the sample output to be an expert human translation or a machine translation .
result: triple_list: [["machine translation", "Compare", "expert human translation"]]

pred: [('machine translation', 'Compare', 'expert human translation')]
trues: [['expert human translation', 'Compare', 'machine translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32301480484522205, 0.32345013477088946, 0.3232323232323232]
text: The results of the experiment show that in most of the cases the cooccurrence statistics indeed reflect the semantic constraints and thus provide a basis for a useful disambiguation tool .
result: triple_list: [["cooccurrence statistics", "Used_for", "disambiguation tool"]]

pred: [('cooccurrence statistics', 'Used_for', 'disambiguation tool')]
trues: [['cooccurrence statistics', 'Used_for', 'disambiguation tool']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3239247311827957, 0.3243606998654105, 0.324142568930733]
text: Our system incorporates a linguistic parser/generator for LFG , a transfer component for parse reduction operating on packed parse forests , and a maximum-entropy model for stochastic output selection .
result: triple_list: [["linguistic parser/generator", "Part_of", "system"], ["linguistic parser/generator", "Used_for", "LFG"], ["transfer component", "Part_of", "system"], ["transfer component", "Used_for", "parse reduction"], ["parse reduction", "Used_for", "system"], ["maximum-entropy model", "Part_of", "system"], ["maximum-entropy model", "Used_for", "stochastic output selection"]]

pred: [('linguistic parser/generator', 'Part_of', 'system'), ('linguistic parser/generator', 'Used_for', 'LFG'), ('transfer component', 'Part_of', 'system'), ('transfer component', 'Used_for', 'parse reduction'), ('parse reduction', 'Used_for', 'system'), ('maximum-entropy model', 'Part_of', 'system'), ('maximum-entropy model', 'Used_for', 'stochastic output selection')]
trues: [['linguistic parser/generator', 'Part_of', 'system'], ['linguistic parser/generator', 'Used_for', 'LFG'], ['linguistic parser/generator', 'Conjunction', 'transfer component'], ['transfer component', 'Part_of', 'system'], ['transfer component', 'Used_for', 'parse reduction'], ['transfer component', 'Conjunction', 'maximum-entropy model'], ['packed parse forests', 'Used_for', 'parse reduction'], ['maximum-entropy model', 'Part_of', 'system'], ['maximum-entropy model', 'Used_for', 'stochastic output selection']]
metrics_sample: [0.8571428571428571, 0.6666666666666666, 0.75]
metrics_current: [0.3288948069241012, 0.32845744680851063, 0.3286759813705922]
text: Under this framework , a joint source-channel transliteration model , also called n-gram transliteration model ( n-gram TM ) , is further proposed to model the transliteration process .
result: triple_list: [["framework", "Used_for", "joint source-channel transliteration model"], ["joint source-channel transliteration model", "Conjunction", "n-gram transliteration model ( n-gram TM )"]]

pred: [('framework', 'Used_for', 'joint source-channel transliteration model'), ('joint source-channel transliteration model', 'Conjunction', 'n-gram transliteration model ( n-gram TM )')]
trues: [['framework', 'Used_for', 'joint source-channel transliteration model'], ['n-gram transliteration model ( n-gram TM )', 'Used_for', 'transliteration process']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3293492695883134, 0.32891246684350134, 0.3291307232913072]
text: Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest .
result: triple_list: [["Memo-functions", "Used_for", "parse forest"]]

pred: [('Memo-functions', 'Used_for', 'parse forest')]
trues: [['Memo-functions', 'Used_for', 'parse forest']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3302387267904509, 0.32980132450331123, 0.33001988071570576]
text: This has the advantages of efficiency on grammatical input , and robustness in the face of ungrammatical input .
result: triple_list: [["efficiency", "Feature_of", "grammatical input"], ["robustness", "Feature_of", "ungrammatical input"]]

pred: [('efficiency', 'Feature_of', 'grammatical input'), ('robustness', 'Feature_of', 'ungrammatical input')]
trues: [['ungrammatical input', 'Feature_of', 'robustness']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32936507936507936, 0.32936507936507936, 0.32936507936507936]
text: The formalism 's intended usage is to relate expressions of natural languages to their associated semantics represented in a logical form language , or to their translates in another natural language ; in summary , we intend it to allow TAGs to be used beyond their role in syntax proper .
result: triple_list: [["logical form language", "Used_for", "expressions of natural languages"], ["logical form language", "Conjunction", "natural language"], ["natural language", "Used_for", "expressions of natural languages"]]

pred: [('logical form language', 'Used_for', 'expressions of natural languages'), ('logical form language', 'Conjunction', 'natural language'), ('natural language', 'Used_for', 'expressions of natural languages')]
trues: [['logical form language', 'Used_for', 'semantics'], ['TAGs', 'Used_for', 'syntax proper']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32806324110671936, 0.32849604221635886, 0.32827949901120634]
text: The strong description and modeling properties of differential features make them useful tools that can be efficiently used as constraints for 3 -- D reconstruction .
result: triple_list: [["differential features", "Used_for", "3 -- D reconstruction"]]

pred: [('differential features', 'Used_for', '3 -- D reconstruction')]
trues: [['them', 'Used_for', '3 -- D reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32763157894736844, 0.32806324110671936, 0.32784726793943386]
text: Specifically , by leveraging the merits of the deep Long Short-Term Memory ( LSTM ) subnetwork , the proposed model automatically captures the complex long-range temporal dynamics , which naturally avoids the typical sliding window design and thus ensures high computational efficiency .
result: triple_list: [["deep Long Short-Term Memory ( LSTM ) subnetwork", "Used_for", "model"], ["model", "Used_for", "complex long-range temporal dynamics"]]

pred: [('deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'), ('model', 'Used_for', 'complex long-range temporal dynamics')]
trues: [['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'], ['long-range temporal dynamics', 'Feature_of', 'model']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32808398950131235, 0.328515111695138, 0.3282994090610637]
text: Unlike existing interest point detectors , which measure pixel-wise differences in image intensity , our detectors incorporate histogram-based representations , and thus can find image regions that present a distinct distribution in the neighborhood .
result: triple_list: [["histogram-based representations", "Used_for", "detectors"]]

pred: [('histogram-based representations', 'Used_for', 'detectors')]
trues: [['pixel-wise differences in image intensity', 'Evaluate_for', 'interest point detectors'], ['histogram-based representations', 'Part_of', 'detectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32765399737876805, 0.32765399737876805, 0.32765399737876805]
text: We present a novel model-based approach to recover the shapes and the poses of transparent objects from known motion .
result: triple_list: [["model-based approach", "Used_for", "shapes and the poses of transparent objects"], ["known motion", "Used_for", "model-based approach"]]

pred: [('model-based approach', 'Used_for', 'shapes and the poses of transparent objects'), ('known motion', 'Used_for', 'model-based approach')]
trues: [['model-based approach', 'Used_for', 'shapes and the poses of transparent objects'], ['known motion', 'Used_for', 'shapes and the poses of transparent objects']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3281045751633987, 0.3281045751633987, 0.3281045751633987]
text: Experiments show that these two strategies are effective in learning robust deep metrics for person re-identification , and accordingly our deep model significantly outperforms the state-of-the-art methods on several benchmarks of person re-identification .
result: triple_list: [["strategies", "Used_for", "deep metrics"], ["deep metrics", "Used_for", "person re-identification"], ["deep model", "Compare", "state-of-the-art methods"], ["person re-identification", "Evaluate_for", "deep model"], ["person re-identification", "Evaluate_for", "state-of-the-art methods"], ["benchmarks of person re-identification", "Evaluate_for", "deep model"], ["benchmarks of person re-identification", "Evaluate_for", "state-of-the-art methods"]]

pred: [('strategies', 'Used_for', 'deep metrics'), ('deep metrics', 'Used_for', 'person re-identification'), ('deep model', 'Compare', 'state-of-the-art methods'), ('person re-identification', 'Evaluate_for', 'deep model'), ('person re-identification', 'Evaluate_for', 'state-of-the-art methods'), ('benchmarks of person re-identification', 'Evaluate_for', 'deep model'), ('benchmarks of person re-identification', 'Evaluate_for', 'state-of-the-art methods')]
trues: [['robust deep metrics', 'Used_for', 'person re-identification'], ['deep model', 'Compare', 'state-of-the-art methods'], ['deep model', 'Used_for', 'person re-identification'], ['state-of-the-art methods', 'Used_for', 'person re-identification']]
metrics_sample: [0.14285714285714285, 0.25, 0.18181818181818182]
metrics_current: [0.32642487046632124, 0.32769830949284784, 0.327060350421804]
text: We suggest a new goal and evaluation criterion for word similarity measures .
result: triple_list: [["evaluation criterion", "Evaluate_for", "word similarity measures"]]

pred: [('evaluation criterion', 'Evaluate_for', 'word similarity measures')]
trues: [['evaluation criterion', 'Used_for', 'word similarity measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3260025873221216, 0.32727272727272727, 0.32663642255346725]
text: b ) The UV procedure is based on three different confidence tests , two based on acoustic measures and one founded on linguistic information , applied in a hierarchical structure .
result: triple_list: [["confidence tests", "Used_for", "UV procedure"], ["acoustic measures", "Used_for", "confidence tests"], ["acoustic measures", "Conjunction", "linguistic information"], ["linguistic information", "Used_for", "confidence tests"]]

pred: [('confidence tests', 'Used_for', 'UV procedure'), ('acoustic measures', 'Used_for', 'confidence tests'), ('acoustic measures', 'Conjunction', 'linguistic information'), ('linguistic information', 'Used_for', 'confidence tests')]
trues: [['confidence tests', 'Used_for', 'UV procedure'], ['confidence tests', 'Used_for', 'hierarchical structure'], ['two', 'Hyponym_of', 'confidence tests'], ['acoustic measures', 'Used_for', 'two'], ['one', 'Hyponym_of', 'confidence tests'], ['linguistic information', 'Used_for', 'one']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.3256113256113256, 0.32603092783505155, 0.32582099162910494]
text: While previous approaches relied on geometric , appearance , or correlation-based information for establishing correspondences between static cameras , they each have well-known limitations and are not extendable to wide-area settings with PTZ cameras .
result: triple_list: [["geometric , appearance , or correlation-based information", "Used_for", "approaches"]]

pred: [('geometric , appearance , or correlation-based information', 'Used_for', 'approaches')]
trues: [['geometric , appearance , or correlation-based information', 'Used_for', 'approaches']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3264781491002571, 0.3268983268983269, 0.32668810289389066]
text: Experiments using the SemCor and Senseval-3 data sets demonstrate that our ensembles yield significantly better results when compared with state-of-the-art .
result: triple_list: [["SemCor and Senseval-3 data sets", "Evaluate_for", "ensembles"], ["ensembles", "Compare", "state-of-the-art"]]

pred: [('SemCor and Senseval-3 data sets', 'Evaluate_for', 'ensembles'), ('ensembles', 'Compare', 'state-of-the-art')]
trues: [['SemCor and Senseval-3 data sets', 'Evaluate_for', 'ensembles'], ['SemCor and Senseval-3 data sets', 'Evaluate_for', 'state-of-the-art']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3269230769230769, 0.32734274711168165, 0.327132777421424]
text: It uses a powerful pattern-matching language to classify grs into frames hierarchically in a way that mirrors inheritance-based lexica .
result: triple_list: [["pattern-matching language", "Used_for", "It"], ["pattern-matching language", "Used_for", "frames"], ["inheritance-based lexica", "Used_for", "frames"]]

pred: [('pattern-matching language', 'Used_for', 'It'), ('pattern-matching language', 'Used_for', 'frames'), ('inheritance-based lexica', 'Used_for', 'frames')]
trues: [['pattern-matching language', 'Used_for', 'It'], ['pattern-matching language', 'Used_for', 'grs']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3269476372924649, 0.32778489116517284, 0.3273657289002558]
text: Simulated and experimental results show that our method recovers scene geometry with high subpixel precision , and that it can handle many challenges of active reconstruction systems .
result: triple_list: [["method", "Used_for", "scene geometry"], ["method", "Used_for", "active reconstruction systems"], ["subpixel precision", "Evaluate_for", "method"], ["challenges", "Feature_of", "active reconstruction systems"]]

pred: [('method', 'Used_for', 'scene geometry'), ('method', 'Used_for', 'active reconstruction systems'), ('subpixel precision', 'Evaluate_for', 'method'), ('challenges', 'Feature_of', 'active reconstruction systems')]
trues: [['method', 'Used_for', 'scene geometry'], ['subpixel precision', 'Feature_of', 'scene geometry'], ['it', 'Used_for', 'active reconstruction systems']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.32655654383735705, 0.3278061224489796, 0.32718014003819224]
text: It would also be effective as a move selector and move sorter for game tree search and as a training tool for Go players .
result: triple_list: [["It", "Used_for", "move selector"], ["It", "Used_for", "move sorter"], ["It", "Used_for", "game tree search"], ["It", "Used_for", "training tool"], ["It", "Used_for", "Go players"], ["move selector", "Conjunction", "move sorter"], ["move sorter", "Conjunction", "training tool"], ["training tool", "Used_for", "Go players"]]

pred: [('It', 'Used_for', 'move selector'), ('It', 'Used_for', 'move sorter'), ('It', 'Used_for', 'game tree search'), ('It', 'Used_for', 'training tool'), ('It', 'Used_for', 'Go players'), ('move selector', 'Conjunction', 'move sorter'), ('move sorter', 'Conjunction', 'training tool'), ('training tool', 'Used_for', 'Go players')]
trues: [['It', 'Used_for', 'move selector'], ['It', 'Used_for', 'move sorter'], ['It', 'Used_for', 'training tool'], ['move selector', 'Conjunction', 'move sorter'], ['move selector', 'Used_for', 'game tree search'], ['move sorter', 'Used_for', 'game tree search'], ['training tool', 'Used_for', 'Go players']]
metrics_sample: [0.625, 0.7142857142857143, 0.6666666666666666]
metrics_current: [0.32955974842767294, 0.33122629582806573, 0.3303909205548549]
text: It also shows that our method significantly outperforms the previous two dependency tree kernels on the 5 ACE relation major types .
result: triple_list: [["It", "Compare", "dependency tree kernels"], ["It", "Evaluate_for", "ACE relation major types"], ["ACE relation major types", "Evaluate_for", "dependency tree kernels"]]

pred: [('It', 'Compare', 'dependency tree kernels'), ('It', 'Evaluate_for', 'ACE relation major types'), ('ACE relation major types', 'Evaluate_for', 'dependency tree kernels')]
trues: [['method', 'Compare', 'dependency tree kernels']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3283208020050125, 0.33080808080808083, 0.329559748427673]
text: Many of the resources used are derived from data created by human beings out of an NLP context , especially regarding MT and reference translations .
result: triple_list: [["NLP context", "Feature_of", "resources"], ["NLP context", "Used_for", "MT"], ["NLP context", "Used_for", "reference translations"], ["MT", "Conjunction", "reference translations"]]

pred: [('NLP context', 'Feature_of', 'resources'), ('NLP context', 'Used_for', 'MT'), ('NLP context', 'Used_for', 'reference translations'), ('MT', 'Conjunction', 'reference translations')]
trues: [['MT', 'Hyponym_of', 'NLP'], ['MT', 'Conjunction', 'reference translations'], ['reference translations', 'Hyponym_of', 'NLP']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.327930174563591, 0.33081761006289306, 0.3293675641828428]
text: We propose a novel metric learning formulation called Weighted Approximate Rank Component Analysis ( WARCA ) .
result: triple_list: [["Weighted Approximate Rank Component Analysis ( WARCA )", "Hyponym_of", "metric learning formulation"]]

pred: [('Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation')]
trues: [['Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3287671232876712, 0.3316582914572864, 0.3302063789868668]
text: In this paper we specialize the projective unifocal , bifo-cal , and trifocal tensors to the affine case , and show how the tensors obtained relate to the registered tensors encountered in previous work .
result: triple_list: [["projective unifocal , bifo-cal , and trifocal tensors", "Used_for", "affine case"]]

pred: [('projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case')]
trues: [['projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32960199004975127, 0.3324968632371393, 0.3310430980637102]
text: We demonstrate that for certain field structured extraction tasks , such as classified advertisements and bibliographic citations , small amounts of prior knowledge can be used to learn effective models in a primarily unsupervised fashion .
result: triple_list: [["classified advertisements", "Conjunction", "bibliographic citations"], ["classified advertisements", "Hyponym_of", "field structured extraction tasks"], ["classified advertisements", "Conjunction", "bibliographic citations"], ["bibliographic citations", "Hyponym_of", "field structured extraction tasks"]]

pred: [('classified advertisements', 'Conjunction', 'bibliographic citations'), ('classified advertisements', 'Hyponym_of', 'field structured extraction tasks'), ('classified advertisements', 'Conjunction', 'bibliographic citations'), ('bibliographic citations', 'Hyponym_of', 'field structured extraction tasks')]
trues: [['classified advertisements', 'Hyponym_of', 'field structured extraction tasks'], ['classified advertisements', 'Conjunction', 'bibliographic citations'], ['bibliographic citations', 'Hyponym_of', 'field structured extraction tasks'], ['prior knowledge', 'Used_for', 'field structured extraction tasks']]
metrics_sample: [1.0, 0.75, 0.8571428571428571]
metrics_current: [0.33209417596034696, 0.33458177278401996, 0.3333333333333333]
text: The experimental results show that the proposed histogram-based interest point detectors perform particularly well for the tasks of matching textured scenes under blur and illumination changes , in terms of repeatability and distinctiveness .
result: triple_list: [["histogram-based interest point detectors", "Used_for", "matching textured scenes"], ["blur", "Feature_of", "matching textured scenes"], ["blur", "Conjunction", "illumination changes"], ["illumination changes", "Feature_of", "matching textured scenes"], ["repeatability", "Evaluate_for", "histogram-based interest point detectors"], ["repeatability", "Conjunction", "distinctiveness"], ["distinctiveness", "Evaluate_for", "histogram-based interest point detectors"]]

pred: [('histogram-based interest point detectors', 'Used_for', 'matching textured scenes'), ('blur', 'Feature_of', 'matching textured scenes'), ('blur', 'Conjunction', 'illumination changes'), ('illumination changes', 'Feature_of', 'matching textured scenes'), ('repeatability', 'Evaluate_for', 'histogram-based interest point detectors'), ('repeatability', 'Conjunction', 'distinctiveness'), ('distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors')]
trues: [['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['repeatability', 'Evaluate_for', 'histogram-based interest point detectors'], ['repeatability', 'Conjunction', 'distinctiveness'], ['distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors']]
metrics_sample: [0.5714285714285714, 1.0, 0.7272727272727273]
metrics_current: [0.33415233415233414, 0.337888198757764, 0.33600988264360715]
text: These models simulate the reading time advantage for parallel structures found in human data , and also yield a small increase in overall parsing accuracy .
result: triple_list: [["models", "Used_for", "reading time advantage"], ["reading time advantage", "Feature_of", "parallel structures"], ["models", "Used_for", "parsing accuracy"]]

pred: [('models', 'Used_for', 'reading time advantage'), ('reading time advantage', 'Feature_of', 'parallel structures'), ('models', 'Used_for', 'parsing accuracy')]
trues: [['parallel structures', 'Part_of', 'human data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3329253365973072, 0.337468982630273, 0.33518176216882317]
text: A demonstration ( in UNIX ) for Applied Natural Language Processing emphasizes components put to novel technical uses in intelligent computer-assisted morphological analysis ( ICALL ) , including disambiguated morphological analysis and lemmatized indexing for an aligned bilingual corpus of word examples .
result: triple_list: [["components", "Used_for", "intelligent computer-assisted morphological analysis ( ICALL )"], ["intelligent computer-assisted morphological analysis ( ICALL )", "Used_for", "disambiguated morphological analysis"], ["intelligent computer-assisted morphological analysis ( ICALL )", "Used_for", "lemmatized indexing"], ["disambiguated morphological analysis", "Conjunction", "lemmatized indexing"], ["aligned bilingual corpus of word examples", "Used_for", "lemmatized indexing"]]

pred: [('components', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'), ('intelligent computer-assisted morphological analysis ( ICALL )', 'Used_for', 'disambiguated morphological analysis'), ('intelligent computer-assisted morphological analysis ( ICALL )', 'Used_for', 'lemmatized indexing'), ('disambiguated morphological analysis', 'Conjunction', 'lemmatized indexing'), ('aligned bilingual corpus of word examples', 'Used_for', 'lemmatized indexing')]
trues: [['components', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['disambiguated morphological analysis', 'Hyponym_of', 'components'], ['disambiguated morphological analysis', 'Conjunction', 'lemmatized indexing'], ['disambiguated morphological analysis', 'Used_for', 'aligned bilingual corpus'], ['lemmatized indexing', 'Hyponym_of', 'components'], ['lemmatized indexing', 'Used_for', 'aligned bilingual corpus']]
metrics_sample: [0.4, 0.3333333333333333, 0.3636363636363636]
metrics_current: [0.3333333333333333, 0.3374384236453202, 0.33537331701346385]
text: In this paper , we discuss language model adaptation methods given a word list and a raw corpus .
result: triple_list: [["word list", "Used_for", "language model adaptation methods"], ["raw corpus", "Used_for", "language model adaptation methods"]]

pred: [('word list', 'Used_for', 'language model adaptation methods'), ('raw corpus', 'Used_for', 'language model adaptation methods')]
trues: [['word list', 'Used_for', 'language model adaptation methods'], ['word list', 'Conjunction', 'raw corpus'], ['raw corpus', 'Used_for', 'language model adaptation methods']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.33495145631067963, 0.33865030674846625, 0.336790726052471]
text: We describe a hierarchy of loss functions that incorporate different levels of linguistic information from word strings , word-to-word alignments from an MT system , and syntactic structure from parse-trees of source and target language sentences .
result: triple_list: [["word strings", "Conjunction", "word-to-word alignments"], ["word-to-word alignments", "Conjunction", "syntactic structure"], ["syntactic structure", "Part_of", "parse-trees"]]

pred: [('word strings', 'Conjunction', 'word-to-word alignments'), ('word-to-word alignments', 'Conjunction', 'syntactic structure'), ('syntactic structure', 'Part_of', 'parse-trees')]
trues: [['linguistic information', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Part_of', 'MT system'], ['syntactic structure', 'Used_for', 'loss functions'], ['parse-trees', 'Part_of', 'syntactic structure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33373639661426846, 0.33658536585365856, 0.3351548269581057]
text: Criteria for anaphora resolution within sentence boundaries rephrase major concepts from GB 's binding theory , while those for text-level anaphora incorporate an adapted version of a Grosz-Sidner-style focus model .
result: triple_list: [["binding theory", "Used_for", "anaphora resolution"], ["binding theory", "Conjunction", "Grosz-Sidner-style focus model"], ["Grosz-Sidner-style focus model", "Used_for", "text-level anaphora"]]

pred: [('binding theory', 'Used_for', 'anaphora resolution'), ('binding theory', 'Conjunction', 'Grosz-Sidner-style focus model'), ('Grosz-Sidner-style focus model', 'Used_for', 'text-level anaphora')]
trues: [['Criteria', 'Used_for', 'anaphora resolution within sentence boundaries'], ["GB 's binding theory", 'Used_for', 'Criteria'], ['those', 'Used_for', 'text-level anaphora'], ['Grosz-Sidner-style focus model', 'Part_of', 'those']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3325301204819277, 0.33495145631067963, 0.3337363966142684]
text: A new algorithm is proposed for novel view generation in one-to-one teleconferencing applications .
result: triple_list: [["algorithm", "Used_for", "novel view generation"], ["one-to-one teleconferencing applications", "Feature_of", "novel view generation"]]

pred: [('algorithm', 'Used_for', 'novel view generation'), ('one-to-one teleconferencing applications', 'Feature_of', 'novel view generation')]
trues: [['algorithm', 'Used_for', 'novel view generation'], ['novel view generation', 'Used_for', 'one-to-one teleconferencing applications']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3329326923076923, 0.3353510895883777, 0.33413751507840767]
text: Coedition of a natural language text and its representation in some interlingual form seems the best and simplest way to share text revision across languages .
result: triple_list: [["natural language text", "Conjunction", "interlingual form"]]

pred: [('natural language text', 'Conjunction', 'interlingual form')]
trues: [['Coedition', 'Used_for', 'text revision'], ['natural language text', 'Used_for', 'Coedition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3325330132052821, 0.33454106280193235, 0.33353401565322094]
text: In this paper We experimentally evaluate a trainable sentence planner for a spoken dialogue system by eliciting subjective human judgments .
result: triple_list: [["trainable sentence planner", "Used_for", "spoken dialogue system"], ["subjective human judgments", "Evaluate_for", "trainable sentence planner"]]

pred: [('trainable sentence planner', 'Used_for', 'spoken dialogue system'), ('subjective human judgments', 'Evaluate_for', 'trainable sentence planner')]
trues: [['trainable sentence planner', 'Used_for', 'spoken dialogue system'], ['subjective human judgments', 'Evaluate_for', 'trainable sentence planner']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3341317365269461, 0.336144578313253, 0.3351351351351351]
text: On the internal side , liaisons are established between elements of the text and the graph by using broadly available resources such as a LO-English or better a L0-UNL dictionary , a morphosyntactic parser of L0 , and a canonical graph2tree transformation .
result: triple_list: [["LO-English or better a L0-UNL dictionary", "Used_for", "elements of the text and the graph"], ["morphosyntactic parser of L0", "Used_for", "elements of the text and the graph"], ["morphosyntactic parser of L0", "Conjunction", "canonical graph2tree transformation"], ["canonical graph2tree transformation", "Used_for", "elements of the text and the graph"]]

pred: [('LO-English or better a L0-UNL dictionary', 'Used_for', 'elements of the text and the graph'), ('morphosyntactic parser of L0', 'Used_for', 'elements of the text and the graph'), ('morphosyntactic parser of L0', 'Conjunction', 'canonical graph2tree transformation'), ('canonical graph2tree transformation', 'Used_for', 'elements of the text and the graph')]
trues: [['resources', 'Used_for', 'liaisons'], ['LO-English or better a L0-UNL dictionary', 'Hyponym_of', 'resources'], ['LO-English or better a L0-UNL dictionary', 'Conjunction', 'morphosyntactic parser of L0'], ['morphosyntactic parser of L0', 'Hyponym_of', 'resources'], ['morphosyntactic parser of L0', 'Conjunction', 'canonical graph2tree transformation'], ['canonical graph2tree transformation', 'Hyponym_of', 'resources']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.33373063170441003, 0.3349282296650718, 0.33432835820895523]
text: This paper describes FERRET , an interactive question-answering ( Q/A ) system designed to address the challenges of integrating automatic Q/A applications into real-world environments .
result: triple_list: [["interactive question-answering ( Q/A ) system", "Used_for", "integrating automatic Q/A applications into real-world environments"]]

pred: [('interactive question-answering ( Q/A ) system', 'Used_for', 'integrating automatic Q/A applications into real-world environments')]
trues: [['FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'], ['FERRET', 'Used_for', 'integrating automatic Q/A applications into real-world environments']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3341288782816229, 0.33373063170441003]
text: Techniques for automatically training modules of a natural language generator have recently been proposed , but a fundamental concern is whether the quality of utterances produced with trainable components can compete with hand-crafted template-based or rule-based approaches .
result: triple_list: [["natural language generator", "Used_for", "automatically training modules"], ["hand-crafted template-based or rule-based approaches", "Compare", "trainable components"]]

pred: [('natural language generator', 'Used_for', 'automatically training modules'), ('hand-crafted template-based or rule-based approaches', 'Compare', 'trainable components')]
trues: [['Techniques', 'Used_for', 'automatically training modules'], ['automatically training modules', 'Part_of', 'natural language generator'], ['utterances', 'Evaluate_for', 'trainable components'], ['utterances', 'Evaluate_for', 'hand-crafted template-based or rule-based approaches'], ['trainable components', 'Compare', 'hand-crafted template-based or rule-based approaches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.332541567695962, 0.33214709371293, 0.3323442136498516]
text: We investigate and analyze the layers of various CNN models and extensively compare between them with the goal of discovering how the layers of distributed representations within CNNs represent object pose information and how this contradicts with object category representations .
result: triple_list: [["layers", "Part_of", "CNN models"]]

pred: [('layers', 'Part_of', 'CNN models')]
trues: [['layers', 'Part_of', 'CNN models'], ['layers of distributed representations', 'Part_of', 'CNNs'], ['layers of distributed representations', 'Used_for', 'object pose information'], ['this', 'Compare', 'object category representations']]
metrics_sample: [1.0, 0.25, 0.4]
metrics_current: [0.3333333333333333, 0.3317591499409681, 0.3325443786982248]
text: We use gray-level band-pass white noise patterns that increase robustness to indirect lighting and scene discontinuities .
result: triple_list: [["gray-level band-pass white noise patterns", "Used_for", "robustness"], ["indirect lighting", "Feature_of", "gray-level band-pass white noise patterns"], ["indirect lighting", "Conjunction", "scene discontinuities"], ["scene discontinuities", "Feature_of", "gray-level band-pass white noise patterns"]]

pred: [('gray-level band-pass white noise patterns', 'Used_for', 'robustness'), ('indirect lighting', 'Feature_of', 'gray-level band-pass white noise patterns'), ('indirect lighting', 'Conjunction', 'scene discontinuities'), ('scene discontinuities', 'Feature_of', 'gray-level band-pass white noise patterns')]
trues: [['robustness', 'Evaluate_for', 'gray-level band-pass white noise patterns'], ['indirect lighting', 'Feature_of', 'robustness'], ['indirect lighting', 'Conjunction', 'scene discontinuities'], ['scene discontinuities', 'Feature_of', 'robustness']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.33293978748524206, 0.33137485311398357, 0.33215547703180215]
text: We extract a set of heuristic principles from a corpus-based sample and formulate them as probabilistic Horn clauses .
result: triple_list: [["heuristic principles", "Part_of", "corpus-based sample"], ["probabilistic Horn clauses", "Used_for", "heuristic principles"]]

pred: [('heuristic principles', 'Part_of', 'corpus-based sample'), ('probabilistic Horn clauses', 'Used_for', 'heuristic principles')]
trues: [['corpus-based sample', 'Used_for', 'heuristic principles'], ['probabilistic Horn clauses', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3321554770318021, 0.3305978898007034, 0.3313748531139835]
text: Towards the modeling of the dynamic characteristics , optical flow is computed and utilized as a feature in a higher dimensional space .
result: triple_list: [["optical flow", "Used_for", "modeling of the dynamic characteristics"], ["optical flow", "Used_for", "feature"], ["feature", "Part_of", "higher dimensional space"]]

pred: [('optical flow', 'Used_for', 'modeling of the dynamic characteristics'), ('optical flow', 'Used_for', 'feature'), ('feature', 'Part_of', 'higher dimensional space')]
trues: [['optical flow', 'Used_for', 'modeling of the dynamic characteristics'], ['optical flow', 'Used_for', 'feature'], ['feature', 'Used_for', 'modeling of the dynamic characteristics'], ['higher dimensional space', 'Feature_of', 'feature']]
metrics_sample: [0.6666666666666666, 0.5, 0.5714285714285715]
metrics_current: [0.3333333333333333, 0.3313885647607935, 0.3323581041544763]
text: The two main contributions of this paper are : i ) a new type of three-plane graph for dense-stereo dynamic-programming , that encourages correct occlusion labeling ; ii ) a compact geometric derivation for novel-view synthesis by direct projection of the minimum-cost surface .
result: triple_list: [["three-plane graph", "Used_for", "dense-stereo dynamic-programming"], ["three-plane graph", "Used_for", "occlusion labeling"], ["geometric derivation", "Used_for", "novel-view synthesis"], ["minimum-cost surface", "Used_for", "geometric derivation"]]

pred: [('three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'), ('three-plane graph', 'Used_for', 'occlusion labeling'), ('geometric derivation', 'Used_for', 'novel-view synthesis'), ('minimum-cost surface', 'Used_for', 'geometric derivation')]
trues: [['three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'], ['dense-stereo dynamic-programming', 'Used_for', 'occlusion labeling'], ['compact geometric derivation', 'Used_for', 'novel-view synthesis'], ['direct projection of the minimum-cost surface', 'Used_for', 'compact geometric derivation']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.33294392523364486, 0.3310104529616725, 0.331974373907979]
text: Our main result is a first-order upper bound on the distance between any approximate joint triangularizer of the matrices in M ' and any exact joint triangularizer of the matrices in M .
result: triple_list: [["first-order upper bound", "Feature_of", "distance"], ["distance", "Evaluate_for", "approximate joint triangularizer of the matrices"], ["distance", "Evaluate_for", "exact joint triangularizer of the matrices"], ["approximate joint triangularizer of the matrices", "Conjunction", "exact joint triangularizer of the matrices"]]

pred: [('first-order upper bound', 'Feature_of', 'distance'), ('distance', 'Evaluate_for', 'approximate joint triangularizer of the matrices'), ('distance', 'Evaluate_for', 'exact joint triangularizer of the matrices'), ('approximate joint triangularizer of the matrices', 'Conjunction', 'exact joint triangularizer of the matrices')]
trues: [['approximate joint triangularizer', 'Conjunction', 'exact joint triangularizer']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3313953488372093, 0.3306264501160093, 0.3310104529616725]
text: An extension of our method to space-time interest point detection for action classification is also presented .
result: triple_list: [["method", "Used_for", "space-time interest point detection"], ["space-time interest point detection", "Used_for", "action classification"]]

pred: [('method', 'Used_for', 'space-time interest point detection'), ('space-time interest point detection', 'Used_for', 'action classification')]
trues: [['method', 'Used_for', 'space-time interest point detection'], ['space-time interest point detection', 'Used_for', 'action classification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3329466357308585, 0.33217592592592593, 0.33256083429895716]
text: Thus , our method can be applied with great benefit to language pairs for which only scarce resources are available .
result: triple_list: [["method", "Used_for", "language pairs"]]

pred: [('method', 'Used_for', 'language pairs')]
trues: [['scarce resources', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3325608342989571, 0.33179190751445087, 0.33217592592592593]
text: This paper describes a method for incorporating priming into an incremental probabilistic parser .
result: triple_list: [["method", "Used_for", "incremental probabilistic parser"]]

pred: [('method', 'Used_for', 'incremental probabilistic parser')]
trues: [['method', 'Used_for', 'priming'], ['priming', 'Used_for', 'incremental probabilistic parser']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33217592592592593, 0.33102652825836215, 0.3316002310803004]
text: However , they provide no guarantee of being more efficient than exhaustive search .
result: triple_list: [["exhaustive search", "Compare", "they"]]

pred: [('exhaustive search', 'Compare', 'they')]
trues: [['they', 'Compare', 'exhaustive search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33179190751445087, 0.33064516129032256, 0.33121754183496827]
text: With the rise of deep archi-tectures , the prime focus has been on object category recognition .
result: triple_list: [["deep archi-tectures", "Used_for", "object category recognition"]]

pred: [('deep archi-tectures', 'Used_for', 'object category recognition')]
trues: [['deep archi-tectures', 'Used_for', 'object category recognition']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3325635103926097, 0.33141542002301494, 0.3319884726224783]
text: We evaluate several proposals for constraining them , basing our assessment on computational tractability and explanatory adequacy .
result: triple_list: [["computational tractability", "Evaluate_for", "proposals"], ["computational tractability", "Conjunction", "explanatory adequacy"], ["explanatory adequacy", "Evaluate_for", "proposals"]]

pred: [('computational tractability', 'Evaluate_for', 'proposals'), ('computational tractability', 'Conjunction', 'explanatory adequacy'), ('explanatory adequacy', 'Evaluate_for', 'proposals')]
trues: [['computational tractability and explanatory adequacy', 'Evaluate_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33141542002301494, 0.3310344827586207, 0.3312248418631397]
text: Overall summarization quality of the proposed system is state-of-the-art , with guaranteed grammaticality of the system output due to the use of a constraint-based parser/generator .
result: triple_list: [["grammaticality", "Evaluate_for", "system output"], ["constraint-based parser/generator", "Used_for", "grammaticality"]]

pred: [('grammaticality', 'Evaluate_for', 'system output'), ('constraint-based parser/generator', 'Used_for', 'grammaticality')]
trues: [['summarization quality', 'Evaluate_for', 'system'], ['grammaticality', 'Evaluate_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.330654420206659, 0.32989690721649484, 0.3302752293577982]
text: The system is implemented entirely in Prolog , a programming language based on logic .
result: triple_list: [["Prolog", "Used_for", "system"], ["Prolog", "Hyponym_of", "programming language"], ["logic", "Used_for", "Prolog"]]

pred: [('Prolog', 'Used_for', 'system'), ('Prolog', 'Hyponym_of', 'programming language'), ('logic', 'Used_for', 'Prolog')]
trues: [['Prolog', 'Used_for', 'system'], ['Prolog', 'Hyponym_of', 'programming language'], ['logic', 'Used_for', 'programming language']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.3318077803203661, 0.3310502283105023, 0.3314285714285714]
text: Recent pool models of the inner hair cell synapse do not reproduce the dead time period after an intense stimulus , so we used visual inspection and automatic speech recognition ( ASR ) to investigate an offset adaptation ( OA ) model proposed by Zhang et al. [ 1 ] .
result: triple_list: [["pool models", "Used_for", "inner hair cell synapse"], ["dead time period", "Feature_of", "intense stimulus"], ["visual inspection", "Conjunction", "automatic speech recognition ( ASR )"], ["offset adaptation ( OA ) model", "Used_for", "pool models"]]

pred: [('pool models', 'Used_for', 'inner hair cell synapse'), ('dead time period', 'Feature_of', 'intense stimulus'), ('visual inspection', 'Conjunction', 'automatic speech recognition ( ASR )'), ('offset adaptation ( OA ) model', 'Used_for', 'pool models')]
trues: [['pool models', 'Used_for', 'inner hair cell synapse'], ['visual inspection', 'Conjunction', 'automatic speech recognition ( ASR )'], ['visual inspection', 'Used_for', 'offset adaptation ( OA ) model'], ['automatic speech recognition ( ASR )', 'Used_for', 'offset adaptation ( OA ) model']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3325740318906606, 0.33181818181818185, 0.3321956769055745]
text: This formalism is both elementary and powerful enough to strongly simulate many grammar formalisms , such as rewriting systems , dependency grammars , TAG , HPSG and LFG .
result: triple_list: [["rewriting systems", "Hyponym_of", "grammar formalisms"], ["rewriting systems", "Conjunction", "dependency grammars"], ["dependency grammars", "Hyponym_of", "grammar formalisms"], ["dependency grammars", "Conjunction", "TAG"], ["TAG", "Hyponym_of", "grammar formalisms"], ["TAG", "Conjunction", "HPSG"], ["HPSG", "Hyponym_of", "grammar formalisms"], ["HPSG", "Conjunction", "LFG"], ["LFG", "Hyponym_of", "grammar formalisms"]]

pred: [('rewriting systems', 'Hyponym_of', 'grammar formalisms'), ('rewriting systems', 'Conjunction', 'dependency grammars'), ('dependency grammars', 'Hyponym_of', 'grammar formalisms'), ('dependency grammars', 'Conjunction', 'TAG'), ('TAG', 'Hyponym_of', 'grammar formalisms'), ('TAG', 'Conjunction', 'HPSG'), ('HPSG', 'Hyponym_of', 'grammar formalisms'), ('HPSG', 'Conjunction', 'LFG'), ('LFG', 'Hyponym_of', 'grammar formalisms')]
trues: [['formalism', 'Used_for', 'grammar formalisms'], ['rewriting systems', 'Hyponym_of', 'grammar formalisms'], ['rewriting systems', 'Conjunction', 'dependency grammars'], ['dependency grammars', 'Hyponym_of', 'grammar formalisms'], ['dependency grammars', 'Conjunction', 'TAG'], ['TAG', 'Hyponym_of', 'grammar formalisms'], ['TAG', 'Conjunction', 'HPSG'], ['HPSG', 'Hyponym_of', 'grammar formalisms'], ['HPSG', 'Conjunction', 'LFG'], ['LFG', 'Hyponym_of', 'grammar formalisms']]
metrics_sample: [1.0, 0.9, 0.9473684210526316]
metrics_current: [0.33934611048478014, 0.3382022471910112, 0.33877321328081034]
text: We further demonstrate synthesis from a freely translating virtual camera .
result: triple_list: [["synthesizing", "Used_for", "freely translating virtual camera"]]

pred: [('synthesizing', 'Used_for', 'freely translating virtual camera')]
trues: [['translating virtual camera', 'Used_for', 'synthesis']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33896396396396394, 0.3378226711560045, 0.33839235525576167]
text: We present a strong detector based on combining a set of weak detectors .
result: triple_list: [["detector", "Used_for", "weak detectors"]]

pred: [('detector', 'Used_for', 'weak detectors')]
trues: [['detectors', 'Used_for', 'detector']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33858267716535434, 0.3374439461883408, 0.33801235261089274]
text: Sentence boundary detection in speech is important for enriching speech recognition output , making it easier for humans to read and downstream modules to process .
result: triple_list: [["Sentence boundary detection", "Used_for", "speech recognition output"]]

pred: [('Sentence boundary detection', 'Used_for', 'speech recognition output')]
trues: [['Sentence boundary detection', 'Used_for', 'speech recognition output'], ['speech', 'Used_for', 'Sentence boundary detection']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3393258426966292, 0.3378076062639821, 0.33856502242152464]
text: In this paper , we present an approach to rapidly creating pixel-accurate semantic label maps for images extracted from modern computer games .
result: triple_list: [["approach", "Used_for", "semantic label maps"], ["images", "Used_for", "semantic label maps"], ["computer games", "Used_for", "images"]]

pred: [('approach', 'Used_for', 'semantic label maps'), ('images', 'Used_for', 'semantic label maps'), ('computer games', 'Used_for', 'images')]
trues: [['approach', 'Used_for', 'pixel-accurate semantic label maps'], ['pixel-accurate semantic label maps', 'Used_for', 'images'], ['images', 'Part_of', 'modern computer games']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3381858902575588, 0.3366778149386845, 0.33743016759776534]
text: In addition to the high accuracy of the model , the use of smoothing in an unlexicalized parser allows us to better examine the interplay between smoothing and parsing results .
result: triple_list: [["smoothing", "Used_for", "unlexicalized parser"], ["smoothing", "Conjunction", "parsing"], ["parsing", "Used_for", "smoothing"]]

pred: [('smoothing', 'Used_for', 'unlexicalized parser'), ('smoothing', 'Conjunction', 'parsing'), ('parsing', 'Used_for', 'smoothing')]
trues: [['accuracy', 'Evaluate_for', 'model'], ['smoothing', 'Used_for', 'unlexicalized parser']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.33816964285714285, 0.3370411568409344, 0.33760445682451257]
text: Our experiments clearly indicate the potential of this dynamic representation for complete cursive handwriting recognition .
result: triple_list: [["dynamic representation", "Used_for", "complete cursive handwriting recognition"]]

pred: [('dynamic representation', 'Used_for', 'complete cursive handwriting recognition')]
trues: [['dynamic representation', 'Used_for', 'cursive handwriting recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3377926421404682, 0.33666666666666667, 0.337228714524207]
text: We believe that these evaluation techniques will provide information about both the human language learning process , the translation process and the development of machine translation systems .
result: triple_list: [["evaluation techniques", "Used_for", "human language learning process"], ["evaluation techniques", "Used_for", "translation process"], ["evaluation techniques", "Used_for", "machine translation systems"], ["human language learning process", "Conjunction", "translation process"], ["translation process", "Conjunction", "machine translation systems"]]

pred: [('evaluation techniques', 'Used_for', 'human language learning process'), ('evaluation techniques', 'Used_for', 'translation process'), ('evaluation techniques', 'Used_for', 'machine translation systems'), ('human language learning process', 'Conjunction', 'translation process'), ('translation process', 'Conjunction', 'machine translation systems')]
trues: [['evaluation techniques', 'Used_for', 'human language learning process'], ['evaluation techniques', 'Used_for', 'translation process'], ['evaluation techniques', 'Used_for', 'machine translation systems'], ['human language learning process', 'Conjunction', 'translation process'], ['translation process', 'Conjunction', 'machine translation systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34146341463414637, 0.34033149171270716, 0.340896513558384]
text: We investigate the verbal and nonverbal means for grounding , and propose a design for embodied conversational agents that relies on both kinds of signals to establish common ground in human-computer interaction .
result: triple_list: [["verbal and nonverbal means", "Used_for", "grounding"]]

pred: [('verbal and nonverbal means', 'Used_for', 'grounding')]
trues: [['verbal and nonverbal means', 'Used_for', 'grounding'], ['design', 'Used_for', 'embodied conversational agents'], ['common ground', 'Used_for', 'human-computer interaction']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.34219269102990035, 0.34030837004405284, 0.3412479293208172]
text: The psycholinguistic literature provides evidence for syntactic priming , i.e. , the tendency to repeat structures .
result: triple_list: [["syntactic priming", "Feature_of", "psycholinguistic literature"]]

pred: [('syntactic priming', 'Feature_of', 'psycholinguistic literature')]
trues: [['psycholinguistic literature', 'Used_for', 'syntactic priming']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3418141592920354, 0.33993399339933994, 0.3408714837286266]
text: This paper considers the problem of reconstructing the motion of a 3D articulated tree from 2D point correspondences subject to some temporal prior .
result: triple_list: [["2D point correspondences", "Used_for", "motion of a 3D articulated tree"], ["temporal prior", "Used_for", "2D point correspondences"]]

pred: [('2D point correspondences', 'Used_for', 'motion of a 3D articulated tree'), ('temporal prior', 'Used_for', '2D point correspondences')]
trues: [['2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34105960264900664, 0.3395604395604396, 0.3403083700440529]
text: We propose a multi-task end-to-end Joint Classification-Regression Recurrent Neural Network to better explore the action type and temporal localiza-tion information .
result: triple_list: [["multi-task end-to-end Joint Classification-Regression Recurrent Neural Network", "Used_for", "action type and temporal localiza-tion information"]]

pred: [('multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type and temporal localiza-tion information')]
trues: [['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type'], ['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'temporal localiza-tion information'], ['action type', 'Conjunction', 'temporal localiza-tion information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.340683572216097, 0.3384446878422782, 0.3395604395604396]
text: We test our algorithm on the detection task and the viewpoint classification task by using '' car '' category from both the Savarese et al. 2007 and PASCAL VOC 2006 datasets .
result: triple_list: [["detection task", "Conjunction", "viewpoint classification task"], ["'' car '' category", "Used_for", "detection task"], ["'' car '' category", "Used_for", "viewpoint classification task"], ["Savarese et al. 2007 and PASCAL VOC 2006 datasets", "Used_for", "'' car '' category"]]

pred: [('detection task', 'Conjunction', 'viewpoint classification task'), ("'' car '' category", 'Used_for', 'detection task'), ("'' car '' category", 'Used_for', 'viewpoint classification task'), ('Savarese et al. 2007 and PASCAL VOC 2006 datasets', 'Used_for', "'' car '' category")]
trues: [['algorithm', 'Used_for', 'detection task'], ['algorithm', 'Used_for', 'viewpoint classification task'], ['detection task', 'Conjunction', 'viewpoint classification task'], ['PASCAL VOC 2006 datasets', 'Evaluate_for', 'algorithm']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.3402854006586169, 0.33805888767720826, 0.33916849015317285]
text: This paper proposes a generic mathematical formalism for the combination of various structures : strings , trees , dags , graphs , and products of them .
result: triple_list: [["strings", "Conjunction", "trees"], ["strings", "Conjunction", "trees"], ["trees", "Conjunction", "dags"], ["dags", "Conjunction", "graphs"], ["graphs", "Conjunction", "products of them"]]

pred: [('strings', 'Conjunction', 'trees'), ('strings', 'Conjunction', 'trees'), ('trees', 'Conjunction', 'dags'), ('dags', 'Conjunction', 'graphs'), ('graphs', 'Conjunction', 'products of them')]
trues: [['strings', 'Hyponym_of', 'structures'], ['strings', 'Conjunction', 'trees'], ['trees', 'Hyponym_of', 'structures'], ['trees', 'Conjunction', 'dags'], ['dags', 'Hyponym_of', 'structures'], ['dags', 'Conjunction', 'graphs'], ['graphs', 'Hyponym_of', 'structures']]
metrics_sample: [0.75, 0.42857142857142855, 0.5454545454545454]
metrics_current: [0.34207650273224044, 0.33874458874458874, 0.3404023926046765]
text: The goal is to sample a small set of records over which evaluating aggregate queries can be done both efficiently and accurately .
result: triple_list: [["records", "Used_for", "aggregate queries"]]

pred: [('records', 'Used_for', 'aggregate queries')]
trues: [['aggregate queries', 'Evaluate_for', 'records']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34170305676855894, 0.33837837837837836, 0.3400325909831613]
text: The objective of this work is to recognize faces using video sequences both for training and recognition input , in a realistic , unconstrained setup in which lighting , pose and user motion pattern have a wide variability and face images are of low resolution .
result: triple_list: [["video sequences", "Used_for", "recognition"]]

pred: [('video sequences', 'Used_for', 'recognition')]
trues: [['lighting', 'Conjunction', 'pose'], ['pose', 'Conjunction', 'user motion pattern'], ['resolution', 'Feature_of', 'face images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34133042529989094, 0.33728448275862066, 0.3392953929539296]
text: We show promising results in both the detection and viewpoint classification tasks on these two challenging datasets .
result: triple_list: [["detection and viewpoint classification tasks", "Evaluate_for", "datasets"]]

pred: [('detection and viewpoint classification tasks', 'Evaluate_for', 'datasets')]
trues: [['datasets', 'Evaluate_for', 'detection and viewpoint classification tasks']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.340958605664488, 0.3369214208826695, 0.3389279913373037]
text: We introduce a method to accelerate the evaluation of object detection cascades with the help of a divide-and-conquer procedure in the space of candidate regions .
result: triple_list: [["divide-and-conquer procedure", "Used_for", "evaluation of object detection cascades"], ["space of candidate regions", "Evaluate_for", "divide-and-conquer procedure"]]

pred: [('divide-and-conquer procedure', 'Used_for', 'evaluation of object detection cascades'), ('space of candidate regions', 'Evaluate_for', 'divide-and-conquer procedure')]
trues: [['method', 'Used_for', 'evaluation of object detection cascades'], ['divide-and-conquer procedure', 'Used_for', 'method'], ['space of candidate regions', 'Feature_of', 'divide-and-conquer procedure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3402173913043478, 0.33583690987124465, 0.338012958963283]
text: A language learning experiment showed that assessors can differentiate native from non-native language essays in less than 100 words .
result: triple_list: [["language learning experiment", "Evaluate_for", "assessors"], ["native from non-native language essays", "Evaluate_for", "assessors"]]

pred: [('language learning experiment', 'Evaluate_for', 'assessors'), ('native from non-native language essays', 'Evaluate_for', 'assessors')]
trues: [['language learning', 'Evaluate_for', 'assessors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33947939262472887, 0.3354769560557342, 0.33746630727762805]
text: To improve topical blog post retrieval we incorporate textual credibility indicators in the retrieval process .
result: triple_list: [["textual credibility indicators", "Part_of", "retrieval process"]]

pred: [('textual credibility indicators', 'Part_of', 'retrieval process')]
trues: [['textual credibility indicators', 'Used_for', 'topical blog post retrieval'], ['textual credibility indicators', 'Part_of', 'retrieval process']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3401950162513543, 0.3358288770053476, 0.33799784714747044]
text: In this paper , we study the problem of online action detection from the streaming skeleton data .
result: triple_list: [["streaming skeleton data", "Used_for", "online action detection"]]

pred: [('streaming skeleton data', 'Used_for', 'online action detection')]
trues: [['streaming skeleton data', 'Used_for', 'online action detection']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3409090909090909, 0.33653846153846156, 0.3387096774193548]
text: Experiments on synthetic and real data show that both our triangulation and LAGC algorithms outperform state-of-the-art solutions in accuracy and visual quality .
result: triple_list: [["triangulation and LAGC algorithms", "Compare", "state-of-the-art solutions"], ["accuracy", "Evaluate_for", "triangulation and LAGC algorithms"], ["accuracy", "Evaluate_for", "state-of-the-art solutions"], ["accuracy", "Conjunction", "visual quality"], ["visual quality", "Evaluate_for", "triangulation and LAGC algorithms"], ["visual quality", "Evaluate_for", "state-of-the-art solutions"]]

pred: [('triangulation and LAGC algorithms', 'Compare', 'state-of-the-art solutions'), ('accuracy', 'Evaluate_for', 'triangulation and LAGC algorithms'), ('accuracy', 'Evaluate_for', 'state-of-the-art solutions'), ('accuracy', 'Conjunction', 'visual quality'), ('visual quality', 'Evaluate_for', 'triangulation and LAGC algorithms'), ('visual quality', 'Evaluate_for', 'state-of-the-art solutions')]
trues: [['synthetic and real data', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['synthetic and real data', 'Evaluate_for', 'state-of-the-art solutions'], ['triangulation and LAGC algorithms', 'Compare', 'state-of-the-art solutions'], ['accuracy', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['accuracy', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions']]
metrics_sample: [0.8333333333333334, 0.7142857142857143, 0.7692307692307692]
metrics_current: [0.34408602150537637, 0.33934252386002123, 0.3416978109983983]
text: A method for producing such phrases from a word-aligned corpora is proposed .
result: triple_list: [["method", "Used_for", "phrases"], ["word-aligned corpora", "Used_for", "method"]]

pred: [('method', 'Used_for', 'phrases'), ('word-aligned corpora', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'phrases'], ['word-aligned corpora', 'Evaluate_for', 'method']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3444206008583691, 0.3396825396825397, 0.34203516249334043]
text: This motor control representation enables successful word spotting and matching of cursive scripts .
result: triple_list: [["motor control representation", "Used_for", "word spotting"], ["motor control representation", "Used_for", "matching of cursive scripts"], ["cursive scripts", "Used_for", "word spotting"], ["cursive scripts", "Used_for", "matching of cursive scripts"]]

pred: [('motor control representation', 'Used_for', 'word spotting'), ('motor control representation', 'Used_for', 'matching of cursive scripts'), ('cursive scripts', 'Used_for', 'word spotting'), ('cursive scripts', 'Used_for', 'matching of cursive scripts')]
trues: [['motor control representation', 'Used_for', 'word spotting'], ['motor control representation', 'Used_for', 'matching of cursive scripts'], ['word spotting', 'Conjunction', 'matching of cursive scripts']]
metrics_sample: [0.5, 0.6666666666666666, 0.5714285714285715]
metrics_current: [0.3450854700854701, 0.3407172995780591, 0.34288747346072185]
text: We present an application of ambiguity packing and stochastic disambiguation techniques for Lexical-Functional Grammars ( LFG ) to the domain of sentence condensation .
result: triple_list: [["ambiguity packing and stochastic disambiguation techniques", "Used_for", "Lexical-Functional Grammars ( LFG )"], ["sentence condensation", "Feature_of", "domain"]]

pred: [('ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'), ('sentence condensation', 'Feature_of', 'domain')]
trues: [['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'], ['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'sentence condensation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.34541577825159914, 0.3410526315789474, 0.3432203389830509]
text: This phenomenon causes many image processing techniques to fail as they assume the presence of only one layer at each examined site e.g. motion estimation and object recognition .
result: triple_list: [["image processing techniques", "Used_for", "image processing techniques"], ["one layer", "Feature_of", "image processing techniques"], ["one layer", "Conjunction", "examined site"], ["motion estimation", "Hyponym_of", "image processing techniques"], ["motion estimation", "Conjunction", "object recognition"], ["object recognition", "Hyponym_of", "image processing techniques"]]

pred: [('image processing techniques', 'Used_for', 'image processing techniques'), ('one layer', 'Feature_of', 'image processing techniques'), ('one layer', 'Conjunction', 'examined site'), ('motion estimation', 'Hyponym_of', 'image processing techniques'), ('motion estimation', 'Conjunction', 'object recognition'), ('object recognition', 'Hyponym_of', 'image processing techniques')]
trues: [['motion estimation', 'Conjunction', 'object recognition']]
metrics_sample: [0.16666666666666666, 1.0, 0.2857142857142857]
metrics_current: [0.3442796610169492, 0.34174553101997895, 0.34300791556728233]
text: We introduce a novel method of shape constrained image segmentation which is based on mixtures of feature distributions for color and texture as well as probabilistic shape knowledge .
result: triple_list: [["method", "Used_for", "shape constrained image segmentation"], ["feature distributions", "Used_for", "shape constrained image segmentation"], ["feature distributions", "Conjunction", "probabilistic shape knowledge"], ["color", "Feature_of", "feature distributions"], ["color", "Conjunction", "texture"], ["texture", "Feature_of", "feature distributions"]]

pred: [('method', 'Used_for', 'shape constrained image segmentation'), ('feature distributions', 'Used_for', 'shape constrained image segmentation'), ('feature distributions', 'Conjunction', 'probabilistic shape knowledge'), ('color', 'Feature_of', 'feature distributions'), ('color', 'Conjunction', 'texture'), ('texture', 'Feature_of', 'feature distributions')]
trues: [['method', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Used_for', 'method'], ['mixtures of feature distributions', 'Used_for', 'color'], ['mixtures of feature distributions', 'Used_for', 'texture'], ['mixtures of feature distributions', 'Used_for', 'probabilistic shape knowledge'], ['color', 'Conjunction', 'texture'], ['texture', 'Conjunction', 'probabilistic shape knowledge']]
metrics_sample: [0.3333333333333333, 0.2857142857142857, 0.30769230769230765]
metrics_current: [0.34421052631578947, 0.34133611691022964, 0.34276729559748426]
text: Machine transliteration/back-transliteration plays an important role in many multilingual speech and language applications .
result: triple_list: [["Machine transliteration/back-transliteration", "Used_for", "multilingual speech and language applications"]]

pred: [('Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications')]
trues: [['Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3449001051524711, 0.3420229405630866, 0.34345549738219894]
text: We investigate the problem of learning to predict moves in the board game of Go from game records of expert players .
result: triple_list: [["game records of expert players", "Used_for", "learning"]]

pred: [('game records of expert players', 'Used_for', 'learning')]
trues: [['game records of expert players', 'Used_for', 'board game of Go']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3445378151260504, 0.3416666666666667, 0.34309623430962344]
text: A statistical translation model is also presented that deals such phrases , as well as a training method based on the maximization of translation accuracy , as measured with the NIST evaluation metric .
result: triple_list: [["statistical translation model", "Used_for", "phrases"], ["statistical translation model", "Conjunction", "training method"], ["NIST evaluation metric", "Evaluate_for", "translation accuracy"]]

pred: [('statistical translation model', 'Used_for', 'phrases'), ('statistical translation model', 'Conjunction', 'training method'), ('NIST evaluation metric', 'Evaluate_for', 'translation accuracy')]
trues: [['statistical translation model', 'Used_for', 'phrases'], ['maximization of translation accuracy', 'Used_for', 'training method'], ['NIST evaluation metric', 'Evaluate_for', 'statistical translation model']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.34450261780104713, 0.34164070612668745, 0.34306569343065696]
text: Using these ideas together , the resulting tagger gives a 97.24 % accuracy on the Penn Treebank WSJ , an error reduction of 4.4 % on the best previous single automatically learned tagging result .
result: triple_list: [["accuracy", "Evalu_for", "tagger"], ["accuracy", "Evalu_for", "Penn Treebank WSJ"], ["Penn Treebank WSJ", "Evalu_for", "tagger"], ["error reduction", "Evalu_for", "tagger"], ["error reduction", "Evalu_for", "single automatically learned tagging result"]]

pred: [('accuracy', 'Evalu_for', 'tagger'), ('accuracy', 'Evalu_for', 'Penn Treebank WSJ'), ('Penn Treebank WSJ', 'Evalu_for', 'tagger'), ('error reduction', 'Evalu_for', 'tagger'), ('error reduction', 'Evalu_for', 'single automatically learned tagging result')]
trues: [['accuracy', 'Evaluate_for', 'tagger'], ['Penn Treebank WSJ', 'Evaluate_for', 'tagger'], ['error', 'Evaluate_for', 'tagger']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34270833333333334, 0.34057971014492755, 0.34164070612668745]
text: MINPRAN 's properties are connrmed experimentally on synthetic data and compare favorably to least median of squares .
result: triple_list: [["synthetic data", "Evaluate_for", "MINPRAN"], ["synthetic data", "Evaluate_for", "least median of squares"]]

pred: [('synthetic data', 'Evaluate_for', 'MINPRAN'), ('synthetic data', 'Evaluate_for', 'least median of squares')]
trues: [['synthetic data', 'Evaluate_for', 'MINPRAN'], ['least median of squares', 'Compare', 'MINPRAN']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.34303534303534305, 0.3409090909090909, 0.34196891191709844]
text: It is based on a weakly supervised dependency parser that can model speech syntax without relying on any annotated training corpus .
result: triple_list: [["weakly supervised dependency parser", "Used_for", "speech syntax"]]

pred: [('weakly supervised dependency parser', 'Used_for', 'speech syntax')]
trues: [['weakly supervised dependency parser', 'Used_for', 'speech syntax']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34371754932502596, 0.3415892672858617, 0.34265010351966874]
text: Our study reveals that the proposed method not only reduces an extensive system development effort but also improves the transliteration accuracy significantly .
result: triple_list: [["method", "Used_for", "transliteration accuracy"]]

pred: [('method', 'Used_for', 'transliteration accuracy')]
trues: [['transliteration accuracy', 'Evaluate_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3433609958506224, 0.34123711340206186, 0.3422957600827301]
text: One remarkable feature of this model is that it has allowed us to derive an efficient algorithm based on powerful statistical methods for estimating the Fujisaki-model parameters from raw F0 contours .
result: triple_list: [["algorithm", "Used_for", "Fujisaki-model parameters"], ["statistical methods", "Used_for", "algorithm"], ["raw F0 contours", "Used_for", "algorithm"]]

pred: [('algorithm', 'Used_for', 'Fujisaki-model parameters'), ('statistical methods', 'Used_for', 'algorithm'), ('raw F0 contours', 'Used_for', 'algorithm')]
trues: [['remarkable feature', 'Feature_of', 'model'], ['algorithm', 'Used_for', 'Fujisaki-model parameters'], ['statistical methods', 'Used_for', 'algorithm'], ['raw F0 contours', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.6666666666666666, 0.5, 0.5714285714285715]
metrics_current: [0.344364012409514, 0.34188911704312114, 0.3431221020092736]