text: In contrast , object pose estimation using these approaches has received relatively less attention .
result: triple_list: [["approaches", "Used_for", "object pose estimation"]]
pred: [('approaches', 'Used_for', 'object pose estimation')]
trues: [['approaches', 'Used_for', 'object pose estimation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [1.0, 1.0, 1.0]
text: Language resource quality is crucial in NLP .
result: triple_list: [["Language resource quality", "Feature_of", "NLP"]]
pred: [('Language resource quality', 'Feature_of', 'NLP')]
trues: [['Language resource quality', 'Feature_of', 'NLP']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [1.0, 1.0, 1.0]
text: This paper presents a phrase-based statistical machine translation method , based on non-contiguous phrases , i.e. phrases with gaps .
result: triple_list: [["phrase-based statistical machine translation method", "Used_for", "non-contiguous phrases"]]
pred: [('phrase-based statistical machine translation method', 'Used_for', 'non-contiguous phrases')]
trues: [['non-contiguous phrases', 'Used_for', 'phrase-based statistical machine translation method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
text: Bayesian inference then samples the rules , disambiguating and combining them to create complex tree structures that maximize a discriminative model 's posterior on a target unlabeled corpus .
result: triple_list: [["Bayesian inference", "Used_for", "rules"], ["discriminative model", "Evaluate_for", "rules"]]
pred: [('Bayesian inference', 'Used_for', 'rules'), ('discriminative model', 'Evaluate_for', 'rules')]
trues: [['Bayesian inference', 'Used_for', 'rules'], ['them', 'Used_for', 'complex tree structures'], ['complex tree structures', 'Used_for', "discriminative model 's posterior"], ['unlabeled corpus', 'Used_for', "discriminative model 's posterior"]]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.6, 0.42857142857142855, 0.5]
text: A domain independent model is proposed for the automated interpretation of nominal compounds in English .
result: triple_list: [["domain independent model", "Used_for", "automated interpretation of nominal compounds"], ["English", "Used_for", "automated interpretation of nominal compounds"]]
pred: [('domain independent model', 'Used_for', 'automated interpretation of nominal compounds'), ('English', 'Used_for', 'automated interpretation of nominal compounds')]
trues: [['domain independent model', 'Used_for', 'automated interpretation of nominal compounds'], ['English', 'Feature_of', 'nominal compounds']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.5714285714285714, 0.4444444444444444, 0.5]
text: In this paper , we present an unlexicalized parser for German which employs smoothing and suffix analysis to achieve a labelled bracket F-score of 76.2 , higher than previously reported results on the NEGRA corpus .
result: triple_list: [["unlexicalized parser", "Used_for", "German"], ["smoothing", "Used_for", "unlexicalized parser"], ["smoothing", "Conjunction", "suffix analysis"], ["suffix analysis", "Used_for", "unlexicalized parser"], ["labelled bracket F-score", "Evaluate_for", "unlexicalized parser"], ["NEGRA corpus", "Evaluate_for", "unlexicalized parser"]]
pred: [('unlexicalized parser', 'Used_for', 'German'), ('smoothing', 'Used_for', 'unlexicalized parser'), ('smoothing', 'Conjunction', 'suffix analysis'), ('suffix analysis', 'Used_for', 'unlexicalized parser'), ('labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'), ('NEGRA corpus', 'Evaluate_for', 'unlexicalized parser')]
trues: [['unlexicalized parser', 'Used_for', 'German'], ['smoothing', 'Used_for', 'unlexicalized parser'], ['smoothing', 'Conjunction', 'suffix analysis'], ['suffix analysis', 'Used_for', 'unlexicalized parser'], ['labelled bracket F-score', 'Evaluate_for', 'unlexicalized parser'], ['NEGRA corpus', 'Evaluate_for', 'unlexicalized parser']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.7692307692307693, 0.6666666666666666, 0.7142857142857142]
text: Our approach to the Multi-lingual Evaluation Task ( MET ) for Japanese text is to consider the given task as a morphological analysis problem in Japanese .
result: triple_list: [["approach", "Used_for", "Multi-lingual Evaluation Task ( MET ) for Japanese text"], ["morphological analysis problem", "Used_for", "Multi-lingual Evaluation Task ( MET ) for Japanese text"], ["Japanese", "Used_for", "morphological analysis problem"]]
pred: [('approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET ) for Japanese text'), ('morphological analysis problem', 'Used_for', 'Multi-lingual Evaluation Task ( MET ) for Japanese text'), ('Japanese', 'Used_for', 'morphological analysis problem')]
trues: [['approach', 'Used_for', 'Multi-lingual Evaluation Task ( MET )'], ['Multi-lingual Evaluation Task ( MET )', 'Used_for', 'Japanese text'], ['morphological analysis problem', 'Used_for', 'task'], ['Japanese', 'Used_for', 'morphological analysis problem']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.6875, 0.5789473684210527, 0.6285714285714286]
text: This paper proposes a generic mathematical formalism for the combination of various structures : strings , trees , dags , graphs , and products of them .
result: triple_list: [["graphs", "Hyponym_of", "structures"], ["graphs", "Conjunction", "products of them"]]
pred: [('graphs', 'Hyponym_of', 'structures'), ('graphs', 'Conjunction', 'products of them')]
trues: [['strings', 'Hyponym_of', 'structures'], ['strings', 'Conjunction', 'trees'], ['trees', 'Hyponym_of', 'structures'], ['trees', 'Conjunction', 'dags'], ['dags', 'Hyponym_of', 'structures'], ['dags', 'Conjunction', 'graphs'], ['graphs', 'Hyponym_of', 'structures']]
metrics_sample: [0.5, 0.14285714285714285, 0.22222222222222224]
metrics_current: [0.6666666666666666, 0.46153846153846156, 0.5454545454545455]
text: Listen-Communicate-Show ( LCS ) is a new paradigm for human interaction with data sources .
result: triple_list: [["human interaction", "Used_for", "data sources"]]
pred: [('human interaction', 'Used_for', 'data sources')]
trues: [['Listen-Communicate-Show ( LCS )', 'Used_for', 'human interaction with data sources']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.631578947368421, 0.4444444444444444, 0.5217391304347826]
text: We propose a multi-task end-to-end Joint Classification-Regression Recurrent Neural Network to better explore the action type and temporal localiza-tion information .
result: triple_list: [["multi-task end-to-end Joint Classification-Regression Recurrent Neural Network", "Used_for", "action type"], ["multi-task end-to-end Joint Classification-Regression Recurrent Neural Network", "Used_for", "temporal localiza-tion information"], ["action type", "Conjunction", "temporal localiza-tion information"]]
pred: [('multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type'), ('multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'temporal localiza-tion information'), ('action type', 'Conjunction', 'temporal localiza-tion information')]
trues: [['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'action type'], ['multi-task end-to-end Joint Classification-Regression Recurrent Neural Network', 'Used_for', 'temporal localiza-tion information'], ['action type', 'Conjunction', 'temporal localiza-tion information']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.6818181818181818, 0.5, 0.576923076923077]
text: We propose to incorporate a priori geometric constraints in a 3 -- D stereo reconstruction scheme to cope with the many cases where image information alone is not sufficient to accurately recover 3 -- D shape .
result: triple_list: [["3 -- D stereo reconstruction scheme", "Used_for", "geometric constraints"], ["geometric constraints", "Feature_of", "3 -- D stereo reconstruction scheme"], ["3 -- D stereo reconstruction scheme", "Used_for", "accurately recover 3 -- D shape"]]
pred: [('3 -- D stereo reconstruction scheme', 'Used_for', 'geometric constraints'), ('geometric constraints', 'Feature_of', '3 -- D stereo reconstruction scheme'), ('3 -- D stereo reconstruction scheme', 'Used_for', 'accurately recover 3 -- D shape')]
trues: [['priori geometric constraints', 'Part_of', '3 -- D stereo reconstruction scheme'], ['image information', 'Used_for', '3 -- D shape']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.6, 0.46875, 0.5263157894736842]
text: Contrary to most of the existing mixture of viewpoints models , our model establishes explicit correspondences of parts across different viewpoints of the object class .
result: triple_list: [["viewpoints models", "Compare", "model"], ["parts", "Part_of", "viewpoints models"], ["parts", "Part_of", "model"]]
pred: [('viewpoints models', 'Compare', 'model'), ('parts', 'Part_of', 'viewpoints models'), ('parts', 'Part_of', 'model')]
trues: [['model', 'Compare', 'mixture of viewpoints models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.5357142857142857, 0.45454545454545453, 0.49180327868852464]
text: It works by calculating eigenvectors of an adjacency graph 's Laplacian to recover a submanifold of data from a high dimensionality space and then performing cluster number estimation on the eigenvectors .
result: triple_list: [["eigenvectors", "Used_for", "submanifold of data"], ["eigenvectors", "Used_for", "cluster number estimation"], ["high dimensionality space", "Feature_of", "submanifold of data"]]
pred: [('eigenvectors', 'Used_for', 'submanifold of data'), ('eigenvectors', 'Used_for', 'cluster number estimation'), ('high dimensionality space', 'Feature_of', 'submanifold of data')]
trues: [['It', 'Used_for', 'submanifold'], ['eigenvectors', 'Used_for', 'It'], ["adjacency graph 's Laplacian", 'Feature_of', 'eigenvectors'], ['high dimensionality space', 'Used_for', 'submanifold'], ['cluster number estimation', 'Used_for', 'It'], ['cluster number estimation', 'Used_for', 'eigenvectors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4838709677419355, 0.38461538461538464, 0.4285714285714286]
text: An extension of our method to space-time interest point detection for action classification is also presented .
result: triple_list: [["method", "Used_for", "space-time interest point detection"], ["space-time interest point detection", "Used_for", "action classification"]]
pred: [('method', 'Used_for', 'space-time interest point detection'), ('space-time interest point detection', 'Used_for', 'action classification')]
trues: [['method', 'Used_for', 'space-time interest point detection'], ['space-time interest point detection', 'Used_for', 'action classification']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.5151515151515151, 0.4146341463414634, 0.4594594594594595]
text: In this paper we present a new UV procedure with two major features : a ) Confidence tests are applied to decoded string hypotheses obtained from using word and garbage models that represent OOV words and noises .
result: triple_list: [["UV procedure", "Used_for", "Confidence tests"], ["word and garbage models", "Used_for", "Confidence tests"]]
pred: [('UV procedure', 'Used_for', 'Confidence tests'), ('word and garbage models', 'Used_for', 'Confidence tests')]
trues: [['Confidence tests', 'Used_for', 'decoded string hypotheses'], ['noises', 'Conjunction', 'OOV words']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4857142857142857, 0.3953488372093023, 0.43589743589743585]
text: We compare our results to state of the art methods such as mi-cro phase shifting and modulated phase shifting .
result: triple_list: [["mi-cro phase shifting", "Hyponym_of", "methods"], ["mi-cro phase shifting", "Conjunction", "modulated phase shifting"], ["modulated phase shifting", "Hyponym_of", "methods"]]
pred: [('mi-cro phase shifting', 'Hyponym_of', 'methods'), ('mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'), ('modulated phase shifting', 'Hyponym_of', 'methods')]
trues: [['mi-cro phase shifting', 'Hyponym_of', 'state of the art methods'], ['mi-cro phase shifting', 'Conjunction', 'modulated phase shifting'], ['modulated phase shifting', 'Hyponym_of', 'state of the art methods']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.47368421052631576, 0.391304347826087, 0.42857142857142855]
text: We investigate and analyze the layers of various CNN models and extensively compare between them with the goal of discovering how the layers of distributed representations within CNNs represent object pose information and how this contradicts with object category representations .
result: triple_list: [["CNN models", "Used_for", "layers of distributed representations"], ["layers of distributed representations", "Compare", "object category representations"], ["object pose information", "Feature_of", "distributed representations"], ["object category representations", "Feature_of", "distributed representations"]]
pred: [('CNN models', 'Used_for', 'layers of distributed representations'), ('layers of distributed representations', 'Compare', 'object category representations'), ('object pose information', 'Feature_of', 'distributed representations'), ('object category representations', 'Feature_of', 'distributed representations')]
trues: [['layers', 'Part_of', 'CNN models'], ['layers of distributed representations', 'Part_of', 'CNNs'], ['layers of distributed representations', 'Used_for', 'object pose information'], ['this', 'Compare', 'object category representations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.42857142857142855, 0.36, 0.391304347826087]
text: Online action detection goes one step further and is more challenging , which identifies the action type and localizes the action positions on the fly from the untrimmed stream .
result: triple_list: [["Online action detection", "Compare", "action type"], ["Online action detection", "Compare", "action positions"], ["action type", "Conjunction", "action positions"]]
pred: [('Online action detection', 'Compare', 'action type'), ('Online action detection', 'Compare', 'action positions'), ('action type', 'Conjunction', 'action positions')]
trues: [['Online action detection', 'Used_for', 'action type'], ['Online action detection', 'Used_for', 'action positions'], ['action type', 'Conjunction', 'action positions'], ['untrimmed stream', 'Used_for', 'Online action detection']]
metrics_sample: [0.3333333333333333, 0.25, 0.28571428571428575]
metrics_current: [0.4222222222222222, 0.35185185185185186, 0.3838383838383838]
text: Techniques for automatically training modules of a natural language generator have recently been proposed , but a fundamental concern is whether the quality of utterances produced with trainable components can compete with hand-crafted template-based or rule-based approaches .
result: triple_list: [["automatically training modules", "Used_for", "natural language generator"]]
pred: [('automatically training modules', 'Used_for', 'natural language generator')]
trues: [['Techniques', 'Used_for', 'automatically training modules'], ['automatically training modules', 'Part_of', 'natural language generator'], ['utterances', 'Evaluate_for', 'trainable components'], ['utterances', 'Evaluate_for', 'hand-crafted template-based or rule-based approaches'], ['trainable components', 'Compare', 'hand-crafted template-based or rule-based approaches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.41304347826086957, 0.3220338983050847, 0.3619047619047619]
text: Recognition of proper nouns in Japanese text has been studied as a part of the more general problem of morphological analysis in Japanese text processing ( [ 1 ] [ 2 ] ) .
result: triple_list: [["problem", "Part_of", "morphological analysis"], ["problem", "Feature_of", "morphological analysis"], ["morphological analysis", "Used_for", "Japanese text processing"]]
pred: [('problem', 'Part_of', 'morphological analysis'), ('problem', 'Feature_of', 'morphological analysis'), ('morphological analysis', 'Used_for', 'Japanese text processing')]
trues: [['Recognition of proper nouns', 'Part_of', 'morphological analysis'], ['proper nouns', 'Part_of', 'Japanese text'], ['morphological analysis', 'Used_for', 'Japanese text processing']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.40816326530612246, 0.3225806451612903, 0.3603603603603604]
text: We integrate a spoken language understanding system with intelligent mobile agents that mediate between users and information sources .
result: triple_list: [["spoken language understanding system", "Conjunction", "intelligent mobile agents"]]
pred: [('spoken language understanding system', 'Conjunction', 'intelligent mobile agents')]
trues: [['intelligent mobile agents', 'Part_of', 'spoken language understanding system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.4, 0.31746031746031744, 0.35398230088495575]
text: Using these ideas together , the resulting tagger gives a 97.24 % accuracy on the Penn Treebank WSJ , an error reduction of 4.4 % on the best previous single automatically learned tagging result .
result: triple_list: [["tagger", "Used_for", "Penn Treebank WSJ"]]
pred: [('tagger', 'Used_for', 'Penn Treebank WSJ')]
trues: [['accuracy', 'Evaluate_for', 'tagger'], ['Penn Treebank WSJ', 'Evaluate_for', 'tagger'], ['error', 'Evaluate_for', 'tagger']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.39215686274509803, 0.30303030303030304, 0.3418803418803419]
text: In particular there are three areas of novelty : ( i ) we show how a photometric model of image formation can be combined with a statistical model of generic face appearance variation , learnt offline , to generalize in the presence of extreme illumination changes ; ( ii ) we use the smoothness of geodesically local appearance manifold structure and a robust same-identity likelihood to achieve invariance to unseen head poses ; and ( iii ) we introduce an accurate video sequence '' reillumination '' algorithm to achieve robustness to face motion patterns in video .
result: triple_list: [["photometric model of image formation", "Conjunction", "statistical model of generic face appearance variation"], ["statistical model of generic face appearance variation", "Conjunction", "invariance to unseen head poses"], ["invariance to unseen head poses", "Conjunction", "accurate video sequence '' reillumination '' algorithm"], ["accurate video sequence '' reillumination '' algorithm", "Conjunction", "robustness to face motion patterns"]]
pred: [('photometric model of image formation', 'Conjunction', 'statistical model of generic face appearance variation'), ('statistical model of generic face appearance variation', 'Conjunction', 'invariance to unseen head poses'), ('invariance to unseen head poses', 'Conjunction', "accurate video sequence '' reillumination '' algorithm"), ("accurate video sequence '' reillumination '' algorithm", 'Conjunction', 'robustness to face motion patterns')]
trues: [['photometric model', 'Used_for', 'image formation'], ['photometric model', 'Conjunction', 'statistical model'], ['statistical model', 'Used_for', 'generic face appearance variation'], ['statistical model', 'Used_for', 'extreme illumination changes'], ['smoothness', 'Feature_of', 'geodesically local appearance manifold structure'], ['geodesically local appearance manifold structure', 'Conjunction', 'robust same-identity likelihood'], ['robustness', 'Evaluate_for', "video sequence '' reillumination '' algorithm"], ['face motion patterns', 'Feature_of', 'robustness'], ['face motion patterns', 'Part_of', 'video']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.36363636363636365, 0.26666666666666666, 0.30769230769230765]
text: Our extensive experimental results significantly improve over both uniform sampling and standard stratified sampling which are de-facto the industry standards .
result: triple_list: [["uniform sampling", "Hyponym_of", "method"], ["uniform sampling", "Conjunction", "stratified sampling"], ["stratified sampling", "Hyponym_of", "method"], ["stratified sampling", "Conjunction", "method"], ["method", "Compare", "uniform sampling"]]
pred: [('uniform sampling', 'Hyponym_of', 'method'), ('uniform sampling', 'Conjunction', 'stratified sampling'), ('stratified sampling', 'Hyponym_of', 'method'), ('stratified sampling', 'Conjunction', 'method'), ('method', 'Compare', 'uniform sampling')]
trues: [['uniform sampling', 'Conjunction', 'stratified sampling']]
metrics_sample: [0.2, 1.0, 0.33333333333333337]
metrics_current: [0.35, 0.27631578947368424, 0.3088235294117648]
text: Specifically , we show how to incorporate a simple prior on the distribution of natural images into support vector machines .
result: triple_list: [["prior", "Feature_of", "distribution of natural images"], ["distribution of natural images", "Used_for", "support vector machines"]]
pred: [('prior', 'Feature_of', 'distribution of natural images'), ('distribution of natural images', 'Used_for', 'support vector machines')]
trues: [['prior on the distribution of natural images', 'Used_for', 'support vector machines']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3387096774193548, 0.2727272727272727, 0.302158273381295]
text: We show promising results in both the detection and viewpoint classification tasks on these two challenging datasets .
result: triple_list: [["detection and viewpoint classification tasks", "Evaluate_for", "datasets"]]
pred: [('detection and viewpoint classification tasks', 'Evaluate_for', 'datasets')]
trues: [['datasets', 'Evaluate_for', 'detection and viewpoint classification tasks']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.2692307692307692, 0.2978723404255319]
text: This statistical approach aims to minimize expected loss of translation errors under loss functions that measure translation performance .
result: triple_list: [["loss functions", "Used_for", "translation performance"]]
pred: [('loss functions', 'Used_for', 'translation performance')]
trues: [['loss functions', 'Evaluate_for', 'translation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.328125, 0.26582278481012656, 0.2937062937062937]
text: Our approach is based on the iterative deformation of a 3 -- D surface mesh to minimize an objective function .
result: triple_list: [["iterative deformation", "Used_for", "3 -- D surface mesh"], ["objective function", "Feature_of", "iterative deformation"]]
pred: [('iterative deformation', 'Used_for', '3 -- D surface mesh'), ('objective function', 'Feature_of', 'iterative deformation')]
trues: [['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'approach'], ['iterative deformation of a 3 -- D surface mesh', 'Used_for', 'objective function']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3181818181818182, 0.25925925925925924, 0.2857142857142857]
text: This work presents an automated technique for detecting reflections in image sequences by analyzing motion trajectories of feature points .
result: triple_list: [["automated technique", "Used_for", "detecting reflections"], ["image sequences", "Feature_of", "detecting reflections"], ["motion trajectories of feature points", "Used_for", "automated technique"]]
pred: [('automated technique', 'Used_for', 'detecting reflections'), ('image sequences', 'Feature_of', 'detecting reflections'), ('motion trajectories of feature points', 'Used_for', 'automated technique')]
trues: [['technique', 'Used_for', 'detecting reflections in image sequences'], ['motion trajectories', 'Used_for', 'technique'], ['feature points', 'Feature_of', 'motion trajectories']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30434782608695654, 0.25, 0.27450980392156865]
text: In this paper , we explore geometric structures of 3D lines in ray space for improving light field triangulation and stereo matching .
result: triple_list: [["geometric structures of 3D lines", "Used_for", "light field triangulation"], ["geometric structures of 3D lines", "Used_for", "stereo matching"], ["ray space", "Feature_of", "geometric structures of 3D lines"], ["light field triangulation", "Conjunction", "stereo matching"]]
pred: [('geometric structures of 3D lines', 'Used_for', 'light field triangulation'), ('geometric structures of 3D lines', 'Used_for', 'stereo matching'), ('ray space', 'Feature_of', 'geometric structures of 3D lines'), ('light field triangulation', 'Conjunction', 'stereo matching')]
trues: [['geometric structures of 3D lines', 'Used_for', 'light field triangulation'], ['geometric structures of 3D lines', 'Used_for', 'stereo matching'], ['ray space', 'Feature_of', 'geometric structures of 3D lines'], ['light field triangulation', 'Conjunction', 'stereo matching']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3424657534246575, 0.2840909090909091, 0.3105590062111801]
text: Computing power per area and power consumption is amongst the highest reported for a single chip .
result: triple_list: [["Computing power per area", "Evaluate_for", "chip"], ["Computing power per area", "Conjunction", "power consumption"], ["power consumption", "Evaluate_for", "chip"]]
pred: [('Computing power per area', 'Evaluate_for', 'chip'), ('Computing power per area', 'Conjunction', 'power consumption'), ('power consumption', 'Evaluate_for', 'chip')]
trues: [['Computing power per area', 'Conjunction', 'power consumption']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.34210526315789475, 0.29213483146067415, 0.3151515151515152]
text: We investigate the problem of learning to predict moves in the board game of Go from game records of expert players .
result: triple_list: [["board game of Go", "Used_for", "predicting moves"]]
pred: [('board game of Go', 'Used_for', 'predicting moves')]
trues: [['game records of expert players', 'Used_for', 'board game of Go']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33766233766233766, 0.28888888888888886, 0.311377245508982]
text: Simulated and experimental results show that our method recovers scene geometry with high subpixel precision , and that it can handle many challenges of active reconstruction systems .
result: triple_list: [["method", "Used_for", "it"], ["it", "Used_for", "active reconstruction systems"]]
pred: [('method', 'Used_for', 'it'), ('it', 'Used_for', 'active reconstruction systems')]
trues: [['method', 'Used_for', 'scene geometry'], ['subpixel precision', 'Feature_of', 'scene geometry'], ['it', 'Used_for', 'active reconstruction systems']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.34177215189873417, 0.2903225806451613, 0.313953488372093]
text: Experiments on the PASCAL VOC 2006 dataset show an acceleration of more than 50 % by our method compared to standard cascade evaluation .
result: triple_list: [["PASCAL VOC 2006 dataset", "Evaluate_for", "method"], ["PASCAL VOC 2006 dataset", "Evaluate_for", "cascade evaluation"], ["method", "Compare", "cascade evaluation"]]
pred: [('PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'), ('PASCAL VOC 2006 dataset', 'Evaluate_for', 'cascade evaluation'), ('method', 'Compare', 'cascade evaluation')]
trues: [['PASCAL VOC 2006 dataset', 'Evaluate_for', 'method'], ['PASCAL VOC 2006 dataset', 'Evaluate_for', 'cascade evaluation'], ['cascade evaluation', 'Compare', 'method']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.35365853658536583, 0.3020833333333333, 0.32584269662921345]
text: In this work , we study how Convolutional Neural Networks ( CNN ) architectures can be adapted to the task of simultaneous object recognition and pose estimation .
result: triple_list: [["Convolutional Neural Networks ( CNN ) architectures", "Used_for", "simultaneous object recognition and pose estimation"]]
pred: [('Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'simultaneous object recognition and pose estimation')]
trues: [['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'object recognition'], ['Convolutional Neural Networks ( CNN ) architectures', 'Used_for', 'pose estimation'], ['object recognition', 'Conjunction', 'pose estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3493975903614458, 0.29292929292929293, 0.31868131868131866]
text: Human action recognition from well-segmented 3D skeleton data has been intensively studied and attracting an increasing attention .
result: triple_list: [["Human action recognition", "Used_for", "segmented 3D skeleton data"]]
pred: [('Human action recognition', 'Used_for', 'segmented 3D skeleton data')]
trues: [['well-segmented 3D skeleton data', 'Used_for', 'Human action recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34523809523809523, 0.29, 0.31521739130434784]
text: Metagrammatical formalisms that combine context-free phrase structure rules and metarules ( MPS grammars ) allow concise statement of generalizations about the syntax of natural languages .
result: triple_list: [["Metagrammatical formalisms", "Used_for", "generalizations about the syntax of natural languages"], ["context-free phrase structure rules", "Part_of", "Metagrammatical formalisms"], ["context-free phrase structure rules", "Conjunction", "metarules"], ["metarules", "Part_of", "Metagrammatical formalisms"], ["grammars", "Hyponym_of", "Metagrammatical formalisms"]]
pred: [('Metagrammatical formalisms', 'Used_for', 'generalizations about the syntax of natural languages'), ('context-free phrase structure rules', 'Part_of', 'Metagrammatical formalisms'), ('context-free phrase structure rules', 'Conjunction', 'metarules'), ('metarules', 'Part_of', 'Metagrammatical formalisms'), ('grammars', 'Hyponym_of', 'Metagrammatical formalisms')]
trues: [['context-free phrase structure rules', 'Part_of', 'Metagrammatical formalisms'], ['context-free phrase structure rules', 'Conjunction', 'metarules ( MPS grammars )'], ['metarules ( MPS grammars )', 'Part_of', 'Metagrammatical formalisms']]
metrics_sample: [0.2, 0.3333333333333333, 0.25]
metrics_current: [0.33707865168539325, 0.2912621359223301, 0.3125]
text: Kernel space embedding decouples the training and prediction costs from the data dimension and enables us to plug inarbitrary distance measures which are more natural for the features .
result: triple_list: [["Kernel space embedding", "Used_for", "training and prediction costs"], ["data dimension", "Feature_of", "training and prediction costs"]]
pred: [('Kernel space embedding', 'Used_for', 'training and prediction costs'), ('data dimension', 'Feature_of', 'training and prediction costs')]
trues: [['Kernel space embedding', 'Used_for', 'inarbitrary distance measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32967032967032966, 0.28846153846153844, 0.30769230769230765]
text: Evaluation on the ACE 2003 corpus shows that the convolution kernel over parse trees can achieve comparable performance with the previous best-reported feature-based methods on the 24 ACE relation subtypes .
result: triple_list: [["ACE 2003 corpus", "Evaluate_for", "convolution kernel over parse trees"], ["ACE 2003 corpus", "Evaluate_for", "feature-based methods"], ["convolution kernel over parse trees", "Compare", "feature-based methods"]]
pred: [('ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'), ('ACE 2003 corpus', 'Evaluate_for', 'feature-based methods'), ('convolution kernel over parse trees', 'Compare', 'feature-based methods')]
trues: [['ACE 2003 corpus', 'Evaluate_for', 'convolution kernel over parse trees'], ['feature-based methods', 'Compare', 'convolution kernel over parse trees']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.32978723404255317, 0.29245283018867924, 0.31]
text: Experimental results on our dataset and the public G3D dataset both demonstrate very promising performance of our scheme .
result: triple_list: [["dataset", "Evaluate_for", "scheme"], ["dataset", "Conjunction", "G3D dataset"], ["G3D dataset", "Evaluate_for", "scheme"]]
pred: [('dataset', 'Evaluate_for', 'scheme'), ('dataset', 'Conjunction', 'G3D dataset'), ('G3D dataset', 'Evaluate_for', 'scheme')]
trues: [['dataset', 'Conjunction', 'G3D dataset']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.32989690721649484, 0.29906542056074764, 0.31372549019607837]
text: The purpose of this research is to test the efficacy of applying automated evaluation techniques , originally devised for the evaluation of human language learners , to the output of machine translation ( MT ) systems .
result: triple_list: [["automated evaluation techniques", "Evaluate_for", "machine translation ( MT ) systems"]]
pred: [('automated evaluation techniques', 'Evaluate_for', 'machine translation ( MT ) systems')]
trues: [['automated evaluation techniques', 'Used_for', 'evaluation of human language learners']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32653061224489793, 0.2962962962962963, 0.31067961165048547]
text: A bio-inspired model for an analog programmable array processor ( APAP ) , based on studies on the vertebrate retina , has permitted the realization of complex programmable spatio-temporal dynamics in VLSI .
result: triple_list: [["bio-inspired model", "Used_for", "analog programmable array processor ( APAP )"], ["vertebrate retina", "Used_for", "bio-inspired model"], ["complex programmable spatio-temporal dynamics", "Feature_of", "analog programmable array processor ( APAP )"], ["VLSI", "Feature_of", "complex programmable spatio-temporal dynamics"]]
pred: [('bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'), ('vertebrate retina', 'Used_for', 'bio-inspired model'), ('complex programmable spatio-temporal dynamics', 'Feature_of', 'analog programmable array processor ( APAP )'), ('VLSI', 'Feature_of', 'complex programmable spatio-temporal dynamics')]
trues: [['bio-inspired model', 'Used_for', 'analog programmable array processor ( APAP )'], ['bio-inspired model', 'Used_for', 'complex programmable spatio-temporal dynamics'], ['vertebrate retina', 'Used_for', 'bio-inspired model'], ['complex programmable spatio-temporal dynamics', 'Feature_of', 'VLSI']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3333333333333333, 0.30357142857142855, 0.3177570093457944]
text: Although the study of clustering is centered around an intuitively compelling goal , it has been very difficult to develop a unified framework for reasoning about it at a technical level , and profoundly diverse approaches to clustering abound in the research community .
result: triple_list: [["approaches", "Compare", "clustering"]]
pred: [('approaches', 'Compare', 'clustering')]
trues: [['unified framework', 'Used_for', 'reasoning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3300970873786408, 0.3008849557522124, 0.3148148148148148]
text: This paper describes the impact of using different-quality references on evaluation .
result: triple_list: [["qualitative", "Evaluate_for", "evaluation"], ["qualitative", "Conjunction", "quantitative"], ["quantitative", "Evaluate_for", "evaluation"]]
pred: [('qualitative', 'Evaluate_for', 'evaluation'), ('qualitative', 'Conjunction', 'quantitative'), ('quantitative', 'Evaluate_for', 'evaluation')]
trues: [['different-quality references', 'Used_for', 'evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32075471698113206, 0.2982456140350877, 0.3090909090909091]
text: A general procedure for the estimation and quantization of these cycloidal motion parameters for arbitrary handwriting is presented .
result: triple_list: [["cycloidal motion parameters", "Used_for", "handwriting"]]
pred: [('cycloidal motion parameters', 'Used_for', 'handwriting')]
trues: [['cycloidal motion parameters', 'Used_for', 'arbitrary handwriting']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3177570093457944, 0.2956521739130435, 0.3063063063063063]
text: A method for producing such phrases from a word-aligned corpora is proposed .
result: triple_list: [["phrases", "Used_for", "method"], ["word-aligned corpora", "Used_for", "phrases"]]
pred: [('phrases', 'Used_for', 'method'), ('word-aligned corpora', 'Used_for', 'phrases')]
trues: [['method', 'Used_for', 'phrases'], ['word-aligned corpora', 'Evaluate_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3119266055045872, 0.2905982905982906, 0.3008849557522124]
text: The distinction among these components is essential to provide an adequate explanation of such discourse phenomena as cue phrases , referring expressions , and interruptions .
result: triple_list: [["components", "Used_for", "discourse phenomena"], ["cue phrases", "Hyponym_of", "discourse phenomena"], ["cue phrases", "Conjunction", "referring expressions"], ["referring expressions", "Hyponym_of", "discourse phenomena"], ["referring expressions", "Conjunction", "interruptions"], ["interruptions", "Hyponym_of", "discourse phenomena"]]
pred: [('components', 'Used_for', 'discourse phenomena'), ('cue phrases', 'Hyponym_of', 'discourse phenomena'), ('cue phrases', 'Conjunction', 'referring expressions'), ('referring expressions', 'Hyponym_of', 'discourse phenomena'), ('referring expressions', 'Conjunction', 'interruptions'), ('interruptions', 'Hyponym_of', 'discourse phenomena')]
trues: [['cue phrases', 'Hyponym_of', 'discourse phenomena'], ['cue phrases', 'Conjunction', 'referring expressions'], ['referring expressions', 'Hyponym_of', 'discourse phenomena'], ['referring expressions', 'Conjunction', 'interruptions'], ['interruptions', 'Hyponym_of', 'discourse phenomena']]
metrics_sample: [0.8333333333333334, 1.0, 0.9090909090909091]
metrics_current: [0.3391304347826087, 0.319672131147541, 0.3291139240506329]
text: The key idea of our approach is to use different view points for reasoning about contradictions and consistencies between multiple depth maps generated with the same stereo algorithm .
result: triple_list: [["view points", "Used_for", "contradictions"], ["view points", "Used_for", "consistencies"], ["stereo algorithm", "Used_for", "multiple depth maps"]]
pred: [('view points', 'Used_for', 'contradictions'), ('view points', 'Used_for', 'consistencies'), ('stereo algorithm', 'Used_for', 'multiple depth maps')]
trues: [['view points', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3305084745762712, 0.3170731707317073, 0.32365145228215764]
text: In the case of natural speech signals , the method is shown to have separation accuracy better than the state-of-the-art methods .
result: triple_list: [["natural speech signals", "Feature_of", "method"], ["method", "Compare", "state-of-the-art methods"]]
pred: [('natural speech signals', 'Feature_of', 'method'), ('method', 'Compare', 'state-of-the-art methods')]
trues: [['method', 'Used_for', 'natural speech signals'], ['method', 'Compare', 'methods'], ['separation accuracy', 'Evaluate_for', 'method'], ['separation accuracy', 'Evaluate_for', 'methods'], ['methods', 'Used_for', 'natural speech signals']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.325, 0.3046875, 0.3145161290322581]
text: Many of the resources used are derived from data created by human beings out of an NLP context , especially regarding MT and reference translations .
result: triple_list: [["NLP", "Used_for", "MT"], ["NLP", "Used_for", "reference translations"]]
pred: [('NLP', 'Used_for', 'MT'), ('NLP', 'Used_for', 'reference translations')]
trues: [['MT', 'Hyponym_of', 'NLP'], ['MT', 'Conjunction', 'reference translations'], ['reference translations', 'Hyponym_of', 'NLP']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.319672131147541, 0.29770992366412213, 0.308300395256917]
text: Related work applies MINPRAN to complex range and intensity data 23 ] .
result: triple_list: [["MINPRAN", "Used_for", "complex range and intensity data"]]
pred: [('MINPRAN', 'Used_for', 'complex range and intensity data')]
trues: [['MINPRAN', 'Used_for', 'complex range'], ['MINPRAN', 'Used_for', 'intensity data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3170731707317073, 0.2932330827067669, 0.3046875]
text: In order to build robust automatic abstracting systems , there is a need for better training resources than are currently available .
result: triple_list: [["training resources", "Used_for", "robust automatic abstracting systems"]]
pred: [('training resources', 'Used_for', 'robust automatic abstracting systems')]
trues: [['training resources', 'Used_for', 'automatic abstracting systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31451612903225806, 0.291044776119403, 0.3023255813953488]
text: This formalism is both elementary and powerful enough to strongly simulate many grammar formalisms , such as rewriting systems , dependency grammars , TAG , HPSG and LFG .
result: triple_list: [["elementary", "Feature_of", "grammar formalisms"], ["elementary", "Conjunction", "powerful"], ["powerful", "Feature_of", "grammar formalisms"], ["rewriting systems", "Hyponym_of", "grammar formalisms"], ["dependency grammars", "Hyponym_of", "grammar formalisms"], ["dependency grammars", "Conjunction", "rewriting systems"], ["TAG", "Hyponym_of", "grammar formalisms"], ["TAG", "Conjunction", "dependency grammars"], ["HPSG", "Hyponym_of", "grammar formalisms"], ["HPSG", "Conjunction", "dependency grammars"], ["HPSG", "Conjunction", "TAG"], ["LFG", "Hyponym_of", "grammar formalisms"], ["LFG", "Conjunction", "HPSG"], ["LFG", "Conjunction", "TAG"]]
pred: [('elementary', 'Feature_of', 'grammar formalisms'), ('elementary', 'Conjunction', 'powerful'), ('powerful', 'Feature_of', 'grammar formalisms'), ('rewriting systems', 'Hyponym_of', 'grammar formalisms'), ('dependency grammars', 'Hyponym_of', 'grammar formalisms'), ('dependency grammars', 'Conjunction', 'rewriting systems'), ('TAG', 'Hyponym_of', 'grammar formalisms'), ('TAG', 'Conjunction', 'dependency grammars'), ('HPSG', 'Hyponym_of', 'grammar formalisms'), ('HPSG', 'Conjunction', 'dependency grammars'), ('HPSG', 'Conjunction', 'TAG'), ('LFG', 'Hyponym_of', 'grammar formalisms'), ('LFG', 'Conjunction', 'HPSG'), ('LFG', 'Conjunction', 'TAG')]
trues: [['formalism', 'Used_for', 'grammar formalisms'], ['rewriting systems', 'Hyponym_of', 'grammar formalisms'], ['rewriting systems', 'Conjunction', 'dependency grammars'], ['dependency grammars', 'Hyponym_of', 'grammar formalisms'], ['dependency grammars', 'Conjunction', 'TAG'], ['TAG', 'Hyponym_of', 'grammar formalisms'], ['TAG', 'Conjunction', 'HPSG'], ['HPSG', 'Hyponym_of', 'grammar formalisms'], ['HPSG', 'Conjunction', 'LFG'], ['LFG', 'Hyponym_of', 'grammar formalisms']]
metrics_sample: [0.35714285714285715, 0.5, 0.41666666666666663]
metrics_current: [0.3188405797101449, 0.3055555555555556, 0.3120567375886525]
text: It is presented as a generalization of the recursive descent parser .
result: triple_list: [["generalization of the recursive descent parser", "Used_for", "It"]]
pred: [('generalization of the recursive descent parser', 'Used_for', 'It')]
trues: [['recursive descent parser', 'Used_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31654676258992803, 0.30344827586206896, 0.30985915492957744]
text: In comparison with previous works , in this paper it is assumed that the signals are not i.i.d. in each epoch , but obey a first-order autoregressive model .
result: triple_list: [["first-order autoregressive model", "Feature_of", "it"]]
pred: [('first-order autoregressive model', 'Feature_of', 'it')]
trues: [['first-order autoregressive model', 'Used_for', 'signals']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3142857142857143, 0.3013698630136986, 0.3076923076923077]
text: On the other hand , the manifold learning methods suggest to use the Euclidean distance in the local range , combining with the graphical relationship between samples , for approximating the geodesic distance .
result: triple_list: [["Euclidean distance", "Used_for", "local range"], ["Euclidean distance", "Used_for", "geodesic distance"]]
pred: [('Euclidean distance', 'Used_for', 'local range'), ('Euclidean distance', 'Used_for', 'geodesic distance')]
trues: [['Euclidean distance', 'Used_for', 'manifold learning methods'], ['Euclidean distance', 'Conjunction', 'graphical relationship'], ['Euclidean distance', 'Used_for', 'geodesic distance'], ['local range', 'Feature_of', 'Euclidean distance'], ['graphical relationship', 'Used_for', 'geodesic distance']]
metrics_sample: [0.5, 0.2, 0.28571428571428575]
metrics_current: [0.31690140845070425, 0.2980132450331126, 0.30716723549488056]
text: We use novel priors , generate sparse and dense detection maps and our results show high detection rate with rejection to pathological motion and occlusion .
result: triple_list: [["priors", "Used_for", "detection maps"], ["sparse and dense detection maps", "Used_for", "detection rate"]]
pred: [('priors', 'Used_for', 'detection maps'), ('sparse and dense detection maps', 'Used_for', 'detection rate')]
trues: [['priors', 'Used_for', 'sparse and dense detection maps'], ['pathological motion', 'Conjunction', 'occlusion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3125, 0.29411764705882354, 0.30303030303030304]
text: This paper examines the benefits of system combination for unsupervised WSD .
result: triple_list: [["system combination", "Used_for", "unsupervised WSD"]]
pred: [('system combination', 'Used_for', 'unsupervised WSD')]
trues: [['system combination', 'Used_for', 'unsupervised WSD']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31724137931034485, 0.2987012987012987, 0.30769230769230776]
text: We then use the predicates of such clauses to create a set of domain independent features to annotate an input dataset , and run two different machine learning algorithms : SLIPPER , a rule-based learning algorithm , and TiMBL , a memory-based system .
result: triple_list: [["SLIPPER", "Hyponym_of", "machine learning algorithms"], ["SLIPPER", "Conjunction", "TiMBL"], ["TiMBL", "Hyponym_of", "machine learning algorithms"]]
pred: [('SLIPPER', 'Hyponym_of', 'machine learning algorithms'), ('SLIPPER', 'Conjunction', 'TiMBL'), ('TiMBL', 'Hyponym_of', 'machine learning algorithms')]
trues: [['SLIPPER', 'Hyponym_of', 'rule-based learning algorithm'], ['rule-based learning algorithm', 'Part_of', 'machine learning algorithms'], ['rule-based learning algorithm', 'Compare', 'memory-based system'], ['TiMBL', 'Hyponym_of', 'memory-based system'], ['memory-based system', 'Part_of', 'machine learning algorithms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3108108108108108, 0.2893081761006289, 0.29967426710097717]
text: We show that combining anisotropic meshing with a non-quadratic approach to regularization enables us to obtain satisfactory reconstruction results using triangulations with few vertices .
result: triple_list: [["anisotropic meshing", "Conjunction", "non-quadratic approach"], ["triangulations", "Used_for", "reconstruction results"]]
pred: [('anisotropic meshing', 'Conjunction', 'non-quadratic approach'), ('triangulations', 'Used_for', 'reconstruction results')]
trues: [['anisotropic meshing', 'Conjunction', 'non-quadratic approach'], ['anisotropic meshing', 'Used_for', 'reconstruction'], ['non-quadratic approach', 'Used_for', 'regularization'], ['non-quadratic approach', 'Used_for', 'reconstruction'], ['triangulations', 'Used_for', 'reconstruction']]
metrics_sample: [0.5, 0.2, 0.28571428571428575]
metrics_current: [0.31333333333333335, 0.2865853658536585, 0.2993630573248408]
text: They improve the reconstruction results and enforce their consistency with a priori knowledge about object shape .
result: triple_list: [["They", "Used_for", "reconstruction results"]]
pred: [('They', 'Used_for', 'reconstruction results')]
trues: [['They', 'Used_for', 'reconstruction'], ['object shape', 'Feature_of', 'priori knowledge']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31125827814569534, 0.28313253012048195, 0.29652996845425866]
text: Here we develop an approach for 1 distance that begins with an explicit and exactly distance-preserving embedding of the points into 2 2 .
result: triple_list: [["approach", "Used_for", "distance"], ["distance", "Feature_of", "points"]]
pred: [('approach', 'Used_for', 'distance'), ('distance', 'Feature_of', 'points')]
trues: [['approach', 'Used_for', '1 distance']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30718954248366015, 0.281437125748503, 0.29375]
text: We examine the relationship between the two grammatical formalisms : Tree Adjoining Grammars and Head Grammars .
result: triple_list: [["Tree Adjoining Grammars", "Conjunction", "Head Grammars"]]
pred: [('Tree Adjoining Grammars', 'Conjunction', 'Head Grammars')]
trues: [['Tree Adjoining Grammars', 'Hyponym_of', 'grammatical formalisms'], ['Tree Adjoining Grammars', 'Compare', 'Head Grammars'], ['Head Grammars', 'Hyponym_of', 'grammatical formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3051948051948052, 0.27647058823529413, 0.2901234567901235]
text: We show how features that are imaged through a transparent object behave differently from those that are rigidly attached to the scene .
result: triple_list: [["features", "Compare", "those"]]
pred: [('features', 'Compare', 'those')]
trues: [['those', 'Compare', 'features']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3032258064516129, 0.27485380116959063, 0.2883435582822086]
text: In this paper , we study the problem of online action detection from the streaming skeleton data .
result: triple_list: [["streaming skeleton data", "Used_for", "online action detection"]]
pred: [('streaming skeleton data', 'Used_for', 'online action detection')]
trues: [['streaming skeleton data', 'Used_for', 'online action detection']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3076923076923077, 0.27906976744186046, 0.2926829268292683]
text: In this paper we specialize the projective unifocal , bifo-cal , and trifocal tensors to the affine case , and show how the tensors obtained relate to the registered tensors encountered in previous work .
result: triple_list: [["projective unifocal , bifo-cal , and trifocal tensors", "Used_for", "affine case"], ["tensors", "Compare", "registered tensors"], ["registered tensors", "Used_for", "work"]]
pred: [('projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case'), ('tensors', 'Compare', 'registered tensors'), ('registered tensors', 'Used_for', 'work')]
trues: [['projective unifocal , bifo-cal , and trifocal tensors', 'Used_for', 'affine case']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3081761006289308, 0.2832369942196532, 0.29518072289156627]
text: In spite of over two decades of intense research , illumination and pose invariance remain prohibitively challenging aspects of face recognition for most practical applications .
result: triple_list: [["pose invariance", "Conjunction", "illumination and pose invariance"], ["face recognition", "Used_for", "pose invariance"]]
pred: [('pose invariance', 'Conjunction', 'illumination and pose invariance'), ('face recognition', 'Used_for', 'pose invariance')]
trues: [['illumination', 'Conjunction', 'pose invariance'], ['illumination', 'Part_of', 'face recognition'], ['pose invariance', 'Part_of', 'face recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30434782608695654, 0.2784090909090909, 0.29080118694362017]
text: Using this approach , we extract parallel data from large Chinese , Arabic , and English non-parallel newspaper corpora .
result: triple_list: [["parallel data", "Used_for", "Chinese , Arabic , and English non-parallel newspaper corpora"]]
pred: [('parallel data', 'Used_for', 'Chinese , Arabic , and English non-parallel newspaper corpora')]
trues: [['approach', 'Used_for', 'parallel data'], ['parallel data', 'Part_of', 'Chinese , Arabic , and English non-parallel newspaper corpora']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30246913580246915, 0.2752808988764045, 0.2882352941176471]
text: We argue that it is necessary to draw a line between generalizable semantic principles and domain-specific semantic information .
result: triple_list: [["generalizable semantic principles", "Compare", "domain-specific semantic information"]]
pred: [('generalizable semantic principles', 'Compare', 'domain-specific semantic information')]
trues: [['generalizable semantic principles', 'Compare', 'domain-specific semantic information']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3067484662576687, 0.27932960893854747, 0.29239766081871343]
text: The surface realizations of morphological constructions are constrained and modified by a number of phonetic rules such as vowel harmony .
result: triple_list: [["phonetic rules", "Used_for", "surface realizations of morphological constructions"], ["vowel harmony", "Hyponym_of", "phonetic rules"]]
pred: [('phonetic rules', 'Used_for', 'surface realizations of morphological constructions'), ('vowel harmony', 'Hyponym_of', 'phonetic rules')]
trues: [['phonetic rules', 'Used_for', 'surface realizations of morphological constructions'], ['vowel harmony', 'Hyponym_of', 'phonetic rules']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3151515151515151, 0.287292817679558, 0.3005780346820809]
text: We also show that a good-quality MT system can be built from scratch by starting with a very small parallel corpus ( 100,000 words ) and exploiting a large non-parallel corpus .
result: triple_list: [["parallel corpus", "Used_for", "MT system"], ["parallel corpus", "Used_for", "large non-parallel corpus"], ["large non-parallel corpus", "Used_for", "MT system"]]
pred: [('parallel corpus', 'Used_for', 'MT system'), ('parallel corpus', 'Used_for', 'large non-parallel corpus'), ('large non-parallel corpus', 'Used_for', 'MT system')]
trues: [['parallel corpus', 'Used_for', 'MT system'], ['parallel corpus', 'Conjunction', 'non-parallel corpus'], ['non-parallel corpus', 'Used_for', 'MT system']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.31547619047619047, 0.28804347826086957, 0.3011363636363636]
text: Multi-view constraints associated with groups of patches are combined with a normalized representation of their appearance to guide matching and reconstruction , allowing the acquisition of true three-dimensional affine and Euclidean models from multiple images and their recognition in a single photograph taken from an arbitrary viewpoint .
result: triple_list: [["Multi-view constraints", "Feature_of", "groups of patches"], ["normalized representation of their appearance", "Feature_of", "Multi-view constraints"], ["matching", "Conjunction", "reconstruction"]]
pred: [('Multi-view constraints', 'Feature_of', 'groups of patches'), ('normalized representation of their appearance', 'Feature_of', 'Multi-view constraints'), ('matching', 'Conjunction', 'reconstruction')]
trues: [['Multi-view constraints', 'Conjunction', 'normalized representation'], ['Multi-view constraints', 'Used_for', 'matching'], ['Multi-view constraints', 'Used_for', 'reconstruction'], ['normalized representation', 'Used_for', 'matching'], ['normalized representation', 'Used_for', 'reconstruction'], ['matching', 'Conjunction', 'reconstruction'], ['images', 'Used_for', 'acquisition of true three-dimensional affine and Euclidean models']]
metrics_sample: [0.3333333333333333, 0.14285714285714285, 0.2]
metrics_current: [0.3157894736842105, 0.28272251308900526, 0.2983425414364641]
text: Towards this goal , we also propose a novel Multiple Instance Learning ( MIL ) formulation for the problem based on the logistic softmax function of covariance-based region features within a MAP estimation framework .
result: triple_list: [["Multiple Instance Learning ( MIL ) formulation", "Used_for", "problem"], ["logistic softmax function", "Part_of", "Multiple Instance Learning ( MIL ) formulation"], ["Multiple Instance Learning ( MIL ) formulation", "Used_for", "problem"], ["covariance-based region features", "Used_for", "Multiple Instance Learning ( MIL ) formulation"], ["MAP estimation framework", "Used_for", "covariance-based region features"]]
pred: [('Multiple Instance Learning ( MIL ) formulation', 'Used_for', 'problem'), ('logistic softmax function', 'Part_of', 'Multiple Instance Learning ( MIL ) formulation'), ('Multiple Instance Learning ( MIL ) formulation', 'Used_for', 'problem'), ('covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'), ('MAP estimation framework', 'Used_for', 'covariance-based region features')]
trues: [['logistic softmax function of covariance-based region features', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation'], ['MAP estimation framework', 'Used_for', 'Multiple Instance Learning ( MIL ) formulation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30857142857142855, 0.27979274611398963, 0.2934782608695652]
text: The results of the experiment show that in most of the cases the cooccurrence statistics indeed reflect the semantic constraints and thus provide a basis for a useful disambiguation tool .
result: triple_list: [["cooccurrence statistics", "Used_for", "disambiguation tool"], ["semantic constraints", "Used_for", "cooccurrence statistics"]]
pred: [('cooccurrence statistics', 'Used_for', 'disambiguation tool'), ('semantic constraints', 'Used_for', 'cooccurrence statistics')]
trues: [['cooccurrence statistics', 'Used_for', 'disambiguation tool']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3107344632768362, 0.28350515463917525, 0.29649595687331537]
text: Unlike other techniques that handle large outlier percentages , MINPRAN does not rely on a known error bound for the good data .
result: triple_list: [["outlier percentages", "Compare", "MINPRAN"], ["MINPRAN", "Used_for", "outlier percentages"], ["error bound", "Used_for", "techniques"]]
pred: [('outlier percentages', 'Compare', 'MINPRAN'), ('MINPRAN', 'Used_for', 'outlier percentages'), ('error bound', 'Used_for', 'techniques')]
trues: [['techniques', 'Used_for', 'large outlier percentages'], ['techniques', 'Compare', 'MINPRAN']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3055555555555556, 0.28061224489795916, 0.29255319148936176]
text: This allows us to use our method to act not only as a faster procedure for cascade evaluation , but also as a tool to perform efficient branch-and-bound object detection with nonlinear quality functions , in particular kernel-ized support vector machines .
result: triple_list: [["method", "Used_for", "cascade evaluation"], ["method", "Used_for", "branch-and-bound object detection"], ["cascade evaluation", "Conjunction", "branch-and-bound object detection"], ["nonlinear quality functions", "Feature_of", "branch-and-bound object detection"], ["kernel-ized support vector machines", "Hyponym_of", "nonlinear quality functions"]]
pred: [('method', 'Used_for', 'cascade evaluation'), ('method', 'Used_for', 'branch-and-bound object detection'), ('cascade evaluation', 'Conjunction', 'branch-and-bound object detection'), ('nonlinear quality functions', 'Feature_of', 'branch-and-bound object detection'), ('kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions')]
trues: [['method', 'Used_for', 'cascade evaluation'], ['method', 'Used_for', 'branch-and-bound object detection'], ['nonlinear quality functions', 'Used_for', 'branch-and-bound object detection'], ['kernel-ized support vector machines', 'Hyponym_of', 'nonlinear quality functions']]
metrics_sample: [0.6, 0.75, 0.6666666666666665]
metrics_current: [0.31351351351351353, 0.29, 0.3012987012987013]
text: Branch and bound strategies have previously attempted to curb this complexity whilst maintaining global optimality .
result: triple_list: [["Branch and bound strategies", "Used_for", "complexity"]]
pred: [('Branch and bound strategies', 'Used_for', 'complexity')]
trues: [['Branch and bound strategies', 'Used_for', 'complexity'], ['global optimality', 'Feature_of', 'Branch and bound strategies']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3172043010752688, 0.29207920792079206, 0.30412371134020616]
text: As a Monte Carlo approach , ASA stochastically samples the parameter space , in contrast to local deterministic search .
result: triple_list: [["Monte Carlo approach", "Used_for", "ASA"], ["local deterministic search", "Compare", "Monte Carlo approach"]]
pred: [('Monte Carlo approach', 'Used_for', 'ASA'), ('local deterministic search', 'Compare', 'Monte Carlo approach')]
trues: [['ASA', 'Hyponym_of', 'Monte Carlo approach'], ['ASA', 'Compare', 'local deterministic search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31382978723404253, 0.28921568627450983, 0.30102040816326525]
text: These methods diier from previous work in the area in two ways : the use of an action model formalism which is better suited to the needs of a re-active agent , and successful implementation of noise-handling mechanisms .
result: triple_list: [["action model formalism", "Used_for", "methods"], ["action model formalism", "Used_for", "re-active agent"], ["re-active agent", "Compare", "implementation of noise-handling mechanisms"]]
pred: [('action model formalism', 'Used_for', 'methods'), ('action model formalism', 'Used_for', 're-active agent'), ('re-active agent', 'Compare', 'implementation of noise-handling mechanisms')]
trues: [['action model formalism', 'Used_for', 'methods'], ['action model formalism', 'Used_for', 're-active agent'], ['noise-handling mechanisms', 'Used_for', 'methods']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.3193717277486911, 0.2946859903381642, 0.3065326633165829]
text: The results show that the features in terms of which we formulate our heuristic principles have significant predictive power , and that rules that closely resemble our Horn clauses can be learnt automatically from these features .
result: triple_list: [["features", "Used_for", "heuristic principles"], ["features", "Used_for", "rules"], ["features", "Used_for", "automatically learnt rules"], ["predictive power", "Evaluate_for", "features"], ["predictive power", "Evaluate_for", "rules"]]
pred: [('features', 'Used_for', 'heuristic principles'), ('features', 'Used_for', 'rules'), ('features', 'Used_for', 'automatically learnt rules'), ('predictive power', 'Evaluate_for', 'features'), ('predictive power', 'Evaluate_for', 'rules')]
trues: [['features', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3112244897959184, 0.2932692307692308, 0.30198019801980197]
text: We present a novel model-based approach to recover the shapes and the poses of transparent objects from known motion .
result: triple_list: [["model-based approach", "Used_for", "shapes and the poses of transparent objects"], ["known motion", "Used_for", "model-based approach"]]
pred: [('model-based approach', 'Used_for', 'shapes and the poses of transparent objects'), ('known motion', 'Used_for', 'model-based approach')]
trues: [['model-based approach', 'Used_for', 'shapes and the poses of transparent objects'], ['known motion', 'Used_for', 'shapes and the poses of transparent objects']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.31313131313131315, 0.29523809523809524, 0.30392156862745096]
text: MINPRAN , a new robust operator , nds good ts in data sets where more than 50 % of the points are outliers .
result: triple_list: [["MINPRAN", "Hyponym_of", "robust operator"]]
pred: [('MINPRAN', 'Hyponym_of', 'robust operator')]
trues: [['MINPRAN', 'Hyponym_of', 'robust operator']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3165829145728643, 0.2985781990521327, 0.30731707317073165]
text: We propose a novel approach to associate objects across multiple PTZ cameras that can be used to perform camera handoff in wide-area surveillance scenarios .
result: triple_list: [["approach", "Used_for", "camera handoff"], ["camera handoff", "Used_for", "wide-area surveillance scenarios"]]
pred: [('approach', 'Used_for', 'camera handoff'), ('camera handoff', 'Used_for', 'wide-area surveillance scenarios')]
trues: [['approach', 'Used_for', 'camera handoff in wide-area surveillance scenarios']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31343283582089554, 0.2971698113207547, 0.3050847457627119]
text: Our results show that MT evaluation techniques are able to produce useful features for paraphrase classification and to a lesser extent entailment .
result: triple_list: [["MT evaluation techniques", "Used_for", "features"], ["features", "Used_for", "paraphrase classification"], ["features", "Used_for", "entailment"], ["paraphrase classification", "Conjunction", "entailment"]]
pred: [('MT evaluation techniques', 'Used_for', 'features'), ('features', 'Used_for', 'paraphrase classification'), ('features', 'Used_for', 'entailment'), ('paraphrase classification', 'Conjunction', 'entailment')]
trues: [['MT evaluation techniques', 'Used_for', 'features'], ['MT evaluation techniques', 'Used_for', 'paraphrase classification'], ['MT evaluation techniques', 'Used_for', 'entailment'], ['paraphrase classification', 'Conjunction', 'entailment']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3170731707317073, 0.30092592592592593, 0.3087885985748219]
text: The objective of this work is to recognize faces using video sequences both for training and recognition input , in a realistic , unconstrained setup in which lighting , pose and user motion pattern have a wide variability and face images are of low resolution .
result: triple_list: [["training and recognition input", "Used_for", "faces"], ["low resolution", "Evaluate_for", "face images"]]
pred: [('training and recognition input', 'Used_for', 'faces'), ('low resolution', 'Evaluate_for', 'face images')]
trues: [['lighting', 'Conjunction', 'pose'], ['pose', 'Conjunction', 'user motion pattern'], ['resolution', 'Feature_of', 'face images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3140096618357488, 0.2968036529680365, 0.3051643192488263]
text: Extended CF grammars ( grammars with regular expressions at the right hand side ) can be parsed with a simple modification of the LR-parser for normal CF grammars .
result: triple_list: [["Extended CF grammars", "Used_for", "parsing"], ["normal CF grammars", "Used_for", "LR-parser"]]
pred: [('Extended CF grammars', 'Used_for', 'parsing'), ('normal CF grammars', 'Used_for', 'LR-parser')]
trues: [['regular expressions', 'Feature_of', 'grammars'], ['LR-parser', 'Used_for', 'Extended CF grammars'], ['LR-parser', 'Used_for', 'CF grammars']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31100478468899523, 0.2927927927927928, 0.3016241299303944]
text: To a large extent , these statistics reflect semantic constraints and thus are used to disambiguate anaphora references and syntactic ambiguities .
result: triple_list: [["statistics", "Used_for", "anaphora references"], ["statistics", "Used_for", "syntactic ambiguities"]]
pred: [('statistics', 'Used_for', 'anaphora references'), ('statistics', 'Used_for', 'syntactic ambiguities')]
trues: [['semantic constraints', 'Used_for', 'anaphora references'], ['semantic constraints', 'Used_for', 'syntactic ambiguities'], ['anaphora references', 'Conjunction', 'syntactic ambiguities']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3080568720379147, 0.28888888888888886, 0.2981651376146789]
text: To recover from these inevitable tracking failures , we consider object detection as a global optimization problem and solve it via Adaptive Simulated Annealing ( ASA ) , a method that avoids becoming trapped at local modes and is much faster than exhaustive search .
result: triple_list: [["object detection", "Used_for", "tracking failures"], ["Adaptive Simulated Annealing ( ASA )", "Used_for", "object detection"], ["exhaustive search", "Compare", "Adaptive Simulated Annealing ( ASA )"]]
pred: [('object detection', 'Used_for', 'tracking failures'), ('Adaptive Simulated Annealing ( ASA )', 'Used_for', 'object detection'), ('exhaustive search', 'Compare', 'Adaptive Simulated Annealing ( ASA )')]
trues: [['global optimization problem', 'Used_for', 'object detection'], ['Adaptive Simulated Annealing ( ASA )', 'Used_for', 'it'], ['method', 'Compare', 'exhaustive search']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3037383177570093, 0.2850877192982456, 0.2941176470588235]
text: Recent progress in computer vision has been driven by high-capacity models trained on large datasets .
result: triple_list: [["computer vision", "Feature_of", "high-capacity models"], ["high-capacity models", "Used_for", "computer vision"], ["datasets", "Used_for", "high-capacity models"]]
pred: [('computer vision', 'Feature_of', 'high-capacity models'), ('high-capacity models', 'Used_for', 'computer vision'), ('datasets', 'Used_for', 'high-capacity models')]
trues: [['high-capacity models', 'Used_for', 'computer vision'], ['large datasets', 'Used_for', 'high-capacity models']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.30414746543778803, 0.28695652173913044, 0.2953020134228188]
text: The applicability of many current information extraction techniques is severely limited by the need for supervised training data .
result: triple_list: [["supervised training data", "Used_for", "information extraction techniques"]]
pred: [('supervised training data', 'Used_for', 'information extraction techniques')]
trues: [['supervised training data', 'Used_for', 'information extraction techniques']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3073394495412844, 0.29004329004329005, 0.29844097995545654]
text: In the Object Recognition task , there exists a di-chotomy between the categorization of objects and estimating object pose , where the former necessitates a view-invariant representation , while the latter requires a representation capable of capturing pose information over different categories of objects .
result: triple_list: [["view-invariant representation", "Used_for", "Object Recognition task"], ["view-invariant representation", "Compare", "representation"], ["view-invariant representation", "Conjunction", "pose information"], ["pose information", "Used_for", "Object Recognition task"]]
pred: [('view-invariant representation', 'Used_for', 'Object Recognition task'), ('view-invariant representation', 'Compare', 'representation'), ('view-invariant representation', 'Conjunction', 'pose information'), ('pose information', 'Used_for', 'Object Recognition task')]
trues: [['categorization of objects', 'Part_of', 'Object Recognition task'], ['categorization of objects', 'Conjunction', 'estimating object pose'], ['estimating object pose', 'Part_of', 'Object Recognition task'], ['view-invariant representation', 'Used_for', 'former'], ['representation', 'Used_for', 'latter'], ['representation', 'Used_for', 'pose information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30180180180180183, 0.28270042194092826, 0.2919389978213508]
text: We present a scanning method that recovers dense sub-pixel camera-projector correspondence without requiring any photometric calibration nor preliminary knowledge of their relative geometry .
result: triple_list: [["scanning method", "Used_for", "dense sub-pixel camera-projector correspondence"], ["photometric calibration", "Used_for", "scanning method"]]
pred: [('scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence'), ('photometric calibration', 'Used_for', 'scanning method')]
trues: [['scanning method', 'Used_for', 'dense sub-pixel camera-projector correspondence']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.30357142857142855, 0.2857142857142857, 0.2943722943722944]
text: In particular , our guarantee suggests that a substantial amount of low rank matrices , which can not be recovered by standard robust PCA , become re-coverable by our proposed method .
result: triple_list: [["low rank matrices", "Part_of", "re-coverable"], ["robust PCA", "Used_for", "low rank matrices"], ["method", "Used_for", "low rank matrices"]]
pred: [('low rank matrices', 'Part_of', 're-coverable'), ('robust PCA', 'Used_for', 'low rank matrices'), ('method', 'Used_for', 'low rank matrices')]
trues: [['method', 'Used_for', 'low rank matrices']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3039647577092511, 0.28870292887029286, 0.296137339055794]
text: We have previously introduced a statistical model describing the generating process of speech F0 contours , based on the discrete-time version of the Fujisaki model .
result: triple_list: [["statistical model", "Used_for", "speech F0 contours"], ["Fujisaki model", "Used_for", "statistical model"]]
pred: [('statistical model', 'Used_for', 'speech F0 contours'), ('Fujisaki model', 'Used_for', 'statistical model')]
trues: [['statistical model', 'Used_for', 'speech F0 contours'], ['Fujisaki model', 'Used_for', 'statistical model']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31004366812227074, 0.2946058091286307, 0.3021276595744681]
text: Amorph recognizes NE items in two stages : dictionary lookup and rule application .
result: triple_list: [["Amorph", "Used_for", "NE items"], ["Amorph", "Used_for", "two stages"], ["dictionary lookup", "Part_of", "two stages"], ["dictionary lookup", "Conjunction", "rule application"], ["rule application", "Part_of", "two stages"]]
pred: [('Amorph', 'Used_for', 'NE items'), ('Amorph', 'Used_for', 'two stages'), ('dictionary lookup', 'Part_of', 'two stages'), ('dictionary lookup', 'Conjunction', 'rule application'), ('rule application', 'Part_of', 'two stages')]
trues: [['Amorph', 'Used_for', 'NE items'], ['dictionary lookup', 'Part_of', 'Amorph'], ['dictionary lookup', 'Conjunction', 'rule application'], ['rule application', 'Part_of', 'Amorph']]
metrics_sample: [0.4, 0.5, 0.4444444444444445]
metrics_current: [0.31196581196581197, 0.2979591836734694, 0.3048016701461378]
text: The robust principal component analysis ( robust PCA ) problem has been considered in many machine learning applications , where the goal is to decompose the data matrix to a low rank part plus a sparse residual .
result: triple_list: [["machine learning applications", "Feature_of", "robust principal component analysis ( robust PCA ) problem"], ["decompose", "Used_for", "machine learning applications"], ["low rank part", "Part_of", "decompose"], ["low rank part", "Conjunction", "sparse residual"], ["sparse residual", "Part_of", "decompose"]]
pred: [('machine learning applications', 'Feature_of', 'robust principal component analysis ( robust PCA ) problem'), ('decompose', 'Used_for', 'machine learning applications'), ('low rank part', 'Part_of', 'decompose'), ('low rank part', 'Conjunction', 'sparse residual'), ('sparse residual', 'Part_of', 'decompose')]
trues: [['robust principal component analysis ( robust PCA ) problem', 'Used_for', 'machine learning applications'], ['low rank part', 'Part_of', 'data matrix'], ['low rank part', 'Conjunction', 'sparse residual'], ['sparse residual', 'Part_of', 'data matrix']]
metrics_sample: [0.2, 0.25, 0.22222222222222224]
metrics_current: [0.30962343096234307, 0.2971887550200803, 0.3032786885245901]
text: A demonstration ( in UNIX ) for Applied Natural Language Processing emphasizes components put to novel technical uses in intelligent computer-assisted morphological analysis ( ICALL ) , including disambiguated morphological analysis and lemmatized indexing for an aligned bilingual corpus of word examples .
result: triple_list: [["UNIX", "Evaluate_for", "Applied Natural Language Processing"], ["components", "Part_of", "Applied Natural Language Processing"], ["technical uses", "Feature_of", "Applied Natural Language Processing"], ["technical uses", "Conjunction", "components"], ["applied-natural-language-processing", "Evaluate_for", "disambiguated morphological analysis"]]
pred: [('UNIX', 'Evaluate_for', 'Applied Natural Language Processing'), ('components', 'Part_of', 'Applied Natural Language Processing'), ('technical uses', 'Feature_of', 'Applied Natural Language Processing'), ('technical uses', 'Conjunction', 'components'), ('applied-natural-language-processing', 'Evaluate_for', 'disambiguated morphological analysis')]
trues: [['components', 'Used_for', 'intelligent computer-assisted morphological analysis ( ICALL )'], ['disambiguated morphological analysis', 'Hyponym_of', 'components'], ['disambiguated morphological analysis', 'Conjunction', 'lemmatized indexing'], ['disambiguated morphological analysis', 'Used_for', 'aligned bilingual corpus'], ['lemmatized indexing', 'Hyponym_of', 'components'], ['lemmatized indexing', 'Used_for', 'aligned bilingual corpus']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30327868852459017, 0.2901960784313726, 0.29659318637274545]
text: This motor control representation enables successful word spotting and matching of cursive scripts .
result: triple_list: [["motor control representation", "Used_for", "word spotting"], ["motor control representation", "Used_for", "matching of cursive scripts"], ["word spotting", "Conjunction", "matching of cursive scripts"]]
pred: [('motor control representation', 'Used_for', 'word spotting'), ('motor control representation', 'Used_for', 'matching of cursive scripts'), ('word spotting', 'Conjunction', 'matching of cursive scripts')]
trues: [['motor control representation', 'Used_for', 'word spotting'], ['motor control representation', 'Used_for', 'matching of cursive scripts'], ['word spotting', 'Conjunction', 'matching of cursive scripts']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3117408906882591, 0.29844961240310075, 0.3049504950495049]
text: It is demonstrated qualitatively and quantitatively on a dataset of scenes and is suitable for current work in unsupervised object discovery without top-down knowledge .
result: triple_list: [["dataset of scenes", "Evaluate_for", "unsupervised object discovery"], ["top-down knowledge", "Used_for", "unsupervised object discovery"]]
pred: [('dataset of scenes', 'Evaluate_for', 'unsupervised object discovery'), ('top-down knowledge', 'Used_for', 'unsupervised object discovery')]
trues: [['It', 'Used_for', 'unsupervised object discovery'], ['dataset of scenes', 'Evaluate_for', 'It']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3092369477911647, 0.29615384615384616, 0.3025540275049116]
text: Our main result is a first-order upper bound on the distance between any approximate joint triangularizer of the matrices in M ' and any exact joint triangularizer of the matrices in M .
result: triple_list: [["first-order upper bound", "Used_for", "approximate joint triangularizer"], ["first-order upper bound", "Used_for", "exact joint triangularizer"], ["approximate joint triangularizer", "Feature_of", "matrices"], ["exact joint triangularizer", "Feature_of", "matrices"]]
pred: [('first-order upper bound', 'Used_for', 'approximate joint triangularizer'), ('first-order upper bound', 'Used_for', 'exact joint triangularizer'), ('approximate joint triangularizer', 'Feature_of', 'matrices'), ('exact joint triangularizer', 'Feature_of', 'matrices')]
trues: [['approximate joint triangularizer', 'Conjunction', 'exact joint triangularizer']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30434782608695654, 0.2950191570881226, 0.29961089494163423]
text: In this paper we propose a logical formalism , which , among other things , is suitable for representing determiners without forcing a particular interpretation when their meaning is still not clear .
result: triple_list: [["logical formalism", "Used_for", "determiners"], ["determiners", "Feature_of", "interpretaion"]]
pred: [('logical formalism', 'Used_for', 'determiners'), ('determiners', 'Feature_of', 'interpretaion')]
trues: [['logical formalism', 'Used_for', 'determiners']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3058823529411765, 0.29770992366412213, 0.30174081237911027]
text: These models simulate the reading time advantage for parallel structures found in human data , and also yield a small increase in overall parsing accuracy .
result: triple_list: [["models", "Used_for", "reading time advantage"], ["human data", "Used_for", "models"], ["parsing accuracy", "Evaluate_for", "models"]]
pred: [('models', 'Used_for', 'reading time advantage'), ('human data', 'Used_for', 'models'), ('parsing accuracy', 'Evaluate_for', 'models')]
trues: [['parallel structures', 'Part_of', 'human data']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3023255813953488, 0.2965779467680608, 0.29942418426103645]
text: We believe that these evaluation techniques will provide information about both the human language learning process , the translation process and the development of machine translation systems .
result: triple_list: [["evaluation techniques", "Used_for", "human language learning process"], ["evaluation techniques", "Used_for", "translation process"], ["evaluation techniques", "Used_for", "machine translation systems"], ["human language learning process", "Conjunction", "translation process"], ["translation process", "Conjunction", "machine translation systems"]]
pred: [('evaluation techniques', 'Used_for', 'human language learning process'), ('evaluation techniques', 'Used_for', 'translation process'), ('evaluation techniques', 'Used_for', 'machine translation systems'), ('human language learning process', 'Conjunction', 'translation process'), ('translation process', 'Conjunction', 'machine translation systems')]
trues: [['evaluation techniques', 'Used_for', 'human language learning process'], ['evaluation techniques', 'Used_for', 'translation process'], ['evaluation techniques', 'Used_for', 'machine translation systems'], ['human language learning process', 'Conjunction', 'translation process'], ['translation process', 'Conjunction', 'machine translation systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3155893536121673, 0.30970149253731344, 0.3126177024482109]
text: Training instances are generated from experience and observation , and a variant of GOLEM is used to learn action models from these instances .
result: triple_list: [["Training instances", "Used_for", "action models"]]
pred: [('Training instances', 'Used_for', 'action models')]
trues: [['GOLEM', 'Used_for', 'action models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3143939393939394, 0.30855018587360594, 0.3114446529080675]
text: Recent pool models of the inner hair cell synapse do not reproduce the dead time period after an intense stimulus , so we used visual inspection and automatic speech recognition ( ASR ) to investigate an offset adaptation ( OA ) model proposed by Zhang et al. [ 1 ] .
result: triple_list: [["dead time period", "Feature_of", "pool models of the inner hair cell synapse"], ["visual inspection", "Conjunction", "automatic speech recognition ( ASR )"], ["visual inspection", "Used_for", "offset adaptation ( OA ) model"], ["automatic speech recognition ( ASR )", "Used_for", "offset adaptation ( OA ) model"]]
pred: [('dead time period', 'Feature_of', 'pool models of the inner hair cell synapse'), ('visual inspection', 'Conjunction', 'automatic speech recognition ( ASR )'), ('visual inspection', 'Used_for', 'offset adaptation ( OA ) model'), ('automatic speech recognition ( ASR )', 'Used_for', 'offset adaptation ( OA ) model')]
trues: [['pool models', 'Used_for', 'inner hair cell synapse'], ['visual inspection', 'Conjunction', 'automatic speech recognition ( ASR )'], ['visual inspection', 'Used_for', 'offset adaptation ( OA ) model'], ['automatic speech recognition ( ASR )', 'Used_for', 'offset adaptation ( OA ) model']]
metrics_sample: [0.75, 0.75, 0.75]
metrics_current: [0.3208955223880597, 0.315018315018315, 0.3179297597042514]
text: Among other experiments , we demonstrate the potential of our approach by boosting the performance of three learned confidence measures on the KITTI2012 dataset by simply training them on a vast amount of automatically generated training data rather than a limited amount of laser ground truth data .
result: triple_list: [["KITTI2012 dataset", "Evaluate_for", "learned confidence measures"], ["automatically generated training data", "Used_for", "learned confidence measures"], ["automatically generated training data", "Compare", "laser ground truth data"], ["laser ground truth data", "Used_for", "learned confidence measures"]]
pred: [('KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'), ('automatically generated training data', 'Used_for', 'learned confidence measures'), ('automatically generated training data', 'Compare', 'laser ground truth data'), ('laser ground truth data', 'Used_for', 'learned confidence measures')]
trues: [['approach', 'Used_for', 'learned confidence measures'], ['KITTI2012 dataset', 'Evaluate_for', 'learned confidence measures'], ['automatically generated training data', 'Used_for', 'them'], ['laser ground truth data', 'Compare', 'automatically generated training data']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.31985294117647056, 0.3140794223826715, 0.31693989071038253]
text: Towards deep analysis of compositional classes of paraphrases , we have examined a class-oriented framework for collecting paraphrase examples , in which sentential paraphrases are collected for each paraphrase class separately by means of automatic candidate generation and manual judgement .
result: triple_list: [["class-oriented framework", "Used_for", "deep analysis of compositional classes of paraphrases"], ["paraphrase examples", "Part_of", "class-oriented framework"]]
pred: [('class-oriented framework', 'Used_for', 'deep analysis of compositional classes of paraphrases'), ('paraphrase examples', 'Part_of', 'class-oriented framework')]
trues: [['class-oriented framework', 'Used_for', 'compositional classes of paraphrases'], ['class-oriented framework', 'Used_for', 'paraphrase examples'], ['automatic candidate generation', 'Used_for', 'sentential paraphrases'], ['automatic candidate generation', 'Conjunction', 'manual judgement'], ['manual judgement', 'Used_for', 'sentential paraphrases']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3175182481751825, 0.30851063829787234, 0.31294964028776984]
text: A separation method is proposed that is nearly statistically efficient ( approaching the corresponding Cramér-Rao lower bound ) , if the separated signals obey the assumed model .
result: triple_list: [["separation method", "Used_for", "separated signals"], ["model", "Used_for", "separated signals"]]
pred: [('separation method', 'Used_for', 'separated signals'), ('model', 'Used_for', 'separated signals')]
trues: [['Cramér-Rao lower bound )', 'Feature_of', 'separation method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31521739130434784, 0.30742049469964666, 0.31127012522361364]
text: Furthermore , we propose the use of standard parser evaluation methods for automatically evaluating the summarization quality of sentence condensation systems .
result: triple_list: [["parser evaluation methods", "Used_for", "sentence condensation systems"]]
pred: [('parser evaluation methods', 'Used_for', 'sentence condensation systems')]
trues: [['parser evaluation methods', 'Evaluate_for', 'summarization quality'], ['summarization quality', 'Evaluate_for', 'sentence condensation systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3140794223826715, 0.30526315789473685, 0.3096085409252669]
text: Examples are given that demonstrate the robustness of the new algorithm to spatial and temporal artefacts for long stereo video streams .
result: triple_list: [["stereo video streams", "Feature_of", "spatial and temporal artefacts"]]
pred: [('stereo video streams', 'Feature_of', 'spatial and temporal artefacts')]
trues: [['robustness', 'Evaluate_for', 'algorithm'], ['algorithm', 'Used_for', 'spatial and temporal artefacts'], ['spatial and temporal artefacts', 'Used_for', 'long stereo video streams']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3129496402877698, 0.3020833333333333, 0.30742049469964666]
text: We evaluate the quality of the extracted data by showing that it improves the performance of a state-of-the-art statistical machine translation system .
result: triple_list: [["it", "Evaluate_for", "statistical machine translation system"]]
pred: [('it', 'Evaluate_for', 'statistical machine translation system')]
trues: [['it', 'Used_for', 'statistical machine translation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3118279569892473, 0.30103806228373703, 0.30633802816901406]
text: The seven categories of the scheme are based on rhetorical moves of argumentation .
result: triple_list: [["rhetorical moves of argumentation", "Used_for", "scheme"]]
pred: [('rhetorical moves of argumentation', 'Used_for', 'scheme')]
trues: [['rhetorical moves of argumentation', 'Used_for', 'scheme']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3142857142857143, 0.30344827586206896, 0.3087719298245614]
text: Experiments using the SemCor and Senseval-3 data sets demonstrate that our ensembles yield significantly better results when compared with state-of-the-art .
result: triple_list: [["SemCor", "Evaluate_for", "ensembles"], ["SemCor", "Conjunction", "Senseval-3 data sets"], ["Senseval-3 data sets", "Evaluate_for", "ensembles"], ["ensembles", "Compare", "state-of-the-art"]]
pred: [('SemCor', 'Evaluate_for', 'ensembles'), ('SemCor', 'Conjunction', 'Senseval-3 data sets'), ('Senseval-3 data sets', 'Evaluate_for', 'ensembles'), ('ensembles', 'Compare', 'state-of-the-art')]
trues: [['SemCor and Senseval-3 data sets', 'Evaluate_for', 'ensembles'], ['SemCor and Senseval-3 data sets', 'Evaluate_for', 'state-of-the-art']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30985915492957744, 0.3013698630136986, 0.3055555555555556]
text: We propose a convex problem to incorporate side information in robust PCA and show that the low rank matrix can be exactly recovered via the proposed method under certain conditions .
result: triple_list: [["convex problem", "Used_for", "side information"], ["side information", "Feature_of", "robust PCA"], ["low rank matrix", "Feature_of", "robust PCA"]]
pred: [('convex problem', 'Used_for', 'side information'), ('side information', 'Feature_of', 'robust PCA'), ('low rank matrix', 'Feature_of', 'robust PCA')]
trues: [['convex problem', 'Used_for', 'side information'], ['side information', 'Part_of', 'robust PCA'], ['method', 'Used_for', 'low rank matrix']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.31010452961672474, 0.3016949152542373, 0.30584192439862545]
text: These mattes are implied by a set of hypothesized object boundary fragments in the scene .
result: triple_list: [["object boundary fragments", "Used_for", "mattes"]]
pred: [('object boundary fragments', 'Used_for', 'mattes')]
trues: [['hypothesized object boundary fragments', 'Used_for', 'mattes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3090277777777778, 0.30067567567567566, 0.3047945205479452]
text: It also shows that our method significantly outperforms the previous two dependency tree kernels on the 5 ACE relation major types .
result: triple_list: [["method", "Compare", "dependency tree kernels"], ["ACE relation major types", "Evaluate_for", "method"], ["ACE relation major types", "Evaluate_for", "dependency tree kernels"]]
pred: [('method', 'Compare', 'dependency tree kernels'), ('ACE relation major types', 'Evaluate_for', 'method'), ('ACE relation major types', 'Evaluate_for', 'dependency tree kernels')]
trues: [['method', 'Compare', 'dependency tree kernels']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.30927835051546393, 0.30303030303030304, 0.30612244897959184]
text: The integrated learning system has been experimentally validated in simulated construction and ooce domains .
result: triple_list: [["simulated construction and ooce domains", "Used_for", "integrated learning system"]]
pred: [('simulated construction and ooce domains', 'Used_for', 'integrated learning system')]
trues: [['simulated construction', 'Evaluate_for', 'integrated learning system'], ['simulated construction', 'Conjunction', 'ooce domains'], ['ooce domains', 'Evaluate_for', 'integrated learning system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3082191780821918, 0.3, 0.30405405405405406]
text: In addition to the high accuracy of the model , the use of smoothing in an unlexicalized parser allows us to better examine the interplay between smoothing and parsing results .
result: triple_list: [["unlexicalized parser", "Used_for", "interplay between smoothing and parsing results"]]
pred: [('unlexicalized parser', 'Used_for', 'interplay between smoothing and parsing results')]
trues: [['accuracy', 'Evaluate_for', 'model'], ['smoothing', 'Used_for', 'unlexicalized parser']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30716723549488056, 0.2980132450331126, 0.3025210084033613]
text: This paper highlights a particular class of miscommunication -- reference problems -- by describing a case study and techniques for avoiding failures of reference .
result: triple_list: [["case study", "Used_for", "reference problems"], ["techniques", "Used_for", "reference problems"]]
pred: [('case study', 'Used_for', 'reference problems'), ('techniques', 'Used_for', 'reference problems')]
trues: [['reference problems', 'Hyponym_of', 'miscommunication'], ['techniques', 'Used_for', 'failures of reference']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3050847457627119, 0.29605263157894735, 0.30050083472454087]
text: The result is a discrete motor control representation of the continuous pen motion , via the quantized levels of the model parameters .
result: triple_list: [["quantized levels", "Feature_of", "model parameters"]]
pred: [('quantized levels', 'Feature_of', 'model parameters')]
trues: [['discrete motor control representation', 'Used_for', 'continuous pen motion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30405405405405406, 0.29508196721311475, 0.2995008319467554]
text: Experiments on synthetic and real data show that both our triangulation and LAGC algorithms outperform state-of-the-art solutions in accuracy and visual quality .
result: triple_list: [["synthetic and real data", "Evaluate_for", "triangulation"], ["synthetic and real data", "Evaluate_for", "LAGC algorithms"], ["triangulation", "Conjunction", "LAGC algorithms"], ["accuracy", "Evaluate_for", "triangulation"], ["accuracy", "Conjunction", "LAGC algorithms"], ["visual quality", "Evaluate_for", "triangulation"], ["visual quality", "Conjunction", "LAGC algorithms"]]
pred: [('synthetic and real data', 'Evaluate_for', 'triangulation'), ('synthetic and real data', 'Evaluate_for', 'LAGC algorithms'), ('triangulation', 'Conjunction', 'LAGC algorithms'), ('accuracy', 'Evaluate_for', 'triangulation'), ('accuracy', 'Conjunction', 'LAGC algorithms'), ('visual quality', 'Evaluate_for', 'triangulation'), ('visual quality', 'Conjunction', 'LAGC algorithms')]
trues: [['synthetic and real data', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['synthetic and real data', 'Evaluate_for', 'state-of-the-art solutions'], ['triangulation and LAGC algorithms', 'Compare', 'state-of-the-art solutions'], ['accuracy', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['accuracy', 'Evaluate_for', 'state-of-the-art solutions'], ['visual quality', 'Evaluate_for', 'triangulation and LAGC algorithms'], ['visual quality', 'Evaluate_for', 'state-of-the-art solutions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.297029702970297, 0.28846153846153844, 0.29268292682926833]
text: Topic signatures can be useful in a number of Natural Language Processing ( NLP ) applications , such as Word Sense Disambiguation ( WSD ) and Text Summarisation .
result: triple_list: [["Topic signatures", "Used_for", "Natural Language Processing ( NLP ) applications"], ["Word Sense Disambiguation ( WSD )", "Hyponym_of", "Natural Language Processing ( NLP ) applications"], ["Word Sense Disambiguation ( WSD )", "Conjunction", "Text Summarisation"], ["Text Summarisation", "Hyponym_of", "Natural Language Processing ( NLP ) applications"]]
pred: [('Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'), ('Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'), ('Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'), ('Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications')]
trues: [['Topic signatures', 'Used_for', 'Natural Language Processing ( NLP ) applications'], ['Topic signatures', 'Used_for', 'Word Sense Disambiguation ( WSD )'], ['Topic signatures', 'Used_for', 'Text Summarisation'], ['Word Sense Disambiguation ( WSD )', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications'], ['Word Sense Disambiguation ( WSD )', 'Conjunction', 'Text Summarisation'], ['Text Summarisation', 'Hyponym_of', 'Natural Language Processing ( NLP ) applications']]
metrics_sample: [1.0, 0.6666666666666666, 0.8]
metrics_current: [0.30618892508143325, 0.29559748427672955, 0.30079999999999996]
text: The fact that Turkish is an agglutinating free word order language presents a challenge for language theories .
result: triple_list: [["Turkish", "Hyponym_of", "agglutinating free word order language"], ["language theories", "Used_for", "Turkish"]]
pred: [('Turkish', 'Hyponym_of', 'agglutinating free word order language'), ('language theories', 'Used_for', 'Turkish')]
trues: [['Turkish', 'Hyponym_of', 'agglutinating free word order language']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3074433656957929, 0.29780564263322884, 0.30254777070063693]
text: In this paper We experimentally evaluate a trainable sentence planner for a spoken dialogue system by eliciting subjective human judgments .
result: triple_list: [["trainable sentence planner", "Used_for", "spoken dialogue system"], ["subjective human judgments", "Evaluate_for", "trainable sentence planner"]]
pred: [('trainable sentence planner', 'Used_for', 'spoken dialogue system'), ('subjective human judgments', 'Evaluate_for', 'trainable sentence planner')]
trues: [['trainable sentence planner', 'Used_for', 'spoken dialogue system'], ['subjective human judgments', 'Evaluate_for', 'trainable sentence planner']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31189710610932475, 0.30218068535825543, 0.3069620253164557]
text: It is based on a weakly supervised dependency parser that can model speech syntax without relying on any annotated training corpus .
result: triple_list: [["weakly supervised dependency parser", "Used_for", "It"], ["annotated training corpus", "Used_for", "weakly supervised dependency parser"]]
pred: [('weakly supervised dependency parser', 'Used_for', 'It'), ('annotated training corpus', 'Used_for', 'weakly supervised dependency parser')]
trues: [['weakly supervised dependency parser', 'Used_for', 'speech syntax']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30990415335463256, 0.30124223602484473, 0.305511811023622]
text: The new criterion -- meaning-entailing substitutability -- fits the needs of semantic-oriented NLP applications and can be evaluated directly ( independent of an application ) at a good level of human agreement .
result: triple_list: [["criterion", "Used_for", "semantic-oriented NLP applications"]]
pred: [('criterion', 'Used_for', 'semantic-oriented NLP applications')]
trues: [['meaning-entailing substitutability', 'Used_for', 'semantic-oriented NLP applications'], ['human agreement', 'Evaluate_for', 'meaning-entailing substitutability']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3089171974522293, 0.2993827160493827, 0.30407523510971785]
text: b ) The UV procedure is based on three different confidence tests , two based on acoustic measures and one founded on linguistic information , applied in a hierarchical structure .
result: triple_list: [["confidence tests", "Part_of", "UV procedure"], ["acoustic measures", "Used_for", "confidence tests"], ["acoustic measures", "Conjunction", "linguistic information"], ["linguistic information", "Used_for", "confidence tests"], ["hierarchical structure", "Used_for", "UV procedure"]]
pred: [('confidence tests', 'Part_of', 'UV procedure'), ('acoustic measures', 'Used_for', 'confidence tests'), ('acoustic measures', 'Conjunction', 'linguistic information'), ('linguistic information', 'Used_for', 'confidence tests'), ('hierarchical structure', 'Used_for', 'UV procedure')]
trues: [['confidence tests', 'Used_for', 'UV procedure'], ['confidence tests', 'Used_for', 'hierarchical structure'], ['two', 'Hyponym_of', 'confidence tests'], ['acoustic measures', 'Used_for', 'two'], ['one', 'Hyponym_of', 'confidence tests'], ['linguistic information', 'Used_for', 'one']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30407523510971785, 0.29393939393939394, 0.2989214175654854]
text: We propose a novel step toward the unsupervised seg-mentation of whole objects by combining '' hints '' of partial scene segmentation offered by multiple soft , binary mattes .
result: triple_list: [["partial scene segmentation", "Used_for", "unsupervised seg-mentation of whole objects"], ["soft , binary mattes", "Used_for", "partial scene segmentation"]]
pred: [('partial scene segmentation', 'Used_for', 'unsupervised seg-mentation of whole objects'), ('soft , binary mattes', 'Used_for', 'partial scene segmentation')]
trues: [['partial scene segmentation', 'Used_for', 'unsupervised seg-mentation of whole objects'], ['soft , binary mattes', 'Used_for', 'partial scene segmentation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.308411214953271, 0.29819277108433734, 0.30321592649310875]
text: For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations .
result: triple_list: [["non-LR grammars", "Used_for", "parser"], ["parser", "Used_for", "non-LR grammars"], ["memo-functions", "Used_for", "functions"]]
pred: [('non-LR grammars', 'Used_for', 'parser'), ('parser', 'Used_for', 'non-LR grammars'), ('memo-functions', 'Used_for', 'functions')]
trues: [['time-complexity', 'Evaluate_for', 'parser'], ['parser', 'Used_for', 'non-LR grammars'], ['memo-functions', 'Used_for', 'parser']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.30864197530864196, 0.29850746268656714, 0.3034901365705614]
text: While previous approaches relied on geometric , appearance , or correlation-based information for establishing correspondences between static cameras , they each have well-known limitations and are not extendable to wide-area settings with PTZ cameras .
result: triple_list: [["approaches", "Used_for", "static cameras"], ["geometric , geometric", "Conjunction", "approaches"], ["geometric , geometric", "Used_for", "correspondences"]]
pred: [('approaches', 'Used_for', 'static cameras'), ('geometric , geometric', 'Conjunction', 'approaches'), ('geometric , geometric', 'Used_for', 'correspondences')]
trues: [['geometric , appearance , or correlation-based information', 'Used_for', 'approaches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3058103975535168, 0.2976190476190476, 0.301659125188537]
text: We show that various features based on the structure of email-threads can be used to improve upon lexical similarity of discourse segments for question-answer pairing .
result: triple_list: [["features", "Used_for", "question-answer pairing"], ["structure of email-threads", "Used_for", "features"], ["lexical similarity of discourse segments", "Evaluate_for", "question-answer pairing"]]
pred: [('features', 'Used_for', 'question-answer pairing'), ('structure of email-threads', 'Used_for', 'features'), ('lexical similarity of discourse segments', 'Evaluate_for', 'question-answer pairing')]
trues: [['features', 'Used_for', 'lexical similarity'], ['features', 'Used_for', 'question-answer pairing'], ['structure of email-threads', 'Used_for', 'features'], ['lexical similarity', 'Feature_of', 'discourse segments']]
metrics_sample: [0.6666666666666666, 0.5, 0.5714285714285715]
metrics_current: [0.3090909090909091, 0.3, 0.3044776119402985]
text: We then derive a scalable stochastic gradient descent algorithm for the resulting learning problem .
result: triple_list: [["stochastic gradient descent algorithm", "Used_for", "learning problem"]]
pred: [('stochastic gradient descent algorithm', 'Used_for', 'learning problem')]
trues: [['stochastic gradient descent algorithm', 'Used_for', 'learning problem']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.311178247734139, 0.3020527859237537, 0.30654761904761907]
text: Motivated by this semantic criterion we analyze the empirical quality of distributional word feature vectors and its impact on word similarity results , proposing an objective measure for evaluating feature vector quality .
result: triple_list: [["semantic criterion", "Used_for", "distributional word feature vectors"], ["distributional word feature vectors", "Evaluate_for", "word similarity results"]]
pred: [('semantic criterion', 'Used_for', 'distributional word feature vectors'), ('distributional word feature vectors', 'Evaluate_for', 'word similarity results')]
trues: [['semantic criterion', 'Evaluate_for', 'distributional word feature vectors'], ['distributional word feature vectors', 'Used_for', 'word similarity'], ['measure', 'Evaluate_for', 'feature vector quality']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30930930930930933, 0.29941860465116277, 0.30428360413589367]
text: Experiment results on ACE corpora show that this spectral clustering based approach outperforms the other clustering methods .
result: triple_list: [["spectral clustering approach", "Compare", "clustering methods"]]
pred: [('spectral clustering approach', 'Compare', 'clustering methods')]
trues: [['ACE corpora', 'Evaluate_for', 'spectral clustering based approach'], ['ACE corpora', 'Evaluate_for', 'clustering methods'], ['spectral clustering based approach', 'Compare', 'clustering methods']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3083832335329341, 0.2968299711815562, 0.302496328928047]
text: In this theory , discourse structure is composed of three separate but interrelated components : the structure of the sequence of utterances ( called the linguistic structure ) , a structure of purposes ( called the intentional structure ) , and the state of focus of attention ( called the attentional state ) .
result: triple_list: [["components", "Part_of", "discourse structure"], ["linguistic structure", "Hyponym_of", "components"], ["linguistic structure", "Conjunction", "structure of purposes"], ["structure of purposes", "Hyponym_of", "components"], ["structure of purposes", "Conjunction", "attentional structure"], ["attentional structure", "Hyponym_of", "components"], ["attentional structure", "Conjunction", "attentional state"], ["attentional state", "Hyponym_of", "components"]]
pred: [('components', 'Part_of', 'discourse structure'), ('linguistic structure', 'Hyponym_of', 'components'), ('linguistic structure', 'Conjunction', 'structure of purposes'), ('structure of purposes', 'Hyponym_of', 'components'), ('structure of purposes', 'Conjunction', 'attentional structure'), ('attentional structure', 'Hyponym_of', 'components'), ('attentional structure', 'Conjunction', 'attentional state'), ('attentional state', 'Hyponym_of', 'components')]
trues: [['components', 'Part_of', 'discourse structure'], ['linguistic structure', 'Part_of', 'components'], ['linguistic structure', 'Conjunction', 'intentional structure'], ['intentional structure', 'Part_of', 'components'], ['intentional structure', 'Conjunction', 'attentional state'], ['attentional state', 'Part_of', 'components']]
metrics_sample: [0.125, 0.16666666666666666, 0.14285714285714288]
metrics_current: [0.30409356725146197, 0.29461756373937675, 0.2992805755395683]
text: Specifically , by leveraging the merits of the deep Long Short-Term Memory ( LSTM ) subnetwork , the proposed model automatically captures the complex long-range temporal dynamics , which naturally avoids the typical sliding window design and thus ensures high computational efficiency .
result: triple_list: [["deep Long Short-Term Memory ( LSTM ) subnetwork", "Used_for", "model"], ["model", "Used_for", "capturing long-range temporal dynamics"], ["sliding window design", "Compare", "model"]]
pred: [('deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'), ('model', 'Used_for', 'capturing long-range temporal dynamics'), ('sliding window design', 'Compare', 'model')]
trues: [['deep Long Short-Term Memory ( LSTM ) subnetwork', 'Used_for', 'model'], ['long-range temporal dynamics', 'Feature_of', 'model']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.30434782608695654, 0.29577464788732394, 0.3]
text: A new algorithm is proposed for novel view generation in one-to-one teleconferencing applications .
result: triple_list: [["algorithm", "Used_for", "one-to-one teleconferencing applications"]]
pred: [('algorithm', 'Used_for', 'one-to-one teleconferencing applications')]
trues: [['algorithm', 'Used_for', 'novel view generation'], ['novel view generation', 'Used_for', 'one-to-one teleconferencing applications']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.30346820809248554, 0.29411764705882354, 0.2987197724039829]
text: Second , based on the information resulting from the dictionary lookup stage , a set of rules is applied to the segmented strings in order to identify NE items .
result: triple_list: [["rules", "Used_for", "NE items"]]
pred: [('rules', 'Used_for', 'NE items')]
trues: [['dictionary lookup stage', 'Used_for', 'rules'], ['rules', 'Used_for', 'NE items']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.30547550432276654, 0.29526462395543174, 0.30028328611898014]
text: Criteria for anaphora resolution within sentence boundaries rephrase major concepts from GB 's binding theory , while those for text-level anaphora incorporate an adapted version of a Grosz-Sidner-style focus model .
result: triple_list: [["sentence boundaries", "Feature_of", "anaphora"], ["binding theory", "Used_for", "anaphora"], ["Grosz-Sidner-style focus model", "Used_for", "text-level anaphora"]]
pred: [('sentence boundaries', 'Feature_of', 'anaphora'), ('binding theory', 'Used_for', 'anaphora'), ('Grosz-Sidner-style focus model', 'Used_for', 'text-level anaphora')]
trues: [['Criteria', 'Used_for', 'anaphora resolution within sentence boundaries'], ["GB 's binding theory", 'Used_for', 'Criteria'], ['those', 'Used_for', 'text-level anaphora'], ['Grosz-Sidner-style focus model', 'Part_of', 'those']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3028571428571429, 0.29201101928374656, 0.29733520336605895]
text: The system is trained on 181,000 expert games and shows excellent prediction performance as indicated by its ability to perfectly predict the moves made by professional Go players in 34 % of test positions .
result: triple_list: [["expert games", "Used_for", "system"], ["prediction performance", "Evaluate_for", "system"], ["moves", "Evaluate_for", "professional Go players"]]
pred: [('expert games', 'Used_for', 'system'), ('prediction performance', 'Evaluate_for', 'system'), ('moves', 'Evaluate_for', 'professional Go players')]
trues: [['expert games', 'Used_for', 'system']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3031161473087819, 0.29395604395604397, 0.298465829846583]
text: This paper describes FERRET , an interactive question-answering ( Q/A ) system designed to address the challenges of integrating automatic Q/A applications into real-world environments .
result: triple_list: [["FERRET", "Hyponym_of", "interactive question-answering ( Q/A ) system"], ["automatic Q/A applications", "Used_for", "FERRET"], ["real-world environments", "Feature_of", "automatic Q/A applications"]]
pred: [('FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'), ('automatic Q/A applications', 'Used_for', 'FERRET'), ('real-world environments', 'Feature_of', 'automatic Q/A applications')]
trues: [['FERRET', 'Hyponym_of', 'interactive question-answering ( Q/A ) system'], ['FERRET', 'Used_for', 'integrating automatic Q/A applications into real-world environments']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.30337078651685395, 0.29508196721311475, 0.2991689750692521]
text: We show that the trainable sentence planner performs better than the rule-based systems and the baselines , and as well as the hand-crafted system .
result: triple_list: [["trainable sentence planner", "Compare", "rule-based systems"], ["trainable sentence planner", "Compare", "baselines"], ["trainable sentence planner", "Compare", "hand-crafted system"], ["rule-based systems", "Conjunction", "baselines"], ["baselines", "Conjunction", "hand-crafted system"]]
pred: [('trainable sentence planner', 'Compare', 'rule-based systems'), ('trainable sentence planner', 'Compare', 'baselines'), ('trainable sentence planner', 'Compare', 'hand-crafted system'), ('rule-based systems', 'Conjunction', 'baselines'), ('baselines', 'Conjunction', 'hand-crafted system')]
trues: [['trainable sentence planner', 'Compare', 'rule-based systems'], ['trainable sentence planner', 'Compare', 'baselines'], ['trainable sentence planner', 'Compare', 'hand-crafted system'], ['rule-based systems', 'Conjunction', 'baselines'], ['baselines', 'Conjunction', 'hand-crafted system']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.31301939058171746, 0.3045822102425876, 0.3087431693989071]
text: A mixed-signal paradigm is presented for high-resolution parallel inner-product computation in very high dimensions , suitable for efficient implementation of kernels in image processing .
result: triple_list: [["mixed-signal paradigm", "Used_for", "high-resolution parallel inner-product computation"], ["mixed-signal paradigm", "Used_for", "kernels"], ["high-resolution parallel inner-product computation", "Used_for", "kernels"], ["high-resolution parallel inner-product computation", "Used_for", "image processing"], ["kernels", "Used_for", "image processing"]]
pred: [('mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'), ('mixed-signal paradigm', 'Used_for', 'kernels'), ('high-resolution parallel inner-product computation', 'Used_for', 'kernels'), ('high-resolution parallel inner-product computation', 'Used_for', 'image processing'), ('kernels', 'Used_for', 'image processing')]
trues: [['mixed-signal paradigm', 'Used_for', 'high-resolution parallel inner-product computation'], ['mixed-signal paradigm', 'Used_for', 'kernels'], ['kernels', 'Used_for', 'image processing']]
metrics_sample: [0.6, 1.0, 0.7499999999999999]
metrics_current: [0.31693989071038253, 0.31016042780748665, 0.31351351351351353]
text: Labeled data is replaced by a few hand-crafted rules that encode basic syntactic knowledge .
result: triple_list: [["Labeled data", "Compare", "hand-crafted rules"], ["syntactic knowledge", "Used_for", "hand-crafted rules"]]
pred: [('Labeled data', 'Compare', 'hand-crafted rules'), ('syntactic knowledge', 'Used_for', 'hand-crafted rules')]
trues: [['hand-crafted rules', 'Used_for', 'syntactic knowledge']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31521739130434784, 0.30933333333333335, 0.3122476446837147]
text: Some of the extracts were expert human translations , others were machine translation outputs .
result: triple_list: [["expert human translations", "Hyponym_of", "extracts"], ["expert human translations", "Conjunction", "machine translation outputs"], ["machine translation outputs", "Hyponym_of", "extracts"]]
pred: [('expert human translations', 'Hyponym_of', 'extracts'), ('expert human translations', 'Conjunction', 'machine translation outputs'), ('machine translation outputs', 'Hyponym_of', 'extracts')]
trues: [['machine translation outputs', 'Conjunction', 'expert human translations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31266846361185985, 0.30851063829787234, 0.3105756358768407]
text: In this paper , we introduce an annotation scheme for scientific articles which can be used to build such a resource in a consistent way .
result: triple_list: [["annotation scheme", "Used_for", "scientific articles"]]
pred: [('annotation scheme', 'Used_for', 'scientific articles')]
trues: [['annotation scheme', 'Used_for', 'scientific articles'], ['annotation scheme', 'Used_for', 'resource']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.31451612903225806, 0.30952380952380953, 0.31200000000000006]
text: In this paper , we describe a search procedure for statistical machine translation ( MT ) based on dynamic programming ( DP ) .
result: triple_list: [["search procedure", "Used_for", "statistical machine translation ( MT )"], ["dynamic programming ( DP )", "Used_for", "search procedure"]]
pred: [('search procedure', 'Used_for', 'statistical machine translation ( MT )'), ('dynamic programming ( DP )', 'Used_for', 'search procedure')]
trues: [['search procedure', 'Used_for', 'statistical machine translation ( MT )'], ['dynamic programming ( DP )', 'Used_for', 'statistical machine translation ( MT )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3155080213903743, 0.3105263157894737, 0.3129973474801061]
text: While Plume is well adapted to simple declarative and imperative utterances , it handles passives , relative clauses and interrogatives in an ad hoc manner leading to patchy syntactic coverage .
result: triple_list: [["Plume", "Used_for", "declarative and imperative utterances"], ["it", "Used_for", "passives"], ["it", "Used_for", "relative clauses"], ["it", "Used_for", "interrogatives"], ["patchy syntactic coverage", "Evaluate_for", "it"]]
pred: [('Plume', 'Used_for', 'declarative and imperative utterances'), ('it', 'Used_for', 'passives'), ('it', 'Used_for', 'relative clauses'), ('it', 'Used_for', 'interrogatives'), ('patchy syntactic coverage', 'Evaluate_for', 'it')]
trues: [['Plume', 'Used_for', 'declarative and imperative utterances'], ['it', 'Used_for', 'passives'], ['it', 'Used_for', 'relative clauses'], ['it', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [0.8, 0.6666666666666666, 0.7272727272727272]
metrics_current: [0.32189973614775724, 0.3160621761658031, 0.31895424836601305]
text: The perception of transparent objects from images is known to be a very hard problem in vision .
result: triple_list: [["images", "Used_for", "perception of transparent objects"]]
pred: [('images', 'Used_for', 'perception of transparent objects')]
trues: [['images', 'Used_for', 'perception of transparent objects']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3236842105263158, 0.3178294573643411, 0.32073011734028684]
text: However , acquiring the necessary training data is typically a tedious and time consuming task that involves manual interaction , active sensing devices and/or synthetic scenes .
result: triple_list: [["manual interaction", "Used_for", "training data"], ["active sensing devices", "Used_for", "training data"], ["synthetic scenes", "Used_for", "training data"], ["active sensing devices", "Conjunction", "synthetic scenes"]]
pred: [('manual interaction', 'Used_for', 'training data'), ('active sensing devices', 'Used_for', 'training data'), ('synthetic scenes', 'Used_for', 'training data'), ('active sensing devices', 'Conjunction', 'synthetic scenes')]
trues: [['manual interaction', 'Used_for', 'task'], ['manual interaction', 'Conjunction', 'active sensing devices'], ['active sensing devices', 'Used_for', 'task'], ['active sensing devices', 'Conjunction', 'synthetic scenes'], ['synthetic scenes', 'Used_for', 'task']]
metrics_sample: [0.25, 0.2, 0.22222222222222224]
metrics_current: [0.3229166666666667, 0.3163265306122449, 0.31958762886597936]
text: The resulting logical expression is then transformed by a planning algorithm into efficient Prolog , cf. query optimisation in a relational database .
result: triple_list: [["logical expression", "Used_for", "planning algorithm"], ["Prolog", "Used_for", "planning algorithm"], ["query optimisation in a relational database", "Used_for", "Prolog"]]
pred: [('logical expression', 'Used_for', 'planning algorithm'), ('Prolog', 'Used_for', 'planning algorithm'), ('query optimisation in a relational database', 'Used_for', 'Prolog')]
trues: [['planning algorithm', 'Used_for', 'logical expression'], ['relational database', 'Used_for', 'query optimisation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32041343669250644, 0.3147208121827411, 0.3175416133162612]
text: Based on these results , we present an ECA that uses verbal and nonverbal grounding acts to update dialogue state .
result: triple_list: [["ECA", "Used_for", "dialogue state"], ["verbal and nonverbal grounding acts", "Used_for", "ECA"]]
pred: [('ECA', 'Used_for', 'dialogue state'), ('verbal and nonverbal grounding acts', 'Used_for', 'ECA')]
trues: [['verbal and nonverbal grounding acts', 'Used_for', 'ECA'], ['verbal and nonverbal grounding acts', 'Used_for', 'dialogue state']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3213367609254499, 0.31565656565656564, 0.31847133757961776]
text: Furthermore , we show how the recently developed efficient subwindow search ( ESS ) procedure [ 11 ] can be integrated into the last stage of our method .
result: triple_list: [["efficient subwindow search ( ESS ) procedure", "Used_for", "method"]]
pred: [('efficient subwindow search ( ESS ) procedure', 'Used_for', 'method')]
trues: [['subwindow search ( ESS ) procedure', 'Part_of', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32051282051282054, 0.3148614609571788, 0.31766200762388813]
text: We present a strong detector based on combining a set of weak detectors .
result: triple_list: [["weak detectors", "Used_for", "detector"]]
pred: [('weak detectors', 'Used_for', 'detector')]
trues: [['detectors', 'Used_for', 'detector']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.319693094629156, 0.314070351758794, 0.31685678073510776]
text: Joint matrix triangularization is often used for estimating the joint eigenstructure of a set M of matrices , with applications in signal processing and machine learning .
result: triple_list: [["Joint matrix triangularization", "Used_for", "joint eigenstructure"], ["Joint matrix triangularization", "Used_for", "signal processing"], ["Joint matrix triangularization", "Used_for", "machine learning"], ["signal processing", "Conjunction", "machine learning"]]
pred: [('Joint matrix triangularization', 'Used_for', 'joint eigenstructure'), ('Joint matrix triangularization', 'Used_for', 'signal processing'), ('Joint matrix triangularization', 'Used_for', 'machine learning'), ('signal processing', 'Conjunction', 'machine learning')]
trues: [['Joint matrix triangularization', 'Used_for', 'joint eigenstructure'], ['joint eigenstructure', 'Used_for', 'signal processing'], ['joint eigenstructure', 'Used_for', 'machine learning'], ['signal processing', 'Conjunction', 'machine learning']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32151898734177214, 0.31592039800995025, 0.3186951066499373]
text: Our numerical hybrid local and global mode-seeking tracker is validated on challenging airborne videos with heavy occlusion and large camera motions .
result: triple_list: [["airborne videos", "Feature_of", "heavy occlusion and large camera motions"]]
pred: [('airborne videos', 'Feature_of', 'heavy occlusion and large camera motions')]
trues: [['airborne videos', 'Evaluate_for', 'numerical hybrid local and global mode-seeking tracker'], ['heavy occlusion', 'Feature_of', 'airborne videos'], ['heavy occlusion', 'Conjunction', 'camera motions'], ['camera motions', 'Feature_of', 'airborne videos']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3207070707070707, 0.312807881773399, 0.31670822942643395]
text: We apply cluster analysis on the sampled parameter space to redetect the object and renew the local tracker .
result: triple_list: [["cluster analysis", "Used_for", "local tracker"], ["sampled parameter space", "Feature_of", "cluster analysis"]]
pred: [('cluster analysis', 'Used_for', 'local tracker'), ('sampled parameter space', 'Feature_of', 'cluster analysis')]
trues: [['cluster analysis', 'Used_for', 'sampled parameter space'], ['cluster analysis', 'Used_for', 'local tracker']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32160804020100503, 0.3137254901960784, 0.3176178660049627]
text: This paper presents a critical discussion of the various approaches that have been used in the evaluation of Natural Language systems .
result: triple_list: [["approaches", "Used_for", "Natural Language systems"]]
pred: [('approaches', 'Used_for', 'Natural Language systems')]
trues: [['approaches', 'Used_for', 'evaluation of Natural Language systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3208020050125313, 0.31295843520782396, 0.3168316831683168]
text: We further propose a parameter training algorithm for the present model based on a decision tree-based context clustering .
result: triple_list: [["decision tree-based context clustering", "Used_for", "parameter training algorithm"]]
pred: [('decision tree-based context clustering', 'Used_for', 'parameter training algorithm')]
trues: [['parameter training algorithm', 'Used_for', 'model'], ['decision tree-based context clustering', 'Used_for', 'parameter training algorithm']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3225, 0.31386861313868614, 0.3181257706535142]
text: The model is evaluated on English and Czech newspaper texts , and is then validated on French broadcast news transcriptions .
result: triple_list: [["English and Czech newspaper texts", "Evaluate_for", "model"], ["French broadcast news transcriptions", "Evaluate_for", "model"]]
pred: [('English and Czech newspaper texts', 'Evaluate_for', 'model'), ('French broadcast news transcriptions', 'Evaluate_for', 'model')]
trues: [['English and Czech newspaper texts', 'Evaluate_for', 'model'], ['French broadcast news transcriptions', 'Evaluate_for', 'model']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32587064676616917, 0.3171912832929782, 0.3214723926380368]
text: Using the IEMOCAP database , discrete ( categorical ) and continuous ( attribute ) emotional assessments evaluated by the actors and na ¨ ıve listeners are compared .
result: triple_list: [["IEMOCAP database", "Evaluate_for", "discrete ( categorical ) and continuous ( attribute ) emotional assessments"]]
pred: [('IEMOCAP database', 'Evaluate_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments')]
trues: [['IEMOCAP database', 'Used_for', 'discrete ( categorical ) and continuous ( attribute ) emotional assessments']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3250620347394541, 0.3164251207729469, 0.32068543451652387]
text: The objects can be complex in that they may be composed of multiple layers with different refractive indices .
result: triple_list: [["layers", "Part_of", "objects"]]
pred: [('layers', 'Part_of', 'objects')]
trues: [['multiple layers', 'Part_of', 'they'], ['refractive indices', 'Feature_of', 'multiple layers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32425742574257427, 0.31490384615384615, 0.3195121951219513]
text: We use gray-level band-pass white noise patterns that increase robustness to indirect lighting and scene discontinuities .
result: triple_list: [["gray-level band-pass white noise patterns", "Used_for", "robustness"], ["gray-level band-pass white noise patterns", "Used_for", "indirect lighting"], ["gray-level band-pass white noise patterns", "Used_for", "scene discontinuities"], ["indirect lighting", "Conjunction", "scene discontinuities"]]
pred: [('gray-level band-pass white noise patterns', 'Used_for', 'robustness'), ('gray-level band-pass white noise patterns', 'Used_for', 'indirect lighting'), ('gray-level band-pass white noise patterns', 'Used_for', 'scene discontinuities'), ('indirect lighting', 'Conjunction', 'scene discontinuities')]
trues: [['robustness', 'Evaluate_for', 'gray-level band-pass white noise patterns'], ['indirect lighting', 'Feature_of', 'robustness'], ['indirect lighting', 'Conjunction', 'scene discontinuities'], ['scene discontinuities', 'Feature_of', 'robustness']]
metrics_sample: [0.25, 0.25, 0.25]
metrics_current: [0.3235294117647059, 0.3142857142857143, 0.31884057971014496]
text: It would also be effective as a move selector and move sorter for game tree search and as a training tool for Go players .
result: triple_list: [["It", "Used_for", "move selector"], ["It", "Used_for", "move sorter"], ["move selector", "Conjunction", "move sorter"], ["move sorter", "Used_for", "game tree search"], ["Go players", "Used_for", "training tool"]]
pred: [('It', 'Used_for', 'move selector'), ('It', 'Used_for', 'move sorter'), ('move selector', 'Conjunction', 'move sorter'), ('move sorter', 'Used_for', 'game tree search'), ('Go players', 'Used_for', 'training tool')]
trues: [['It', 'Used_for', 'move selector'], ['It', 'Used_for', 'move sorter'], ['It', 'Used_for', 'training tool'], ['move selector', 'Conjunction', 'move sorter'], ['move selector', 'Used_for', 'game tree search'], ['move sorter', 'Used_for', 'game tree search'], ['training tool', 'Used_for', 'Go players']]
metrics_sample: [0.8, 0.5714285714285714, 0.6666666666666666]
metrics_current: [0.32929782082324455, 0.3185011709601874, 0.3238095238095238]
text: The proposed detectors are able to capture large-scale structures and distinctive textured patterns , and exhibit strong invariance to rotation , illumination variation , and blur .
result: triple_list: [["detectors", "Used_for", "large-scale structures"], ["detectors", "Used_for", "distinctive textured patterns"], ["rotation", "Conjunction", "illumination variation"], ["illumination variation", "Conjunction", "blur"]]
pred: [('detectors', 'Used_for', 'large-scale structures'), ('detectors', 'Used_for', 'distinctive textured patterns'), ('rotation', 'Conjunction', 'illumination variation'), ('illumination variation', 'Conjunction', 'blur')]
trues: [['detectors', 'Used_for', 'large-scale structures'], ['detectors', 'Used_for', 'distinctive textured patterns'], ['detectors', 'Used_for', 'rotation'], ['detectors', 'Used_for', 'illumination variation'], ['detectors', 'Used_for', 'blur'], ['large-scale structures', 'Conjunction', 'distinctive textured patterns'], ['rotation', 'Conjunction', 'illumination variation'], ['illumination variation', 'Conjunction', 'blur']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.33573141486810554, 0.3218390804597701, 0.3286384976525822]
text: We extract a set of heuristic principles from a corpus-based sample and formulate them as probabilistic Horn clauses .
result: triple_list: [["corpus-based sample", "Used_for", "heuristic principles"], ["probabilistic Horn clauses", "Used_for", "heuristic principles"]]
pred: [('corpus-based sample', 'Used_for', 'heuristic principles'), ('probabilistic Horn clauses', 'Used_for', 'heuristic principles')]
trues: [['corpus-based sample', 'Used_for', 'heuristic principles'], ['probabilistic Horn clauses', 'Feature_of', 'heuristic principles']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.33651551312649164, 0.32265446224256294, 0.3294392523364486]
text: When the scene exhibits a persistent dynamic behavior in time , such an assumption is violated and detection performance deteriorates .
result: triple_list: [["detection", "Evaluate_for", "persistent dynamic behavior"]]
pred: [('detection', 'Evaluate_for', 'persistent dynamic behavior')]
trues: [['persistent dynamic behavior', 'Feature_of', 'scene']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3357142857142857, 0.3219178082191781, 0.3286713286713287]
text: With relevant approach , we identify important contents by PageRank algorithm on the event map constructed from documents .
result: triple_list: [["PageRank algorithm", "Used_for", "contents"], ["event map", "Used_for", "PageRank algorithm"], ["documents", "Used_for", "event map"]]
pred: [('PageRank algorithm', 'Used_for', 'contents'), ('event map', 'Used_for', 'PageRank algorithm'), ('documents', 'Used_for', 'event map')]
trues: [['PageRank algorithm', 'Used_for', 'relevant approach'], ['event map', 'Used_for', 'PageRank algorithm'], ['documents', 'Used_for', 'event map']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.3380614657210402, 0.3242630385487528, 0.33101851851851855]
text: We describe a fully automatic recognition system based on the proposed method and an extensive evaluation on 171 individuals and over 1300 video sequences with extreme illumination , pose and head motion variation .
result: triple_list: [["recognition system", "Used_for", "extreme illumination , pose and head motion variation"], ["method", "Used_for", "recognition system"]]
pred: [('recognition system', 'Used_for', 'extreme illumination , pose and head motion variation'), ('method', 'Used_for', 'recognition system')]
trues: [['method', 'Used_for', 'fully automatic recognition system'], ['video sequences', 'Evaluate_for', 'fully automatic recognition system'], ['illumination', 'Feature_of', 'video sequences'], ['illumination', 'Conjunction', 'pose'], ['pose', 'Feature_of', 'video sequences'], ['pose', 'Conjunction', 'head motion variation'], ['head motion variation', 'Feature_of', 'video sequences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33647058823529413, 0.31919642857142855, 0.32760595647193586]
text: This phenomenon causes many image processing techniques to fail as they assume the presence of only one layer at each examined site e.g. motion estimation and object recognition .
result: triple_list: [["they", "Used_for", "image processing techniques"]]
pred: [('they', 'Used_for', 'image processing techniques')]
trues: [['motion estimation', 'Conjunction', 'object recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33568075117370894, 0.3184855233853007, 0.3268571428571429]
text: In the second half of the paper , we report a laboratory study using the Wizard of Oz technique to identify NL requirements for carrying out this task .
result: triple_list: [["Wizard of Oz technique", "Used_for", "NL requirements"], ["task", "Used_for", "NL requirements"]]
pred: [('Wizard of Oz technique', 'Used_for', 'NL requirements'), ('task', 'Used_for', 'NL requirements')]
trues: [['Wizard of Oz technique', 'Used_for', 'NL requirements'], ['Wizard of Oz technique', 'Used_for', 'task']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3364485981308411, 0.31929046563192903, 0.32764505119453924]
text: We also derive an efficient non-linear extension of WARCA by using the kernel trick .
result: triple_list: [["non-linear extension of WARCA", "Used_for", "non-linear extension of WARCA"], ["kernel trick", "Used_for", "non-linear extension of WARCA"]]
pred: [('non-linear extension of WARCA', 'Used_for', 'non-linear extension of WARCA'), ('kernel trick', 'Used_for', 'non-linear extension of WARCA')]
trues: [['kernel trick', 'Used_for', 'non-linear extension of WARCA']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3372093023255814, 0.32079646017699115, 0.32879818594104304]
text: The subjects were given three minutes per extract to determine whether they believed the sample output to be an expert human translation or a machine translation .
result: triple_list: [["extracts", "Used_for", "expert human translation"], ["extracts", "Used_for", "machine translation"], ["expert human translation", "Compare", "machine translation"]]
pred: [('extracts', 'Used_for', 'expert human translation'), ('extracts', 'Used_for', 'machine translation'), ('expert human translation', 'Compare', 'machine translation')]
trues: [['expert human translation', 'Compare', 'machine translation']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3371824480369515, 0.32229580573951433, 0.3295711060948081]
text: Our combination methods rely on predominant senses which are derived automatically from raw text .
result: triple_list: [["raw text", "Used_for", "predominant senses"]]
pred: [('raw text', 'Used_for', 'predominant senses')]
trues: [['predominant senses', 'Used_for', 'combination methods'], ['raw text', 'Used_for', 'predominant senses']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3387096774193548, 0.3230769230769231, 0.33070866141732286]
text: Based on this , MINPRAN uses random sampling to search for the t and the number of inliers to the t that are least likely to have occurred randomly .
result: triple_list: [["random sampling", "Used_for", "MINPRAN"], ["t", "Used_for", "MINPRAN"]]
pred: [('random sampling', 'Used_for', 'MINPRAN'), ('t', 'Used_for', 'MINPRAN')]
trues: [['random sampling', 'Used_for', 'MINPRAN']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3394495412844037, 0.32456140350877194, 0.33183856502242154]
text: It models reflection as regions containing two different layers moving over each other .
result: triple_list: [["layers", "Part_of", "region"]]
pred: [('layers', 'Part_of', 'region')]
trues: [['It', 'Used_for', 'reflection']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33867276887871856, 0.3238512035010941, 0.33109619686800895]
text: In this paper , we propose a novel moderate positive sample mining method to train robust CNN for person re-identification , dealing with the problem of large variation .
result: triple_list: [["modulate positive sample mining method", "Used_for", "robust CNN"], ["modulate positive sample mining method", "Used_for", "person re-identification"], ["robust CNN", "Used_for", "person re-identification"], ["large variation", "Feature_of", "person re-identification"]]
pred: [('modulate positive sample mining method', 'Used_for', 'robust CNN'), ('modulate positive sample mining method', 'Used_for', 'person re-identification'), ('robust CNN', 'Used_for', 'person re-identification'), ('large variation', 'Feature_of', 'person re-identification')]
trues: [['moderate positive sample mining method', 'Used_for', 'robust CNN'], ['robust CNN', 'Used_for', 'person re-identification']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.3378684807256236, 0.32461873638344224, 0.3311111111111111]
text: This probably occurs because each model has different strengths and weaknesses for modeling the knowledge sources .
result: triple_list: [["model", "Used_for", "knowledge sources"]]
pred: [('model', 'Used_for', 'knowledge sources')]
trues: [['model', 'Used_for', 'knowledge sources']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3393665158371041, 0.32608695652173914, 0.3325942350332594]
text: Overall summarization quality of the proposed system is state-of-the-art , with guaranteed grammaticality of the system output due to the use of a constraint-based parser/generator .
result: triple_list: [["system", "Used_for", "summarization quality"], ["grammaticality", "Evaluate_for", "system"], ["constraint-based parser/generator", "Used_for", "grammaticality"]]
pred: [('system', 'Used_for', 'summarization quality'), ('grammaticality', 'Evaluate_for', 'system'), ('constraint-based parser/generator', 'Used_for', 'grammaticality')]
trues: [['summarization quality', 'Evaluate_for', 'system'], ['grammaticality', 'Evaluate_for', 'system'], ['constraint-based parser/generator', 'Used_for', 'system']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.3393258426966292, 0.326133909287257, 0.33259911894273125]
text: We have implemented a restricted domain parser called Plume .
result: triple_list: [["Plume", "Hyponym_of", "restricted domain parser"]]
pred: [('Plume', 'Hyponym_of', 'restricted domain parser')]
trues: [['Plume', 'Hyponym_of', 'restricted domain parser']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34080717488789236, 0.3275862068965517, 0.33406593406593404]
text: In practice , the current deep embedding methods use the Euclidean distance for the training and test .
result: triple_list: [["Euclidean distance", "Used_for", "deep embedding methods"]]
pred: [('Euclidean distance', 'Used_for', 'deep embedding methods')]
trues: [['Euclidean distance', 'Used_for', 'deep embedding methods']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3422818791946309, 0.32903225806451614, 0.33552631578947373]
text: Learned confidence measures gain increasing importance for outlier removal and quality improvement in stereo vision .
result: triple_list: [["Learned confidence measures", "Used_for", "outlier removal and quality improvement"], ["stereo vision", "Feature_of", "outlier removal and quality improvement"]]
pred: [('Learned confidence measures', 'Used_for', 'outlier removal and quality improvement'), ('stereo vision', 'Feature_of', 'outlier removal and quality improvement')]
trues: [['Learned confidence measures', 'Used_for', 'outlier removal'], ['Learned confidence measures', 'Used_for', 'quality improvement'], ['outlier removal', 'Conjunction', 'quality improvement'], ['outlier removal', 'Part_of', 'stereo vision'], ['quality improvement', 'Part_of', 'stereo vision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34075723830734966, 0.32553191489361705, 0.3329706202393906]
text: Here , we leverage a logistic stick-breaking representation and recent innovations in Pólya-gamma augmentation to reformu-late the multinomial distribution in terms of latent variables with jointly Gaussian likelihoods , enabling us to take advantage of a host of Bayesian inference techniques for Gaussian models with minimal overhead .
result: triple_list: [["logistic stick-breaking representation", "Used_for", "multinomial distribution"], ["Pólya-gamma augmentation", "Used_for", "multinomial distribution"], ["jointly Gaussian likelihoods", "Feature_of", "latent variables"], ["Bayesian inference techniques", "Used_for", "Gaussian models"], ["overhead", "Feature_of", "Bayesian inference techniques"]]
pred: [('logistic stick-breaking representation', 'Used_for', 'multinomial distribution'), ('Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'), ('jointly Gaussian likelihoods', 'Feature_of', 'latent variables'), ('Bayesian inference techniques', 'Used_for', 'Gaussian models'), ('overhead', 'Feature_of', 'Bayesian inference techniques')]
trues: [['logistic stick-breaking representation', 'Used_for', 'multinomial distribution'], ['Pólya-gamma augmentation', 'Used_for', 'multinomial distribution'], ['latent variables', 'Part_of', 'multinomial distribution'], ['jointly Gaussian likelihoods', 'Feature_of', 'latent variables'], ['Bayesian inference techniques', 'Used_for', 'Gaussian models'], ['minimal overhead', 'Feature_of', 'Gaussian models']]
metrics_sample: [0.8, 0.6666666666666666, 0.7272727272727272]
metrics_current: [0.3458149779735683, 0.32983193277310924, 0.3376344086021505]
text: To evaluate our proposed model , we build a large streaming video dataset with annotations .
result: triple_list: [["large streaming video dataset", "Evaluate_for", "model"], ["annotations", "Used_for", "large streaming video dataset"]]
pred: [('large streaming video dataset', 'Evaluate_for', 'model'), ('annotations', 'Used_for', 'large streaming video dataset')]
trues: [['streaming video dataset', 'Evaluate_for', 'model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3442982456140351, 0.32914046121593293, 0.3365487674169346]
text: In this paper , we present an approach to rapidly creating pixel-accurate semantic label maps for images extracted from modern computer games .
result: triple_list: [["approach", "Used_for", "semantic label maps"], ["images", "Feature_of", "computer games"]]
pred: [('approach', 'Used_for', 'semantic label maps'), ('images', 'Feature_of', 'computer games')]
trues: [['approach', 'Used_for', 'pixel-accurate semantic label maps'], ['pixel-accurate semantic label maps', 'Used_for', 'images'], ['images', 'Part_of', 'modern computer games']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34279475982532753, 0.32708333333333334, 0.3347547974413646]
text: In general , our CRF model yields a lower error rate than the HMM and Max-ent models on the NIST sentence boundary detection task in speech , although it is interesting to note that the best results are achieved by three-way voting among the classifiers .
result: triple_list: [["CRF model", "Compare", "HMM and Max-ent models"], ["NIST sentence boundary detection task", "Evaluate_for", "CRF model"], ["NIST sentence boundary detection task", "Evaluate_for", "HMM and Max-ent models"], ["speech", "Feature_of", "NIST sentence boundary detection task"], ["three-way voting", "Used_for", "classifiers"]]
pred: [('CRF model', 'Compare', 'HMM and Max-ent models'), ('NIST sentence boundary detection task', 'Evaluate_for', 'CRF model'), ('NIST sentence boundary detection task', 'Evaluate_for', 'HMM and Max-ent models'), ('speech', 'Feature_of', 'NIST sentence boundary detection task'), ('three-way voting', 'Used_for', 'classifiers')]
trues: [['CRF model', 'Compare', 'HMM and Max-ent models'], ['error rate', 'Evaluate_for', 'CRF model'], ['error rate', 'Evaluate_for', 'HMM and Max-ent models'], ['NIST sentence boundary detection task', 'Evaluate_for', 'CRF model'], ['NIST sentence boundary detection task', 'Evaluate_for', 'HMM and Max-ent models'], ['speech', 'Feature_of', 'NIST sentence boundary detection task'], ['classifiers', 'Used_for', 'three-way voting']]
metrics_sample: [0.8, 0.5714285714285714, 0.6666666666666666]
metrics_current: [0.34773218142548595, 0.33059548254620125, 0.33894736842105266]
text: We discuss several applications of the result to the problem of distributional approximation of probabilistic context-free grammars by means of probabilistic finite automata .
result: triple_list: [["distributional approximation of probabilistic context-free grammars", "Used_for", "applications"], ["probabilistic finite automata", "Used_for", "distributional approximation of probabilistic context-free grammars"]]
pred: [('distributional approximation of probabilistic context-free grammars', 'Used_for', 'applications'), ('probabilistic finite automata', 'Used_for', 'distributional approximation of probabilistic context-free grammars')]
trues: [['distributional approximation', 'Feature_of', 'probabilistic context-free grammars'], ['probabilistic finite automata', 'Used_for', 'distributional approximation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34623655913978496, 0.3292433537832311, 0.3375262054507338]
text: We investigate the verbal and nonverbal means for grounding , and propose a design for embodied conversational agents that relies on both kinds of signals to establish common ground in human-computer interaction .
result: triple_list: [["verbal and nonverbal means", "Used_for", "grounding"], ["grounding", "Part_of", "embodied conversational agents"]]
pred: [('verbal and nonverbal means', 'Used_for', 'grounding'), ('grounding', 'Part_of', 'embodied conversational agents')]
trues: [['verbal and nonverbal means', 'Used_for', 'grounding'], ['design', 'Used_for', 'embodied conversational agents'], ['common ground', 'Used_for', 'human-computer interaction']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3468950749464668, 0.32926829268292684, 0.33785192909280504]
text: To our knowledge , this is the first a posteriori bound for joint matrix decomposition .
result: triple_list: [["a posteriori bound", "Used_for", "joint matrix decomposition"]]
pred: [('a posteriori bound', 'Used_for', 'joint matrix decomposition')]
trues: [['posteriori bound', 'Used_for', 'joint matrix decomposition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34615384615384615, 0.3286004056795132, 0.33714880332986474]
text: Our study reveals that the syntactic structure features embedded in a parse tree are very effective for relation extraction and these features can be well captured by the convolution tree kernel .
result: triple_list: [["parse tree", "Used_for", "relation extraction"], ["syntactic structure features", "Part_of", "parse tree"], ["relation extraction", "Conjunction", "syntactic structure features"], ["convolution tree kernel", "Used_for", "features"]]
pred: [('parse tree', 'Used_for', 'relation extraction'), ('syntactic structure features', 'Part_of', 'parse tree'), ('relation extraction', 'Conjunction', 'syntactic structure features'), ('convolution tree kernel', 'Used_for', 'features')]
trues: [['syntactic structure features', 'Feature_of', 'parse tree'], ['syntactic structure features', 'Used_for', 'relation extraction'], ['convolution tree kernel', 'Used_for', 'features']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.3453389830508475, 0.3286290322580645, 0.3367768595041322]
text: Finally , a novel feature weighting and selection function is presented , which yields superior feature vectors and better word similarity performance .
result: triple_list: [["feature weighting and selection function", "Used_for", "feature vectors"], ["feature weighting and selection function", "Used_for", "word similarity"], ["feature vectors", "Compare", "word similarity"]]
pred: [('feature weighting and selection function', 'Used_for', 'feature vectors'), ('feature weighting and selection function', 'Used_for', 'word similarity'), ('feature vectors', 'Compare', 'word similarity')]
trues: [['feature weighting and selection function', 'Used_for', 'feature vectors'], ['feature weighting and selection function', 'Used_for', 'word similarity'], ['feature vectors', 'Conjunction', 'word similarity']]
metrics_sample: [0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
metrics_current: [0.3473684210526316, 0.3306613226452906, 0.33880903490759756]
text: In order to perform an exhaustive comparison , we also evaluate a hand-crafted template-based generation component , two rule-based sentence planners , and two baseline sentence planners .
result: triple_list: [["hand-crafted template-based generation component", "Evaluate_for", "system"], ["rule-based sentence planners", "Evaluate_for", "system"], ["rule-based sentence planners", "Conjunction", "baseline sentence planners"], ["baseline sentence planners", "Evaluate_for", "system"]]
pred: [('hand-crafted template-based generation component', 'Evaluate_for', 'system'), ('rule-based sentence planners', 'Evaluate_for', 'system'), ('rule-based sentence planners', 'Conjunction', 'baseline sentence planners'), ('baseline sentence planners', 'Evaluate_for', 'system')]
trues: [['hand-crafted template-based generation component', 'Conjunction', 'rule-based sentence planners'], ['rule-based sentence planners', 'Conjunction', 'baseline sentence planners']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.3465553235908142, 0.3313373253493014, 0.33877551020408164]
text: We test our algorithm on the detection task and the viewpoint classification task by using '' car '' category from both the Savarese et al. 2007 and PASCAL VOC 2006 datasets .
result: triple_list: [["car", "Hyponym_of", "'' car '' category"], ["'' car '' category", "Used_for", "detection task"], ["'' car '' category", "Used_for", "viewpoint classification task"], ["Savarese et al. 2007", "Evaluate_for", "'' car '' category"], ["PASCAL VOC 2006 datasets", "Evaluate_for", "'' car '' category"]]
pred: [('car', 'Hyponym_of', "'' car '' category"), ("'' car '' category", 'Used_for', 'detection task'), ("'' car '' category", 'Used_for', 'viewpoint classification task'), ('Savarese et al. 2007', 'Evaluate_for', "'' car '' category"), ('PASCAL VOC 2006 datasets', 'Evaluate_for', "'' car '' category")]
trues: [['algorithm', 'Used_for', 'detection task'], ['algorithm', 'Used_for', 'viewpoint classification task'], ['detection task', 'Conjunction', 'viewpoint classification task'], ['PASCAL VOC 2006 datasets', 'Evaluate_for', 'algorithm']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34297520661157027, 0.3287128712871287, 0.3356926188068757]
text: Full digital resolution is maintained even with low-resolution analog-to-digital conversion , owing to random statistics in the analog summation of binary products .
result: triple_list: [["low-resolution analog-to-digital conversion", "Evaluate_for", "random statistics"], ["random statistics", "Feature_of", "analog summation of binary products"]]
pred: [('low-resolution analog-to-digital conversion', 'Evaluate_for', 'random statistics'), ('random statistics', 'Feature_of', 'analog summation of binary products')]
trues: [['random statistics', 'Part_of', 'analog summation of binary products']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34156378600823045, 0.32806324110671936, 0.3346774193548387]
text: Fast algorithms for nearest neighbor ( NN ) search have in large part focused on 2 distance .
result: triple_list: [["Fast algorithms", "Used_for", "nearest neighbor ( NN ) search"], ["2 distance", "Used_for", "Fast algorithms"]]
pred: [('Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search'), ('2 distance', 'Used_for', 'Fast algorithms')]
trues: [['Fast algorithms', 'Used_for', 'nearest neighbor ( NN ) search']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3422131147540984, 0.32938856015779094, 0.335678391959799]
text: We rigorously establish the correctness of the methodology and show by experimentation using LSH that it is competitive in practice with available alternatives .
result: triple_list: [["it", "Compare", "alternatives"]]
pred: [('it', 'Compare', 'alternatives')]
trues: [['it', 'Compare', 'alternatives']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34355828220858897, 0.33070866141732286, 0.33701103309929786]
text: Translations are produced by means of a beam-search decoder .
result: triple_list: [["beam-search decoder", "Used_for", "Translations"]]
pred: [('beam-search decoder', 'Used_for', 'Translations')]
trues: [['beam-search decoder', 'Used_for', 'Translations']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3448979591836735, 0.3320235756385069, 0.3383383383383383]
text: Relaxations of these properties expose some of the interesting ( and unavoidable ) trade-offs at work in well-studied clustering techniques such as single-linkage , sum-of-pairs , k-means , and k-median .
result: triple_list: [["single-linkage", "Hyponym_of", "clustering techniques"], ["single-linkage", "Conjunction", "sum-of-pairs"], ["sum-of-pairs", "Hyponym_of", "clustering techniques"], ["sum-of-pairs", "Conjunction", "k-means"], ["k-means", "Hyponym_of", "clustering techniques"], ["k-means", "Conjunction", "k-median"], ["k-median", "Hyponym_of", "clustering techniques"]]
pred: [('single-linkage', 'Hyponym_of', 'clustering techniques'), ('single-linkage', 'Conjunction', 'sum-of-pairs'), ('sum-of-pairs', 'Hyponym_of', 'clustering techniques'), ('sum-of-pairs', 'Conjunction', 'k-means'), ('k-means', 'Hyponym_of', 'clustering techniques'), ('k-means', 'Conjunction', 'k-median'), ('k-median', 'Hyponym_of', 'clustering techniques')]
trues: [['single-linkage', 'Hyponym_of', 'well-studied clustering techniques'], ['single-linkage', 'Conjunction', 'sum-of-pairs'], ['sum-of-pairs', 'Hyponym_of', 'well-studied clustering techniques'], ['sum-of-pairs', 'Conjunction', 'k-means'], ['k-means', 'Hyponym_of', 'well-studied clustering techniques'], ['k-means', 'Conjunction', 'k-median'], ['k-median', 'Hyponym_of', 'well-studied clustering techniques']]
metrics_sample: [0.42857142857142855, 0.42857142857142855, 0.42857142857142855]
metrics_current: [0.3460764587525151, 0.3333333333333333, 0.3395853899308983]
text: The strong description and modeling properties of differential features make them useful tools that can be efficiently used as constraints for 3 -- D reconstruction .
result: triple_list: [["differential features", "Used_for", "3 -- D reconstruction"]]
pred: [('differential features', 'Used_for', '3 -- D reconstruction')]
trues: [['them', 'Used_for', '3 -- D reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3453815261044177, 0.33268858800773693, 0.3389162561576355]
text: We present a novel approach for automatically acquiring English topic signatures .
result: triple_list: [["approach", "Used_for", "English topic signatures"]]
pred: [('approach', 'Used_for', 'English topic signatures')]
trues: [['approach', 'Used_for', 'automatically acquiring English topic signatures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34468937875751504, 0.33204633204633205, 0.3382497541789577]
text: Moreover , a cost zero solution always exists and can only be excluded by hard budget constraints .
result: triple_list: [["cost zero solution", "Used_for", "hard budget constraints"]]
pred: [('cost zero solution', 'Used_for', 'hard budget constraints')]
trues: [['hard budget constraints', 'Used_for', 'cost zero solution']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.344, 0.33140655105973027, 0.33758586849852795]
text: Both classifiers perform the best when conversational context and utterance features are combined with speaker 's gaze information .
result: triple_list: [["classifiers", "Used_for", "conversational context"], ["classifiers", "Used_for", "utterance features"], ["speaker 's gaze information", "Used_for", "classifiers"], ["conversational context", "Conjunction", "utterance features"]]
pred: [('classifiers', 'Used_for', 'conversational context'), ('classifiers', 'Used_for', 'utterance features'), ("speaker 's gaze information", 'Used_for', 'classifiers'), ('conversational context', 'Conjunction', 'utterance features')]
trues: [['conversational context', 'Used_for', 'classifiers'], ['conversational context', 'Conjunction', 'utterance features'], ['utterance features', 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Used_for', 'classifiers'], ["speaker 's gaze information", 'Conjunction', 'utterance features']]
metrics_sample: [0.5, 0.4, 0.4444444444444445]
metrics_current: [0.34523809523809523, 0.3320610687022901, 0.3385214007782101]
text: In this paper , a novel framework for machine transliteration/backtransliteration that allows us to carry out direct orthographical mapping ( DOM ) between two different languages is presented .
result: triple_list: [["framework", "Used_for", "machine transliteration/backtransliteration"], ["orthographical mapping ( DOM )", "Feature_of", "direct orthographical mapping ( DOM )"]]
pred: [('framework', 'Used_for', 'machine transliteration/backtransliteration'), ('orthographical mapping ( DOM )', 'Feature_of', 'direct orthographical mapping ( DOM )')]
trues: [['framework', 'Used_for', 'machine transliteration/backtransliteration'], ['machine transliteration/backtransliteration', 'Used_for', 'direct orthographical mapping ( DOM )']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3458498023715415, 0.33269961977186313, 0.3391472868217055]
text: The system incorporates a decision-tree classifier for 30 scf types which tests for the presence of grammatical relations ( grs ) in the output of a robust statistical parser .
result: triple_list: [["system", "Used_for", "grammatical relations ( grs )"], ["decision-tree classifier", "Used_for", "system"], ["grammatical relations ( grs )", "Feature_of", "robust statistical parser"]]
pred: [('system', 'Used_for', 'grammatical relations ( grs )'), ('decision-tree classifier', 'Used_for', 'system'), ('grammatical relations ( grs )', 'Feature_of', 'robust statistical parser')]
trues: [['decision-tree classifier', 'Part_of', 'system'], ['decision-tree classifier', 'Used_for', 'grammatical relations ( grs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.343811394891945, 0.3314393939393939, 0.33751205400192863]
text: This distribution has numerous applications in computer Go , including serving as an efficient stand-alone Go player .
result: triple_list: [["distribution", "Used_for", "computer Go"], ["stand-alone Go player", "Hyponym_of", "computer Go"]]
pred: [('distribution', 'Used_for', 'computer Go'), ('stand-alone Go player', 'Hyponym_of', 'computer Go')]
trues: [['distribution', 'Used_for', 'computer Go']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.34442270058708413, 0.332703213610586, 0.3384615384615384]
text: We report experiments conducted on a multilingual corpus to estimate the number of analogies among the sentences that it contains .
result: triple_list: [["multilingual corpus", "Used_for", "number of analogies"]]
pred: [('multilingual corpus', 'Used_for', 'number of analogies')]
trues: [['multilingual corpus', 'Evaluate_for', 'analogies']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34375, 0.3320754716981132, 0.3378119001919386]
text: Thus , in this paper , we study the problem of robust PCA with side information , where both prior structure and features of entities are exploited for recovery .
result: triple_list: [["prior structure", "Conjunction", "features of entities"], ["features of entities", "Feature_of", "recovery"]]
pred: [('prior structure', 'Conjunction', 'features of entities'), ('features of entities', 'Feature_of', 'recovery')]
trues: [['side information', 'Used_for', 'robust PCA'], ['prior structure', 'Conjunction', 'features of entities'], ['prior structure', 'Used_for', 'recovery'], ['features of entities', 'Used_for', 'recovery']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.3443579766536965, 0.33146067415730335, 0.3377862595419847]
text: This paper presents a novel representation for three-dimensional objects in terms of affine-invariant image patches and their spatial relationships .
result: triple_list: [["affine-invariant image patches", "Used_for", "three-dimensional objects"], ["affine-invariant image patches", "Conjunction", "spatial relationships"], ["spatial relationships", "Used_for", "three-dimensional objects"]]
pred: [('affine-invariant image patches', 'Used_for', 'three-dimensional objects'), ('affine-invariant image patches', 'Conjunction', 'spatial relationships'), ('spatial relationships', 'Used_for', 'three-dimensional objects')]
trues: [['representation', 'Used_for', 'three-dimensional objects'], ['affine-invariant image patches', 'Feature_of', 'three-dimensional objects'], ['spatial relationships', 'Feature_of', 'affine-invariant image patches']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34235976789168276, 0.329608938547486, 0.3358633776091081]
text: We then turn to a discussion comparing the linguistic expressiveness of the two formalisms .
result: triple_list: [["linguistic expressiveness", "Evaluate_for", "formalisms"]]
pred: [('linguistic expressiveness', 'Evaluate_for', 'formalisms')]
trues: [['linguistic expressiveness', 'Feature_of', 'formalisms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3416988416988417, 0.32899628252788105, 0.3352272727272727]
text: Utterance Verification ( UV ) is a critical function of an Automatic Speech Recognition ( ASR ) System working on real applications where spontaneous speech , out-of-vocabulary ( OOV ) words and acoustic noises are present .
result: triple_list: [["Utterance Verification ( UV )", "Hyponym_of", "Automatic Speech Recognition ( ASR ) System"]]
pred: [('Utterance Verification ( UV )', 'Hyponym_of', 'Automatic Speech Recognition ( ASR ) System')]
trues: [['Utterance Verification ( UV )', 'Hyponym_of', 'Automatic Speech Recognition ( ASR ) System']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.34296724470134876, 0.3302411873840445, 0.33648393194706994]
text: This paper describes a method for incorporating priming into an incremental probabilistic parser .
result: triple_list: [["method", "Used_for", "priming"], ["method", "Part_of", "incremental probabilistic parser"]]
pred: [('method', 'Used_for', 'priming'), ('method', 'Part_of', 'incremental probabilistic parser')]
trues: [['method', 'Used_for', 'priming'], ['priming', 'Used_for', 'incremental probabilistic parser']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3435700575815739, 0.33086876155268025, 0.3370998116760829]
text: Background modeling is an important component of many vision systems .
result: triple_list: [["Background modeling", "Part_of", "vision systems"]]
pred: [('Background modeling', 'Part_of', 'vision systems')]
trues: [['Background modeling', 'Part_of', 'vision systems']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3448275862068966, 0.33210332103321033, 0.33834586466165417]
text: In the experiments , we used a variety of methods for preparing a segmented corpus and compared the language models by their speech recognition accuracies .
result: triple_list: [["methods", "Used_for", "segmented corpus"], ["language models", "Evaluate_for", "speech recognition accuracies"]]
pred: [('methods', 'Used_for', 'segmented corpus'), ('language models', 'Evaluate_for', 'speech recognition accuracies')]
trues: [['methods', 'Used_for', 'preparing a segmented corpus'], ['speech recognition accuracies', 'Evaluate_for', 'language models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3435114503816794, 0.33088235294117646, 0.3370786516853933]
text: This paper presents the results of automatically inducing a Combinatory Categorial Grammar ( CCG ) lexicon from a Turkish dependency treebank .
result: triple_list: [["dependency treebank", "Used_for", "Combinatory Categorical Grammar ( CCG ) lexicon"]]
pred: [('dependency treebank', 'Used_for', 'Combinatory Categorical Grammar ( CCG ) lexicon')]
trues: [['Combinatory Categorial Grammar ( CCG ) lexicon', 'Part_of', 'Turkish dependency treebank']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34285714285714286, 0.3302752293577982, 0.3364485981308411]
text: Our results show that MBR decoding can be used to tune statistical MT performance for specific loss functions .
result: triple_list: [["MBR decoding", "Used_for", "statistical MT performance"]]
pred: [('MBR decoding', 'Used_for', 'statistical MT performance')]
trues: [['MBR decoding', 'Used_for', 'statistical MT'], ['MBR decoding', 'Used_for', 'loss functions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34220532319391633, 0.3290676416819013, 0.3355079217148183]
text: Our system incorporates a linguistic parser/generator for LFG , a transfer component for parse reduction operating on packed parse forests , and a maximum-entropy model for stochastic output selection .
result: triple_list: [["system", "Used_for", "maximum-entropy model"], ["maximum-entropy model", "Used_for", "stochastic output selection"]]
pred: [('system', 'Used_for', 'maximum-entropy model'), ('maximum-entropy model', 'Used_for', 'stochastic output selection')]
trues: [['linguistic parser/generator', 'Part_of', 'system'], ['linguistic parser/generator', 'Used_for', 'LFG'], ['linguistic parser/generator', 'Conjunction', 'transfer component'], ['transfer component', 'Part_of', 'system'], ['transfer component', 'Used_for', 'parse reduction'], ['transfer component', 'Conjunction', 'maximum-entropy model'], ['packed parse forests', 'Used_for', 'parse reduction'], ['maximum-entropy model', 'Part_of', 'system'], ['maximum-entropy model', 'Used_for', 'stochastic output selection']]
metrics_sample: [0.5, 0.1111111111111111, 0.1818181818181818]
metrics_current: [0.3428030303030303, 0.3255395683453237, 0.3339483394833948]
text: In previous work , we have developed hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers that integrate textual and prosodic knowledge sources for detecting sentence boundaries .
result: triple_list: [["hidden Markov model ( HMM )", "Conjunction", "maximum entropy ( Maxent )"], ["hidden Markov model ( HMM )", "Used_for", "sentence boundaries"], ["maximum entropy ( Maxent )", "Used_for", "sentence boundaries"]]
pred: [('hidden Markov model ( HMM )', 'Conjunction', 'maximum entropy ( Maxent )'), ('hidden Markov model ( HMM )', 'Used_for', 'sentence boundaries'), ('maximum entropy ( Maxent )', 'Used_for', 'sentence boundaries')]
trues: [['hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers', 'Used_for', 'detecting sentence boundaries'], ['textual and prosodic knowledge sources', 'Used_for', 'hidden Markov model ( HMM ) and maximum entropy ( Maxent ) classifiers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3408662900188324, 0.32437275985663083, 0.33241505968778695]
text: A new tool for linguistic annotation of scfs in corpus data is also introduced which can considerably alleviate the process of obtaining training and test data for subcategorization acquisition .
result: triple_list: [["tool", "Used_for", "linguistic annotation of scfs in corpus data"], ["tool", "Used_for", "process of obtaining training and test data"], ["tool", "Used_for", "subcategorization acquisition"]]
pred: [('tool', 'Used_for', 'linguistic annotation of scfs in corpus data'), ('tool', 'Used_for', 'process of obtaining training and test data'), ('tool', 'Used_for', 'subcategorization acquisition')]
trues: [['tool', 'Used_for', 'linguistic annotation of scfs'], ['training and test data', 'Used_for', 'subcategorization acquisition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3389513108614232, 0.32321428571428573, 0.33089579524680074]
text: Starting from a DP-based solution to the traveling salesman problem , we present a novel technique to restrict the possible word reordering between source and target language in order to achieve an efficient search algorithm .
result: triple_list: [["DP-based solution", "Used_for", "traveling salesman problem"], ["DP-based solution", "Used_for", "restricted word reordering"], ["restricted word reordering", "Feature_of", "search algorithm"]]
pred: [('DP-based solution', 'Used_for', 'traveling salesman problem'), ('DP-based solution', 'Used_for', 'restricted word reordering'), ('restricted word reordering', 'Feature_of', 'search algorithm')]
trues: [['technique', 'Used_for', 'search algorithm']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3370577281191806, 0.3226381461675579, 0.3296903460837887]
text: We present a new method for detecting interest points using histogram information .
result: triple_list: [["method", "Used_for", "interest points"], ["histogram information", "Used_for", "method"]]
pred: [('method', 'Used_for', 'interest points'), ('histogram information', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'detecting interest points'], ['histogram information', 'Used_for', 'detecting interest points']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3358070500927644, 0.32149200710479575, 0.3284936479128857]
text: However , they provide no guarantee of being more efficient than exhaustive search .
result: triple_list: [["they", "Compare", "exhaustive search"]]
pred: [('they', 'Compare', 'exhaustive search')]
trues: [['they', 'Compare', 'exhaustive search']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.337037037037037, 0.32269503546099293, 0.3297101449275362]
text: SVMs are known to be robust to overfitting ; however , a few training examples usually do not represent well the structure of the class .
result: triple_list: [["SVMs", "Used_for", "overfitting"]]
pred: [('SVMs', 'Used_for', 'overfitting')]
trues: [['SVMs', 'Used_for', 'overfitting']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33826247689463956, 0.3238938053097345, 0.3309222423146474]
text: Topical blog post retrieval is the task of ranking blog posts with respect to their relevance for a given topic .
result: triple_list: [["blog posts", "Used_for", "Topical blog post retrieval"], ["topic", "Used_for", "blog posts"]]
pred: [('blog posts', 'Used_for', 'Topical blog post retrieval'), ('topic', 'Used_for', 'blog posts')]
trues: [['Topical blog post retrieval', 'Hyponym_of', 'ranking blog posts'], ['relevance', 'Feature_of', 'blog posts']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3370165745856354, 0.32275132275132273, 0.32972972972972975]
text: Although hidden Markov models ( HMMs ) provide a suitable generative model for field structured text , general unsupervised HMM learning fails to learn useful structure in either of our domains .
result: triple_list: [["hidden Markov models ( HMMs )", "Used_for", "generative model"], ["hidden Markov models ( HMMs )", "Used_for", "field structured text"], ["generative model", "Compare", "unsupervised HMM learning"], ["unsupervised HMM learning", "Used_for", "structure"], ["domains", "Evaluate_for", "structure"]]
pred: [('hidden Markov models ( HMMs )', 'Used_for', 'generative model'), ('hidden Markov models ( HMMs )', 'Used_for', 'field structured text'), ('generative model', 'Compare', 'unsupervised HMM learning'), ('unsupervised HMM learning', 'Used_for', 'structure'), ('domains', 'Evaluate_for', 'structure')]
trues: [['hidden Markov models ( HMMs )', 'Used_for', 'generative model'], ['generative model', 'Used_for', 'field structured text']]
metrics_sample: [0.2, 0.5, 0.28571428571428575]
metrics_current: [0.3357664233576642, 0.3233743409490334, 0.3294538943598926]
text: Compared to the exhaustive procedure that thus far is the state-of-the-art for cascade evaluation , the proposed method requires fewer evaluations of the classifier functions , thereby speeding up the search .
result: triple_list: [["method", "Compare", "exhaustive procedure"], ["method", "Used_for", "cascade evaluation"], ["exhaustive procedure", "Compare", "classifier functions"], ["exhaustive procedure", "Used_for", "cascade evaluation"]]
pred: [('method', 'Compare', 'exhaustive procedure'), ('method', 'Used_for', 'cascade evaluation'), ('exhaustive procedure', 'Compare', 'classifier functions'), ('exhaustive procedure', 'Used_for', 'cascade evaluation')]
trues: [['exhaustive procedure', 'Used_for', 'cascade evaluation'], ['exhaustive procedure', 'Compare', 'method'], ['method', 'Used_for', 'search']]
metrics_sample: [0.25, 0.3333333333333333, 0.28571428571428575]
metrics_current: [0.3351449275362319, 0.32342657342657344, 0.32918149466192176]
text: We evaluate across two corpora ( conversational telephone speech and broadcast news speech ) on both human transcriptions and speech recognition output .
result: triple_list: [["corpora", "Evaluate_for", "human transcriptions and speech recognition output"]]
pred: [('corpora', 'Evaluate_for', 'human transcriptions and speech recognition output')]
trues: [['corpora', 'Evaluate_for', 'human transcriptions'], ['corpora', 'Evaluate_for', 'speech recognition output'], ['conversational telephone speech', 'Hyponym_of', 'corpora'], ['conversational telephone speech', 'Conjunction', 'broadcast news speech'], ['broadcast news speech', 'Hyponym_of', 'corpora'], ['human transcriptions', 'Conjunction', 'speech recognition output']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3345388788426763, 0.32006920415224915, 0.3271441202475685]
text: Subpixel accuracy is achieved by considering several zero-crossings defined by the difference between pairs of unstructured patterns .
result: triple_list: [["Subpixel accuracy", "Evaluate_for", "unstructured patterns"]]
pred: [('Subpixel accuracy', 'Evaluate_for', 'unstructured patterns')]
trues: [['zero-crossings', 'Used_for', 'Subpixel accuracy']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33393501805054154, 0.31951640759930916, 0.3265666372462489]
text: To associate a sequence of the Fujisaki-model parameters with a text input based on statistical learning , this paper proposes extending this model to a context-dependent one .
result: triple_list: [["this model", "Used_for", "statistical learning"], ["context-dependent one", "Used_for", "model"]]
pred: [('this model', 'Used_for', 'statistical learning'), ('context-dependent one', 'Used_for', 'model')]
trues: [['text input', 'Used_for', 'Fujisaki-model parameters'], ['statistical learning', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3327338129496403, 0.31841652323580033, 0.3254177660510114]
text: In this paper , we propose a new method for the modeling and subtraction of such scenes .
result: triple_list: [["method", "Used_for", "modeling and subtraction of scenes"]]
pred: [('method', 'Used_for', 'modeling and subtraction of scenes')]
trues: [['method', 'Used_for', 'modeling and subtraction of such scenes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33213644524236985, 0.3178694158075601, 0.32484635645302895]
text: This model was shown to be more appropriate for blind separation of natural speech signals .
result: triple_list: [["model", "Used_for", "blind separation of natural speech signals"]]
pred: [('model', 'Used_for', 'blind separation of natural speech signals')]
trues: [['model', 'Used_for', 'blind separation of natural speech signals .']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33154121863799285, 0.31732418524871353, 0.32427695004382123]
text: The psycholinguistic literature provides evidence for syntactic priming , i.e. , the tendency to repeat structures .
result: triple_list: [["psycholinguistic literature", "Used_for", "syntactic priming"], ["syntactic priming", "Hyponym_of", "priming"]]
pred: [('psycholinguistic literature', 'Used_for', 'syntactic priming'), ('syntactic priming', 'Hyponym_of', 'priming')]
trues: [['psycholinguistic literature', 'Used_for', 'syntactic priming']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.33214285714285713, 0.3184931506849315, 0.32517482517482516]
text: We introduce a method to accelerate the evaluation of object detection cascades with the help of a divide-and-conquer procedure in the space of candidate regions .
result: triple_list: [["divide-and-conquer procedure", "Used_for", "evaluation of object detection cascades"]]
pred: [('divide-and-conquer procedure', 'Used_for', 'evaluation of object detection cascades')]
trues: [['method', 'Used_for', 'evaluation of object detection cascades'], ['divide-and-conquer procedure', 'Used_for', 'method'], ['space of candidate regions', 'Feature_of', 'divide-and-conquer procedure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3315508021390374, 0.31686541737649065, 0.3240418118466899]
text: We explain this distinction and we show how this model may be applied to the interpretation of compounds in real texts , provided that complementary semantic information are retrieved .
result: triple_list: [["model", "Used_for", "interpretation of compounds in real texts"]]
pred: [('model', 'Used_for', 'interpretation of compounds in real texts')]
trues: [['model', 'Used_for', 'interpretation of compounds']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3309608540925267, 0.3163265306122449, 0.32347826086956527]
text: The goal is to sample a small set of records over which evaluating aggregate queries can be done both efficiently and accurately .
result: triple_list: [["aggregate queries", "Evaluate_for", "records"]]
pred: [('aggregate queries', 'Evaluate_for', 'records')]
trues: [['aggregate queries', 'Evaluate_for', 'records']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3321492007104796, 0.3174872665534805, 0.3246527777777778]
text: Under this framework , a joint source-channel transliteration model , also called n-gram transliteration model ( n-gram TM ) , is further proposed to model the transliteration process .
result: triple_list: [["joint source-channel transliteration model", "Hyponym_of", "n-gram transliteration model ( n-gram TM )"], ["n-gram transliteration model ( n-gram TM )", "Used_for", "transliteration process"]]
pred: [('joint source-channel transliteration model', 'Hyponym_of', 'n-gram transliteration model ( n-gram TM )'), ('n-gram transliteration model ( n-gram TM )', 'Used_for', 'transliteration process')]
trues: [['framework', 'Used_for', 'joint source-channel transliteration model'], ['n-gram transliteration model ( n-gram TM )', 'Used_for', 'transliteration process']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3327433628318584, 0.31810490693739424, 0.3252595155709343]
text: While current approaches are developed by only considering the low rank plus sparse structure , in many applications , side information of row and/or column entities may also be given , and it is still unclear to what extent could such information help robust PCA .
result: triple_list: [["side information", "Used_for", "robust PCA"]]
pred: [('side information', 'Used_for', 'robust PCA')]
trues: [['low rank plus sparse structure', 'Used_for', 'approaches'], ['information', 'Used_for', 'robust PCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3321554770318021, 0.31703204047217537, 0.32441760138050046]
text: The automated segmentation of images into semantically meaningful parts requires shape information since low-level feature analysis alone often fails to reach this goal .
result: triple_list: [["low-level feature analysis", "Used_for", "automated segmentation of images"]]
pred: [('low-level feature analysis', 'Used_for', 'automated segmentation of images')]
trues: [['images', 'Used_for', 'automated segmentation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3315696649029982, 0.3164983164983165, 0.32385874246339363]
text: This paper presents a machine learning approach to bare slice disambiguation in dialogue .
result: triple_list: [["machine learning approach", "Used_for", "bare slice disambiguation"], ["bare slice disambiguation", "Used_for", "dialogue"]]
pred: [('machine learning approach', 'Used_for', 'bare slice disambiguation'), ('bare slice disambiguation', 'Used_for', 'dialogue')]
trues: [['machine learning approach', 'Used_for', 'bare slice disambiguation'], ['dialogue', 'Used_for', 'bare slice disambiguation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3321616871704745, 0.31711409395973156, 0.3244635193133047]
text: This paper describes a novel system for acquiring adjectival subcategorization frames ( scfs ) and associated frequency information from English corpus data .
result: triple_list: [["system", "Used_for", "adjectival subcategorization frames ( scfs ) and associated frequency information"], ["English corpus data", "Used_for", "system"]]
pred: [('system', 'Used_for', 'adjectival subcategorization frames ( scfs ) and associated frequency information'), ('English corpus data', 'Used_for', 'system')]
trues: [['system', 'Used_for', 'acquiring adjectival subcategorization frames ( scfs )']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3309982486865149, 0.3165829145728643, 0.3236301369863014]
text: By employing a joint classification and regression optimization objective , this network is capable of automatically localizing the start and end points of actions more accurately .
result: triple_list: [["joint classification and regression optimization objective", "Used_for", "network"]]
pred: [('joint classification and regression optimization objective', 'Used_for', 'network')]
trues: [['joint classification and regression optimization objective', 'Used_for', 'network']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3321678321678322, 0.3177257525083612, 0.3247863247863248]
text: We show how this can efficiently be combined with random-projection based methods for 2 NN search , such as locality-sensitive hashing ( LSH ) or random projection trees .
result: triple_list: [["locality-sensitive hashing ( LSH )", "Hyponym_of", "random-projection based methods"], ["locality-sensitive hashing ( LSH )", "Conjunction", "random projection trees"], ["random projection trees", "Hyponym_of", "random-projection based methods"]]
pred: [('locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'), ('locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'), ('random projection trees', 'Hyponym_of', 'random-projection based methods')]
trues: [['this', 'Conjunction', 'random-projection based methods'], ['random-projection based methods', 'Used_for', 'NN search'], ['locality-sensitive hashing ( LSH )', 'Hyponym_of', 'random-projection based methods'], ['locality-sensitive hashing ( LSH )', 'Conjunction', 'random projection trees'], ['random projection trees', 'Hyponym_of', 'random-projection based methods']]
metrics_sample: [1.0, 0.6, 0.7499999999999999]
metrics_current: [0.3356521739130435, 0.3200663349917081, 0.32767402376910015]
text: The combined approach is formulated in the framework of Bayesian statistics to account for the robust-ness requirement in image understanding .
result: triple_list: [["approach", "Used_for", "image understanding"], ["Bayesian statistics", "Used_for", "approach"], ["robust-ness requirement", "Feature_of", "image understanding"]]
pred: [('approach', 'Used_for', 'image understanding'), ('Bayesian statistics', 'Used_for', 'approach'), ('robust-ness requirement', 'Feature_of', 'image understanding')]
trues: [['approach', 'Used_for', 'robust-ness requirement in image understanding'], ['Bayesian statistics', 'Used_for', 'approach']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3356401384083045, 0.32066115702479336, 0.32797971259509723]
text: Our technique gives a substantial improvement in paraphrase classification accuracy over all of the other models used in the experiments .
result: triple_list: [["paraphrase classification accuracy", "Evaluate_for", "our technique"]]
pred: [('paraphrase classification accuracy', 'Evaluate_for', 'our technique')]
trues: [['technique', 'Compare', 'models'], ['paraphrase classification accuracy', 'Evaluate_for', 'technique'], ['paraphrase classification accuracy', 'Evaluate_for', 'models']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33506044905008636, 0.3190789473684211, 0.3268744734625106]
text: The result theoretically justifies the effectiveness of features in robust PCA .
result: triple_list: [["features", "Used_for", "robust PCA"]]
pred: [('features', 'Used_for', 'robust PCA')]
trues: [['features', 'Feature_of', 'robust PCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33448275862068966, 0.3185550082101806, 0.3263246425567704]
text: It is particularly valuable to empirical MT research .
result: triple_list: [["It", "Evaluate_for", "empirical MT research"]]
pred: [('It', 'Evaluate_for', 'empirical MT research')]
trues: [['It', 'Used_for', 'empirical MT research']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33390705679862304, 0.3180327868852459, 0.325776658270361]
text: The system is implemented entirely in Prolog , a programming language based on logic .
result: triple_list: [["Prolog", "Used_for", "system"]]
pred: [('Prolog', 'Used_for', 'system')]
trues: [['Prolog', 'Used_for', 'system'], ['Prolog', 'Hyponym_of', 'programming language'], ['logic', 'Used_for', 'programming language']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.33505154639175255, 0.3181076672104405, 0.3263598326359832]
text: Experiments show that these two strategies are effective in learning robust deep metrics for person re-identification , and accordingly our deep model significantly outperforms the state-of-the-art methods on several benchmarks of person re-identification .
result: triple_list: [["strategies", "Used_for", "learning robust deep metrics"], ["strategies", "Used_for", "person re-identification"], ["deep metrics", "Used_for", "person re-identification"], ["deep model", "Compare", "state-of-the-art methods"], ["benchmarks", "Evaluate_for", "person re-identification"]]
pred: [('strategies', 'Used_for', 'learning robust deep metrics'), ('strategies', 'Used_for', 'person re-identification'), ('deep metrics', 'Used_for', 'person re-identification'), ('deep model', 'Compare', 'state-of-the-art methods'), ('benchmarks', 'Evaluate_for', 'person re-identification')]
trues: [['robust deep metrics', 'Used_for', 'person re-identification'], ['deep model', 'Compare', 'state-of-the-art methods'], ['deep model', 'Used_for', 'person re-identification'], ['state-of-the-art methods', 'Used_for', 'person re-identification']]
metrics_sample: [0.2, 0.25, 0.22222222222222224]
metrics_current: [0.3339011925042589, 0.31766612641815234, 0.3255813953488372]
text: On this challenging data set our system consistently demonstrated a nearly perfect recognition rate ( over 99.7 % on all three databases ) , significantly out-performing state-of-the-art commercial software and methods from the literature .
result: triple_list: [["system", "Compare", "commercial software"], ["system", "Compare", "methods"], ["commercial software", "Conjunction", "methods"], ["methods", "Used_for", "data"], ["methods", "Compare", "commercial software"], ["databases", "Evaluate_for", "commercial software"], ["databases", "Evaluate_for", "methods"]]
pred: [('system', 'Compare', 'commercial software'), ('system', 'Compare', 'methods'), ('commercial software', 'Conjunction', 'methods'), ('methods', 'Used_for', 'data'), ('methods', 'Compare', 'commercial software'), ('databases', 'Evaluate_for', 'commercial software'), ('databases', 'Evaluate_for', 'methods')]
trues: [['data set', 'Evaluate_for', 'system'], ['system', 'Compare', 'commercial software'], ['system', 'Compare', 'methods'], ['recognition rate', 'Evaluate_for', 'system'], ['commercial software', 'Conjunction', 'methods']]
metrics_sample: [0.42857142857142855, 0.6, 0.5]
metrics_current: [0.335016835016835, 0.319935691318328, 0.3273026315789474]
text: In this paper , we present our work on the detection of question-answer pairs in an email conversation for the task of email summarization .
result: triple_list: [["email conversation", "Used_for", "detection of question-answer pairs"], ["detection of question-answer pairs", "Used_for", "email summarization"]]
pred: [('email conversation', 'Used_for', 'detection of question-answer pairs'), ('detection of question-answer pairs', 'Used_for', 'email summarization')]
trues: [['detection of question-answer pairs', 'Used_for', 'email summarization'], ['email conversation', 'Used_for', 'detection of question-answer pairs']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.337248322147651, 0.32211538461538464, 0.3295081967213115]
text: Our method has two major components : a ) a pattern extraction scheme for efficiently harvesting patterns of given size and shape from expert game records and b ) a Bayesian learning algorithm ( in two variants ) that learns a distribution over the values of a move given a board position based on the local pattern context .
result: triple_list: [["pattern extraction scheme", "Used_for", "method"], ["pattern extraction scheme", "Conjunction", "Bayesian learning algorithm"], ["pattern extraction scheme", "Used_for", "patterns"], ["pattern extraction scheme", "Used_for", "move"], ["local pattern context", "Feature_of", "move"], ["Bayesian learning algorithm", "Used_for", "method"], ["Bayesian learning algorithm", "Conjunction", "patterns"], ["Bayesian learning algorithm", "Used_for", "move"]]
pred: [('pattern extraction scheme', 'Used_for', 'method'), ('pattern extraction scheme', 'Conjunction', 'Bayesian learning algorithm'), ('pattern extraction scheme', 'Used_for', 'patterns'), ('pattern extraction scheme', 'Used_for', 'move'), ('local pattern context', 'Feature_of', 'move'), ('Bayesian learning algorithm', 'Used_for', 'method'), ('Bayesian learning algorithm', 'Conjunction', 'patterns'), ('Bayesian learning algorithm', 'Used_for', 'move')]
trues: [['pattern extraction scheme', 'Part_of', 'method'], ['pattern extraction scheme', 'Conjunction', 'Bayesian learning algorithm'], ['Bayesian learning algorithm', 'Part_of', 'method']]
metrics_sample: [0.125, 0.3333333333333333, 0.18181818181818182]
metrics_current: [0.3344370860927152, 0.32216905901116427, 0.3281884646628757]
text: The NCA is created statistically from a large corpus and recomposed under concept hierarchy constraints and frequency of occurrences .
result: triple_list: [["large corpus", "Used_for", "NCA"]]
pred: [('large corpus', 'Used_for', 'NCA')]
trues: [['concept hierarchy constraints', 'Used_for', 'NCA'], ['frequency of occurrences', 'Used_for', 'NCA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3338842975206612, 0.32114467408585057, 0.32739059967585094]
text: The experimental results show that the proposed histogram-based interest point detectors perform particularly well for the tasks of matching textured scenes under blur and illumination changes , in terms of repeatability and distinctiveness .
result: triple_list: [["histogram-based interest point detectors", "Used_for", "matching textured scenes"], ["matching textured scenes", "Evaluate_for", "histogram-based interest point detectors"], ["repeatability", "Evaluate_for", "histogram-based interest point detectors"], ["distinctiveness", "Evaluate_for", "histogram-based interest point detectors"], ["repeatability", "Conjunction", "distinctiveness"]]
pred: [('histogram-based interest point detectors', 'Used_for', 'matching textured scenes'), ('matching textured scenes', 'Evaluate_for', 'histogram-based interest point detectors'), ('repeatability', 'Evaluate_for', 'histogram-based interest point detectors'), ('distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors'), ('repeatability', 'Conjunction', 'distinctiveness')]
trues: [['histogram-based interest point detectors', 'Used_for', 'matching textured scenes'], ['repeatability', 'Evaluate_for', 'histogram-based interest point detectors'], ['repeatability', 'Conjunction', 'distinctiveness'], ['distinctiveness', 'Evaluate_for', 'histogram-based interest point detectors']]
metrics_sample: [0.8, 1.0, 0.888888888888889]
metrics_current: [0.3377049180327869, 0.325434439178515, 0.33145615446500404]
text: With the rise of deep archi-tectures , the prime focus has been on object category recognition .
result: triple_list: [["object category recognition", "Hyponym_of", "deep archi-tectures"]]
pred: [('object category recognition', 'Hyponym_of', 'deep archi-tectures')]
trues: [['deep archi-tectures', 'Used_for', 'object category recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.337152209492635, 0.3249211356466877, 0.33092369477911643]
text: This paper considers the problem of reconstructing the motion of a 3D articulated tree from 2D point correspondences subject to some temporal prior .
result: triple_list: [["2D point correspondences", "Used_for", "reconstructing the motion of a 3D articulated tree"]]
pred: [('2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree')]
trues: [['2D point correspondences', 'Used_for', 'reconstructing the motion of a 3D articulated tree']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3382352941176471, 0.32598425196850395, 0.3319967923015236]
text: Inherent ambiguities in the computation of features are addressed by using a data-dependent bandwidth for density estimation using kernels .
result: triple_list: [["bandwidth", "Used_for", "features"]]
pred: [('bandwidth', 'Used_for', 'features')]
trues: [['ambiguities', 'Feature_of', 'computation of features'], ['data-dependent bandwidth', 'Used_for', 'ambiguities'], ['data-dependent bandwidth', 'Used_for', 'density estimation'], ['kernels', 'Used_for', 'density estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3376835236541599, 0.323943661971831, 0.3306709265175719]
text: The approach is validated with real image data , and with experimental results from a CID/DRAM analog array prototype in 0.5 cents m CMOS .
result: triple_list: [["real image data", "Evaluate_for", "approach"]]
pred: [('real image data', 'Evaluate_for', 'approach')]
trues: [['real image data', 'Evaluate_for', 'approach']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33876221498371334, 0.325, 0.3317384370015949]
text: Coedition of a natural language text and its representation in some interlingual form seems the best and simplest way to share text revision across languages .
result: triple_list: [["interlingual form", "Used_for", "natural language text"], ["interlingual form", "Used_for", "text revision"], ["text revision", "Feature_of", "languages"]]
pred: [('interlingual form', 'Used_for', 'natural language text'), ('interlingual form', 'Used_for', 'text revision'), ('text revision', 'Feature_of', 'languages')]
trues: [['Coedition', 'Used_for', 'text revision'], ['natural language text', 'Used_for', 'Coedition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3371150729335494, 0.32398753894080995, 0.33042096902303414]
text: This research is part of a larger study of anaphoric expressions , the results of which will be incorporated into a natural language generation system .
result: triple_list: [["natural language generation system", "Used_for", "anticipated result"]]
pred: [('natural language generation system', 'Used_for', 'anticipated result')]
trues: [['anaphoric expressions', 'Used_for', 'natural language generation system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3365695792880259, 0.3234836702954899, 0.32989690721649484]
text: We describe a hierarchy of loss functions that incorporate different levels of linguistic information from word strings , word-to-word alignments from an MT system , and syntactic structure from parse-trees of source and target language sentences .
result: triple_list: [["word strings", "Part_of", "hierarchy of loss functions"], ["word strings", "Conjunction", "word-to-word alignments"], ["word-to-word alignments", "Part_of", "hierarchy of loss functions"], ["word-to-word alignments", "Conjunction", "syntactic structure"], ["syntactic structure", "Part_of", "hierarchy of loss functions"]]
pred: [('word strings', 'Part_of', 'hierarchy of loss functions'), ('word strings', 'Conjunction', 'word-to-word alignments'), ('word-to-word alignments', 'Part_of', 'hierarchy of loss functions'), ('word-to-word alignments', 'Conjunction', 'syntactic structure'), ('syntactic structure', 'Part_of', 'hierarchy of loss functions')]
trues: [['linguistic information', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Used_for', 'loss functions'], ['word-to-word alignments', 'Part_of', 'MT system'], ['syntactic structure', 'Used_for', 'loss functions'], ['parse-trees', 'Part_of', 'syntactic structure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33386837881219905, 0.32098765432098764, 0.3273013375295043]
text: Given a new image , detection and classification are achieved by determining the position and viewpoint of the model that maximize recognition scores of the candidate objects .
result: triple_list: [["position and viewpoint", "Feature_of", "model"], ["recognition scores of the candidate objects", "Evaluate_for", "model"]]
pred: [('position and viewpoint', 'Feature_of', 'model'), ('recognition scores of the candidate objects', 'Evaluate_for', 'model')]
trues: [['image', 'Used_for', 'detection'], ['image', 'Used_for', 'classification'], ['detection', 'Conjunction', 'classification'], ['position', 'Used_for', 'detection'], ['position', 'Used_for', 'classification'], ['position', 'Conjunction', 'viewpoint'], ['viewpoint', 'Used_for', 'detection'], ['viewpoint', 'Used_for', 'classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3328, 0.3170731707317073, 0.3247462919594067]
text: This poster paper describes a full scale two-level morphological description ( Karttunen , 1983 ; Koskenniemi , 1983 ) of Turkish word structures .
result: triple_list: [["full scale two-level morphological description", "Used_for", "Turkish word structures"]]
pred: [('full scale two-level morphological description', 'Used_for', 'Turkish word structures')]
trues: [['full scale two-level morphological description', 'Used_for', 'Turkish word structures']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33386581469648563, 0.3181126331811263, 0.32579890880748247]
text: Our approach outperforms state-of-the-art trackers on the VIVID benchmark datasets .
result: triple_list: [["VIVID benchmark datasets", "Evaluate_for", "approach"], ["VIVID benchmark datasets", "Evaluate_for", "trackers"]]
pred: [('VIVID benchmark datasets', 'Evaluate_for', 'approach'), ('VIVID benchmark datasets', 'Evaluate_for', 'trackers')]
trues: [['state-of-the-art trackers', 'Compare', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'approach'], ['VIVID benchmark datasets', 'Evaluate_for', 'state-of-the-art trackers']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3343949044585987, 0.3181818181818182, 0.3260869565217391]
text: Turkish is an agglutinative language with word structures formed by productive affixations of derivational and inflectional suffixes to root words .
result: triple_list: [["Turkish", "Hyponym_of", "agglutinative language"], ["agglutinative language", "Conjunction", "derivational and inflectional suffixes"], ["derivational and inflectional suffixes", "Used_for", "word structures"]]
pred: [('Turkish', 'Hyponym_of', 'agglutinative language'), ('agglutinative language', 'Conjunction', 'derivational and inflectional suffixes'), ('derivational and inflectional suffixes', 'Used_for', 'word structures')]
trues: [['Turkish', 'Hyponym_of', 'agglutinative language'], ['word structures', 'Feature_of', 'agglutinative language'], ['productive affixations of derivational and inflectional suffixes', 'Part_of', 'word structures']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.33438985736925514, 0.31825037707390647, 0.32612055641421944]
text: Given an object model and a black-box measure of similarity between the model and candidate targets , we consider visual object tracking as a numerical optimization problem .
result: triple_list: [["object model", "Feature_of", "visual object tracking"], ["black-box measure of similarity", "Feature_of", "visual object tracking"], ["black-box measure of similarity", "Used_for", "visual object tracking"]]
pred: [('object model', 'Feature_of', 'visual object tracking'), ('black-box measure of similarity', 'Feature_of', 'visual object tracking'), ('black-box measure of similarity', 'Used_for', 'visual object tracking')]
trues: [['numerical optimization problem', 'Used_for', 'visual object tracking']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33280757097791797, 0.3177710843373494, 0.325115562403698]
text: A generative framework is used for learning a model that captures the relative position of parts within each of the discretized viewpoints .
result: triple_list: [["generative framework", "Used_for", "model"], ["discretized viewpoints", "Feature_of", "model"]]
pred: [('generative framework', 'Used_for', 'model'), ('discretized viewpoints', 'Feature_of', 'model')]
trues: [['generative framework', 'Used_for', 'model']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3333333333333333, 0.318796992481203, 0.3259031514219831]
text: Building on previous work at Carnegie-Mellon University e.g. [ 4 , 5 , 8 ] , Plume 's approach to parsing is based on semantic caseframe instantiation .
result: triple_list: [["Carnegie-Mellon University", "Evaluate_for", "approach"], ["approach", "Used_for", "parsing"], ["semantic caseframe instantiation", "Used_for", "approach"]]
pred: [('Carnegie-Mellon University', 'Evaluate_for', 'approach'), ('approach', 'Used_for', 'parsing'), ('semantic caseframe instantiation', 'Used_for', 'approach')]
trues: [["Plume 's approach", 'Used_for', 'parsing'], ['semantic caseframe instantiation', 'Used_for', "Plume 's approach"]]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3317683881064163, 0.31784107946026985, 0.32465543644716693]
text: In this paper , we evaluate the use of a conditional random field ( CRF ) for this task and relate results with this model to our prior work .
result: triple_list: [["conditional random field ( CRF )", "Used_for", "task"]]
pred: [('conditional random field ( CRF )', 'Used_for', 'task')]
trues: [['conditional random field ( CRF )', 'Used_for', 'task']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3328125, 0.3188622754491018, 0.3256880733944954]
text: From this point of view , selecting suitable positive ( i.e. intra-class ) training samples within a local range is critical for training the CNN embedding , especially when the data has large intra-class variations .
result: triple_list: [["positive ( i.e. intra-class ) training samples", "Used_for", "CNN embedding"], ["intra-class variations", "Feature_of", "data"]]
pred: [('positive ( i.e. intra-class ) training samples', 'Used_for', 'CNN embedding'), ('intra-class variations', 'Feature_of', 'data')]
trues: [['intra-class variations', 'Feature_of', 'data']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3333333333333333, 0.31988041853512705, 0.3264683447749809]
text: The modified graph is then sent to the UNL-L0 deconverter and the result shown .
result: triple_list: [["graph", "Used_for", "UNL-L0 deconverter"]]
pred: [('graph', 'Used_for', 'UNL-L0 deconverter')]
trues: [['graph', 'Used_for', 'UNL-L0 deconverter']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3343701399688958, 0.3208955223880597, 0.32749428789032753]
text: For LR ( 0 ) grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz [ 1 ] and Roberts [ 2 ] .
result: triple_list: [["Kruse-man Aretz", "Hyponym_of", "algorithm"], ["Kruse-man Aretz", "Conjunction", "Roberts"], ["Roberts", "Hyponym_of", "algorithm"]]
pred: [('Kruse-man Aretz', 'Hyponym_of', 'algorithm'), ('Kruse-man Aretz', 'Conjunction', 'Roberts'), ('Roberts', 'Hyponym_of', 'algorithm')]
trues: [['algorithm', 'Used_for', 'LR ( 0 ) grammars'], ['algorithm', 'Conjunction', 'recursive ascent parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3328173374613003, 0.31994047619047616, 0.3262518968133536]
text: Establishing a `` best '' correspondence between the '' UNL-tree + L0 '' and the '' MS-L0 structure '' , a lattice , may be done using the dictionary and trying to align the tree and the selected trajectory with as few crossing liaisons as possible .
result: triple_list: [["crossing liaisons", "Used_for", "tree"], ["crossing liaisons", "Used_for", "selected trajectory"]]
pred: [('crossing liaisons', 'Used_for', 'tree'), ('crossing liaisons', 'Used_for', 'selected trajectory')]
trues: [['UNL-tree + L0', 'Conjunction', 'MS-L0 structure'], ['dictionary', 'Used_for', 'lattice']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3317901234567901, 0.3189910979228487, 0.32526475037821484]
text: This paper investigates the utility of applying standard MT evaluation methods ( BLEU , NIST , WER and PER ) to building classifiers to predict semantic equivalence and entailment .
result: triple_list: [["BLEU", "Hyponym_of", "MT evaluation methods"], ["BLEU", "Conjunction", "NIST"], ["NIST", "Hyponym_of", "MT evaluation methods"], ["NIST", "Conjunction", "WER"], ["WER", "Hyponym_of", "MT evaluation methods"], ["WER", "Conjunction", "PER"], ["PER", "Hyponym_of", "MT evaluation methods"]]
pred: [('BLEU', 'Hyponym_of', 'MT evaluation methods'), ('BLEU', 'Conjunction', 'NIST'), ('NIST', 'Hyponym_of', 'MT evaluation methods'), ('NIST', 'Conjunction', 'WER'), ('WER', 'Hyponym_of', 'MT evaluation methods'), ('WER', 'Conjunction', 'PER'), ('PER', 'Hyponym_of', 'MT evaluation methods')]
trues: [['MT evaluation methods', 'Used_for', 'classifiers'], ['BLEU', 'Hyponym_of', 'MT evaluation methods'], ['BLEU', 'Conjunction', 'NIST'], ['NIST', 'Hyponym_of', 'MT evaluation methods'], ['NIST', 'Conjunction', 'WER'], ['WER', 'Hyponym_of', 'MT evaluation methods'], ['WER', 'Conjunction', 'PER'], ['PER', 'Hyponym_of', 'MT evaluation methods'], ['classifiers', 'Used_for', 'semantic equivalence'], ['classifiers', 'Used_for', 'entailment'], ['semantic equivalence', 'Conjunction', 'entailment']]
metrics_sample: [1.0, 0.6363636363636364, 0.7777777777777778]
metrics_current: [0.33893129770992364, 0.32408759124087594, 0.3313432835820896]
text: Experiments on the TREC Blog track test set show that both groups of credibility indicators significantly improve retrieval effectiveness ; the best performance is achieved when combining them .
result: triple_list: [["groups of credibility indicators", "Used_for", "retrieval effectiveness"], ["them", "Conjunction", "groups of credibility indicators"]]
pred: [('groups of credibility indicators', 'Used_for', 'retrieval effectiveness'), ('them', 'Conjunction', 'groups of credibility indicators')]
trues: [['TREC Blog track test set', 'Evaluate_for', 'credibility indicators'], ['retrieval effectiveness', 'Evaluate_for', 'credibility indicators']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3378995433789954, 0.3231441048034934, 0.33035714285714285]
text: Machine transliteration/back-transliteration plays an important role in many multilingual speech and language applications .
result: triple_list: [["Machine transliteration/back-transliteration", "Used_for", "multilingual speech and language applications"]]
pred: [('Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications')]
trues: [['Machine transliteration/back-transliteration', 'Used_for', 'multilingual speech and language applications']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33890577507598785, 0.3241279069767442, 0.3313521545319465]
text: The unique properties of tree-adjoining grammars ( TAG ) present a challenge for the application of TAGs beyond the limited confines of syntax , for instance , to the task of semantic interpretation or automatic translation of natural language .
result: triple_list: [["semantic interpretation", "Conjunction", "automatic translation of natural language"]]
pred: [('semantic interpretation', 'Conjunction', 'automatic translation of natural language')]
trues: [['TAGs', 'Used_for', 'semantic interpretation'], ['TAGs', 'Used_for', 'automatic translation of natural language'], ['semantic interpretation', 'Conjunction', 'automatic translation of natural language']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.33990895295902884, 0.32416787264833574, 0.33185185185185184]
text: We also introduce a novel classification method based on PER which leverages part of speech information of the words contributing to the word matches and non-matches in the sentence .
result: triple_list: [["PER", "Used_for", "classification method"], ["part of speech information", "Used_for", "PER"]]
pred: [('PER', 'Used_for', 'classification method'), ('part of speech information', 'Used_for', 'PER')]
trues: [['PER', 'Used_for', 'classification method'], ['PER', 'Used_for', 'part of speech information'], ['part of speech information', 'Used_for', 'word matches and non-matches']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.340393343419062, 0.3242074927953891, 0.33210332103321033]
text: Indeed , automatic evaluations need high-quality data that allow the comparison of both automatic and human translations .
result: triple_list: [["automatic evaluations", "Evaluate_for", "automatic and human translations"]]
pred: [('automatic evaluations', 'Evaluate_for', 'automatic and human translations')]
trues: [['high-quality data', 'Evaluate_for', 'automatic evaluations']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33987915407854985, 0.3237410071942446, 0.3316138540899042]
text: To improve topical blog post retrieval we incorporate textual credibility indicators in the retrieval process .
result: triple_list: [["textual credibility indicators", "Used_for", "topical blog post retrieval"]]
pred: [('textual credibility indicators', 'Used_for', 'topical blog post retrieval')]
trues: [['textual credibility indicators', 'Used_for', 'topical blog post retrieval'], ['textual credibility indicators', 'Part_of', 'retrieval process']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.34087481146304677, 0.3242467718794835, 0.3323529411764706]
text: Extension to affine projection enables reconstruction without estimating cameras .
result: triple_list: [["Extension", "Used_for", "reconstruction"]]
pred: [('Extension', 'Used_for', 'reconstruction')]
trues: [['affine projection', 'Used_for', 'reconstruction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34036144578313254, 0.3237822349570201, 0.3318649045521292]
text: We analyzed eye gaze , head nods and attentional focus in the context of a direction-giving task .
result: triple_list: [["eye gaze", "Conjunction", "head nods"], ["eye gaze", "Used_for", "direction-giving task"], ["head nods", "Used_for", "direction-giving task"], ["attentional focus", "Used_for", "direction-giving task"]]
pred: [('eye gaze', 'Conjunction', 'head nods'), ('eye gaze', 'Used_for', 'direction-giving task'), ('head nods', 'Used_for', 'direction-giving task'), ('attentional focus', 'Used_for', 'direction-giving task')]
trues: [['eye gaze', 'Conjunction', 'head nods'], ['eye gaze', 'Part_of', 'direction-giving task'], ['head nods', 'Conjunction', 'attentional focus'], ['head nods', 'Part_of', 'direction-giving task'], ['attentional focus', 'Part_of', 'direction-giving task']]
metrics_sample: [0.25, 0.2, 0.22222222222222224]
metrics_current: [0.3398203592814371, 0.3229018492176387, 0.33114514952589347]
text: We introduce a novel method of shape constrained image segmentation which is based on mixtures of feature distributions for color and texture as well as probabilistic shape knowledge .
result: triple_list: [["method", "Used_for", "shape constrained image segmentation"], ["mixtures of feature distributions", "Used_for", "method"], ["mixtures of feature distributions", "Conjunction", "probabilistic shape knowledge"], ["color", "Part_of", "mixtures of feature distributions"], ["color", "Conjunction", "texture"], ["texture", "Part_of", "mixtures of feature distributions"], ["probabilistic shape knowledge", "Part_of", "mixtures of feature distributions"]]
pred: [('method', 'Used_for', 'shape constrained image segmentation'), ('mixtures of feature distributions', 'Used_for', 'method'), ('mixtures of feature distributions', 'Conjunction', 'probabilistic shape knowledge'), ('color', 'Part_of', 'mixtures of feature distributions'), ('color', 'Conjunction', 'texture'), ('texture', 'Part_of', 'mixtures of feature distributions'), ('probabilistic shape knowledge', 'Part_of', 'mixtures of feature distributions')]
trues: [['method', 'Used_for', 'shape constrained image segmentation'], ['mixtures of feature distributions', 'Used_for', 'method'], ['mixtures of feature distributions', 'Used_for', 'color'], ['mixtures of feature distributions', 'Used_for', 'texture'], ['mixtures of feature distributions', 'Used_for', 'probabilistic shape knowledge'], ['color', 'Conjunction', 'texture'], ['texture', 'Conjunction', 'probabilistic shape knowledge']]
metrics_sample: [0.42857142857142855, 0.42857142857142855, 0.42857142857142855]
metrics_current: [0.34074074074074073, 0.323943661971831, 0.3321299638989169]
text: This paper deals with the problem of generating the fundamental frequency ( F0 ) contour of speech from a text input for text-to-speech synthesis .
result: triple_list: [["text input", "Used_for", "text-to-speech synthesis"]]
pred: [('text input', 'Used_for', 'text-to-speech synthesis')]
trues: [['fundamental frequency ( F0 ) contour of speech', 'Used_for', 'text-to-speech synthesis'], ['text input', 'Used_for', 'fundamental frequency ( F0 ) contour of speech']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.34023668639053256, 0.32303370786516855, 0.3314121037463977]
text: During normal tracking conditions when the object is visible from frame to frame , local optimization is used to track the local mode of the similarity measure in a parameter space of translation , rotation and scale .
result: triple_list: [["local optimization", "Used_for", "tracking"]]
pred: [('local optimization', 'Used_for', 'tracking')]
trues: [['local optimization', 'Used_for', 'local mode of the similarity measure'], ['parameter space of translation , rotation and scale', 'Used_for', 'local mode of the similarity measure']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3397341211225997, 0.32212885154061627, 0.3306973400431345]
text: The goal of this work is the enrichment of human-machine interactions in a natural language environment .
result: triple_list: [["natural language environment", "Feature_of", "human-machine interactions"]]
pred: [('natural language environment', 'Feature_of', 'human-machine interactions')]
trues: [['natural language environment', 'Feature_of', 'human-machine interactions']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3407079646017699, 0.3230769230769231, 0.3316582914572864]
text: For example , nucleotides in a DNA sequence , children 's names in a given state and year , and text documents are all commonly modeled with multinomial distributions .
result: triple_list: [["nucleotides", "Hyponym_of", "DNA sequence"], ["nucleotides", "Conjunction", "children 's names"], ["children 's names", "Hyponym_of", "state and year"], ["children 's names", "Conjunction", "text documents"], ["state and year", "Conjunction", "text documents"]]
pred: [('nucleotides', 'Hyponym_of', 'DNA sequence'), ('nucleotides', 'Conjunction', "children 's names"), ("children 's names", 'Hyponym_of', 'state and year'), ("children 's names", 'Conjunction', 'text documents'), ('state and year', 'Conjunction', 'text documents')]
trues: [['multinomial distributions', 'Used_for', 'nucleotides in a DNA sequence'], ['multinomial distributions', 'Used_for', 'text documents']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33821376281112736, 0.32217573221757323, 0.32999999999999996]
text: This model mimics the way in which images are processed in the visual pathway , rendering a feasible alternative for the implementation of early vision applications in standard technologies .
result: triple_list: [["images", "Used_for", "model"], ["images", "Used_for", "early vision applications"], ["visual pathway", "Feature_of", "images"], ["model", "Used_for", "early vision applications"], ["early vision applications", "Feature_of", "technologies"]]
pred: [('images', 'Used_for', 'model'), ('images', 'Used_for', 'early vision applications'), ('visual pathway', 'Feature_of', 'images'), ('model', 'Used_for', 'early vision applications'), ('early vision applications', 'Feature_of', 'technologies')]
trues: [['visual pathway', 'Used_for', 'images']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33575581395348836, 0.32172701949860727, 0.3285917496443812]
text: We conclude that previous approaches have neglected to evaluate systems in the context of their use , e.g. solving a task requiring data retrieval .
result: triple_list: [["systems", "Evaluate_for", "task"], ["data retrieval", "Evaluate_for", "systems"]]
pred: [('systems', 'Evaluate_for', 'task'), ('data retrieval', 'Evaluate_for', 'systems')]
trues: [['approaches', 'Evaluate_for', 'systems'], ['systems', 'Used_for', 'task'], ['data retrieval', 'Part_of', 'task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3347826086956522, 0.32038834951456313, 0.3274273564847626]
text: Our proposed approach builds on recent advances in spectral clustering , image matting , and boundary detection .
result: triple_list: [["spectral clustering", "Used_for", "approach"], ["spectral clustering", "Conjunction", "image matting"], ["image matting", "Used_for", "approach"], ["image matting", "Conjunction", "boundary detection"], ["boundary detection", "Used_for", "approach"]]
pred: [('spectral clustering', 'Used_for', 'approach'), ('spectral clustering', 'Conjunction', 'image matting'), ('image matting', 'Used_for', 'approach'), ('image matting', 'Conjunction', 'boundary detection'), ('boundary detection', 'Used_for', 'approach')]
trues: [['spectral clustering', 'Used_for', 'approach'], ['spectral clustering', 'Conjunction', 'image matting'], ['image matting', 'Used_for', 'approach'], ['image matting', 'Conjunction', 'boundary detection'], ['boundary detection', 'Used_for', 'approach']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.339568345323741, 0.325068870523416, 0.3321604503870514]
text: We report the performance of the MBR decoders on a Chinese-to-English translation task .
result: triple_list: [["Chinese-to-English translation task", "Evaluate_for", "MBR decoders"]]
pred: [('Chinese-to-English translation task', 'Evaluate_for', 'MBR decoders')]
trues: [['MBR decoders', 'Used_for', 'Chinese-to-English translation task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3390804597701149, 0.3246217331499312, 0.33169360505973294]
text: We provide a principled and provable solution for this problem ; it is parameterless and requires no data insights .
result: triple_list: [["solution", "Used_for", "problem"], ["it", "Used_for", "solution"]]
pred: [('solution', 'Used_for', 'problem'), ('it', 'Used_for', 'solution')]
trues: [['principled and provable solution', 'Used_for', 'problem']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33810888252148996, 0.3241758241758242, 0.3309957924263675]
text: We evaluate the demands that task dialogues collected using this technique , place upon a prototype Natural Language system .
result: triple_list: [["task dialogues", "Used_for", "Natural Language system"]]
pred: [('task dialogues', 'Used_for', 'Natural Language system')]
trues: [['task dialogues', 'Used_for', 'prototype Natural Language system'], ['technique', 'Used_for', 'task dialogues']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3376251788268956, 0.3232876712328767, 0.33030090972708187]
text: We validate this new method on nine standard person re-identification datasets including two large scale Market-1501 and CUHK03 datasets and show that we improve upon the current state-of-the-art methods on all of them .
result: triple_list: [["person re-identification datasets", "Evaluate_for", "method"], ["Market-1501", "Hyponym_of", "person re-identification datasets"], ["Market-1501", "Conjunction", "CUHK03 datasets"], ["CUHK03 datasets", "Hyponym_of", "person re-identification datasets"]]
pred: [('person re-identification datasets', 'Evaluate_for', 'method'), ('Market-1501', 'Hyponym_of', 'person re-identification datasets'), ('Market-1501', 'Conjunction', 'CUHK03 datasets'), ('CUHK03 datasets', 'Hyponym_of', 'person re-identification datasets')]
trues: [['person re-identification datasets', 'Evaluate_for', 'method'], ['scale Market-1501', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Hyponym_of', 'person re-identification datasets'], ['CUHK03 datasets', 'Conjunction', 'scale Market-1501']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3385490753911807, 0.3242506811989101, 0.33124565066109957]
text: Given the video streams acquired by two cameras placed on either side of a computer monitor , the proposed algorithm synthesises images from a virtual camera in arbitrary position ( typically located within the monitor ) to facilitate eye contact .
result: triple_list: [["video streams", "Used_for", "algorithm"], ["algorithm", "Used_for", "images"], ["images", "Feature_of", "virtual camera"]]
pred: [('video streams', 'Used_for', 'algorithm'), ('algorithm', 'Used_for', 'images'), ('images', 'Feature_of', 'virtual camera')]
trues: [['cameras', 'Used_for', 'video streams'], ['algorithm', 'Used_for', 'eye contact'], ['virtual camera', 'Used_for', 'images'], ['arbitrary position', 'Feature_of', 'virtual camera']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3371104815864023, 0.3224932249322493, 0.3296398891966759]
text: It uses a powerful pattern-matching language to classify grs into frames hierarchically in a way that mirrors inheritance-based lexica .
result: triple_list: [["pattern-matching language", "Used_for", "classify grs"], ["pattern-matching language", "Used_for", "inheritance-based lexica"], ["inheritance-based lexica", "Feature_of", "frames"]]
pred: [('pattern-matching language', 'Used_for', 'classify grs'), ('pattern-matching language', 'Used_for', 'inheritance-based lexica'), ('inheritance-based lexica', 'Feature_of', 'frames')]
trues: [['pattern-matching language', 'Used_for', 'It'], ['pattern-matching language', 'Used_for', 'grs']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33568406205923834, 0.3216216216216216, 0.32850241545893716]
text: Our experiments on real data sets show that the resulting detector is more robust to the choice of training examples , and substantially improves both linear and kernel SVM when trained on 10 positive and 10 negative examples .
result: triple_list: [["real data sets", "Evaluate_for", "detector"], ["linear and kernel SVM", "Evaluate_for", "detector"], ["linear and kernel SVM", "Evaluate_for", "detector"], ["positive and 10 negative examples", "Used_for", "linear and kernel SVM"]]
pred: [('real data sets', 'Evaluate_for', 'detector'), ('linear and kernel SVM', 'Evaluate_for', 'detector'), ('linear and kernel SVM', 'Evaluate_for', 'detector'), ('positive and 10 negative examples', 'Used_for', 'linear and kernel SVM')]
trues: [['real data sets', 'Evaluate_for', 'detector'], ['detector', 'Compare', 'linear and kernel SVM']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.3356741573033708, 0.3221024258760108, 0.328748280605227]
text: We have applied it to real scenes that include transparent objects and recovered the shapes of the objects with high accuracy .
result: triple_list: [["it", "Used_for", "real scenes"], ["transparent objects", "Part_of", "real scenes"]]
pred: [('it', 'Used_for', 'real scenes'), ('transparent objects', 'Part_of', 'real scenes')]
trues: [['it', 'Used_for', 'real scenes'], ['it', 'Used_for', 'shapes of the objects'], ['transparent objects', 'Part_of', 'real scenes'], ['accuracy', 'Evaluate_for', 'shapes of the objects']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.33753501400560226, 0.3230563002680965, 0.33013698630136984]
text: Unfortunately , creating large datasets with pixel-level labels has been extremely costly due to the amount of human effort required .
result: triple_list: [["human effort", "Used_for", "pixel-level labels"]]
pred: [('human effort', 'Used_for', 'pixel-level labels')]
trues: [['pixel-level labels', 'Feature_of', 'large datasets']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33706293706293705, 0.32262382864792505, 0.3296853625170999]
text: This paper solves a specialized regression problem to obtain sampling probabilities for records in databases .
result: triple_list: [["regression problem", "Used_for", "sampling probabilities"], ["sampling probabilities", "Used_for", "databases"]]
pred: [('regression problem', 'Used_for', 'sampling probabilities'), ('sampling probabilities', 'Used_for', 'databases')]
trues: [['specialized regression problem', 'Used_for', 'sampling probabilities'], ['sampling probabilities', 'Used_for', 'records'], ['records', 'Part_of', 'databases']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33612273361227335, 0.32133333333333336, 0.32856169052488077]
text: Our morphological analyzer has done all the necessary work for the recognition and classification of proper names , numerical and temporal expressions , i.e. Named Entity ( NE ) items in the Japanese text .
result: triple_list: [["morphological analyzer", "Used_for", "recognition and classification of proper names"], ["morphological analyzer", "Used_for", "recognition and classification of numerical and temporal expressions"], ["morphological analyzer", "Used_for", "Named Entity ( NE ) items"], ["recognition and classification of proper names", "Conjunction", "recognition and classification of numerical and temporal expressions"], ["recognition and classification of numerical and temporal expressions", "Used_for", "Named Entity ( NE ) items"]]
pred: [('morphological analyzer', 'Used_for', 'recognition and classification of proper names'), ('morphological analyzer', 'Used_for', 'recognition and classification of numerical and temporal expressions'), ('morphological analyzer', 'Used_for', 'Named Entity ( NE ) items'), ('recognition and classification of proper names', 'Conjunction', 'recognition and classification of numerical and temporal expressions'), ('recognition and classification of numerical and temporal expressions', 'Used_for', 'Named Entity ( NE ) items')]
trues: [['morphological analyzer', 'Used_for', 'recognition and classification of proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Hyponym_of', 'proper names , numerical and temporal expressions'], ['Named Entity ( NE ) items', 'Part_of', 'Japanese text']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3337950138504155, 0.3200531208499336, 0.3267796610169491]
text: In particular , we make extensive use of Pustejovsky 's principles concerning the predicative information associated with nominals .
result: triple_list: [["Pustejovsky 's principles", "Used_for", "Pustejovsky 's predicative information"], ["Pustejovsky 's predicative information", "Used_for", "nominals"]]
pred: [("Pustejovsky 's principles", 'Used_for', "Pustejovsky 's predicative information"), ("Pustejovsky 's predicative information", 'Used_for', 'nominals')]
trues: [['nominals', 'Feature_of', 'predicative information']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3328729281767956, 0.3196286472148541, 0.3261163734776725]
text: Thus , our method can be applied with great benefit to language pairs for which only scarce resources are available .
result: triple_list: [["method", "Used_for", "language pairs"], ["scarce resources", "Used_for", "method"]]
pred: [('method', 'Used_for', 'language pairs'), ('scarce resources', 'Used_for', 'method')]
trues: [['scarce resources', 'Used_for', 'method']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.3333333333333333, 0.3205298013245033, 0.32680621201890614]
text: In this paper , we discuss language model adaptation methods given a word list and a raw corpus .
result: triple_list: [["word list", "Conjunction", "raw corpus"]]
pred: [('word list', 'Conjunction', 'raw corpus')]
trues: [['word list', 'Used_for', 'language model adaptation methods'], ['word list', 'Conjunction', 'raw corpus'], ['raw corpus', 'Used_for', 'language model adaptation methods']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.3342503438789546, 0.32058047493403696, 0.32727272727272727]
text: We suggest a new goal and evaluation criterion for word similarity measures .
result: triple_list: [["word similarity measures", "Evaluate_for", "goal and evaluation criterion"]]
pred: [('word similarity measures', 'Evaluate_for', 'goal and evaluation criterion')]
trues: [['evaluation criterion', 'Used_for', 'word similarity measures']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33379120879120877, 0.3201581027667984, 0.3268325487558843]
text: This paper outlines Plume as it currently exists and describes our detailed design for extending Plume to handle passives , relative clauses , and interrogatives in a general manner .
result: triple_list: [["Plume", "Used_for", "general manner"]]
pred: [('Plume', 'Used_for', 'general manner')]
trues: [['Plume', 'Used_for', 'passives'], ['Plume', 'Used_for', 'relative clauses'], ['Plume', 'Used_for', 'interrogatives'], ['passives', 'Conjunction', 'relative clauses'], ['relative clauses', 'Conjunction', 'interrogatives']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3333333333333333, 0.3180628272251309, 0.32551908908238447]
text: Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest .
result: triple_list: [["Memo-functions", "Used_for", "parse forest"]]
pred: [('Memo-functions', 'Used_for', 'parse forest')]
trues: [['Memo-functions', 'Used_for', 'parse forest']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33424657534246577, 0.31895424836601305, 0.32642140468227426]
text: We present a new part-of-speech tagger that demonstrates the following ideas : ( i ) explicit use of both preceding and following tag contexts via a dependency network representation , ( ii ) broad use of lexical features , including jointly conditioning on multiple consecutive words , ( iii ) effective use of priors in conditional loglinear models , and ( iv ) fine-grained modeling of unknown word features .
result: triple_list: [["dependency network representation", "Used_for", "explicit use of both preceding and following tag contexts"], ["dependency network representation", "Feature_of", "part-of-speech tagger"], ["dependency network representation", "Conjunction", "lexical features"], ["joint conditioning on multiple consecutive words", "Feature_of", "lexical features"]]
pred: [('dependency network representation', 'Used_for', 'explicit use of both preceding and following tag contexts'), ('dependency network representation', 'Feature_of', 'part-of-speech tagger'), ('dependency network representation', 'Conjunction', 'lexical features'), ('joint conditioning on multiple consecutive words', 'Feature_of', 'lexical features')]
trues: [['tag contexts', 'Used_for', 'part-of-speech tagger'], ['dependency network representation', 'Used_for', 'tag contexts'], ['lexical features', 'Used_for', 'part-of-speech tagger'], ['priors in conditional loglinear models', 'Used_for', 'part-of-speech tagger'], ['fine-grained modeling of unknown word features', 'Used_for', 'part-of-speech tagger']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33242506811989103, 0.3168831168831169, 0.324468085106383]
text: First , we investigate how well the addressee of a dialogue act can be predicted based on gaze , utterance and conversational context features .
result: triple_list: [["gaze", "Used_for", "addressee of dialogue act"], ["gaze", "Conjunction", "utterance and conversational context features"], ["utterance and conversational context features", "Used_for", "addressee of dialogue act"]]
pred: [('gaze', 'Used_for', 'addressee of dialogue act'), ('gaze', 'Conjunction', 'utterance and conversational context features'), ('utterance and conversational context features', 'Used_for', 'addressee of dialogue act')]
trues: [['gaze', 'Used_for', 'addressee of a dialogue act'], ['gaze', 'Conjunction', 'utterance'], ['utterance', 'Used_for', 'addressee of a dialogue act'], ['utterance', 'Conjunction', 'conversational context features'], ['conversational context features', 'Used_for', 'addressee of a dialogue act']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3310719131614654, 0.31483870967741934, 0.32275132275132273]
text: The experiments show that the system is able to detect scf types with 70 % precision and 66 % recall rate .
result: triple_list: [["system", "Used_for", "scf types"]]
pred: [('system', 'Used_for', 'scf types')]
trues: [['precision', 'Evaluate_for', 'system'], ['precision', 'Conjunction', 'recall'], ['recall', 'Evaluate_for', 'system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33062330623306235, 0.31362467866323906, 0.32189973614775724]
text: A model-based approach to on-line cursive handwriting analysis and recognition is presented and evaluated .
result: triple_list: [["model-based approach", "Used_for", "on-line cursive handwriting analysis and recognition"]]
pred: [('model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition')]
trues: [['model-based approach', 'Used_for', 'on-line cursive handwriting analysis and recognition']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.33152909336941816, 0.31450577663671375, 0.3227931488801054]
text: An important area of learning in autonomous agents is the ability to learn domain-speciic models of actions to be used by planning systems .
result: triple_list: [["learning", "Used_for", "autonomous agents"], ["domain-speciic models of actions", "Used_for", "planning systems"]]
pred: [('learning', 'Used_for', 'autonomous agents'), ('domain-speciic models of actions', 'Used_for', 'planning systems')]
trues: [['learning in autonomous agents', 'Used_for', 'domain-speciic models of actions'], ['planning systems', 'Used_for', 'domain-speciic models of actions']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.33063427800269907, 0.31370038412291934, 0.3219448094612352]
text: In addition , we improve the learning by a metric weight constraint , so that the learned metric has a better generalization ability .
result: triple_list: [["metric weight constraint", "Used_for", "learning"], ["generalization ability", "Evaluate_for", "metric"]]
pred: [('metric weight constraint', 'Used_for', 'learning'), ('generalization ability', 'Evaluate_for', 'metric')]
trues: [['metric weight constraint', 'Used_for', 'learning'], ['generalization ability', 'Feature_of', 'learned metric']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3310901749663526, 0.31417624521072796, 0.3224115334207077]
text: We present results on addressee identification in four-participants face-to-face meetings using Bayesian Network and Naive Bayes classifiers .
result: triple_list: [["Bayesian Network", "Conjunction", "Naive Bayes classifiers"], ["Bayesian Network", "Used_for", "addressee identification"], ["Naive Bayes classifiers", "Used_for", "addressee identification"]]
pred: [('Bayesian Network', 'Conjunction', 'Naive Bayes classifiers'), ('Bayesian Network', 'Used_for', 'addressee identification'), ('Naive Bayes classifiers', 'Used_for', 'addressee identification')]
trues: [['Bayesian Network', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Used_for', 'addressee identification in four-participants face-to-face meetings'], ['Naive Bayes classifiers', 'Conjunction', 'Bayesian Network']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3297587131367292, 0.31297709923664124, 0.3211488250652742]
text: OA improved phase locking in the auditory nerve ( AN ) and raised ASR accuracy for features derived from AN fibers ( ANFs ) .
result: triple_list: [["OA", "Used_for", "phase locking"], ["phase locking", "Feature_of", "auditory nerve ( AN )"], ["phase locking", "Conjunction", "ASR accuracy"], ["features derived from AN fibers ( ANFs )", "Feature_of", "ASR accuracy"]]
pred: [('OA', 'Used_for', 'phase locking'), ('phase locking', 'Feature_of', 'auditory nerve ( AN )'), ('phase locking', 'Conjunction', 'ASR accuracy'), ('features derived from AN fibers ( ANFs )', 'Feature_of', 'ASR accuracy')]
trues: [['OA', 'Used_for', 'phase locking in the auditory nerve ( AN )'], ['OA', 'Used_for', 'features'], ['ASR accuracy', 'Evaluate_for', 'features'], ['AN fibers ( ANFs )', 'Used_for', 'features']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.328, 0.31139240506329113, 0.31948051948051953]
text: One remarkable feature of this model is that it has allowed us to derive an efficient algorithm based on powerful statistical methods for estimating the Fujisaki-model parameters from raw F0 contours .
result: triple_list: [["algorithm", "Used_for", "Fujisaki-model parameters"], ["raw F0 contours", "Used_for", "algorithm"]]
pred: [('algorithm', 'Used_for', 'Fujisaki-model parameters'), ('raw F0 contours', 'Used_for', 'algorithm')]
trues: [['remarkable feature', 'Feature_of', 'model'], ['algorithm', 'Used_for', 'Fujisaki-model parameters'], ['statistical methods', 'Used_for', 'algorithm'], ['raw F0 contours', 'Used_for', 'Fujisaki-model parameters']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.32845744680851063, 0.3110831234256927, 0.31953428201811124]
text: We provide a unified account of sentence-level and text-level anaphora within the framework of a dependency-based grammar model .
result: triple_list: [["dependency-based grammar model", "Used_for", "sentence-level and text-level anaphora"]]
pred: [('dependency-based grammar model', 'Used_for', 'sentence-level and text-level anaphora')]
trues: [['dependency-based grammar model', 'Used_for', 'sentence-level and text-level anaphora']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3293492695883134, 0.3119496855345912, 0.32041343669250644]
text: MINPRAN 's properties are connrmed experimentally on synthetic data and compare favorably to least median of squares .
result: triple_list: [["synthetic data", "Evaluate_for", "MINPRAN"], ["synthetic data", "Evaluate_for", "least median of squares"]]
pred: [('synthetic data', 'Evaluate_for', 'MINPRAN'), ('synthetic data', 'Evaluate_for', 'least median of squares')]
trues: [['synthetic data', 'Evaluate_for', 'MINPRAN'], ['least median of squares', 'Compare', 'MINPRAN']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32980132450331123, 0.3124215809284818, 0.3208762886597938]
text: We evaluate several proposals for constraining them , basing our assessment on computational tractability and explanatory adequacy .
result: triple_list: [["computational tractability", "Evaluate_for", "proposals"], ["computational tractability", "Conjunction", "explanatory adequacy"], ["explanatory adequacy", "Evaluate_for", "proposals"]]
pred: [('computational tractability', 'Evaluate_for', 'proposals'), ('computational tractability', 'Conjunction', 'explanatory adequacy'), ('explanatory adequacy', 'Evaluate_for', 'proposals')]
trues: [['computational tractability and explanatory adequacy', 'Evaluate_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32849604221635886, 0.31203007518796994, 0.32005141388174807]
text: Our technique is based on an improved , dynamic-programming , stereo algorithm for efficient novel-view generation .
result: triple_list: [["dynamic-programming", "Used_for", "novel-view generation"]]
pred: [('dynamic-programming', 'Used_for', 'novel-view generation')]
trues: [['technique', 'Used_for', 'novel-view generation'], ['dynamic-programming , stereo algorithm', 'Used_for', 'technique']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32806324110671936, 0.31125, 0.31943553559974347]
text: With the aid of a logic-based grammar formalism called extraposition grammars , Chat-80 translates English questions into the Prolog subset of logic .
result: triple_list: [["grammar formalism", "Used_for", "Chat-80"], ["extraposition grammars", "Hyponym_of", "grammar formalism"], ["logic", "Used_for", "Prolog subset of logic"]]
pred: [('grammar formalism', 'Used_for', 'Chat-80'), ('extraposition grammars', 'Hyponym_of', 'grammar formalism'), ('logic', 'Used_for', 'Prolog subset of logic')]
trues: [['extraposition grammars', 'Hyponym_of', 'logic-based grammar formalism'], ['extraposition grammars', 'Used_for', 'Chat-80']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32677165354330706, 0.3104738154613466, 0.31841432225063937]
text: A language learning experiment showed that assessors can differentiate native from non-native language essays in less than 100 words .
result: triple_list: [["assessors", "Used_for", "native from non-native language essays"]]
pred: [('assessors', 'Used_for', 'native from non-native language essays')]
trues: [['language learning', 'Evaluate_for', 'assessors']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32634338138925295, 0.31008717310087175, 0.318007662835249]
text: We propose a novel probabilistic framework for learning visual models of 3D object categories by combining appearance information and geometric constraints .
result: triple_list: [["probabilistic framework", "Used_for", "visual models of 3D object categories"], ["geometric constraints", "Used_for", "probabilistic framework"], ["geometric constraints", "Conjunction", "appearance information"]]
pred: [('probabilistic framework', 'Used_for', 'visual models of 3D object categories'), ('geometric constraints', 'Used_for', 'probabilistic framework'), ('geometric constraints', 'Conjunction', 'appearance information')]
trues: [['probabilistic framework', 'Used_for', 'visual models of 3D object categories'], ['appearance information', 'Used_for', 'probabilistic framework'], ['appearance information', 'Conjunction', 'geometric constraints'], ['geometric constraints', 'Used_for', 'probabilistic framework']]
metrics_sample: [0.6666666666666666, 0.5, 0.5714285714285715]
metrics_current: [0.3276762402088773, 0.3110285006195787, 0.31913541004450097]
text: FERRET utilizes a novel approach to Q/A known as predictive questioning which attempts to identify the questions ( and answers ) that users need by analyzing how a user interacts with a system while gathering information related to a particular scenario .
result: triple_list: [["approach", "Used_for", "FERRET"], ["predictive questioning", "Used_for", "FERRET"], ["answers", "Part_of", "FERRET"], ["user", "Feature_of", "system"], ["scenario", "Feature_of", "information"]]
pred: [('approach', 'Used_for', 'FERRET'), ('predictive questioning', 'Used_for', 'FERRET'), ('answers', 'Part_of', 'FERRET'), ('user', 'Feature_of', 'system'), ('scenario', 'Feature_of', 'information')]
trues: [['approach', 'Used_for', 'FERRET'], ['approach', 'Used_for', 'Q/A']]
metrics_sample: [0.2, 0.5, 0.28571428571428575]
metrics_current: [0.32684824902723736, 0.311495673671199, 0.3189873417721519]
text: The problem of blind separation of underdetermined instantaneous mixtures of independent signals is addressed through a method relying on nonstationarity of the original signals .
result: triple_list: [["nonstationarity of the original signals", "Used_for", "blind separation of underdetermined instantaneous mixtures of independent signals"]]
pred: [('nonstationarity of the original signals', 'Used_for', 'blind separation of underdetermined instantaneous mixtures of independent signals')]
trues: [['method', 'Used_for', 'blind separation of underdetermined instantaneous mixtures of independent signals'], ['nonstationarity', 'Used_for', 'method']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32642487046632124, 0.31072749691738594, 0.3183828174352495]
text: The proposed approach does not require a separate segmentation stage and is applicable to cluttered scenes .
result: triple_list: [["segmentation stage", "Feature_of", "approach"], ["cluttered scenes", "Used_for", "approach"]]
pred: [('segmentation stage', 'Feature_of', 'approach'), ('cluttered scenes', 'Used_for', 'approach')]
trues: [['approach', 'Used_for', 'cluttered scenes']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32558139534883723, 0.3103448275862069, 0.317780580075662]
text: Unlike existing interest point detectors , which measure pixel-wise differences in image intensity , our detectors incorporate histogram-based representations , and thus can find image regions that present a distinct distribution in the neighborhood .
result: triple_list: [["histogram-based representations", "Part_of", "detectors"]]
pred: [('histogram-based representations', 'Part_of', 'detectors')]
trues: [['pixel-wise differences in image intensity', 'Evaluate_for', 'interest point detectors'], ['histogram-based representations', 'Part_of', 'detectors']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32645161290322583, 0.3108108108108108, 0.3184392699811202]
text: This model is meant to account for productive rules of interpretation which are inferred from the morpho-syntactic and semantic characteristics of the nominal constituents .
result: triple_list: [["model", "Used_for", "productive rules of interpretation"], ["morpho-syntactic and semantic characteristics of the nominal constituents", "Used_for", "productive rules of interpretation"]]
pred: [('model', 'Used_for', 'productive rules of interpretation'), ('morpho-syntactic and semantic characteristics of the nominal constituents', 'Used_for', 'productive rules of interpretation')]
trues: [['model', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Used_for', 'productive rules of interpretation'], ['morpho-syntactic and semantic characteristics', 'Feature_of', 'nominal constituents']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.3268983268983269, 0.3108935128518972, 0.31869510664993733]
text: Our experiments clearly indicate the potential of this dynamic representation for complete cursive handwriting recognition .
result: triple_list: [["dynamic representation", "Used_for", "complete cursive handwriting recognition"]]
pred: [('dynamic representation', 'Used_for', 'complete cursive handwriting recognition')]
trues: [['dynamic representation', 'Used_for', 'cursive handwriting recognition']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3264781491002571, 0.3105134474327628, 0.31829573934837085]
text: A critical step in encoding sound for neuronal processing occurs when the analog pressure wave is coded into discrete nerve-action potentials .
result: triple_list: [["coded", "Used_for", "neuronal processing"], ["analog pressure wave", "Used_for", "coded"]]
pred: [('coded', 'Used_for', 'neuronal processing'), ('analog pressure wave', 'Used_for', 'coded')]
trues: [['encoding sound', 'Used_for', 'neuronal processing'], ['discrete nerve-action potentials', 'Used_for', 'analog pressure wave']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32564102564102565, 0.3097560975609756, 0.3175]
text: We describe how to estimate these indicators and how to integrate them into a retrieval approach based on language models .
result: triple_list: [["they", "Used_for", "retrieval approach"]]
pred: [('they', 'Used_for', 'retrieval approach')]
trues: [['them', 'Part_of', 'retrieval approach'], ['language models', 'Used_for', 'them']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32522407170294493, 0.30900243309002434, 0.3169058016219588]
text: The task of machine translation ( MT ) evaluation is closely related to the task of sentence-level semantic equivalence classification .
result: triple_list: [["task of sentence-level semantic equivalence classification", "Conjunction", "task of machine translation ( MT ) evaluation"]]
pred: [('task of sentence-level semantic equivalence classification', 'Conjunction', 'task of machine translation ( MT ) evaluation')]
trues: [['machine translation ( MT ) evaluation', 'Conjunction', 'sentence-level semantic equivalence classification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3248081841432225, 0.3086269744835966, 0.3165109034267913]
text: This paper gives an overall account of a prototype natural language question answering system , called Chat-80 .
result: triple_list: [["prototype natural language question answering system", "Used_for", "Chat-80"]]
pred: [('prototype natural language question answering system', 'Used_for', 'Chat-80')]
trues: [['Chat-80', 'Hyponym_of', 'natural language question answering system']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3243933588761175, 0.308252427184466, 0.3161169881767268]
text: The experimental tests are carried out on the Verbmobil task ( German-English , 8000-word vocabulary ) , which is a limited-domain spoken-language task .
result: triple_list: [["Verbmobil task", "Evaluate_for", "limited-domain spoken-language task"]]
pred: [('Verbmobil task', 'Evaluate_for', 'limited-domain spoken-language task')]
trues: [['Verbmobil task', 'Hyponym_of', 'limited-domain spoken-language task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3239795918367347, 0.30787878787878786, 0.3157240522063393]
text: In this model , on-line handwriting is considered as a modulation of a simple cycloidal pen motion , described by two coupled oscillations with a constant linear drift along the line of the writing .
result: triple_list: [["cycloidal pen motion", "Used_for", "on-line handwriting"]]
pred: [('cycloidal pen motion', 'Used_for', 'on-line handwriting')]
trues: [['model', 'Used_for', 'on-line handwriting'], ['on-line handwriting', 'Part_of', 'cycloidal pen motion']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3235668789808917, 0.30713422007255137, 0.315136476426799]
text: First , it uses several kinds of dictionaries to segment and tag Japanese character strings .
result: triple_list: [["dictionaries", "Used_for", "Japanese character strings"]]
pred: [('dictionaries', 'Used_for', 'Japanese character strings')]
trues: [['dictionaries', 'Used_for', 'it'], ['dictionaries', 'Used_for', 'Japanese character strings']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3244274809160305, 0.30759951749095293, 0.3157894736842105]
text: This posterior encodes sparse se-lectional preferences between a head word and its dependents .
result: triple_list: [["posterior", "Used_for", "sparse se-lectional preferences"]]
pred: [('posterior', 'Used_for', 'sparse se-lectional preferences')]
trues: [['posterior', 'Used_for', 'sparse se-lectional preferences']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3252858958068615, 0.30843373493975906, 0.31663574520717375]
text: This paper proposes to use a convolution kernel over parse trees to model syntactic structure information for relation extraction .
result: triple_list: [["convolution kernel over parse trees", "Used_for", "syntactic structure information"], ["syntactic structure information", "Used_for", "relation extraction"]]
pred: [('convolution kernel over parse trees', 'Used_for', 'syntactic structure information'), ('syntactic structure information', 'Used_for', 'relation extraction')]
trues: [['convolution kernel over parse trees', 'Used_for', 'syntactic structure information'], ['syntactic structure information', 'Used_for', 'relation extraction']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3269961977186312, 0.31009615384615385, 0.3183220234423196]
text: It has also been studied in the framework of Japanese information extraction ( [ 3 ] ) in recent years .
result: triple_list: [["Japanese information extraction", "Used_for", "It"]]
pred: [('Japanese information extraction', 'Used_for', 'It')]
trues: [['Japanese information extraction', 'Used_for', 'It']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3278481012658228, 0.31092436974789917, 0.319162045594578]
text: Thus , the limitations of the automatic metrics used within MT are also discussed in this regard .
result: triple_list: [["automatic metrics", "Used_for", "MT"]]
pred: [('automatic metrics', 'Used_for', 'MT')]
trues: [['automatic metrics', 'Evaluate_for', 'MT']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3274336283185841, 0.3105515587529976, 0.31876923076923075]
text: Multi-layer perceptrons ( MLPs ) performed much better than standard Gaussian mixture models ( GMMs ) for both our ANF-based and ON-based auditory features .
result: triple_list: [["Multi-layer perceptrons ( MLPs )", "Compare", "Gaussian mixture models ( GMMs )"], ["ANF-based and ON-based auditory features", "Used_for", "Multi-layer perceptrons ( MLPs )"], ["ANF-based and ON-based auditory features", "Used_for", "Gaussian mixture models ( GMMs )"]]
pred: [('Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'), ('ANF-based and ON-based auditory features', 'Used_for', 'Multi-layer perceptrons ( MLPs )'), ('ANF-based and ON-based auditory features', 'Used_for', 'Gaussian mixture models ( GMMs )')]
trues: [['Multi-layer perceptrons ( MLPs )', 'Compare', 'Gaussian mixture models ( GMMs )'], ['Multi-layer perceptrons ( MLPs )', 'Used_for', 'ANF-based and ON-based auditory features'], ['Gaussian mixture models ( GMMs )', 'Used_for', 'ANF-based and ON-based auditory features']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.327455919395466, 0.3106332138590203, 0.3188228080931944]
text: On the internal side , liaisons are established between elements of the text and the graph by using broadly available resources such as a LO-English or better a L0-UNL dictionary , a morphosyntactic parser of L0 , and a canonical graph2tree transformation .
result: triple_list: [["LO-English or better a L0-UNL dictionary", "Used_for", "resources"], ["morphosyntactic parser of L0", "Used_for", "resources"], ["morphosyntactic parser of L0", "Conjunction", "canonical graph2tree transformation"], ["canonical graph2tree transformation", "Used_for", "resources"]]
pred: [('LO-English or better a L0-UNL dictionary', 'Used_for', 'resources'), ('morphosyntactic parser of L0', 'Used_for', 'resources'), ('morphosyntactic parser of L0', 'Conjunction', 'canonical graph2tree transformation'), ('canonical graph2tree transformation', 'Used_for', 'resources')]
trues: [['resources', 'Used_for', 'liaisons'], ['LO-English or better a L0-UNL dictionary', 'Hyponym_of', 'resources'], ['LO-English or better a L0-UNL dictionary', 'Conjunction', 'morphosyntactic parser of L0'], ['morphosyntactic parser of L0', 'Hyponym_of', 'resources'], ['morphosyntactic parser of L0', 'Conjunction', 'canonical graph2tree transformation'], ['canonical graph2tree transformation', 'Hyponym_of', 'resources']]
metrics_sample: [0.25, 0.16666666666666666, 0.2]
metrics_current: [0.32706766917293234, 0.3096085409252669, 0.3180987202925045]
text: Thus the ASR system is designed to deal with what we refer to as Word Spotting and Noise Spotting capabilities .
result: triple_list: [["ASR system", "Used_for", "Word Spotting and Noise Spotting capabilities"]]
pred: [('ASR system', 'Used_for', 'Word Spotting and Noise Spotting capabilities')]
trues: [['ASR system', 'Used_for', 'Word Spotting'], ['ASR system', 'Used_for', 'Noise Spotting capabilities']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32665832290362956, 0.3088757396449704, 0.3175182481751825]
text: We demonstrate our approach with multiple PTZ camera sequences in typical outdoor surveillance settings and show a comparison with state-of-the-art approaches .
result: triple_list: [["PTZ camera sequences", "Used_for", "approach"], ["PTZ camera sequences", "Used_for", "approaches"]]
pred: [('PTZ camera sequences', 'Used_for', 'approach'), ('PTZ camera sequences', 'Used_for', 'approaches')]
trues: [['approach', 'Used_for', 'outdoor surveillance settings'], ['approach', 'Compare', 'state-of-the-art approaches'], ['multiple PTZ camera sequences', 'Used_for', 'approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3258426966292135, 0.30778301886792453, 0.3165554881746513]
text: Finally , we show how the estimation of the tensors from point correspondences is achieved through factorization , and discuss the estimation from line correspondences .
result: triple_list: [["factorization", "Used_for", "estimation of the tensors from point correspondences"], ["estimation from line correspondences", "Used_for", "estimation of the tensors"]]
pred: [('factorization', 'Used_for', 'estimation of the tensors from point correspondences'), ('estimation from line correspondences', 'Used_for', 'estimation of the tensors')]
trues: [['point correspondences', 'Used_for', 'estimation of the tensors'], ['factorization', 'Used_for', 'tensors'], ['line correspondences', 'Used_for', 'estimation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32503113325031135, 0.30669800235017625, 0.31559854897218864]
text: We evaluate the proposed methods through several transliteration/backtransliteration experiments for English/Chinese and English/Japanese language pairs .
result: triple_list: [["transliteration/backtransliteration experiments", "Evaluate_for", "methods"], ["English/Chinese", "Conjunction", "English/Japanese"], ["English/Chinese", "Evaluate_for", "methods"], ["English/Japanese", "Evaluate_for", "methods"]]
pred: [('transliteration/backtransliteration experiments', 'Evaluate_for', 'methods'), ('English/Chinese', 'Conjunction', 'English/Japanese'), ('English/Chinese', 'Evaluate_for', 'methods'), ('English/Japanese', 'Evaluate_for', 'methods')]
trues: [['transliteration/backtransliteration', 'Evaluate_for', 'methods'], ['transliteration/backtransliteration', 'Used_for', 'English/Chinese and English/Japanese language pairs']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32342007434944237, 0.305978898007034, 0.3144578313253012]
text: We evaluated the topic signatures on a WSD task , where we trained a second-order vector cooccurrence algorithm on standard WSD datasets , with promising results .
result: triple_list: [["WSD datasets", "Used_for", "second-order vector cooccurrence algorithm"]]
pred: [('WSD datasets', 'Used_for', 'second-order vector cooccurrence algorithm')]
trues: [['WSD task', 'Evaluate_for', 'topic signatures'], ['WSD datasets', 'Used_for', 'second-order vector cooccurrence algorithm']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.32425742574257427, 0.3064327485380117, 0.3150932050511125]
text: The formalism 's intended usage is to relate expressions of natural languages to their associated semantics represented in a logical form language , or to their translates in another natural language ; in summary , we intend it to allow TAGs to be used beyond their role in syntax proper .
result: triple_list: [["TAGs", "Used_for", "it"]]
pred: [('TAGs', 'Used_for', 'it')]
trues: [['logical form language', 'Used_for', 'semantics'], ['TAGs', 'Used_for', 'syntax proper']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3238566131025958, 0.3057176196032672, 0.31452581032412963]
text: In addition , we conduct synthetic experiments as well as a real application on noisy image classification to show that our method also improves the performance in practice by exploiting side information .
result: triple_list: [["synthetic experiments", "Evaluate_for", "method"], ["synthetic experiments", "Conjunction", "real application"], ["real application", "Evaluate_for", "method"], ["real application", "Evaluate_for", "image classification"], ["noisy image classification", "Evaluate_for", "method"]]
pred: [('synthetic experiments', 'Evaluate_for', 'method'), ('synthetic experiments', 'Conjunction', 'real application'), ('real application', 'Evaluate_for', 'method'), ('real application', 'Evaluate_for', 'image classification'), ('noisy image classification', 'Evaluate_for', 'method')]
trues: [['noisy image classification', 'Evaluate_for', 'method'], ['side information', 'Used_for', 'method']]
metrics_sample: [0.2, 0.5, 0.28571428571428575]
metrics_current: [0.3230958230958231, 0.3061699650756694, 0.31440526001195457]
text: Sentence boundary detection in speech is important for enriching speech recognition output , making it easier for humans to read and downstream modules to process .
result: triple_list: [["Sentence boundary detection", "Used_for", "speech recognition"], ["speech recognition output", "Evaluate_for", "speech recognition"], ["it", "Evaluate_for", "downstream modules"]]
pred: [('Sentence boundary detection', 'Used_for', 'speech recognition'), ('speech recognition output', 'Evaluate_for', 'speech recognition'), ('it', 'Evaluate_for', 'downstream modules')]
trues: [['Sentence boundary detection', 'Used_for', 'speech recognition output'], ['speech', 'Used_for', 'Sentence boundary detection']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3219094247246022, 0.305458768873403, 0.3134684147794994]
text: We explored possible ways to obtain a compact lexicon , consistent with CCG principles , from a treebank which is an order of magnitude smaller than Penn WSJ .
result: triple_list: [["treebank", "Used_for", "compact lexicon"], ["treebank", "Used_for", "CCG principles"], ["treebank", "Hyponym_of", "Penn WSJ"]]
pred: [('treebank', 'Used_for', 'compact lexicon'), ('treebank', 'Used_for', 'CCG principles'), ('treebank', 'Hyponym_of', 'Penn WSJ')]
trues: [['compact lexicon', 'Part_of', 'treebank'], ['treebank', 'Compare', 'Penn WSJ']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3207317073170732, 0.3047508690614137, 0.31253713606654787]
text: Our study reveals that the proposed method not only reduces an extensive system development effort but also improves the transliteration accuracy significantly .
result: triple_list: [["method", "Used_for", "system development effort"], ["transliteration accuracy", "Evaluate_for", "method"]]
pred: [('method', 'Used_for', 'system development effort'), ('transliteration accuracy', 'Evaluate_for', 'method')]
trues: [['transliteration accuracy', 'Evaluate_for', 'method']]
metrics_sample: [0.5, 1.0, 0.6666666666666666]
metrics_current: [0.32116788321167883, 0.3055555555555556, 0.3131672597864768]
text: Such a triangulation provides a piecewise-linear interpolant useful for light field super-resolution .
result: triple_list: [["triangulation", "Used_for", "piecewise-linear interpolant"], ["piecewise-linear interpolant", "Used_for", "light field super-resolution"]]
pred: [('triangulation', 'Used_for', 'piecewise-linear interpolant'), ('piecewise-linear interpolant', 'Used_for', 'light field super-resolution')]
trues: [['triangulation', 'Used_for', 'piecewise-linear interpolant'], ['piecewise-linear interpolant', 'Used_for', 'light field super-resolution']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32281553398058255, 0.3071593533487298, 0.31479289940828403]
text: A statistical translation model is also presented that deals such phrases , as well as a training method based on the maximization of translation accuracy , as measured with the NIST evaluation metric .
result: triple_list: [["statistical translation model", "Used_for", "phrases"], ["training method", "Feature_of", "translation accuracy"], ["NIST evaluation metric", "Evaluate_for", "translation accuracy"]]
pred: [('statistical translation model', 'Used_for', 'phrases'), ('training method', 'Feature_of', 'translation accuracy'), ('NIST evaluation metric', 'Evaluate_for', 'translation accuracy')]
trues: [['statistical translation model', 'Used_for', 'phrases'], ['maximization of translation accuracy', 'Used_for', 'training method'], ['NIST evaluation metric', 'Evaluate_for', 'statistical translation model']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.32285368802902054, 0.30724971231300346, 0.3148584905660377]
text: At the core of the externally digital architecture is a high-density , low-power analog array performing binary-binary partial matrix-vector multiplication .
result: triple_list: [["analog array", "Part_of", "externally digital architecture"], ["high-density , low-power analog array", "Used_for", "binary-binary partial matrix-vector multiplication"]]
pred: [('analog array', 'Part_of', 'externally digital architecture'), ('high-density , low-power analog array', 'Used_for', 'binary-binary partial matrix-vector multiplication')]
trues: [['high-density , low-power analog array', 'Part_of', 'externally digital architecture'], ['binary-binary partial matrix-vector multiplication', 'Used_for', 'high-density , low-power analog array']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3220747889022919, 0.3065442020665901, 0.3141176470588235]
text: We show that there is a closed-form ( analytical ) solution for one part of the Kullback-Leibler distance , viz the cross-entropy .
result: triple_list: [["analytical solution", "Used_for", "Kullback-Leibler distance"], ["cross-entropy", "Part_of", "Kullback-Leibler distance"]]
pred: [('analytical solution', 'Used_for', 'Kullback-Leibler distance'), ('cross-entropy', 'Part_of', 'Kullback-Leibler distance')]
trues: [['closed-form ( analytical ) solution', 'Used_for', 'Kullback-Leibler distance'], ['closed-form ( analytical ) solution', 'Used_for', 'cross-entropy'], ['cross-entropy', 'Part_of', 'Kullback-Leibler distance']]
metrics_sample: [0.5, 0.3333333333333333, 0.4]
metrics_current: [0.32250300842358604, 0.30663615560640733, 0.3143695014662756]
text: Towards the modeling of the dynamic characteristics , optical flow is computed and utilized as a feature in a higher dimensional space .
result: triple_list: [["optical flow", "Used_for", "higher dimensional space"]]
pred: [('optical flow', 'Used_for', 'higher dimensional space')]
trues: [['optical flow', 'Used_for', 'modeling of the dynamic characteristics'], ['optical flow', 'Used_for', 'feature'], ['feature', 'Used_for', 'modeling of the dynamic characteristics'], ['higher dimensional space', 'Feature_of', 'feature']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32211538461538464, 0.3052391799544419, 0.3134502923976608]
text: In both domains , we found that unsupervised methods can attain accuracies with 400 unlabeled examples comparable to those attained by supervised methods on 50 labeled examples , and that semi-supervised methods can make good use of small amounts of labeled data .
result: triple_list: [["unsupervised methods", "Compare", "supervised methods"], ["unsupervised methods", "Evaluate_for", "domains"], ["unsupervised methods", "Evaluate_for", "semi-supervised methods"], ["accuracies", "Evaluate_for", "unsupervised methods"], ["accuracies", "Evaluate_for", "supervised methods"], ["accuracies", "Evaluate_for", "semi-supervised methods"], ["accuracies", "Feature_of", "domains"], ["labeled examples", "Evaluate_for", "unsupervised methods"], ["labeled examples", "Evaluate_for", "supervised methods"], ["labeled examples", "Evaluate_for", "semi-supervised methods"], ["labeled examples", "Conjunction", "accuracies"], ["semi-supervised methods", "Evaluate_for", "labeled data"]]
pred: [('unsupervised methods', 'Compare', 'supervised methods'), ('unsupervised methods', 'Evaluate_for', 'domains'), ('unsupervised methods', 'Evaluate_for', 'semi-supervised methods'), ('accuracies', 'Evaluate_for', 'unsupervised methods'), ('accuracies', 'Evaluate_for', 'supervised methods'), ('accuracies', 'Evaluate_for', 'semi-supervised methods'), ('accuracies', 'Feature_of', 'domains'), ('labeled examples', 'Evaluate_for', 'unsupervised methods'), ('labeled examples', 'Evaluate_for', 'supervised methods'), ('labeled examples', 'Evaluate_for', 'semi-supervised methods'), ('labeled examples', 'Conjunction', 'accuracies'), ('semi-supervised methods', 'Evaluate_for', 'labeled data')]
trues: [['unsupervised methods', 'Compare', 'supervised methods'], ['accuracies', 'Evaluate_for', 'unsupervised methods'], ['accuracies', 'Evaluate_for', 'supervised methods'], ['unlabeled examples', 'Used_for', 'unsupervised methods'], ['labeled examples', 'Used_for', 'supervised methods'], ['labeled data', 'Used_for', 'semi-supervised methods']]
metrics_sample: [0.25, 0.5, 0.3333333333333333]
metrics_current: [0.32109004739336494, 0.3065610859728507, 0.31365740740740744]
text: Our core motivation is that minimizing a weighted rank loss is a natural criterion for many problems in computer vision such as person re-identification .
result: triple_list: [["weighted rank loss", "Used_for", "computer vision"], ["computer vision", "Used_for", "problems"], ["person re-identification", "Hyponym_of", "problems"]]
pred: [('weighted rank loss', 'Used_for', 'computer vision'), ('computer vision', 'Used_for', 'problems'), ('person re-identification', 'Hyponym_of', 'problems')]
trues: [['weighted rank loss', 'Used_for', 'computer vision'], ['weighted rank loss', 'Used_for', 'person re-identification'], ['person re-identification', 'Hyponym_of', 'computer vision']]
metrics_sample: [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
metrics_current: [0.32113341204250295, 0.30665163472378804, 0.3137254901960784]
text: The intentional structure captures the discourse-relevant purposes , expressed in each of the linguistic segments as well as relationships among them .
result: triple_list: [["intentional structure", "Used_for", "discourse-relevant purposes"], ["linguistic segments", "Feature_of", "intentional structure"], ["relationships", "Feature_of", "intentional structure"]]
pred: [('intentional structure', 'Used_for', 'discourse-relevant purposes'), ('linguistic segments', 'Feature_of', 'intentional structure'), ('relationships', 'Feature_of', 'intentional structure')]
trues: [['intentional structure', 'Used_for', 'discourse-relevant purposes']]
metrics_sample: [0.3333333333333333, 1.0, 0.5]
metrics_current: [0.3211764705882353, 0.30743243243243246, 0.3141542002301496]
text: We investigate several voting - and arbiter-based combination strategies over a diverse pool of unsupervised WSD systems .
result: triple_list: [["voting - and arbiter-based combination strategies", "Used_for", "WSD systems"], ["unsupervised WSD systems", "Part_of", "pool of unsupervised WSD systems"]]
pred: [('voting - and arbiter-based combination strategies', 'Used_for', 'WSD systems'), ('unsupervised WSD systems', 'Part_of', 'pool of unsupervised WSD systems')]
trues: [['voting - and arbiter-based combination strategies', 'Used_for', 'unsupervised WSD systems']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3204225352112676, 0.30708661417322836, 0.31361286616886846]
text: We propose a corpus-based method ( Biber ,1993 ; Nagao ,1993 ; Smadja ,1993 ) which generates Noun Classifier Associations ( NCA ) to overcome the problems in classifier assignment and semantic construction of noun phrase .
result: triple_list: [["corpus-based method", "Used_for", "Noun Classifier Associations ( NCA )"], ["classifier assignment", "Conjunction", "semantic construction of noun phrase"]]
pred: [('corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'), ('classifier assignment', 'Conjunction', 'semantic construction of noun phrase')]
trues: [['corpus-based method', 'Used_for', 'Noun Classifier Associations ( NCA )'], ['corpus-based method', 'Used_for', 'classifier assignment'], ['corpus-based method', 'Used_for', 'semantic construction of noun phrase'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'classifier assignment'], ['Noun Classifier Associations ( NCA )', 'Used_for', 'semantic construction of noun phrase'], ['classifier assignment', 'Conjunction', 'semantic construction of noun phrase']]
metrics_sample: [1.0, 0.3333333333333333, 0.5]
metrics_current: [0.32201405152224827, 0.30726256983240224, 0.31446540880503143]
text: GLOSSER is designed to support reading and learning to read in a foreign language .
result: triple_list: [["GLOSSER", "Used_for", "reading and learning to read"], ["foreign language", "Feature_of", "reading and learning to read"]]
pred: [('GLOSSER', 'Used_for', 'reading and learning to read'), ('foreign language', 'Feature_of', 'reading and learning to read')]
trues: [['GLOSSER', 'Used_for', 'reading and learning']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3212616822429907, 0.30691964285714285, 0.3139269406392694]
text: We present an application of ambiguity packing and stochastic disambiguation techniques for Lexical-Functional Grammars ( LFG ) to the domain of sentence condensation .
result: triple_list: [["ambiguity packing and stochastic disambiguation techniques", "Used_for", "Lexical-Functional Grammars ( LFG )"], ["Lexical-Functional Grammars ( LFG )", "Used_for", "sentence condensation"]]
pred: [('ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'), ('Lexical-Functional Grammars ( LFG )', 'Used_for', 'sentence condensation')]
trues: [['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'Lexical-Functional Grammars ( LFG )'], ['ambiguity packing and stochastic disambiguation techniques', 'Used_for', 'sentence condensation']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.32167832167832167, 0.30734966592427615, 0.3143507972665148]
text: The two main contributions of this paper are : i ) a new type of three-plane graph for dense-stereo dynamic-programming , that encourages correct occlusion labeling ; ii ) a compact geometric derivation for novel-view synthesis by direct projection of the minimum-cost surface .
result: triple_list: [["three-plane graph", "Used_for", "dense-stereo dynamic-programming"], ["geometric derivation", "Used_for", "novel-view synthesis"]]
pred: [('three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'), ('geometric derivation', 'Used_for', 'novel-view synthesis')]
trues: [['three-plane graph', 'Used_for', 'dense-stereo dynamic-programming'], ['dense-stereo dynamic-programming', 'Used_for', 'occlusion labeling'], ['compact geometric derivation', 'Used_for', 'novel-view synthesis'], ['direct projection of the minimum-cost surface', 'Used_for', 'compact geometric derivation']]
metrics_sample: [0.5, 0.25, 0.3333333333333333]
metrics_current: [0.32209302325581396, 0.3070953436807095, 0.3144154370034052]
text: In this paper , we present our approach for using information extraction annotations to augment document retrieval for distillation .
result: triple_list: [["approach", "Used_for", "distillation"], ["information extraction annotations", "Used_for", "approach"], ["document retrieval", "Used_for", "distillation"]]
pred: [('approach', 'Used_for', 'distillation'), ('information extraction annotations', 'Used_for', 'approach'), ('document retrieval', 'Used_for', 'distillation')]
trues: [['information extraction annotations', 'Used_for', 'document retrieval for distillation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.320973348783314, 0.3067552602436323, 0.31370328425821065]
text: A random modulation scheme produces near-Bernoulli statistics even for highly correlated inputs .
result: triple_list: [["random modulation scheme", "Used_for", "near-Bernoulli statistics"], ["highly correlated inputs", "Feature_of", "near-Bernoulli statistics"]]
pred: [('random modulation scheme', 'Used_for', 'near-Bernoulli statistics'), ('highly correlated inputs', 'Feature_of', 'near-Bernoulli statistics')]
trues: [['random modulation scheme', 'Used_for', 'near-Bernoulli statistics'], ['highly correlated inputs', 'Used_for', 'random modulation scheme']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3213872832369942, 0.30718232044198895, 0.3141242937853107]
text: Therefore , the study presented in this paper may be useful in inspiring new designs of deep models for person re-identification .
result: triple_list: [["designs of deep models", "Used_for", "person re-identification"]]
pred: [('designs of deep models', 'Used_for', 'person re-identification')]
trues: [['deep models', 'Used_for', 'person re-identification']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3210161662817552, 0.3068432671081678, 0.31376975169300225]
text: This paper presents necessary and sufficient conditions for the use of demonstrative expressions in English and discusses implications for current discourse processing algorithms .
result: triple_list: [["demonstrative expressions", "Used_for", "discourse processing algorithms"]]
pred: [('demonstrative expressions', 'Used_for', 'discourse processing algorithms')]
trues: [['demonstrative expressions', 'Feature_of', 'English'], ['implications', 'Used_for', 'discourse processing algorithms']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3206459054209919, 0.30616740088105726, 0.31323943661971837]
text: A purely functional implementation of LR-parsers is given , together with a simple correctness proof .
result: triple_list: [["purely functional implementation", "Used_for", "LR-parsers"]]
pred: [('purely functional implementation', 'Used_for', 'LR-parsers')]
trues: [['correctness proof', 'Conjunction', 'LR-parsers']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32027649769585254, 0.30583058305830585, 0.3128868880135059]
text: A central goal of this research is to merge approaches from pivot MT , interactive MT , and multilingual text authoring .
result: triple_list: [["pivot MT", "Conjunction", "interactive MT"], ["pivot MT", "Used_for", "approaches"], ["interactive MT", "Conjunction", "multilingual text authoring"], ["interactive MT", "Used_for", "approaches"], ["multilingual text authoring", "Used_for", "approaches"]]
pred: [('pivot MT', 'Conjunction', 'interactive MT'), ('pivot MT', 'Used_for', 'approaches'), ('interactive MT', 'Conjunction', 'multilingual text authoring'), ('interactive MT', 'Used_for', 'approaches'), ('multilingual text authoring', 'Used_for', 'approaches')]
trues: [['pivot MT', 'Conjunction', 'interactive MT'], ['interactive MT', 'Conjunction', 'multilingual text authoring']]
metrics_sample: [0.4, 1.0, 0.5714285714285715]
metrics_current: [0.3207331042382589, 0.30735455543358947, 0.31390134529147984]
text: We present Minimum Bayes-Risk ( MBR ) decoding for statistical machine translation .
result: triple_list: [["Minimum Bayes-Risk ( MBR ) decoding", "Used_for", "statistical machine translation"]]
pred: [('Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation')]
trues: [['Minimum Bayes-Risk ( MBR ) decoding', 'Used_for', 'statistical machine translation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.32151029748283755, 0.3081140350877193, 0.3146696528555431]
text: We consider the problem of computing the Kullback-Leibler distance , also called the relative entropy , between a probabilistic context-free grammar and a probabilistic finite automaton .
result: triple_list: [["Kullback-Leibler distance", "Evaluate_for", "probabilistic context-free grammar"]]
pred: [('Kullback-Leibler distance', 'Evaluate_for', 'probabilistic context-free grammar')]
trues: [['probabilistic context-free grammar', 'Compare', 'probabilistic finite automaton']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3211428571428571, 0.307776560788609, 0.31431767337807603]
text: Owing to these variations , the pedestrian data is distributed as highly-curved manifolds in the feature space , despite the current convolutional neural networks ( CNN ) 's capability of feature extraction .
result: triple_list: [["feature space", "Feature_of", "hightly-curved manifolds"]]
pred: [('feature space', 'Feature_of', 'hightly-curved manifolds')]
trues: [['highly-curved manifolds', 'Used_for', 'pedestrian data'], ['feature space', 'Feature_of', 'highly-curved manifolds'], ['convolutional neural networks ( CNN )', 'Used_for', 'feature extraction']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3207762557077626, 0.3067685589519651, 0.31361607142857145]
text: There are four language pairs currently supported by GLOSSER : English-Bulgarian , English-Estonian , English-Hungarian and French-Dutch .
result: triple_list: [["English-Bulgarian", "Hyponym_of", "language pairs"], ["English-Bulgarian", "Conjunction", "English-Estonian"], ["English-Estonian", "Hyponym_of", "language pairs"], ["English-Estonian", "Conjunction", "English-Hungarian"], ["English-Hungarian", "Hyponym_of", "language pairs"], ["English-Hungarian", "Conjunction", "French-Dutch"], ["French-Dutch", "Hyponym_of", "language pairs"]]
pred: [('English-Bulgarian', 'Hyponym_of', 'language pairs'), ('English-Bulgarian', 'Conjunction', 'English-Estonian'), ('English-Estonian', 'Hyponym_of', 'language pairs'), ('English-Estonian', 'Conjunction', 'English-Hungarian'), ('English-Hungarian', 'Hyponym_of', 'language pairs'), ('English-Hungarian', 'Conjunction', 'French-Dutch'), ('French-Dutch', 'Hyponym_of', 'language pairs')]
trues: [['language pairs', 'Used_for', 'GLOSSER'], ['English-Bulgarian', 'Hyponym_of', 'language pairs'], ['English-Bulgarian', 'Conjunction', 'English-Estonian'], ['English-Estonian', 'Hyponym_of', 'language pairs'], ['English-Estonian', 'Conjunction', 'English-Hungarian'], ['English-Hungarian', 'Hyponym_of', 'language pairs'], ['English-Hungarian', 'Conjunction', 'French-Dutch'], ['French-Dutch', 'Hyponym_of', 'language pairs']]
metrics_sample: [1.0, 0.875, 0.9333333333333333]
metrics_current: [0.3261608154020385, 0.3116883116883117, 0.3187603763143332]
text: We further demonstrate synthesis from a freely translating virtual camera .
result: triple_list: [["freely translating virtual camera", "Used_for", "synthesis"]]
pred: [('freely translating virtual camera', 'Used_for', 'synthesis')]
trues: [['translating virtual camera', 'Used_for', 'synthesis']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3257918552036199, 0.31135135135135134, 0.31840796019900497]
text: An experimental evaluation of summarization quality shows a close correlation between the automatic parse-based evaluation and a manual evaluation of generated strings .
result: triple_list: [["parse-based evaluation", "Conjunction", "manual evaluation"], ["automatic parse-based evaluation", "Evaluate_for", "summarization"], ["manual evaluation", "Evaluate_for", "summarization"], ["generated strings", "Evaluate_for", "manual evaluation"]]
pred: [('parse-based evaluation', 'Conjunction', 'manual evaluation'), ('automatic parse-based evaluation', 'Evaluate_for', 'summarization'), ('manual evaluation', 'Evaluate_for', 'summarization'), ('generated strings', 'Evaluate_for', 'manual evaluation')]
trues: [['summarization quality', 'Evaluate_for', 'automatic parse-based evaluation'], ['automatic parse-based evaluation', 'Compare', 'manual evaluation']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32432432432432434, 0.3106796116504854, 0.31735537190082647]
text: We have built and will demonstrate an application of this approach called LCS-Marine .
result: triple_list: [["LCS-Marine", "Hyponym_of", "approach"]]
pred: [('LCS-Marine', 'Hyponym_of', 'approach')]
trues: [['approach', 'Used_for', 'LCS-Marine']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32395950506186727, 0.3103448275862069, 0.31700605393505776]
text: While sentence extraction as an approach to summarization has been shown to work in documents of certain genres , because of the conversational nature of email communication where utterances are made in relation to one made previously , sentence extraction may not capture the necessary segments of dialogue that would make a summary coherent .
result: triple_list: [["approach", "Used_for", "summarization"], ["approach", "Used_for", "documents"], ["sentences", "Part_of", "summary"], ["documents", "Feature_of", "genres"], ["conversational nature of email communication", "Feature_of", "documents"], ["utterances", "Feature_of", "conversational nature of email communication"]]
pred: [('approach', 'Used_for', 'summarization'), ('approach', 'Used_for', 'documents'), ('sentences', 'Part_of', 'summary'), ('documents', 'Feature_of', 'genres'), ('conversational nature of email communication', 'Feature_of', 'documents'), ('utterances', 'Feature_of', 'conversational nature of email communication')]
trues: [['sentence extraction', 'Used_for', 'summarization']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3217877094972067, 0.310010764262648, 0.31578947368421045]
text: In this situation , the general method is to segment the raw corpus automatically using a word list , correct the output sentences by hand , and build a model from the segmented corpus .
result: triple_list: [["word list", "Used_for", "segment the raw corpus"]]
pred: [('word list', 'Used_for', 'segment the raw corpus')]
trues: [['method', 'Used_for', 'raw corpus'], ['word list', 'Used_for', 'method'], ['segmented corpus', 'Used_for', 'model']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32142857142857145, 0.3090128755364807, 0.31509846827133486]
text: Hitherto , smooth motion has been encouraged using a trajectory basis , yielding a hard combinatorial problem with time complexity growing exponentially in the number of frames .
result: triple_list: [["trajectory basis", "Used_for", "smooth motion"]]
pred: [('trajectory basis', 'Used_for', 'smooth motion')]
trues: [['trajectory basis', 'Used_for', 'smooth motion'], ['time complexity', 'Evaluate_for', 'hard combinatorial problem']]
metrics_sample: [1.0, 0.5, 0.6666666666666666]
metrics_current: [0.3221850613154961, 0.3094218415417559, 0.31567449481157844]
text: Many practical modeling problems involve discrete data that are best represented as draws from multinomial or categorical distributions .
result: triple_list: [["multinomial or categorical distributions", "Used_for", "modeling problems"], ["multinomial or categorical distributions", "Feature_of", "discrete data"]]
pred: [('multinomial or categorical distributions', 'Used_for', 'modeling problems'), ('multinomial or categorical distributions', 'Feature_of', 'discrete data')]
trues: [['discrete data', 'Used_for', 'modeling problems'], ['multinomial or categorical distributions', 'Used_for', 'modeling problems']]
metrics_sample: [0.5, 0.5, 0.5]
metrics_current: [0.3225806451612903, 0.30982905982905984, 0.31607629427792916]
text: Our approach is among the first to propose a generative proba-bilistic framework for 3D object categorization .
result: triple_list: [["approach", "Used_for", "generative proba-bilistic framework for 3D object categorization"]]
pred: [('approach', 'Used_for', 'generative proba-bilistic framework for 3D object categorization')]
trues: [['generative proba-bilistic framework', 'Used_for', '3D object categorization']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32222222222222224, 0.3094983991462113, 0.3157321720195972]
text: We also found that OA is crucial for auditory processing by onset neurons ( ONs ) in the next neuronal stage , the auditory brainstem .
result: triple_list: [["OA", "Feature_of", "auditory processing"], ["ons", "Part_of", "auditory processing"], ["ons", "Part_of", "next neuronal stage"], ["ons", "Part_of", "auditory brainstem"]]
pred: [('OA', 'Feature_of', 'auditory processing'), ('ons', 'Part_of', 'auditory processing'), ('ons', 'Part_of', 'next neuronal stage'), ('ons', 'Part_of', 'auditory brainstem')]
trues: [['OA', 'Used_for', 'auditory processing'], ['onset neurons ( ONs )', 'Used_for', 'OA']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.32079646017699115, 0.308839190628328, 0.3147042864894194]
text: Our method takes advantage of the different way in which word senses are lexicalised in English and Chinese , and also exploits the large amount of Chinese text available in corpora and on the Web .
result: triple_list: [["corpora", "Evaluate_for", "method"], ["corpora", "Conjunction", "the Web"], ["the Web", "Evaluate_for", "method"]]
pred: [('corpora', 'Evaluate_for', 'method'), ('corpora', 'Conjunction', 'the Web'), ('the Web', 'Evaluate_for', 'method')]
trues: [['Chinese text', 'Part_of', 'corpora'], ['Chinese text', 'Part_of', 'Web'], ['corpora', 'Conjunction', 'Web']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3197353914002205, 0.3078556263269639, 0.3136830719307734]
text: Our goal is to learn a Mahalanobis distance by minimizing a loss defined on the weighted sum of the precision at different ranks .
result: triple_list: [["weighted sum of the precision at different ranks", "Feature_of", "Mahalanobis distance"]]
pred: [('weighted sum of the precision at different ranks', 'Feature_of', 'Mahalanobis distance')]
trues: [['loss', 'Used_for', 'Mahalanobis distance'], ['weighted sum', 'Feature_of', 'precision']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31938325991189426, 0.3072033898305085, 0.31317494600431967]
text: We also address a more general problem of matrix rank degeneration & non-isolated minima in the low-rank matrix optimization by using new type of regularizer which approximately enforces the or-thonormality of the learned matrix very efficiently .
result: triple_list: [["rank degeneration & non-isolated minima", "Feature_of", "low-rank matrix optimization"], ["regularizer", "Used_for", "or-thonormality of the learned matrix"]]
pred: [('rank degeneration & non-isolated minima', 'Feature_of', 'low-rank matrix optimization'), ('regularizer', 'Used_for', 'or-thonormality of the learned matrix')]
trues: [['matrix rank degeneration', 'Conjunction', 'non-isolated minima'], ['matrix rank degeneration', 'Feature_of', 'low-rank matrix optimization'], ['non-isolated minima', 'Feature_of', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'low-rank matrix optimization'], ['regularizer', 'Used_for', 'or-thonormality'], ['or-thonormality', 'Feature_of', 'learned matrix']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31868131868131866, 0.30526315789473685, 0.31182795698924726]
text: We propose a novel metric learning formulation called Weighted Approximate Rank Component Analysis ( WARCA ) .
result: triple_list: [["Weighted Approximate Rank Component Analysis ( WARCA )", "Hyponym_of", "metric learning formulation"]]
pred: [('Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation')]
trues: [['Weighted Approximate Rank Component Analysis ( WARCA )', 'Hyponym_of', 'metric learning formulation']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3194291986827662, 0.305993690851735, 0.3125671321160043]
text: This reflects contemporary methods for unsupervised object discovery from groups of images , and it allows us to define intuitive evaluation met-rics for our sets of segmentations based on the accurate and parsimonious delineation of scene objects .
result: triple_list: [["methods", "Used_for", "unsupervised object discovery"], ["groups of images", "Feature_of", "methods"], ["evaluation met-metrics", "Evaluate_for", "segments"]]
pred: [('methods', 'Used_for', 'unsupervised object discovery'), ('groups of images', 'Feature_of', 'methods'), ('evaluation met-metrics', 'Evaluate_for', 'segments')]
trues: [['contemporary methods', 'Used_for', 'unsupervised object discovery']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31838074398249455, 0.30567226890756305, 0.31189710610932475]
text: The description has been implemented using the PC-KIMMO environment ( Antworth , 1990 ) and is based on a root word lexicon of about 23,000 roots words .
result: triple_list: [["PC-KIMMO environment", "Used_for", "description"], ["PC-KIMMO environment", "Hyponym_of", "PC-KIMMO environment ( Antworth , 1990 )"], ["root word lexicon", "Used_for", "PC-KIMMO environment ( Antworth , 1990 )"]]
pred: [('PC-KIMMO environment', 'Used_for', 'description'), ('PC-KIMMO environment', 'Hyponym_of', 'PC-KIMMO environment ( Antworth , 1990 )'), ('root word lexicon', 'Used_for', 'PC-KIMMO environment ( Antworth , 1990 )')]
trues: [['PC-KIMMO environment', 'Used_for', 'description'], ['root word lexicon', 'Used_for', 'description']]
metrics_sample: [0.3333333333333333, 0.5, 0.4]
metrics_current: [0.31842966194111233, 0.3060796645702306, 0.31213254943880275]
text: Furthermore , this paper presents a novel algorithm for the temporal maintenance of a background model to enhance the rendering of occlusions and reduce temporal artefacts ( flicker ) ; and a cost aggregation algorithm that acts directly on our three-dimensional matching cost space .
result: triple_list: [["algorithm", "Used_for", "temporal maintenance of background model"], ["temporal maintenance of background model", "Used_for", "rendering of occlusions"], ["flicker", "Feature_of", "rendering of occlusions"], ["cost aggregation algorithm", "Used_for", "three-dimensional matching cost space"]]
pred: [('algorithm', 'Used_for', 'temporal maintenance of background model'), ('temporal maintenance of background model', 'Used_for', 'rendering of occlusions'), ('flicker', 'Feature_of', 'rendering of occlusions'), ('cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space')]
trues: [['algorithm', 'Used_for', 'temporal maintenance of a background model'], ['algorithm', 'Used_for', 'rendering of occlusions'], ['algorithm', 'Used_for', 'temporal artefacts ( flicker )'], ['cost aggregation algorithm', 'Conjunction', 'algorithm'], ['cost aggregation algorithm', 'Used_for', 'three-dimensional matching cost space']]
metrics_sample: [0.25, 0.2, 0.22222222222222224]
metrics_current: [0.31813246471226925, 0.30552659019812306, 0.31170212765957445]
text: This paper presents an unsupervised learning approach to disambiguate various relations between named entities by use of various lexical and syntactic features from the contexts .
result: triple_list: [["unsupervised learning approach", "Used_for", "disambiguation of relations"], ["named entities", "Used_for", "unsupervised learning approach"], ["lexical and syntactic features from the contexts", "Used_for", "named entities"]]
pred: [('unsupervised learning approach', 'Used_for', 'disambiguation of relations'), ('named entities', 'Used_for', 'unsupervised learning approach'), ('lexical and syntactic features from the contexts', 'Used_for', 'named entities')]
trues: [['unsupervised learning approach', 'Used_for', 'relations between named entities'], ['lexical and syntactic features', 'Used_for', 'unsupervised learning approach']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3170995670995671, 0.3048907388137357, 0.31087533156498676]
text: Another problem with determiners is their inherent ambiguity .
result: triple_list: [["ambiguity", "Feature_of", "determiners"]]
pred: [('ambiguity', 'Feature_of', 'determiners')]
trues: [['ambiguity', 'Feature_of', 'determiners']]
metrics_sample: [1.0, 1.0, 1.0]
metrics_current: [0.3178378378378378, 0.30561330561330563, 0.31160572337042924]
text: We present a novel method for discovering parallel sentences in comparable , non-parallel corpora .
result: triple_list: [["method", "Used_for", "parallel sentences"], ["non-parallel corpora", "Used_for", "method"]]
pred: [('method', 'Used_for', 'parallel sentences'), ('non-parallel corpora', 'Used_for', 'method')]
trues: [['method', 'Used_for', 'discovering parallel sentences'], ['comparable , non-parallel corpora', 'Used_for', 'discovering parallel sentences']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31715210355987056, 0.3049792531120332, 0.31094658910629297]
text: We demonstrate that for certain field structured extraction tasks , such as classified advertisements and bibliographic citations , small amounts of prior knowledge can be used to learn effective models in a primarily unsupervised fashion .
result: triple_list: [["field structured extraction tasks", "Evaluate_for", "prior knowledge"], ["classified advertisements", "Hyponym_of", "field structured extraction tasks"], ["classified advertisements", "Conjunction", "bibliographic citations"], ["bibliographic citations", "Hyponym_of", "field structured extraction tasks"]]
pred: [('field structured extraction tasks', 'Evaluate_for', 'prior knowledge'), ('classified advertisements', 'Hyponym_of', 'field structured extraction tasks'), ('classified advertisements', 'Conjunction', 'bibliographic citations'), ('bibliographic citations', 'Hyponym_of', 'field structured extraction tasks')]
trues: [['classified advertisements', 'Hyponym_of', 'field structured extraction tasks'], ['classified advertisements', 'Conjunction', 'bibliographic citations'], ['bibliographic citations', 'Hyponym_of', 'field structured extraction tasks'], ['prior knowledge', 'Used_for', 'field structured extraction tasks']]
metrics_sample: [0.75, 0.75, 0.75]
metrics_current: [0.31901181525241673, 0.3068181818181818, 0.3127962085308057]
text: Structural or numerical constraints can then be added locally to the reconstruction process through a constrained optimization scheme .
result: triple_list: [["constrained optimization scheme", "Used_for", "reconstruction process"]]
pred: [('constrained optimization scheme', 'Used_for', 'reconstruction process')]
trues: [['Structural or numerical constraints', 'Used_for', 'reconstruction process'], ['constrained optimization scheme', 'Used_for', 'Structural or numerical constraints']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3186695278969957, 0.3061855670103093, 0.31230283911671924]
text: This has the advantages of efficiency on grammatical input , and robustness in the face of ungrammatical input .
result: triple_list: [["grammatical input", "Evaluate_for", "robustness"], ["ungrammatical input", "Evaluate_for", "robustness"]]
pred: [('grammatical input', 'Evaluate_for', 'robustness'), ('ungrammatical input', 'Evaluate_for', 'robustness')]
trues: [['ungrammatical input', 'Feature_of', 'robustness']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31798715203426126, 0.305870236869207, 0.31181102362204727]
text: However , when the object becomes partially or totally occluded , such local tracking is prone to failure , especially when common prediction techniques like the Kalman filter do not provide a good estimate of object parameters in future frames .
result: triple_list: [["Kalman filter", "Used_for", "object parameters"]]
pred: [('Kalman filter', 'Used_for', 'object parameters')]
trues: [['Kalman filter', 'Part_of', 'prediction techniques']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.3176470588235294, 0.3055555555555556, 0.3114840062926062]
text: Experimental results from a real telephone application on a natural number recognition task show an 50 % reduction in recognition errors with a moderate 12 % rejection rate of correct utterances and a low 1.5 % rate of false acceptance .
result: triple_list: [["real telephone application", "Used_for", "natural number recognition task"], ["recognition errors", "Evaluate_for", "real telephone application"]]
pred: [('real telephone application', 'Used_for', 'natural number recognition task'), ('recognition errors', 'Evaluate_for', 'real telephone application')]
trues: [['natural number recognition task', 'Feature_of', 'telephone application'], ['recognition errors', 'Evaluate_for', 'natural number recognition task']]
metrics_sample: [0.0, 0.0, 0]
metrics_current: [0.31696905016008536, 0.3049281314168378, 0.31083202511773933]