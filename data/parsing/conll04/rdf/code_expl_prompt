from typing import List

class Rel:
    """
    The Rel class represents a relationship between two entities.
    
    Attributes:
        name (str): The name of the relationship.
    """
    def __init__(self, name: str):
        self.name = name

class Work_for(Rel):
    """
    The Work_for class denotes a relationship where one entity works for another entity.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Work-for relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Kill(Rel):
    """
    The Kill class represents a relationship where one entity kills another entity.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Kill relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Organization_based_in(Rel):
    """
    The Organization_based_in class denotes a relationship where an organization is based in a specific location.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Organization-based-in relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Live_in(Rel):
    """
    The Live_in class represents a relationship where a person lives in a specific location.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Live-in relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Located_in(Rel):
    """
    The Located_in class denotes a relationship where an entity is located in a specific location.
    
    Inherits from:
        Rel: The base class for relationships.
    
    Attributes:
        name (str): The name of the Located-in relationship.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Entity:
    """
    The Entity class represents an entity which can participate in relationships.
    
    Attributes:
        name (str): The name of the entity.
    """
    def __init__(self, name: str):
        self.name = name

class Person(Entity):
    """
    The Person class represents a person entity.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the person.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Organization(Entity):
    """
    The Organization class represents an organization entity.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the organization.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Location(Entity):
    """
    The Location class represents a location entity.
    
    Inherits from:
        Entity: The base class for entities.
    
    Attributes:
        name (str): The name of the location.
    """
    def __init__(self, name: str):
        super().__init__(name=name)

class Triple:
    """
    The Triple class represents a triplet structure that defines a relationship between two entities.
    
    Attributes:
        head (Entity): The head entity of the relationship.
        relation (Rel): The relationship between the head and tail entities.
        tail (Entity): The tail entity of the relationship.
    """
    def __init__(self, head: Entity, relation: Rel, tail: Entity):
        self.head = head
        self.relation = relation
        self.tail = tail

class Extract:
    """
    The Extract class is a collection of triples.
    
    Attributes:
        triples (List[Triple]): A list of Triple objects.
    """
    def __init__(self, triples: List[Triple] = []):
        self.triples = triples
